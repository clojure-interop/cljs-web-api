{:rename-macros {}, :renames {}, :externs {RTCIceCandidate {}}, :use-macros {}, :excludes #{type}, :name rtc.RTCIceCandidate, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {username-fragment {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 182, :column 7, :end-line 182, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The read-only usernameFragment property on the `rtc.RTCIceCandidate`\n  is a string indicating the username fragment (\\\"ufrag\\\") that\n  identifies a single ICE interaction session.\n\n  `var ufrag = RTCIceCandidate.usernameFragment;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/usernameFragment`"}, :name rtc.RTCIceCandidate/username-fragment, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only usernameFragment property on the `rtc.RTCIceCandidate`\n  is a string indicating the username fragment (\\\"ufrag\\\") that\n  identifies a single ICE interaction session.\n\n  `var ufrag = RTCIceCandidate.usernameFragment;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/usernameFragment`"}, sdp-mid {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 156, :column 7, :end-line 156, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property sdpMid on the `rtc.RTCIceCandidate` interface\n  a `dom.DOMString` specifying the media stream identification\n  of the media component with which the candidate is associated.\n\n  `var sdpMid = RTCIceCandidate.sdpMid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMid`"}, :name rtc.RTCIceCandidate/sdp-mid, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property sdpMid on the `rtc.RTCIceCandidate` interface\n  a `dom.DOMString` specifying the media stream identification\n  of the media component with which the candidate is associated.\n\n  `var sdpMid = RTCIceCandidate.sdpMid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMid`"}, related-address {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 120, :column 7, :end-line 120, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedAddress\n  is a string indicating the related address of a relay or reflexive\n\n  `var relAddress = RTCIceCandidate.relatedAddress;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedAddress`"}, :name rtc.RTCIceCandidate/related-address, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedAddress\n  is a string indicating the related address of a relay or reflexive\n\n  `var relAddress = RTCIceCandidate.relatedAddress;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedAddress`"}, foundation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 55, :column 7, :end-line 55, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only foundation property\n  a string which uniquely identifies the candidate across multiple\n\n  `var foundation = RTCIceCandidate.foundation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/foundation`"}, :name rtc.RTCIceCandidate/foundation, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only foundation property\n  a string which uniquely identifies the candidate across multiple\n\n  `var foundation = RTCIceCandidate.foundation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/foundation`"}, ip {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 67, :column 7, :end-line 67, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only ip property is\n  string providing the address of the device which is the source\n  the candidate.\n\n  `var address = RTCIceCandidate.ip;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/ip`"}, :name rtc.RTCIceCandidate/ip, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only ip property is\n  string providing the address of the device which is the source\n  the candidate.\n\n  `var address = RTCIceCandidate.ip;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/ip`"}, set-related-port! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 144, :column 7, :end-line 144, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedPort property\n  the port number of reflexive or relay candidates.\n\n  `var relPort = RTCIceCandidate.relatedPort;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort`"}, :name rtc.RTCIceCandidate/set-related-port!, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedPort property\n  the port number of reflexive or relay candidates.\n\n  `var relPort = RTCIceCandidate.relatedPort;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort`"}, protocol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 107, :column 7, :end-line 107, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only protocol property\n  a string which indicates whether the candidate uses UDP or TCP\n  its transport protocol.\n\n  `var protocol = RTCIceCandidate.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/protocol`"}, :name rtc.RTCIceCandidate/protocol, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only protocol property\n  a string which indicates whether the candidate uses UDP or TCP\n  its transport protocol.\n\n  `var protocol = RTCIceCandidate.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/protocol`"}, candidate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 30, :column 7, :end-line 30, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property candidate on the `rtc.RTCIceCandidate`\n  returns a `dom.DOMString` describing the candidate in detail.\n\n  `var candidate = RTCIceCandidate.candidate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/candidate`"}, :name rtc.RTCIceCandidate/candidate, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property candidate on the `rtc.RTCIceCandidate`\n  returns a `dom.DOMString` describing the candidate in detail.\n\n  `var candidate = RTCIceCandidate.candidate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/candidate`"}, related-port {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 132, :column 7, :end-line 132, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedPort property\n  the port number of reflexive or relay candidates.\n\n  `var relPort = RTCIceCandidate.relatedPort;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort`"}, :name rtc.RTCIceCandidate/related-port, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only relatedPort property\n  the port number of reflexive or relay candidates.\n\n  `var relPort = RTCIceCandidate.relatedPort;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/relatedPort`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 208, :column 7, :end-line 208, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only type specifies\n  type of candidate the object represents.\n\n  `var type = RTCIceCandidate.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/type`"}, :name rtc.RTCIceCandidate/type, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only type specifies\n  type of candidate the object represents.\n\n  `var type = RTCIceCandidate.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/type`"}, sdp-m-line-index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 169, :column 7, :end-line 169, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The read-only sdpMLineIndex property on the `rtc.RTCIceCandidate`\n  is a zero-based index of the m-line describing the media associated\n  the candidate.\n\n  `var sdpMLineIndex = RTCIceCandidate.sdpMLineIndex;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMLineIndex`"}, :name rtc.RTCIceCandidate/sdp-m-line-index, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only sdpMLineIndex property on the `rtc.RTCIceCandidate`\n  is a zero-based index of the m-line describing the media associated\n  the candidate.\n\n  `var sdpMLineIndex = RTCIceCandidate.sdpMLineIndex;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/sdpMLineIndex`"}, component {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 42, :column 7, :end-line 42, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only component property on the `rtc.RTCIceCandidate`\n  is a string which indicates whether the candidate is an RTP or\n  RTCP candidate.\n\n  `var component = RTCIceCandidate.component;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/component`"}, :name rtc.RTCIceCandidate/component, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only component property on the `rtc.RTCIceCandidate`\n  is a string which indicates whether the candidate is an RTP or\n  RTCP candidate.\n\n  `var component = RTCIceCandidate.component;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/component`"}, port {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 80, :column 7, :end-line 80, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only port property\n  the port number on the device at the address given by `web.ip`\n  which the candidate's peer can be reached.\n\n  `var port = RTCIceCandidate.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/port`"}, :name rtc.RTCIceCandidate/port, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only port property\n  the port number on the device at the address given by `web.ip`\n  which the candidate's peer can be reached.\n\n  `var port = RTCIceCandidate.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/port`"}, priority {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 93, :column 7, :end-line 93, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only priority property\n  the candidate's priority according to the remote peer; the higher\n  value is, the better the remote peer considers the candidate\n  be.\n\n  `var priority = RTCIceCandidate.priority;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/priority`"}, :name rtc.RTCIceCandidate/priority, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only priority property\n  the candidate's priority according to the remote peer; the higher\n  value is, the better the remote peer considers the candidate\n  be.\n\n  `var priority = RTCIceCandidate.priority;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/priority`"}, tcp-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 195, :column 7, :end-line 195, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only tcpType property\n  included on TCP candidates to provide additional details about\n  candidate type.\n\n  `var tcpType = RTCIceCandidate.tcpType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/tcpType`"}, :name rtc.RTCIceCandidate/tcp-type, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceCandidate` interface's read-only tcpType property\n  included on TCP candidates to provide additional details about\n  candidate type.\n\n  `var tcpType = RTCIceCandidate.tcpType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/tcpType`"}, constructor {:name rtc.RTCIceCandidate/constructor, :file "src/rtc/RTCIceCandidate.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The RTCIceCandidate() constructor creates and returns a new `rtc.RTCIceCandidate` object, which can be configured to represent a single ICE candidate.\n\n  candidateInfo Optional\n  An optional `rtc.RTCIceCandidateInit` object providing information about the candidate; if this is provided, the candidate is initialized configured to represent the described candidate.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/RTCIceCandidate`", :tag js}, rtc-ice-candidate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceCandidate.cljs", :line 18, :column 7, :end-line 18, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceCandidate` method toJSON() converts the RTCIceCandidate\n  which it's called into JSON in the form of an `rtc.RTCIceCandidateInit`\n\n  `json = rtcIceCandidate.toJSON();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/toJSON`"}, :name rtc.RTCIceCandidate/rtc-ice-candidate, :variadic false, :file "src/rtc/RTCIceCandidate.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceCandidate` method toJSON() converts the RTCIceCandidate\n  which it's called into JSON in the form of an `rtc.RTCIceCandidateInit`\n\n  `json = rtcIceCandidate.toJSON();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceCandidate/toJSON`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCIceCandidate interface—part of the WebRTC API—represents\n  candidate Internet Connectivity Establishment (ICE) configuration\n  may be used to establish an `rtc.RTCPeerConnection`."}