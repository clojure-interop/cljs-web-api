{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rtc.RTCRtpSender, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The getParameters() method of the `rtc.RTCRtpSender` interface\n  an `rtc.RTCRtpSendParameters` object describing the current configuration\n  the encoding and transmission of media on the `rtc.RTCRtpSender.track`\n\n  `var rtpSendParameters = rtpSender.getParameters()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getParameters`"}, :name rtc.RTCRtpSender/get-parameters, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getParameters() method of the `rtc.RTCRtpSender` interface\n  an `rtc.RTCRtpSendParameters` object describing the current configuration\n  the encoding and transmission of media on the `rtc.RTCRtpSender.track`\n\n  `var rtpSendParameters = rtpSender.getParameters()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getParameters`"}, get-stats {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCRtpSender` method getStats() asynchronously requests\n  `rtc.RTCStatsReport` object which provides statistics about outgoing\n  on the `rtc.RTCPeerConnection` which owns the sender, returning\n  `web.Promise` which is fulfilled when the results are available.\n\n  `var promise = RTCRtpSender.getStats();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getStats`"}, :name rtc.RTCRtpSender/get-stats, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCRtpSender` method getStats() asynchronously requests\n  `rtc.RTCStatsReport` object which provides statistics about outgoing\n  on the `rtc.RTCPeerConnection` which owns the sender, returning\n  `web.Promise` which is fulfilled when the results are available.\n\n  `var promise = RTCRtpSender.getStats();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/getStats`"}, replace-track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 34, :column 7, :end-line 34, :end-column 20, :arglists (quote ([this new-track])), :doc "Method.\n\n  The `rtc.RTCRtpSender` method replaceTrack() replaces the track\n  being used as the sender's source with a new `media.MediaStreamTrack`.\n\n  `trackReplacedPromise = sender.replaceTrack(newTrack);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack`"}, :name rtc.RTCRtpSender/replace-track, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 20, :method-params ([this new-track]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-track])), :doc "Method.\n\n  The `rtc.RTCRtpSender` method replaceTrack() replaces the track\n  being used as the sender's source with a new `media.MediaStreamTrack`.\n\n  `trackReplacedPromise = sender.replaceTrack(newTrack);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/replaceTrack`"}, set-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([this parameters])), :doc "Method.\n\n  The setParameters() method of the `rtc.RTCRtpSender` interface\n  changes the configuration of sender's `web.track`, which is the\n  for which the RTCRtpSender is responsible.\n\n  `var promise = rtcRtpSender.setParameters(parameters)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters`"}, :name rtc.RTCRtpSender/set-parameters, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 21, :method-params ([this parameters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this parameters])), :doc "Method.\n\n  The setParameters() method of the `rtc.RTCRtpSender` interface\n  changes the configuration of sender's `web.track`, which is the\n  for which the RTCRtpSender is responsible.\n\n  `var promise = rtcRtpSender.setParameters(parameters)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/setParameters`"}, dtmf {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 59, :column 7, :end-line 59, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only dtmf property on the `rtc.RTCRtpSender` interface\n  a `rtc.RTCDTMFSender` object which can be used to send DTMF tones\n  the `rtc.RTCPeerConnection` . See Using DTMF for details on how\n  make use of the returned RTCDTMFSender object.\n\n  `var dtmfSender = RTCRtpSender.dtmf;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/dtmf`"}, :name rtc.RTCRtpSender/dtmf, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only dtmf property on the `rtc.RTCRtpSender` interface\n  a `rtc.RTCDTMFSender` object which can be used to send DTMF tones\n  the `rtc.RTCPeerConnection` . See Using DTMF for details on how\n  make use of the returned RTCDTMFSender object.\n\n  `var dtmfSender = RTCRtpSender.dtmf;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/dtmf`"}, track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 73, :column 7, :end-line 73, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The track read-only property of the `rtc.RTCRtpSender` interface\n  the `media.MediaStreamTrack` which is being handled by the RTCRtpSender.\n  track is null, the RTCRtpSender doesn't transmit anything.\n\n  `var mediaStreamTrack = RTCRtpSender.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track`"}, :name rtc.RTCRtpSender/track, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The track read-only property of the `rtc.RTCRtpSender` interface\n  the `media.MediaStreamTrack` which is being handled by the RTCRtpSender.\n  track is null, the RTCRtpSender doesn't transmit anything.\n\n  `var mediaStreamTrack = RTCRtpSender.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track`"}, set-track! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCRtpSender.cljs", :line 86, :column 7, :end-line 86, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The track read-only property of the `rtc.RTCRtpSender` interface\n  the `media.MediaStreamTrack` which is being handled by the RTCRtpSender.\n  track is null, the RTCRtpSender doesn't transmit anything.\n\n  `var mediaStreamTrack = RTCRtpSender.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track`"}, :name rtc.RTCRtpSender/set-track!, :variadic false, :file "src/rtc/RTCRtpSender.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The track read-only property of the `rtc.RTCRtpSender` interface\n  the `media.MediaStreamTrack` which is being handled by the RTCRtpSender.\n  track is null, the RTCRtpSender doesn't transmit anything.\n\n  `var mediaStreamTrack = RTCRtpSender.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpSender/track`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCRtpSender interface provides the ability to control and\n  details about how a particular `media.MediaStreamTrack` is encoded\n  sent to a remote peer."}