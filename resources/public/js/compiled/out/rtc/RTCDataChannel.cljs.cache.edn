{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rtc.RTCDataChannel, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {max-packet-life-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 138, :column 7, :end-line 138, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property maxPacketLifeTime returns\n  amount of time, in milliseconds, the browser is allowed to take\n  attempt to transmit a message, as set when the data channel was\n  or null.\n\n  `var lifetime = aDataChannel.maxPacketLifeTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxPacketLifeTime`"}, :name rtc.RTCDataChannel/max-packet-life-time, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property maxPacketLifeTime returns\n  amount of time, in milliseconds, the browser is allowed to take\n  attempt to transmit a message, as set when the data channel was\n  or null.\n\n  `var lifetime = aDataChannel.maxPacketLifeTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxPacketLifeTime`"}, set-bufferedamountlow! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 403, :column 7, :end-line 403, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  A bufferedamountlow event is sent to an `rtc.RTCDataChannel`\n  the number of bytes currently in the outbound data transfer buffer\n  below the threshold specified in `web.bufferedAmountLowThreshold`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event`"}, :name rtc.RTCDataChannel/set-bufferedamountlow!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A bufferedamountlow event is sent to an `rtc.RTCDataChannel`\n  the number of bytes currently in the outbound data transfer buffer\n  below the threshold specified in `web.bufferedAmountLowThreshold`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event`"}, onbufferedamountlow {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 179, :column 7, :end-line 179, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onbufferedamountlow property is an `web.EventHandler`\n  specifies a function the browser calls when the bufferedamountlow\n  is sent to the `rtc.RTCDataChannel`. This event, which is represented\n  a simple `web.Event` object, is sent when the amount of data\n  to be sent falls to or below the threshold specified by the channel's\n\n  `RTCDataChannel.onbufferedamountlow = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow`"}, :name rtc.RTCDataChannel/onbufferedamountlow, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onbufferedamountlow property is an `web.EventHandler`\n  specifies a function the browser calls when the bufferedamountlow\n  is sent to the `rtc.RTCDataChannel`. This event, which is represented\n  a simple `web.Event` object, is sent when the amount of data\n  to be sent falls to or below the threshold specified by the channel's\n\n  `RTCDataChannel.onbufferedamountlow = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow`"}, buffered-amount-low-threshold {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 83, :column 7, :end-line 83, :end-column 36, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel property bufferedAmountLowThreshold is used\n  specify the number of bytes of buffered outgoing data that is\n  \\\"low.\\\" The default value is 0.\n\n  `var threshold = aDataChannel.bufferedAmountLowThreshold;\n\n  aDataChannel.bufferedAmountLowThreshold = threshold;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold`"}, :name rtc.RTCDataChannel/buffered-amount-low-threshold, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 36, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel property bufferedAmountLowThreshold is used\n  specify the number of bytes of buffered outgoing data that is\n  \\\"low.\\\" The default value is 0.\n\n  `var threshold = aDataChannel.bufferedAmountLowThreshold;\n\n  aDataChannel.bufferedAmountLowThreshold = threshold;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold`"}, set-onbufferedamountlow! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 194, :column 7, :end-line 194, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onbufferedamountlow property is an `web.EventHandler`\n  specifies a function the browser calls when the bufferedamountlow\n  is sent to the `rtc.RTCDataChannel`. This event, which is represented\n  a simple `web.Event` object, is sent when the amount of data\n  to be sent falls to or below the threshold specified by the channel's\n\n  `RTCDataChannel.onbufferedamountlow = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow`"}, :name rtc.RTCDataChannel/set-onbufferedamountlow!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onbufferedamountlow property is an `web.EventHandler`\n  specifies a function the browser calls when the bufferedamountlow\n  is sent to the `rtc.RTCDataChannel`. This event, which is represented\n  a simple `web.Event` object, is sent when the amount of data\n  to be sent falls to or below the threshold specified by the channel's\n\n  `RTCDataChannel.onbufferedamountlow = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onbufferedamountlow`"}, message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 434, :column 7, :end-line 434, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The WebRTC message event is sent to the `web.onmessage` event\n  on an `rtc.RTCDataChannel` object when a message has been received\n  the remote peer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event`"}, :name rtc.RTCDataChannel/message, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 434, :end-line 434, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebRTC message event is sent to the `web.onmessage` event\n  on an `rtc.RTCDataChannel` object when a message has been received\n  the remote peer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 223, :column 7, :end-line 223, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onclose property is an `web.EventHandler`\n  specifies a function to be called by the browser when the close\n  is received by the `rtc.RTCDataChannel`. This is a simple `web.Event`\n  indicates that the data channel has closed down.\n\n  `RTCDataChannel.onclose = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose`"}, :name rtc.RTCDataChannel/set-onclose!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onclose property is an `web.EventHandler`\n  specifies a function to be called by the browser when the close\n  is received by the `rtc.RTCDataChannel`. This is a simple `web.Event`\n  indicates that the data channel has closed down.\n\n  `RTCDataChannel.onclose = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 456, :column 7, :end-line 456, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The WebRTC open event is sent to an `rtc.RTCDataChannel` object's\n  event handler when the underlying transport used to send and\n  the data channel's messages is opened or re-opened.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/open_event`"}, :name rtc.RTCDataChannel/open, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebRTC open event is sent to an `rtc.RTCDataChannel` object's\n  event handler when the underlying transport used to send and\n  the data channel's messages is opened or re-opened.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/open_event`"}, binary-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The property binaryType on the `rtc.RTCDataChannel` interface\n  a `dom.DOMString` which specifies the type of JavaScript object\n  should be used to represent binary data received on the `rtc.RTCDataChannel`.\n  allowed by the `web.WebSocket.binaryType` property are also permitted\n  \\\"blob\\\" if `web.Blob` objects are being used or \\\"arraybuffer\\\"\n  `web.ArrayBuffer` objects are being used. The default is \\\"blob\\\".\n\n  `var type = aDataChannel.binaryType;\n\n  aDataChannel.binaryType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType`"}, :name rtc.RTCDataChannel/binary-type, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The property binaryType on the `rtc.RTCDataChannel` interface\n  a `dom.DOMString` which specifies the type of JavaScript object\n  should be used to represent binary data received on the `rtc.RTCDataChannel`.\n  allowed by the `web.WebSocket.binaryType` property are also permitted\n  \\\"blob\\\" if `web.Blob` objects are being used or \\\"arraybuffer\\\"\n  `web.ArrayBuffer` objects are being used. The default is \\\"blob\\\".\n\n  `var type = aDataChannel.binaryType;\n\n  aDataChannel.binaryType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType`"}, reliable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 367, :column 7, :end-line 367, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property reliable indicates whether\n  not the data channel is reliable.\n\n  `var reliable = aDataChannel.reliable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/reliable`"}, :name rtc.RTCDataChannel/reliable, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property reliable indicates whether\n  not the data channel is reliable.\n\n  `var reliable = aDataChannel.reliable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/reliable`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 354, :column 7, :end-line 354, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property readyState returns an enum\n  type RTCDataChannelState which indicates the state of the data\n  underlying data connection.\n\n  `var state = aDataChannel.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/readyState`"}, :name rtc.RTCDataChannel/ready-state, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 354, :end-line 354, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property readyState returns an enum\n  type RTCDataChannelState which indicates the state of the data\n  underlying data connection.\n\n  `var state = aDataChannel.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/readyState`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 251, :column 7, :end-line 251, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onerror property is an `web.EventHandler`\n  specifies a function to be called when the error event is received.\n  an error occurs on the data channel, the function receives as\n  an `web.ErrorEvent` object describing the error which occurred.\n\n  `RTCDataChannel.onerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror`"}, :name rtc.RTCDataChannel/set-onerror!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onerror property is an `web.EventHandler`\n  specifies a function to be called when the error event is received.\n  an error occurs on the data channel, the function receives as\n  an `web.ErrorEvent` object describing the error which occurred.\n\n  `RTCDataChannel.onerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror`"}, buffered-amount {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 70, :column 7, :end-line 70, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property bufferedAmount returns\n  number of bytes of data currently queued to be sent over the\n  channel.\n\n  `var amount = aDataChannel.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmount`"}, :name rtc.RTCDataChannel/buffered-amount, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property bufferedAmount returns\n  number of bytes of data currently queued to be sent over the\n  channel.\n\n  `var amount = aDataChannel.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmount`"}, protocol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 340, :column 7, :end-line 340, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property protocol returns a `dom.DOMString`\n  the name of the subprotocol in use. If no protocol was specified\n  the data channel was created, then this property's value is \\\"\\\"\n  empty string).\n\n  `var subProtocol = aDataChannel.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/protocol`"}, :name rtc.RTCDataChannel/protocol, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property protocol returns a `dom.DOMString`\n  the name of the subprotocol in use. If no protocol was specified\n  the data channel was created, then this property's value is \\\"\\\"\n  empty string).\n\n  `var subProtocol = aDataChannel.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/protocol`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 237, :column 7, :end-line 237, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onerror property is an `web.EventHandler`\n  specifies a function to be called when the error event is received.\n  an error occurs on the data channel, the function receives as\n  an `web.ErrorEvent` object describing the error which occurred.\n\n  `RTCDataChannel.onerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror`"}, :name rtc.RTCDataChannel/onerror, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onerror property is an `web.EventHandler`\n  specifies a function to be called when the error event is received.\n  an error occurs on the data channel, the function receives as\n  an `web.ErrorEvent` object describing the error which occurred.\n\n  `RTCDataChannel.onerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onerror`"}, negotiated {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 166, :column 7, :end-line 166, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property negotiated indicates whether\n  `rtc.RTCDataChannel`'s connection was negotiated by the Web app\n  or by the WebRTC layer (false).\n\n  `var negotiated = aDataChannel.negotiated;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/negotiated`"}, :name rtc.RTCDataChannel/negotiated, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property negotiated indicates whether\n  `rtc.RTCDataChannel`'s connection was negotiated by the Web app\n  or by the WebRTC layer (false).\n\n  `var negotiated = aDataChannel.negotiated;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/negotiated`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 265, :column 7, :end-line 265, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onmessage property stores an `web.EventHandler`\n  specifies a function to be called when the message event is fired\n  the channel. This event is represented by the `web.MessageEvent`\n  This event is sent to the channel when a message is received\n  the other peer.\n\n  `RTCDataChannel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage`"}, :name rtc.RTCDataChannel/onmessage, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onmessage property stores an `web.EventHandler`\n  specifies a function to be called when the message event is fired\n  the channel. This event is represented by the `web.MessageEvent`\n  This event is sent to the channel when a message is received\n  the other peer.\n\n  `RTCDataChannel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 280, :column 7, :end-line 280, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onmessage property stores an `web.EventHandler`\n  specifies a function to be called when the message event is fired\n  the channel. This event is represented by the `web.MessageEvent`\n  This event is sent to the channel when a message is received\n  the other peer.\n\n  `RTCDataChannel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage`"}, :name rtc.RTCDataChannel/set-onmessage!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onmessage property stores an `web.EventHandler`\n  specifies a function to be called when the message event is fired\n  the channel. This event is represented by the `web.MessageEvent`\n  This event is sent to the channel when a message is received\n  the other peer.\n\n  `RTCDataChannel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onmessage`"}, onopen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 295, :column 7, :end-line 295, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onopen property is an `web.EventHandler` which\n  a function to be called when the open event is fired; this is\n  simple `web.Event` which is sent when the data channel's underlying\n  transport—the link over which the `rtc.RTCDataChannel`'s messages\n  established or re-established.\n\n  `RTCDataChannel.onopen = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen`"}, :name rtc.RTCDataChannel/onopen, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onopen property is an `web.EventHandler` which\n  a function to be called when the open event is fired; this is\n  simple `web.Event` which is sent when the data channel's underlying\n  transport—the link over which the `rtc.RTCDataChannel`'s messages\n  established or re-established.\n\n  `RTCDataChannel.onopen = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen`"}, set-message! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 445, :column 7, :end-line 445, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The WebRTC message event is sent to the `web.onmessage` event\n  on an `rtc.RTCDataChannel` object when a message has been received\n  the remote peer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event`"}, :name rtc.RTCDataChannel/set-message!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 445, :end-line 445, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebRTC message event is sent to the `web.onmessage` event\n  on an `rtc.RTCDataChannel` object when a message has been received\n  the remote peer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/message_event`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The RTCDataChannel.close() method closes the `rtc.RTCDataChannel`.\n  peer is permitted to call this method to initiate closure of\n  channel.\n\n  `RTCDataChannel.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close`"}, :name rtc.RTCDataChannel/close, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The RTCDataChannel.close() method closes the `rtc.RTCDataChannel`.\n  peer is permitted to call this method to initiate closure of\n  channel.\n\n  `RTCDataChannel.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/close`"}, set-binary-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 52, :column 7, :end-line 52, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The property binaryType on the `rtc.RTCDataChannel` interface\n  a `dom.DOMString` which specifies the type of JavaScript object\n  should be used to represent binary data received on the `rtc.RTCDataChannel`.\n  allowed by the `web.WebSocket.binaryType` property are also permitted\n  \\\"blob\\\" if `web.Blob` objects are being used or \\\"arraybuffer\\\"\n  `web.ArrayBuffer` objects are being used. The default is \\\"blob\\\".\n\n  `var type = aDataChannel.binaryType;\n\n  aDataChannel.binaryType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType`"}, :name rtc.RTCDataChannel/set-binary-type!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The property binaryType on the `rtc.RTCDataChannel` interface\n  a `dom.DOMString` which specifies the type of JavaScript object\n  should be used to represent binary data received on the `rtc.RTCDataChannel`.\n  allowed by the `web.WebSocket.binaryType` property are also permitted\n  \\\"blob\\\" if `web.Blob` objects are being used or \\\"arraybuffer\\\"\n  `web.ArrayBuffer` objects are being used. The default is \\\"blob\\\".\n\n  `var type = aDataChannel.binaryType;\n\n  aDataChannel.binaryType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/binaryType`"}, stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 379, :column 7, :end-line 379, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated (and never part of the official specification)\n  RTCDataChannel property stream returns an ID number (between\n  and 65,535) which uniquely identifies the `rtc.RTCDataChannel`.\n\n  `var stream = aDataChannel.stream;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/stream`"}, :name rtc.RTCDataChannel/stream, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated (and never part of the official specification)\n  RTCDataChannel property stream returns an ID number (between\n  and 65,535) which uniquely identifies the `rtc.RTCDataChannel`.\n\n  `var stream = aDataChannel.stream;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/stream`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 209, :column 7, :end-line 209, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onclose property is an `web.EventHandler`\n  specifies a function to be called by the browser when the close\n  is received by the `rtc.RTCDataChannel`. This is a simple `web.Event`\n  indicates that the data channel has closed down.\n\n  `RTCDataChannel.onclose = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose`"}, :name rtc.RTCDataChannel/onclose, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCDataChannel.onclose property is an `web.EventHandler`\n  specifies a function to be called by the browser when the close\n  is received by the `rtc.RTCDataChannel`. This is a simple `web.Event`\n  indicates that the data channel has closed down.\n\n  `RTCDataChannel.onclose = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onclose`"}, set-buffered-amount-low-threshold! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 98, :column 7, :end-line 98, :end-column 41, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel property bufferedAmountLowThreshold is used\n  specify the number of bytes of buffered outgoing data that is\n  \\\"low.\\\" The default value is 0.\n\n  `var threshold = aDataChannel.bufferedAmountLowThreshold;\n\n  aDataChannel.bufferedAmountLowThreshold = threshold;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold`"}, :name rtc.RTCDataChannel/set-buffered-amount-low-threshold!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 41, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel property bufferedAmountLowThreshold is used\n  specify the number of bytes of buffered outgoing data that is\n  \\\"low.\\\" The default value is 0.\n\n  `var threshold = aDataChannel.bufferedAmountLowThreshold;\n\n  aDataChannel.bufferedAmountLowThreshold = threshold;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold`"}, set-open! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 467, :column 7, :end-line 467, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The WebRTC open event is sent to an `rtc.RTCDataChannel` object's\n  event handler when the underlying transport used to send and\n  the data channel's messages is opened or re-opened.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/open_event`"}, :name rtc.RTCDataChannel/set-open!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 467, :end-line 467, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebRTC open event is sent to an `rtc.RTCDataChannel` object's\n  event handler when the underlying transport used to send and\n  the data channel's messages is opened or re-opened.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/open_event`"}, max-retransmits {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 152, :column 7, :end-line 152, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property maxRetransmits returns\n  maximum number of times the browser should try to retransmit\n  message before giving up, as set when the data channel was created,\n  null, which indicates that there is no maximum.\n\n  `var tries = aDataChannel.maxRetransmits;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxRetransmits`"}, :name rtc.RTCDataChannel/max-retransmits, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property maxRetransmits returns\n  maximum number of times the browser should try to retransmit\n  message before giving up, as set when the data channel was created,\n  null, which indicates that there is no maximum.\n\n  `var tries = aDataChannel.maxRetransmits;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/maxRetransmits`"}, ordered {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 325, :column 7, :end-line 325, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property ordered indicates whether\n  not the data channel guarantees in-order delivery of messages;\n  default is true, which indicates that the data channel is indeed\n\n  `var ordered = aDataChannel.ordered;\n\n  A `web.Boolean` value which is true if in-order delivery is guaranteed and is otherwise false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/ordered`"}, :name rtc.RTCDataChannel/ordered, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property ordered indicates whether\n  not the data channel guarantees in-order delivery of messages;\n  default is true, which indicates that the data channel is indeed\n\n  `var ordered = aDataChannel.ordered;\n\n  A `web.Boolean` value which is true if in-order delivery is guaranteed and is otherwise false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/ordered`"}, set-error! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 424, :column 7, :end-line 424, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  A WebRTC `web.error` event is sent to an `rtc.RTCDataChannel`\n  `web.onerror` error handler when an error occurs on the data\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event`"}, :name rtc.RTCDataChannel/set-error!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A WebRTC `web.error` event is sent to an `rtc.RTCDataChannel`\n  `web.onerror` error handler when an error occurs on the data\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event`"}, label {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 125, :column 7, :end-line 125, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property label returns a `dom.DOMString`\n  a name describing the data channel. These labels are not required\n  be unique.\n\n  `var name = aDataChannel.label;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/label`"}, :name rtc.RTCDataChannel/label, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property label returns a `dom.DOMString`\n  a name describing the data channel. These labels are not required\n  be unique.\n\n  `var name = aDataChannel.label;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/label`"}, id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 113, :column 7, :end-line 113, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property id returns an ID number\n  0 and 65,534) which uniquely identifies the `rtc.RTCDataChannel`.\n\n  `var id = aDataChannel.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/id`"}, :name rtc.RTCDataChannel/id, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only RTCDataChannel property id returns an ID number\n  0 and 65,534) which uniquely identifies the `rtc.RTCDataChannel`.\n\n  `var id = aDataChannel.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/id`"}, set-onopen! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 310, :column 7, :end-line 310, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onopen property is an `web.EventHandler` which\n  a function to be called when the open event is fired; this is\n  simple `web.Event` which is sent when the data channel's underlying\n  transport—the link over which the `rtc.RTCDataChannel`'s messages\n  established or re-established.\n\n  `RTCDataChannel.onopen = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen`"}, :name rtc.RTCDataChannel/set-onopen!, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCDataChannel.onopen property is an `web.EventHandler` which\n  a function to be called when the open event is fired; this is\n  simple `web.Event` which is sent when the data channel's underlying\n  transport—the link over which the `rtc.RTCDataChannel`'s messages\n  established or re-established.\n\n  `RTCDataChannel.onopen = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/onopen`"}, send {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 22, :column 7, :end-line 22, :end-column 11, :arglists (quote ([this data])), :doc "Method.\n\n  The send() method of the `rtc.RTCDataChannel` interface sends\n  across the data channel to the remote peer.\n\n  `RTCDataChannel.send(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send`"}, :name rtc.RTCDataChannel/send, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 11, :method-params ([this data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this data])), :doc "Method.\n\n  The send() method of the `rtc.RTCDataChannel` interface sends\n  across the data channel to the remote peer.\n\n  `RTCDataChannel.send(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/send`"}, bufferedamountlow {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 392, :column 7, :end-line 392, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  A bufferedamountlow event is sent to an `rtc.RTCDataChannel`\n  the number of bytes currently in the outbound data transfer buffer\n  below the threshold specified in `web.bufferedAmountLowThreshold`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event`"}, :name rtc.RTCDataChannel/bufferedamountlow, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A bufferedamountlow event is sent to an `rtc.RTCDataChannel`\n  the number of bytes currently in the outbound data transfer buffer\n  below the threshold specified in `web.bufferedAmountLowThreshold`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/bufferedamountlow_event`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCDataChannel.cljs", :line 414, :column 7, :end-line 414, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  A WebRTC `web.error` event is sent to an `rtc.RTCDataChannel`\n  `web.onerror` error handler when an error occurs on the data\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event`"}, :name rtc.RTCDataChannel/error, :variadic false, :file "src/rtc/RTCDataChannel.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A WebRTC `web.error` event is sent to an `rtc.RTCDataChannel`\n  `web.onerror` error handler when an error occurs on the data\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCDataChannel/error_event`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCDataChannel interface represents a network channel which\n  be used for bidirectional peer-to-peer transfers of arbitrary\n  Every data channel is associated with an `rtc.RTCPeerConnection`,\n  each peer connection can have up to a theoretical maximum of\n  data channels (the actual limit may vary from browser to browser)."}