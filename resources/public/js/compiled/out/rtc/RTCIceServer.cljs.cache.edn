{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rtc.RTCIceServer, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-username! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 206, :column 7, :end-line 206, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's username property is a string\n  specifies the username to use when authenticating with the ICE\n  being described.\n\n  `var iceServer = {\n  ...\n  username = username,\n  ...\n  };\n\n  var username = iceServer.username;\n\n  iceServer.username = newUsername;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username`"}, :name rtc.RTCIceServer/set-username!, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's username property is a string\n  specifies the username to use when authenticating with the ICE\n  being described.\n\n  `var iceServer = {\n  ...\n  username = username,\n  ...\n  };\n\n  var username = iceServer.username;\n\n  iceServer.username = newUsername;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username`"}, credential-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 49, :column 7, :end-line 49, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credentialType property is\n  string value from the RTCIceCredentialType enum which indicates\n  type of credential the `rtc.RTCIceServer.credential` value is.\n  default is password.\n\n  `var iceServer = {\n  ...\n  credentialType = newCredentialType,\n  ...\n  };\n\n  var credentialType = iceServer.credentialType;\n\n  iceServer.credentialType = newCredentialType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType`"}, :name rtc.RTCIceServer/credential-type, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credentialType property is\n  string value from the RTCIceCredentialType enum which indicates\n  type of credential the `rtc.RTCIceServer.credential` value is.\n  default is password.\n\n  `var iceServer = {\n  ...\n  credentialType = newCredentialType,\n  ...\n  };\n\n  var credentialType = iceServer.credentialType;\n\n  iceServer.credentialType = newCredentialType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType`"}, urls {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 143, :column 7, :end-line 143, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's urls property specifies the\n  or URLs of the servers to be used for ICE negotiations. These\n  typically STUN and/or TURN servers.\n\n  `var iceServer = {\n  urls = iceServerUrl | [ url1, ..., urlN ],\n  username: \\\"webrtc\\\", // optional\n  credential: \\\"turnpassword\\\" // optional\n  };\n\n  iceServers.push(iceServer);\n\n  The value of this property may be specified as a single URL or as an array of multiple URLs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls`"}, :name rtc.RTCIceServer/urls, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's urls property specifies the\n  or URLs of the servers to be used for ICE negotiations. These\n  typically STUN and/or TURN servers.\n\n  `var iceServer = {\n  urls = iceServerUrl | [ url1, ..., urlN ],\n  username: \\\"webrtc\\\", // optional\n  credential: \\\"turnpassword\\\" // optional\n  };\n\n  iceServers.push(iceServer);\n\n  The value of this property may be specified as a single URL or as an array of multiple URLs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls`"}, credential {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credential property is a\n  providing the credential to use when connecting to the described\n  This is typically a password, key, or other secret.\n\n  `var iceServer = {\n  ...\n  credential = credential,\n  ...\n  };\n\n  var credential = iceServer.credential;\n\n  iceServer.credential = newCredential;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential`"}, :name rtc.RTCIceServer/credential, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credential property is a\n  providing the credential to use when connecting to the described\n  This is typically a password, key, or other secret.\n\n  `var iceServer = {\n  ...\n  credential = credential,\n  ...\n  };\n\n  var credential = iceServer.credential;\n\n  iceServer.credential = newCredential;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential`"}, username {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 185, :column 7, :end-line 185, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's username property is a string\n  specifies the username to use when authenticating with the ICE\n  being described.\n\n  `var iceServer = {\n  ...\n  username = username,\n  ...\n  };\n\n  var username = iceServer.username;\n\n  iceServer.username = newUsername;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username`"}, :name rtc.RTCIceServer/username, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's username property is a string\n  specifies the username to use when authenticating with the ICE\n  being described.\n\n  `var iceServer = {\n  ...\n  username = username,\n  ...\n  };\n\n  var username = iceServer.username;\n\n  iceServer.username = newUsername;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/username`"}, set-credential-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 71, :column 7, :end-line 71, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credentialType property is\n  string value from the RTCIceCredentialType enum which indicates\n  type of credential the `rtc.RTCIceServer.credential` value is.\n  default is password.\n\n  `var iceServer = {\n  ...\n  credentialType = newCredentialType,\n  ...\n  };\n\n  var credentialType = iceServer.credentialType;\n\n  iceServer.credentialType = newCredentialType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType`"}, :name rtc.RTCIceServer/set-credential-type!, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credentialType property is\n  string value from the RTCIceCredentialType enum which indicates\n  type of credential the `rtc.RTCIceServer.credential` value is.\n  default is password.\n\n  `var iceServer = {\n  ...\n  credentialType = newCredentialType,\n  ...\n  };\n\n  var credentialType = iceServer.credentialType;\n\n  iceServer.credentialType = newCredentialType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credentialType`"}, set-urls! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's urls property specifies the\n  or URLs of the servers to be used for ICE negotiations. These\n  typically STUN and/or TURN servers.\n\n  `var iceServer = {\n  urls = iceServerUrl | [ url1, ..., urlN ],\n  username: \\\"webrtc\\\", // optional\n  credential: \\\"turnpassword\\\" // optional\n  };\n\n  iceServers.push(iceServer);\n\n  The value of this property may be specified as a single URL or as an array of multiple URLs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls`"}, :name rtc.RTCIceServer/set-urls!, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's urls property specifies the\n  or URLs of the servers to be used for ICE negotiations. These\n  typically STUN and/or TURN servers.\n\n  `var iceServer = {\n  urls = iceServerUrl | [ url1, ..., urlN ],\n  username: \\\"webrtc\\\", // optional\n  credential: \\\"turnpassword\\\" // optional\n  };\n\n  iceServers.push(iceServer);\n\n  The value of this property may be specified as a single URL or as an array of multiple URLs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/urls`"}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 93, :column 7, :end-line 93, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The obsolete `rtc.RTCIceServer` dictionary's url property specifies\n  URL of a single ICE server to be used while negotiating connections.\n  was removed from the specification in June 2013 but is still\n  used in older examples and books, so we include documentation\n  to help adapt old code to new browsers.\n\n  `var iceServer = {\n  ...\n  url = iceServerUrl,\n  ...\n  };\n\n  var serverUrl = iceServer.url;\n\n  iceServer.url = iceServerUrl;\n\n  The value of this property is a `dom.DOMString` containing the full URL of a server to use during ICE negotiation.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/url`"}, :name rtc.RTCIceServer/url, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The obsolete `rtc.RTCIceServer` dictionary's url property specifies\n  URL of a single ICE server to be used while negotiating connections.\n  was removed from the specification in June 2013 but is still\n  used in older examples and books, so we include documentation\n  to help adapt old code to new browsers.\n\n  `var iceServer = {\n  ...\n  url = iceServerUrl,\n  ...\n  };\n\n  var serverUrl = iceServer.url;\n\n  iceServer.url = iceServerUrl;\n\n  The value of this property is a `dom.DOMString` containing the full URL of a server to use during ICE negotiation.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/url`"}, set-credential! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 28, :column 7, :end-line 28, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credential property is a\n  providing the credential to use when connecting to the described\n  This is typically a password, key, or other secret.\n\n  `var iceServer = {\n  ...\n  credential = credential,\n  ...\n  };\n\n  var credential = iceServer.credential;\n\n  iceServer.credential = newCredential;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential`"}, :name rtc.RTCIceServer/set-credential!, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceServer` dictionary's credential property is a\n  providing the credential to use when connecting to the described\n  This is typically a password, key, or other secret.\n\n  `var iceServer = {\n  ...\n  credential = credential,\n  ...\n  };\n\n  var credential = iceServer.credential;\n\n  iceServer.credential = newCredential;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/credential`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceServer.cljs", :line 118, :column 7, :end-line 118, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The obsolete `rtc.RTCIceServer` dictionary's url property specifies\n  URL of a single ICE server to be used while negotiating connections.\n  was removed from the specification in June 2013 but is still\n  used in older examples and books, so we include documentation\n  to help adapt old code to new browsers.\n\n  `var iceServer = {\n  ...\n  url = iceServerUrl,\n  ...\n  };\n\n  var serverUrl = iceServer.url;\n\n  iceServer.url = iceServerUrl;\n\n  The value of this property is a `dom.DOMString` containing the full URL of a server to use during ICE negotiation.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/url`"}, :name rtc.RTCIceServer/set-url!, :variadic false, :file "src/rtc/RTCIceServer.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The obsolete `rtc.RTCIceServer` dictionary's url property specifies\n  URL of a single ICE server to be used while negotiating connections.\n  was removed from the specification in June 2013 but is still\n  used in older examples and books, so we include documentation\n  to help adapt old code to new browsers.\n\n  `var iceServer = {\n  ...\n  url = iceServerUrl,\n  ...\n  };\n\n  var serverUrl = iceServer.url;\n\n  iceServer.url = iceServerUrl;\n\n  The value of this property is a `dom.DOMString` containing the full URL of a server to use during ICE negotiation.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceServer/url`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCIceServer dictionary defines how to connect to a single\n  server (such as a STUN or TURN server). It includes both the\n  and the necessary credentials, if any, to connect to the server."}