{:rename-macros {}, :renames {}, :externs {RTCPeerConnection {}}, :use-macros {}, :excludes #{}, :name rtc.RTCPeerConnection, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-onpeeridentity! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 846, :column 7, :end-line 846, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onpeeridentity event handler is a property\n  the code to execute whent the peeridentity event, of type `web.Event`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion, received from a peer, has been successfully\n\n  `peerconnection.onpeeridentity = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity`"}, :name rtc.RTCPeerConnection/set-onpeeridentity!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 846, :end-line 846, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onpeeridentity event handler is a property\n  the code to execute whent the peeridentity event, of type `web.Event`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion, received from a peer, has been successfully\n\n  `peerconnection.onpeeridentity = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity`"}, peer-identity {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 940, :column 7, :end-line 940, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property peerIdentity returns\n  JavaScript `web.Promise` that resolves to an `rtc.RTCIdentityAssertion`\n  contains a `dom.DOMString` identifying the remote peer.\n\n  `var identity = rtcPeerConnection.peerIdentity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/peerIdentity`"}, :name rtc.RTCPeerConnection/peer-identity, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 940, :end-line 940, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property peerIdentity returns\n  JavaScript `web.Promise` that resolves to an `rtc.RTCIdentityAssertion`\n  contains a `dom.DOMString` identifying the remote peer.\n\n  `var identity = rtcPeerConnection.peerIdentity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/peerIdentity`"}, pending-remote-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 970, :column 7, :end-line 970, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.pendingRemoteDescription\n  an `rtc.RTCSessionDescription` object describing a pending configuration\n  for the remote end of the connection. This does not describe\n  connection as it currently stands, but as it may exist in the\n  future. Use `rtc.RTCPeerConnection.currentRemoteDescription`\n  `rtc.RTCPeerConnection.remoteDescription` to get the current\n  description for the remote endpoint. For details on the difference,\n  Pending and current descriptions in WebRTC connectivity.\n\n  `sessionDescription = RTCPeerConnection.pendingRemoteDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription`"}, :name rtc.RTCPeerConnection/pending-remote-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 970, :end-line 970, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.pendingRemoteDescription\n  an `rtc.RTCSessionDescription` object describing a pending configuration\n  for the remote end of the connection. This does not describe\n  connection as it currently stands, but as it may exist in the\n  future. Use `rtc.RTCPeerConnection.currentRemoteDescription`\n  `rtc.RTCPeerConnection.remoteDescription` to get the current\n  description for the remote endpoint. For details on the difference,\n  Pending and current descriptions in WebRTC connectivity.\n\n  `sessionDescription = RTCPeerConnection.pendingRemoteDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingRemoteDescription`"}, current-local-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 422, :column 7, :end-line 422, :end-column 32, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.currentLocalDescription\n  an `rtc.RTCSessionDescription` object describing the local end\n  the connection as it was most recently successfully negotiated\n  the last time the `rtc.RTCPeerConnection` finished negotiating\n  connecting to a remote peer. Also included is a list of any ICE\n  that may already have been generated by the ICE agent since the\n  or answer represented by the description was first instantiated.\n\n  `sessionDescription = RTCPeerConnection.currentLocalDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription`"}, :name rtc.RTCPeerConnection/current-local-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 422, :end-line 422, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.currentLocalDescription\n  an `rtc.RTCSessionDescription` object describing the local end\n  the connection as it was most recently successfully negotiated\n  the last time the `rtc.RTCPeerConnection` finished negotiating\n  connecting to a remote peer. Also included is a list of any ICE\n  that may already have been generated by the ICE agent since the\n  or answer represented by the description was first instantiated.\n\n  `sessionDescription = RTCPeerConnection.currentLocalDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentLocalDescription`"}, remove-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 267, :column 7, :end-line 267, :end-column 20, :arglists (quote ([this media-stream])), :doc "Method.\n\n  The RTCPeerConnection.removeStream() method removes a `media.MediaStream`\n  a local source of audio or video. If the negotiation already\n  a new one will be needed for the remote peer to be able to use\n  Because this method has been deprecated, you should instead use\n  if your target browser versions have implemented it.\n\n  `RTCPeerConnection.removeStream(mediaStream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeStream`"}, :name rtc.RTCPeerConnection/remove-stream, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 20, :method-params ([this media-stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-stream])), :doc "Method.\n\n  The RTCPeerConnection.removeStream() method removes a `media.MediaStream`\n  a local source of audio or video. If the negotiation already\n  a new one will be needed for the remote peer to be able to use\n  Because this method has been deprecated, you should instead use\n  if your target browser versions have implemented it.\n\n  `RTCPeerConnection.removeStream(mediaStream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeStream`"}, set-connection-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 409, :column 7, :end-line 409, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only connectionState property of the `rtc.RTCPeerConnection`\n  indicates the current state of the peer connection by returning\n  of the string values specified by the enum RTCPeerConnectionState.\n\n  `var connectionState = RTCPeerConnection.connectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState`"}, :name rtc.RTCPeerConnection/set-connection-state!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only connectionState property of the `rtc.RTCPeerConnection`\n  indicates the current state of the peer connection by returning\n  of the string values specified by the enum RTCPeerConnectionState.\n\n  `var connectionState = RTCPeerConnection.connectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState`"}, onconnectionstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 562, :column 7, :end-line 562, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onconnectionstatechange property specifies\n  `web.EventHandler` which is called to handle the connectionstatechange\n  when it occurs on an instance of `rtc.RTCPeerConnection`. This\n  whenever the aggregate state of the connection changes.\n\n  `RTCPeerConnection.onconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange`"}, :name rtc.RTCPeerConnection/onconnectionstatechange, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onconnectionstatechange property specifies\n  `web.EventHandler` which is called to handle the connectionstatechange\n  when it occurs on an instance of `rtc.RTCPeerConnection`. This\n  whenever the aggregate state of the connection changes.\n\n  `RTCPeerConnection.onconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange`"}, can-trickle-ice-candidates {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 370, :column 7, :end-line 370, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property canTrickleIceCandidates\n  a `web.Boolean` which indicates whether or not the remote peer\n  accept trickled ICE candidates.\n\n  `var canTrickle = RTCPeerConnection.canTrickleIceCandidates;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates`"}, :name rtc.RTCPeerConnection/can-trickle-ice-candidates, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property canTrickleIceCandidates\n  a `web.Boolean` which indicates whether or not the remote peer\n  accept trickled ICE candidates.\n\n  `var canTrickle = RTCPeerConnection.canTrickleIceCandidates;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates`"}, set-onidentityresult! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 725, :column 7, :end-line 725, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidentityresult event handler is a property\n  the code to execute when the identityresult event, of type `rtc.RTCIdentityEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion is generated, via `web.getIdentityAssertion()`\n  during the creation of an offer or an answer.\n\n  `peerconnection.onidentityresult = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidentityresult`"}, :name rtc.RTCPeerConnection/set-onidentityresult!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 725, :end-line 725, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidentityresult event handler is a property\n  the code to execute when the identityresult event, of type `rtc.RTCIdentityEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion is generated, via `web.getIdentityAssertion()`\n  during the creation of an offer or an answer.\n\n  `peerconnection.onidentityresult = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidentityresult`"}, get-receivers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 186, :column 7, :end-line 186, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The RTCPeerConnection.getReceivers() method returns an array\n  `rtc.RTCRtpReceiver` objects, each of which represents one RTP\n  Each RTP receiver manages the reception and decoding of data\n  a `media.MediaStreamTrack` on an `rtc.RTCPeerConnection`\n\n  `var receivers[] = RTCPeerConnection.getReceivers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getReceivers`"}, :name rtc.RTCPeerConnection/get-receivers, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The RTCPeerConnection.getReceivers() method returns an array\n  `rtc.RTCRtpReceiver` objects, each of which represents one RTP\n  Each RTP receiver manages the reception and decoding of data\n  a `media.MediaStreamTrack` on an `rtc.RTCPeerConnection`\n\n  `var receivers[] = RTCPeerConnection.getReceivers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getReceivers`"}, onidpassertionerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 740, :column 7, :end-line 740, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidpassertionerror event handler is a\n  containing the code to execute whent the idpassertionerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while generating an identity assertion.\n\n  `peerconnection.onidpassertionerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror`"}, :name rtc.RTCPeerConnection/onidpassertionerror, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 740, :end-line 740, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidpassertionerror event handler is a\n  containing the code to execute whent the idpassertionerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while generating an identity assertion.\n\n  `peerconnection.onidpassertionerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror`"}, remote-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 988, :column 7, :end-line 988, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.remoteDescription returns\n  `rtc.RTCSessionDescription` describing the session (which includes\n  and media information) for the remote end of the connection.\n  this hasn't been set yet, this is null.\n\n  `var sessionDescription = peerConnection.remoteDescription;\n\n  On a more fundamental level, the returned value is the value of `rtc.RTCPeerConnection.pendingRemoteDescription` if that property isn't null; otherwise, the value of `rtc.RTCPeerConnection.currentRemoteDescription` is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/remoteDescription`"}, :name rtc.RTCPeerConnection/remote-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 988, :end-line 988, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.remoteDescription returns\n  `rtc.RTCSessionDescription` describing the session (which includes\n  and media information) for the remote end of the connection.\n  this hasn't been set yet, this is null.\n\n  `var sessionDescription = peerConnection.remoteDescription;\n\n  On a more fundamental level, the returned value is the value of `rtc.RTCPeerConnection.pendingRemoteDescription` if that property isn't null; otherwise, the value of `rtc.RTCPeerConnection.currentRemoteDescription` is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/remoteDescription`"}, oniceconnectionstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 650, :column 7, :end-line 650, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.oniceconnectionstatechange property is\n  event handler which specifies a function to be called when the\n  event is fired on an `rtc.RTCPeerConnection` instance. This happens\n  the state of the connection's ICE agent, as represented by the\n  property, changes.\n\n  `RTCPeerConnection.oniceconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange`"}, :name rtc.RTCPeerConnection/oniceconnectionstatechange, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.oniceconnectionstatechange property is\n  event handler which specifies a function to be called when the\n  event is fired on an `rtc.RTCPeerConnection` instance. This happens\n  the state of the connection's ICE agent, as represented by the\n  property, changes.\n\n  `RTCPeerConnection.oniceconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange`"}, onidpvalidationerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 770, :column 7, :end-line 770, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidpvalidationerror event handler is a\n  containing the code to execute whent the idpvalidationerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while validating an identity assertion.\n\n  `peerconnection.onidpvalidationerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror`"}, :name rtc.RTCPeerConnection/onidpvalidationerror, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 770, :end-line 770, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidpvalidationerror event handler is a\n  containing the code to execute whent the idpvalidationerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while validating an identity assertion.\n\n  `peerconnection.onidpvalidationerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror`"}, set-onremovestream! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 874, :column 7, :end-line 874, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onremovestream event handler is a property\n  the code to execute when the removestream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is removed from this connection.\n\n  `peerconnection.onremovestream = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream`"}, :name rtc.RTCPeerConnection/set-onremovestream!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 874, :end-line 874, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onremovestream event handler is a property\n  the code to execute when the removestream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is removed from this connection.\n\n  `peerconnection.onremovestream = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream`"}, create-answer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 80, :column 7, :end-line 80, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The createAnswer() method on the `rtc.RTCPeerConnection` interface\n  an SDP answer to an offer received from a remote peer during\n  offer/answer negotiation of a WebRTC connection. The answer contains\n  about any media already attached to the session, codecs and options\n  by the browser, and any ICE candidates already gathered. The\n  is delivered to the returned `web.Promise`, and should then be\n  to the source of the offer to continue the negotiation process.\n\n  `aPromise = RTCPeerConnection.createAnswer([options]);\n\n  RTCPeerConnection.createAnswer(successCallback, failureCallback[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/create-answer, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createAnswer() method on the `rtc.RTCPeerConnection` interface\n  an SDP answer to an offer received from a remote peer during\n  offer/answer negotiation of a WebRTC connection. The answer contains\n  about any media already attached to the session, codecs and options\n  by the browser, and any ICE candidates already gathered. The\n  is delivered to the returned `web.Promise`, and should then be\n  to the source of the offer to continue the negotiation process.\n\n  `aPromise = RTCPeerConnection.createAnswer([options]);\n\n  RTCPeerConnection.createAnswer(successCallback, failureCallback[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createAnswer`"}, signaling-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 1032, :column 7, :end-line 1032, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The read-only signalingState property on the `rtc.RTCPeerConnection`\n  returns one of the string values specified by the RTCSignalingState\n  these values describe the state of the signaling process on the\n  end of the connection while connecting or reconnecting to another\n  See Signaling in Lifetime of a WebRTC session for more details\n  the signaling process.\n\n  `var state = RTCPeerConnection.signalingState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState`"}, :name rtc.RTCPeerConnection/signaling-state, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1032, :end-line 1032, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only signalingState property on the `rtc.RTCPeerConnection`\n  returns one of the string values specified by the RTCSignalingState\n  these values describe the state of the signaling process on the\n  end of the connection while connecting or reconnecting to another\n  See Signaling in Lifetime of a WebRTC session for more details\n  the signaling process.\n\n  `var state = RTCPeerConnection.signalingState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/signalingState`"}, set-onnegotiationneeded! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 816, :column 7, :end-line 816, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` interface's onnegotiationneeded property\n  an `web.EventListener` which specifies a function which is called\n  handle the negotiationneeded event when it occurs on an `rtc.RTCPeerConnection`\n  This event is fired when a change has occurred which requires\n  negotiation. This negotiation should be carried out as the offerer,\n  some session changes cannot be negotiated as the answerer.\n\n  `RTCPeerConnection.onnegotiationneeded = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded`"}, :name rtc.RTCPeerConnection/set-onnegotiationneeded!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 816, :end-line 816, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` interface's onnegotiationneeded property\n  an `web.EventListener` which specifies a function which is called\n  handle the negotiationneeded event when it occurs on an `rtc.RTCPeerConnection`\n  This event is fired when a change has occurred which requires\n  negotiation. This negotiation should be carried out as the offerer,\n  some session changes cannot be negotiated as the answerer.\n\n  `RTCPeerConnection.onnegotiationneeded = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded`"}, set-configuration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 309, :column 7, :end-line 309, :end-column 24, :arglists (quote ([this configuration])), :doc "Method.\n\n  The RTCPeerConnection.setConfiguration() method sets the current\n  of the `rtc.RTCPeerConnection` based on the values included in\n  specified `rtc.RTCConfiguration` object. This lets you change\n  ICE servers used by the connection and which transport policies\n  use.\n\n  `RTCPeerConnection.setConfiguration(configuration);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setConfiguration`"}, :name rtc.RTCPeerConnection/set-configuration, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 24, :method-params ([this configuration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this configuration])), :doc "Method.\n\n  The RTCPeerConnection.setConfiguration() method sets the current\n  of the `rtc.RTCPeerConnection` based on the values included in\n  specified `rtc.RTCConfiguration` object. This lets you change\n  ICE servers used by the connection and which transport policies\n  use.\n\n  `RTCPeerConnection.setConfiguration(configuration);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setConfiguration`"}, current-remote-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 439, :column 7, :end-line 439, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.currentRemoteDescription\n  an `rtc.RTCSessionDescription` object describing the remote end\n  the connection as it was most recently successfully negotiated\n  the last time the `rtc.RTCPeerConnection` finished negotiating\n  connecting to a remote peer. Also included is a list of any ICE\n  that may already have been generated by the ICE agent since the\n  or answer represented by the description was first instantiated.\n\n  `sessionDescription = RTCPeerConnection.currentRemoteDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription`"}, :name rtc.RTCPeerConnection/current-remote-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.currentRemoteDescription\n  an `rtc.RTCSessionDescription` object describing the remote end\n  the connection as it was most recently successfully negotiated\n  the last time the `rtc.RTCPeerConnection` finished negotiating\n  connecting to a remote peer. Also included is a list of any ICE\n  that may already have been generated by the ICE agent since the\n  or answer represented by the description was first instantiated.\n\n  `sessionDescription = RTCPeerConnection.currentRemoteDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/currentRemoteDescription`"}, onsignalingstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 888, :column 7, :end-line 888, :end-column 29, :arglists (quote ([this])), :doc "Property.\n\n  The onsignalingstatechange property of the `rtc.RTCPeerConnection`\n  is an `web.EventHandler` which specifies a function to be called\n  the signalingstatechange event occurs on an `rtc.RTCPeerConnection`\n\n  `RTCPeerConnection.onsignalingstatechange = errorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange`"}, :name rtc.RTCPeerConnection/onsignalingstatechange, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 888, :end-line 888, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onsignalingstatechange property of the `rtc.RTCPeerConnection`\n  is an `web.EventHandler` which specifies a function to be called\n  the signalingstatechange event occurs on an `rtc.RTCPeerConnection`\n\n  `RTCPeerConnection.onsignalingstatechange = errorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange`"}, onicegatheringstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 680, :column 7, :end-line 680, :end-column 32, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onicegatheringstatechange property is an\n  which specifies a function to be called when the icegatheringstatechange\n  is sent to an `rtc.RTCPeerConnection` instance. This happens\n  the ICE gathering state—that is, whether or not the ICE agent\n  actively gathering candidates—changes.\n\n  `RTCPeerConnection.onicegatheringstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange`"}, :name rtc.RTCPeerConnection/onicegatheringstatechange, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 680, :end-line 680, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onicegatheringstatechange property is an\n  which specifies a function to be called when the icegatheringstatechange\n  is sent to an `rtc.RTCPeerConnection` instance. This happens\n  the ICE gathering state—that is, whether or not the ICE agent\n  actively gathering candidates—changes.\n\n  `RTCPeerConnection.onicegatheringstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange`"}, restart-ice {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 296, :column 7, :end-line 296, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The WebRTC API's `rtc.RTCPeerConnection` interface offers the\n  method to allow a web application to easily request that ICE\n  gathering be redone on both ends of the connection.\n\n  `rtcPeerConnection.restartIce();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/restartIce`"}, :name rtc.RTCPeerConnection/restart-ice, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebRTC API's `rtc.RTCPeerConnection` interface offers the\n  method to allow a web application to easily request that ICE\n  gathering be redone on both ends of the connection.\n\n  `rtcPeerConnection.restartIce();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/restartIce`"}, set-identity-provider {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 324, :column 7, :end-line 324, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.setIdentityProvider() method sets the Identity\n  (IdP) to the triplet given in parameter: its name, the protocol\n  to communicate with it (optional) and an optional username. The\n  will be used only when an assertion is needed.\n\n  `pc.setIdentityProvider(domainname [, protocol] [, username]);\n\n  There is no return value for this method.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/set-identity-provider, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.setIdentityProvider() method sets the Identity\n  (IdP) to the triplet given in parameter: its name, the protocol\n  to communicate with it (optional) and an optional username. The\n  will be used only when an assertion is needed.\n\n  `pc.setIdentityProvider(domainname [, protocol] [, username]);\n\n  There is no return value for this method.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setIdentityProvider`"}, set-ontrack! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 927, :column 7, :end-line 927, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` property ontrack is an `web.EventHandler`\n  specifies a function to be called when the track event occurs,\n  that a track has been added to the `rtc.RTCPeerConnection`.\n\n  `RTCPeerConnection.ontrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack`"}, :name rtc.RTCPeerConnection/set-ontrack!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 927, :end-line 927, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` property ontrack is an `web.EventHandler`\n  specifies a function to be called when the track event occurs,\n  that a track has been added to the `rtc.RTCPeerConnection`.\n\n  `RTCPeerConnection.ontrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack`"}, set-onidpvalidationerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 785, :column 7, :end-line 785, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidpvalidationerror event handler is a\n  containing the code to execute whent the idpvalidationerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while validating an identity assertion.\n\n  `peerconnection.onidpvalidationerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror`"}, :name rtc.RTCPeerConnection/set-onidpvalidationerror!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 785, :end-line 785, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidpvalidationerror event handler is a\n  containing the code to execute whent the idpvalidationerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while validating an identity assertion.\n\n  `peerconnection.onidpvalidationerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpvalidationerror`"}, onremovestream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 860, :column 7, :end-line 860, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onremovestream event handler is a property\n  the code to execute when the removestream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is removed from this connection.\n\n  `peerconnection.onremovestream = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream`"}, :name rtc.RTCPeerConnection/onremovestream, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 860, :end-line 860, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onremovestream event handler is a property\n  the code to execute when the removestream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is removed from this connection.\n\n  `peerconnection.onremovestream = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onremovestream`"}, set-ondatachannel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 605, :column 7, :end-line 605, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.ondatachannel property is an `web.EventHandler`\n  specifies a function which is called when the datachannel event\n  on an `rtc.RTCPeerConnection`. This event, of type `rtc.RTCDataChannelEvent`,\n  sent when an `rtc.RTCDataChannel` is added to the connection\n  the remote peer calling `web.createDataChannel()`.\n\n  `RTCPeerConnection.ondatachannel = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel`"}, :name rtc.RTCPeerConnection/set-ondatachannel!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 605, :end-line 605, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.ondatachannel property is an `web.EventHandler`\n  specifies a function which is called when the datachannel event\n  on an `rtc.RTCPeerConnection`. This event, of type `rtc.RTCDataChannelEvent`,\n  sent when an `rtc.RTCDataChannel` is added to the connection\n  the remote peer calling `web.createDataChannel()`.\n\n  `RTCPeerConnection.ondatachannel = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel`"}, onnegotiationneeded {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 800, :column 7, :end-line 800, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` interface's onnegotiationneeded property\n  an `web.EventListener` which specifies a function which is called\n  handle the negotiationneeded event when it occurs on an `rtc.RTCPeerConnection`\n  This event is fired when a change has occurred which requires\n  negotiation. This negotiation should be carried out as the offerer,\n  some session changes cannot be negotiated as the answerer.\n\n  `RTCPeerConnection.onnegotiationneeded = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded`"}, :name rtc.RTCPeerConnection/onnegotiationneeded, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 800, :end-line 800, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` interface's onnegotiationneeded property\n  an `web.EventListener` which specifies a function which is called\n  handle the negotiationneeded event when it occurs on an `rtc.RTCPeerConnection`\n  This event is fired when a change has occurred which requires\n  negotiation. This negotiation should be carried out as the offerer,\n  some session changes cannot be negotiated as the answerer.\n\n  `RTCPeerConnection.onnegotiationneeded = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onnegotiationneeded`"}, set-onsignalingstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 901, :column 7, :end-line 901, :end-column 34, :arglists (quote ([this val])), :doc "Property.\n\n  The onsignalingstatechange property of the `rtc.RTCPeerConnection`\n  is an `web.EventHandler` which specifies a function to be called\n  the signalingstatechange event occurs on an `rtc.RTCPeerConnection`\n\n  `RTCPeerConnection.onsignalingstatechange = errorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange`"}, :name rtc.RTCPeerConnection/set-onsignalingstatechange!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 34, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 901, :end-line 901, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onsignalingstatechange property of the `rtc.RTCPeerConnection`\n  is an `web.EventHandler` which specifies a function to be called\n  the signalingstatechange event occurs on an `rtc.RTCPeerConnection`\n\n  `RTCPeerConnection.onsignalingstatechange = errorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onsignalingstatechange`"}, ice-connection-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 488, :column 7, :end-line 488, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.iceConnectionState returns\n  enum of type RTCIceConnectionState which state of the ICE agent\n  with the `rtc.RTCPeerConnection`.\n\n  `var state = RTCPeerConnection.iceConnectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState`"}, :name rtc.RTCPeerConnection/ice-connection-state, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 488, :end-line 488, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.iceConnectionState returns\n  enum of type RTCIceConnectionState which state of the ICE agent\n  with the `rtc.RTCPeerConnection`.\n\n  `var state = RTCPeerConnection.iceConnectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceConnectionState`"}, add-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 35, :column 7, :end-line 35, :end-column 17, :arglists (quote ([this media-stream])), :doc "Method.\n\n  The obsolete `rtc.RTCPeerConnection` method addStream() adds\n  `media.MediaStream` as a local source of audio or video. Instead\n  using this obsolete method, you should instead use `web.addTrack()`\n  for each track you wish to send to the remote peer.\n\n  `rtcPeerConnection.addStream(mediaStream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream`"}, :name rtc.RTCPeerConnection/add-stream, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 17, :method-params ([this media-stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-stream])), :doc "Method.\n\n  The obsolete `rtc.RTCPeerConnection` method addStream() adds\n  `media.MediaStream` as a local source of audio or video. Instead\n  using this obsolete method, you should instead use `web.addTrack()`\n  for each track you wish to send to the remote peer.\n\n  `rtcPeerConnection.addStream(mediaStream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addStream`"}, pending-local-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 953, :column 7, :end-line 953, :end-column 32, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.pendingLocalDescription\n  an `rtc.RTCSessionDescription` object describing a pending configuration\n  for the local end of the connection. This does not describe the\n  as it currently stands, but as it may exist in the near future.\n  `rtc.RTCPeerConnection.currentLocalDescription` or `rtc.RTCPeerConnection.localDescription`\n  get the current state of the endpoint. For details on the difference,\n  Pending and current descriptions in WebRTC connectivity.\n\n  `sessionDescription = RTCPeerConnection.pendingLocalDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription`"}, :name rtc.RTCPeerConnection/pending-local-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 953, :end-line 953, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.pendingLocalDescription\n  an `rtc.RTCSessionDescription` object describing a pending configuration\n  for the local end of the connection. This does not describe the\n  as it currently stands, but as it may exist in the near future.\n  `rtc.RTCPeerConnection.currentLocalDescription` or `rtc.RTCPeerConnection.localDescription`\n  get the current state of the endpoint. For details on the difference,\n  Pending and current descriptions in WebRTC connectivity.\n\n  `sessionDescription = RTCPeerConnection.pendingLocalDescription;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/pendingLocalDescription`"}, ice-gathering-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 501, :column 7, :end-line 501, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.iceGatheringState returns\n  enum of type RTCIceGatheringState that describes connection's\n  gathering state. This lets you detect, for example, when collection\n  ICE candidates has finished.\n\n  `var state = RTCPeerConnection.iceGatheringState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState`"}, :name rtc.RTCPeerConnection/ice-gathering-state, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.iceGatheringState returns\n  enum of type RTCIceGatheringState that describes connection's\n  gathering state. This lets you detect, for example, when collection\n  ICE candidates has finished.\n\n  `var state = RTCPeerConnection.iceGatheringState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/iceGatheringState`"}, ontrack {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 914, :column 7, :end-line 914, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` property ontrack is an `web.EventHandler`\n  specifies a function to be called when the track event occurs,\n  that a track has been added to the `rtc.RTCPeerConnection`.\n\n  `RTCPeerConnection.ontrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack`"}, :name rtc.RTCPeerConnection/ontrack, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 914, :end-line 914, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCPeerConnection` property ontrack is an `web.EventHandler`\n  specifies a function to be called when the track event occurs,\n  that a track has been added to the `rtc.RTCPeerConnection`.\n\n  `RTCPeerConnection.ontrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ontrack`"}, sctp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 1004, :column 7, :end-line 1004, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only sctp property on the `rtc.RTCPeerConnection` interface\n  an `rtc.RTCSctpTransport` describing the SCTP transport over\n  SCTP data is being sent and received. If SCTP hasn't been negotiated,\n  value is null.\n\n  `var sctp = RTCPeerConnection.sctp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp`"}, :name rtc.RTCPeerConnection/sctp, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1004, :end-line 1004, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only sctp property on the `rtc.RTCPeerConnection` interface\n  an `rtc.RTCSctpTransport` describing the SCTP transport over\n  SCTP data is being sent and received. If SCTP hasn't been negotiated,\n  value is null.\n\n  `var sctp = RTCPeerConnection.sctp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp`"}, set-onicegatheringstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 695, :column 7, :end-line 695, :end-column 37, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onicegatheringstatechange property is an\n  which specifies a function to be called when the icegatheringstatechange\n  is sent to an `rtc.RTCPeerConnection` instance. This happens\n  the ICE gathering state—that is, whether or not the ICE agent\n  actively gathering candidates—changes.\n\n  `RTCPeerConnection.onicegatheringstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange`"}, :name rtc.RTCPeerConnection/set-onicegatheringstatechange!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 37, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 695, :end-line 695, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onicegatheringstatechange property is an\n  which specifies a function to be called when the icegatheringstatechange\n  is sent to an `rtc.RTCPeerConnection` instance. This happens\n  the ICE gathering state—that is, whether or not the ICE agent\n  actively gathering candidates—changes.\n\n  `RTCPeerConnection.onicegatheringstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicegatheringstatechange`"}, remove-track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 282, :column 7, :end-line 282, :end-column 19, :arglists (quote ([this sender])), :doc "Method.\n\n  The RTCPeerConnection.removeTrack() method tells the local end\n  the connection to stop sending media from the specified track,\n  actually removing the corresponding `rtc.RTCRtpSender` from the\n  of senders as reported by `rtc.RTCPeerConnection.getSenders()`.\n\n  `pc.removeTrack(sender);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeTrack`"}, :name rtc.RTCPeerConnection/remove-track, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 19, :method-params ([this sender]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sender])), :doc "Method.\n\n  The RTCPeerConnection.removeTrack() method tells the local end\n  the connection to stop sending media from the specified track,\n  actually removing the corresponding `rtc.RTCRtpSender` from the\n  of senders as reported by `rtc.RTCPeerConnection.getSenders()`.\n\n  `pc.removeTrack(sender);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/removeTrack`"}, add-track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 49, :column 7, :end-line 49, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method addTrack() adds a new media\n  to the set of tracks which will be transmitted to the other peer.\n\n  `rtpSender = rtcPeerConnection.addTrack(track, stream...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/add-track, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method addTrack() adds a new media\n  to the set of tracks which will be transmitted to the other peer.\n\n  `rtpSender = rtcPeerConnection.addTrack(track, stream...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addTrack`"}, set-sctp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 1018, :column 7, :end-line 1018, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only sctp property on the `rtc.RTCPeerConnection` interface\n  an `rtc.RTCSctpTransport` describing the SCTP transport over\n  SCTP data is being sent and received. If SCTP hasn't been negotiated,\n  value is null.\n\n  `var sctp = RTCPeerConnection.sctp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp`"}, :name rtc.RTCPeerConnection/set-sctp!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1018, :end-line 1018, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only sctp property on the `rtc.RTCPeerConnection` interface\n  an `rtc.RTCSctpTransport` describing the SCTP transport over\n  SCTP data is being sent and received. If SCTP hasn't been negotiated,\n  value is null.\n\n  `var sctp = RTCPeerConnection.sctp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/sctp`"}, onaddstream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 530, :column 7, :end-line 530, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onaddstream event handler is a property\n  the code to execute when the addstream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is added to this connection by the remote\n  The event is sent immediately after the call `web.setRemoteDescription()`\n  doesn't wait for the result of the SDP negotiation.\n\n  `rtcPeerConnection.onaddstream = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream`"}, :name rtc.RTCPeerConnection/onaddstream, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 530, :end-line 530, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onaddstream event handler is a property\n  the code to execute when the addstream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is added to this connection by the remote\n  The event is sent immediately after the call `web.setRemoteDescription()`\n  doesn't wait for the result of the SDP negotiation.\n\n  `rtcPeerConnection.onaddstream = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream`"}, set-onicecandidate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 635, :column 7, :end-line 635, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection property `web.onicecandidate` property\n  an `web.EventHandler` which specifies a function to be called\n  the icecandidate event occurs on an `rtc.RTCPeerConnection` instance.\n  happens whenever the local ICE agent needs to deliver a message\n  the other peer through the signaling server.\n\n  `rtcPeerConnection.onicecandidate = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate`"}, :name rtc.RTCPeerConnection/set-onicecandidate!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection property `web.onicecandidate` property\n  an `web.EventHandler` which specifies a function to be called\n  the icecandidate event occurs on an `rtc.RTCPeerConnection` instance.\n  happens whenever the local ICE agent needs to deliver a message\n  the other peer through the signaling server.\n\n  `rtcPeerConnection.onicecandidate = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate`"}, set-onidpassertionerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 755, :column 7, :end-line 755, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidpassertionerror event handler is a\n  containing the code to execute whent the idpassertionerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while generating an identity assertion.\n\n  `peerconnection.onidpassertionerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror`"}, :name rtc.RTCPeerConnection/set-onidpassertionerror!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 755, :end-line 755, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onidpassertionerror event handler is a\n  containing the code to execute whent the idpassertionerror event,\n  type `rtc.RTCIdentityErrorEvent`, is received by this `rtc.RTCPeerConnection`.\n  an event is sent when the associated identity provider (IdP)\n  an error while generating an identity assertion.\n\n  `peerconnection.onidpassertionerror = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidpassertionerror`"}, get-identity-assertion {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 153, :column 7, :end-line 153, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.getIdentityAssertion() method initiates\n  gathering of an identity assertion. This has an effect only if\n  `web.signalingState` is not \\\"closed\\\".\n\n  `pc.getIdentityAssertion();\n\n\n\n\n  There is neither parameter nor return value for this method.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/get-identity-assertion, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.getIdentityAssertion() method initiates\n  gathering of an identity assertion. This has an effect only if\n  `web.signalingState` is not \\\"closed\\\".\n\n  `pc.getIdentityAssertion();\n\n\n\n\n  There is neither parameter nor return value for this method.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getIdentityAssertion`"}, create-offer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 112, :column 7, :end-line 112, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The createOffer() method of the `rtc.RTCPeerConnection` interface\n  the creation of an SDP offer for the purpose of starting a new\n  connection to a remote peer.\n\n  `aPromise = myPeerConnection.createOffer([options]);\n\n  myPeerConnection.createOffer(successCallback, failureCallback, [options])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/create-offer, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createOffer() method of the `rtc.RTCPeerConnection` interface\n  the creation of an SDP offer for the purpose of starting a new\n  connection to a remote peer.\n\n  `aPromise = myPeerConnection.createOffer([options]);\n\n  myPeerConnection.createOffer(successCallback, failureCallback, [options])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createOffer`"}, connection-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 396, :column 7, :end-line 396, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The read-only connectionState property of the `rtc.RTCPeerConnection`\n  indicates the current state of the peer connection by returning\n  of the string values specified by the enum RTCPeerConnectionState.\n\n  `var connectionState = RTCPeerConnection.connectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState`"}, :name rtc.RTCPeerConnection/connection-state, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 396, :end-line 396, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only connectionState property of the `rtc.RTCPeerConnection`\n  indicates the current state of the peer connection by returning\n  of the string values specified by the enum RTCPeerConnectionState.\n\n  `var connectionState = RTCPeerConnection.connectionState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/connectionState`"}, local-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 515, :column 7, :end-line 515, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.localDescription returns\n  `rtc.RTCSessionDescription` describing the session for the local\n  of the connection. If it has not yet been set, this is null.\n\n  `var sessionDescription = peerConnection.localDescription;\n\n  On a more fundamental level, the returned value is the value of `rtc.RTCPeerConnection.pendingLocalDescription` if that property isn't null; otherwise, the value of `rtc.RTCPeerConnection.currentLocalDescription` is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/localDescription`"}, :name rtc.RTCPeerConnection/local-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.localDescription returns\n  `rtc.RTCSessionDescription` describing the session for the local\n  of the connection. If it has not yet been set, this is null.\n\n  `var sessionDescription = peerConnection.localDescription;\n\n  On a more fundamental level, the returned value is the value of `rtc.RTCPeerConnection.pendingLocalDescription` if that property isn't null; otherwise, the value of `rtc.RTCPeerConnection.currentLocalDescription` is returned. See Pending and current descriptions in WebRTC connectivity for details on this algorithm and why it's used.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/localDescription`"}, get-senders {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 215, :column 7, :end-line 215, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method getSenders() returns an array\n  `rtc.RTCRtpSender` objects, each of which represents the RTP\n  responsible for transmitting one track's data.\n\n  `var senders = RTCPeerConnection.getSenders();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders`"}, :name rtc.RTCPeerConnection/get-senders, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method getSenders() returns an array\n  `rtc.RTCRtpSender` objects, each of which represents the RTP\n  responsible for transmitting one track's data.\n\n  `var senders = RTCPeerConnection.getSenders();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getSenders`"}, get-transceivers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 254, :column 7, :end-line 254, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` interface's getTransceivers() method\n  a list of the `rtc.RTCRtpTransceiver` objects being used to send\n  receive data on the connection.\n\n  `transceiverList = rtcPeerConnection.getTransceivers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getTransceivers`"}, :name rtc.RTCPeerConnection/get-transceivers, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` interface's getTransceivers() method\n  a list of the `rtc.RTCRtpTransceiver` objects being used to send\n  receive data on the connection.\n\n  `transceiverList = rtcPeerConnection.getTransceivers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getTransceivers`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.close() method closes the current peer\n\n  `peerConnection.close();\n\n  This method has no parameters, and returns nothing.\n\n  Calling this method terminates the RTCPeerConnection's ICE agent, ending any ongoing ICE processing and any active streams. This also releases any resources in use by the ICE agent, including TURN permissions. All `rtc.RTCRtpSender` objects are considered to be stopped once this returns (they may still be in the process of stopping, but for all intents and purposes, they're stopped).\n\n  Once this method returns, the signaling state as returned by `rtc.RTCPeerConnection.signalingState` is closed.\n\n  Make sure that you delete all references to the previous `rtc.RTCPeerConnection` before attempting to create a new one that connects to the same remote peer, as not doing so might result in some errors depending on the browser.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/close`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/close, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.close() method closes the current peer\n\n  `peerConnection.close();\n\n  This method has no parameters, and returns nothing.\n\n  Calling this method terminates the RTCPeerConnection's ICE agent, ending any ongoing ICE processing and any active streams. This also releases any resources in use by the ICE agent, including TURN permissions. All `rtc.RTCRtpSender` objects are considered to be stopped once this returns (they may still be in the process of stopping, but for all intents and purposes, they're stopped).\n\n  Once this method returns, the signaling state as returned by `rtc.RTCPeerConnection.signalingState` is closed.\n\n  Make sure that you delete all references to the previous `rtc.RTCPeerConnection` before attempting to create a new one that connects to the same remote peer, as not doing so might result in some errors depending on the browser.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/close`"}, onidentityresult {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 710, :column 7, :end-line 710, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidentityresult event handler is a property\n  the code to execute when the identityresult event, of type `rtc.RTCIdentityEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion is generated, via `web.getIdentityAssertion()`\n  during the creation of an offer or an answer.\n\n  `peerconnection.onidentityresult = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidentityresult`"}, :name rtc.RTCPeerConnection/onidentityresult, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onidentityresult event handler is a property\n  the code to execute when the identityresult event, of type `rtc.RTCIdentityEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion is generated, via `web.getIdentityAssertion()`\n  during the creation of an offer or an answer.\n\n  `peerconnection.onidentityresult = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onidentityresult`"}, set-onaddstream! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 546, :column 7, :end-line 546, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onaddstream event handler is a property\n  the code to execute when the addstream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is added to this connection by the remote\n  The event is sent immediately after the call `web.setRemoteDescription()`\n  doesn't wait for the result of the SDP negotiation.\n\n  `rtcPeerConnection.onaddstream = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream`"}, :name rtc.RTCPeerConnection/set-onaddstream!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 546, :end-line 546, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onaddstream event handler is a property\n  the code to execute when the addstream event, of type `media.MediaStreamEvent`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  a `media.MediaStream` is added to this connection by the remote\n  The event is sent immediately after the call `web.setRemoteDescription()`\n  doesn't wait for the result of the SDP negotiation.\n\n  `rtcPeerConnection.onaddstream = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onaddstream`"}, onpeeridentity {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 832, :column 7, :end-line 832, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onpeeridentity event handler is a property\n  the code to execute whent the peeridentity event, of type `web.Event`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion, received from a peer, has been successfully\n\n  `peerconnection.onpeeridentity = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity`"}, :name rtc.RTCPeerConnection/onpeeridentity, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 832, :end-line 832, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.onpeeridentity event handler is a property\n  the code to execute whent the peeridentity event, of type `web.Event`,\n  received by this `rtc.RTCPeerConnection`. Such an event is sent\n  an identity assertion, received from a peer, has been successfully\n\n  `peerconnection.onpeeridentity = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onpeeridentity`"}, generate-certificate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 127, :column 7, :end-line 127, :end-column 27, :arglists (quote ([this keygen-algorithm])), :doc "Method.\n\n  The generateCertificate() method of the `rtc.RTCPeerConnection`\n  creates and stores an X.509 certificate and corresponding private\n  then returns an `rtc.RTCCertificate`, providing access to it.\n\n  `var cert = RTCPeerConnection.generateCertificate(keygenAlgorithm)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate`"}, :name rtc.RTCPeerConnection/generate-certificate, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 27, :method-params ([this keygen-algorithm]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this keygen-algorithm])), :doc "Method.\n\n  The generateCertificate() method of the `rtc.RTCPeerConnection`\n  creates and stores an X.509 certificate and corresponding private\n  then returns an `rtc.RTCCertificate`, providing access to it.\n\n  `var cert = RTCPeerConnection.generateCertificate(keygenAlgorithm)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/generateCertificate`"}, get-local-streams {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 171, :column 7, :end-line 171, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.getLocalStreams() method returns an array\n  MediaStream associated with the local end of the connection.\n  array may be empty.\n\n  `var mediaStreams[] = pc.getLocalStreams();\n\n  The return value is an `web.Array` of `media.MediaStream` objects.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getLocalStreams`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/get-local-streams, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.getLocalStreams() method returns an array\n  MediaStream associated with the local end of the connection.\n  array may be empty.\n\n  `var mediaStreams[] = pc.getLocalStreams();\n\n  The return value is an `web.Array` of `media.MediaStream` objects.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getLocalStreams`"}, set-onconnectionstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 576, :column 7, :end-line 576, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onconnectionstatechange property specifies\n  `web.EventHandler` which is called to handle the connectionstatechange\n  when it occurs on an instance of `rtc.RTCPeerConnection`. This\n  whenever the aggregate state of the connection changes.\n\n  `RTCPeerConnection.onconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange`"}, :name rtc.RTCPeerConnection/set-onconnectionstatechange!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 576, :end-line 576, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.onconnectionstatechange property specifies\n  `web.EventHandler` which is called to handle the connectionstatechange\n  when it occurs on an instance of `rtc.RTCPeerConnection`. This\n  whenever the aggregate state of the connection changes.\n\n  `RTCPeerConnection.onconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onconnectionstatechange`"}, set-oniceconnectionstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 665, :column 7, :end-line 665, :end-column 38, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.oniceconnectionstatechange property is\n  event handler which specifies a function to be called when the\n  event is fired on an `rtc.RTCPeerConnection` instance. This happens\n  the state of the connection's ICE agent, as represented by the\n  property, changes.\n\n  `RTCPeerConnection.oniceconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange`"}, :name rtc.RTCPeerConnection/set-oniceconnectionstatechange!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 38, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The RTCPeerConnection.oniceconnectionstatechange property is\n  event handler which specifies a function to be called when the\n  event is fired on an `rtc.RTCPeerConnection` instance. This happens\n  the state of the connection's ICE agent, as represented by the\n  property, changes.\n\n  `RTCPeerConnection.oniceconnectionstatechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/oniceconnectionstatechange`"}, set-can-trickle-ice-candidates! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 383, :column 7, :end-line 383, :end-column 38, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property canTrickleIceCandidates\n  a `web.Boolean` which indicates whether or not the remote peer\n  accept trickled ICE candidates.\n\n  `var canTrickle = RTCPeerConnection.canTrickleIceCandidates;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates`"}, :name rtc.RTCPeerConnection/set-can-trickle-ice-candidates!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 38, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `rtc.RTCPeerConnection` property canTrickleIceCandidates\n  a `web.Boolean` which indicates whether or not the remote peer\n  accept trickled ICE candidates.\n\n  `var canTrickle = RTCPeerConnection.canTrickleIceCandidates;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates`"}, onicecandidate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 620, :column 7, :end-line 620, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection property `web.onicecandidate` property\n  an `web.EventHandler` which specifies a function to be called\n  the icecandidate event occurs on an `rtc.RTCPeerConnection` instance.\n  happens whenever the local ICE agent needs to deliver a message\n  the other peer through the signaling server.\n\n  `rtcPeerConnection.onicecandidate = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate`"}, :name rtc.RTCPeerConnection/onicecandidate, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 620, :end-line 620, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection property `web.onicecandidate` property\n  an `web.EventHandler` which specifies a function to be called\n  the icecandidate event occurs on an `rtc.RTCPeerConnection` instance.\n  happens whenever the local ICE agent needs to deliver a message\n  the other peer through the signaling server.\n\n  `rtcPeerConnection.onicecandidate = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/onicecandidate`"}, set-remote-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 356, :column 7, :end-line 356, :end-column 29, :arglists (quote ([this session-description])), :doc "Method.\n\n  The RTCPeerConnection.setRemoteDescription() method changes the\n  description associated with the connection. This description\n  the properties of the remote end of the connection, including\n  media format.\n\n  `aPromise = pc.setRemoteDescription(sessionDescription);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription`"}, :name rtc.RTCPeerConnection/set-remote-description, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 29, :method-params ([this session-description]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this session-description])), :doc "Method.\n\n  The RTCPeerConnection.setRemoteDescription() method changes the\n  description associated with the connection. This description\n  the properties of the remote end of the connection, including\n  media format.\n\n  `aPromise = pc.setRemoteDescription(sessionDescription);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setRemoteDescription`"}, create-data-channel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 99, :column 7, :end-line 99, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The createDataChannel() method on the `rtc.RTCPeerConnection`\n  creates a new channel linked with the remote peer, over which\n  kind of data may be transmitted.\n\n  `dataChannel = RTCPeerConnection.createDataChannel(label[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/create-data-channel, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createDataChannel() method on the `rtc.RTCPeerConnection`\n  creates a new channel linked with the remote peer, over which\n  kind of data may be transmitted.\n\n  `dataChannel = RTCPeerConnection.createDataChannel(label[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/createDataChannel`"}, set-local-description {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 340, :column 7, :end-line 340, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.setLocalDescription() method changes the\n  description associated with the connection. This description\n  the properties of the local end of the connection, including\n  media format.\n\n  `aPromise = RTCPeerConnection.setLocalDescription(sessionDescription);\n\n  pc.setLocalDescription(sessionDescription, successCallback, errorCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/set-local-description, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.setLocalDescription() method changes the\n  description associated with the connection. This description\n  the properties of the local end of the connection, including\n  media format.\n\n  `aPromise = RTCPeerConnection.setLocalDescription(sessionDescription);\n\n  pc.setLocalDescription(sessionDescription, successCallback, errorCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/setLocalDescription`"}, get-configuration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 140, :column 7, :end-line 140, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The RTCPeerConnection.getConfiguration() method returns an `rtc.RTCConfiguration`\n  which indicates the current configuration of the `rtc.RTCPeerConnection`\n  which the method is called.\n\n  `var configuration = RTCPeerConnection.getConfiguration();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getConfiguration`"}, :name rtc.RTCPeerConnection/get-configuration, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The RTCPeerConnection.getConfiguration() method returns an `rtc.RTCConfiguration`\n  which indicates the current configuration of the `rtc.RTCPeerConnection`\n  which the method is called.\n\n  `var configuration = RTCPeerConnection.getConfiguration();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getConfiguration`"}, default-ice-servers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 456, :column 7, :end-line 456, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.defaultIceServers returns\n  array of objects based on the `rtc.RTCIceServer` dictionary,\n  indicates what, if any, ICE servers the browser will use by default\n  none are provided to the `rtc.RTCPeerConnection` in its `rtc.RTCConfiguration`.\n  browsers are not required to provide any default ICE servers\n  all.\n\n  `var defaultIceServers = RTCPeerConnection.defaultIceServers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers`"}, :name rtc.RTCPeerConnection/default-ice-servers, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property RTCPeerConnection.defaultIceServers returns\n  array of objects based on the `rtc.RTCIceServer` dictionary,\n  indicates what, if any, ICE servers the browser will use by default\n  none are provided to the `rtc.RTCPeerConnection` in its `rtc.RTCConfiguration`.\n  browsers are not required to provide any default ICE servers\n  all.\n\n  `var defaultIceServers = RTCPeerConnection.defaultIceServers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers`"}, set-default-ice-servers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 472, :column 7, :end-line 472, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only property RTCPeerConnection.defaultIceServers returns\n  array of objects based on the `rtc.RTCIceServer` dictionary,\n  indicates what, if any, ICE servers the browser will use by default\n  none are provided to the `rtc.RTCPeerConnection` in its `rtc.RTCConfiguration`.\n  browsers are not required to provide any default ICE servers\n  all.\n\n  `var defaultIceServers = RTCPeerConnection.defaultIceServers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers`"}, :name rtc.RTCPeerConnection/set-default-ice-servers!, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only property RTCPeerConnection.defaultIceServers returns\n  array of objects based on the `rtc.RTCIceServer` dictionary,\n  indicates what, if any, ICE servers the browser will use by default\n  none are provided to the `rtc.RTCPeerConnection` in its `rtc.RTCConfiguration`.\n  browsers are not required to provide any default ICE servers\n  all.\n\n  `var defaultIceServers = RTCPeerConnection.defaultIceServers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/defaultIceServers`"}, get-stream-by-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 241, :column 7, :end-line 241, :end-column 23, :arglists (quote ([this id])), :doc "Method.\n\n  The RTCPeerConnection.getStreamById() method returns the MediaStream\n  the given id that is associated with local or remote end of the\n  If no stream matches, it returns null.\n\n  `var mediaStream = pc.getStream(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStreamById`"}, :name rtc.RTCPeerConnection/get-stream-by-id, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 23, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc "Method.\n\n  The RTCPeerConnection.getStreamById() method returns the MediaStream\n  the given id that is associated with local or remote end of the\n  If no stream matches, it returns null.\n\n  `var mediaStream = pc.getStream(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStreamById`"}, ondatachannel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 590, :column 7, :end-line 590, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.ondatachannel property is an `web.EventHandler`\n  specifies a function which is called when the datachannel event\n  on an `rtc.RTCPeerConnection`. This event, of type `rtc.RTCDataChannelEvent`,\n  sent when an `rtc.RTCDataChannel` is added to the connection\n  the remote peer calling `web.createDataChannel()`.\n\n  `RTCPeerConnection.ondatachannel = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel`"}, :name rtc.RTCPeerConnection/ondatachannel, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 590, :end-line 590, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The RTCPeerConnection.ondatachannel property is an `web.EventHandler`\n  specifies a function which is called when the datachannel event\n  on an `rtc.RTCPeerConnection`. This event, of type `rtc.RTCDataChannelEvent`,\n  sent when an `rtc.RTCDataChannel` is added to the connection\n  the remote peer calling `web.createDataChannel()`.\n\n  `RTCPeerConnection.ondatachannel = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/ondatachannel`"}, add-ice-candidate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 19, :column 7, :end-line 19, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  When a web site or app using `rtc.RTCPeerConnection` receives\n  new ICE candidate from the remote peer over its signaling channel,\n  delivers the newly-received candidate to the browser's ICE agent\n  calling RTCPeerConnection.addIceCandidate().\n\n  `aPromise = pc.addIceCandidate(candidate);\n\n  addIceCandidate(candidate, successCallback, failureCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/add-ice-candidate, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  When a web site or app using `rtc.RTCPeerConnection` receives\n  new ICE candidate from the remote peer over its signaling channel,\n  delivers the newly-received candidate to the browser's ICE agent\n  calling RTCPeerConnection.addIceCandidate().\n\n  `aPromise = pc.addIceCandidate(candidate);\n\n  addIceCandidate(candidate, successCallback, failureCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/addIceCandidate`"}, constructor {:name rtc.RTCPeerConnection/constructor, :file "src/rtc/RTCPeerConnection.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The RTCPeerConnection() constructor returns a newly-created `rtc.RTCPeerConnection`, which represents a connection between the local device and a remote peer.\n\n  configuration Optional\n  An RTCConfiguration dictionary providing options to configure the new connection.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/RTCPeerConnection`", :tag js}, get-remote-streams {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 200, :column 7, :end-line 200, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The RTCPeerConnection.getRemoteStreams() method returns an array\n  MediaStream associated with the remote end of the connection.\n  array may be empty.\n\n  `var mediaStreams[] = pc.getRemoteStreams();\n\n  The return value is an `web.Array` of `media.MediaStream` objects.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getRemoteStreams`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name rtc.RTCPeerConnection/get-remote-streams, :variadic true, :file "src/rtc/RTCPeerConnection.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The RTCPeerConnection.getRemoteStreams() method returns an array\n  MediaStream associated with the remote end of the connection.\n  array may be empty.\n\n  `var mediaStreams[] = pc.getRemoteStreams();\n\n  The return value is an `web.Array` of `media.MediaStream` objects.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getRemoteStreams`"}, get-stats {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCPeerConnection.cljs", :line 228, :column 7, :end-line 228, :end-column 16, :arglists (quote ([this selector])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method getStats() returns a promise\n  resolves with data providing statistics about either the overall\n  or about the specified `media.MediaStreamTrack`.\n\n  `promise = rtcPeerConnection.getStats(selector)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStats`"}, :name rtc.RTCPeerConnection/get-stats, :variadic false, :file "src/rtc/RTCPeerConnection.cljs", :end-column 16, :method-params ([this selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selector])), :doc "Method.\n\n  The `rtc.RTCPeerConnection` method getStats() returns a promise\n  resolves with data providing statistics about either the overall\n  or about the specified `media.MediaStreamTrack`.\n\n  `promise = rtcPeerConnection.getStats(selector)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/getStats`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCPeerConnection interface represents a WebRTC connection\n  the local computer and a remote peer. It provides methods to\n  to a remote peer, maintain and monitor the connection, and close\n  connection once it's no longer needed."}