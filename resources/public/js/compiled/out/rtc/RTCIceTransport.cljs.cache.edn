{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name rtc.RTCIceTransport, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {gathering-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 87, :column 7, :end-line 87, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property gatheringState returns\n  `dom.DOMString` from the enumerated type `rtc.RTCIceGathererState`\n  indicates what gathering state the ICE agent is currently in:\n  \\\"gathering\\\", or \\\"complete\\\".\n\n  `gatherState = RTCIceTransport.gatheringState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/gatheringState`"}, :name rtc.RTCIceTransport/gathering-state, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property gatheringState returns\n  `dom.DOMString` from the enumerated type `rtc.RTCIceGathererState`\n  indicates what gathering state the ICE agent is currently in:\n  \\\"gathering\\\", or \\\"complete\\\".\n\n  `gatherState = RTCIceTransport.gatheringState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/gatheringState`"}, get-remote-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 61, :column 7, :end-line 61, :end-column 28, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getRemoteParameters() returns\n  `rtc.RTCIceParameters` object which provides information uniquely\n  the remote peer for the duration of the ICE session.\n\n  `parameters = RTCIceTransport.getRemoteParameters();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteParameters`"}, :name rtc.RTCIceTransport/get-remote-parameters, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getRemoteParameters() returns\n  `rtc.RTCIceParameters` object which provides information uniquely\n  the remote peer for the duration of the ICE session.\n\n  `parameters = RTCIceTransport.getRemoteParameters();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteParameters`"}, onselectedcandidatepairchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 127, :column 7, :end-line 127, :end-column 36, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceTransport` interface's onselectedcandidatepairchange\n  handler specifies a function to be called to handle the selectedcandidatepairchange\n  which is fired when the ICE agent selects a new candidate pair\n  be used for the connection.\n\n  `RTCIceTransport.onselectedcandidatepairchange = candidatePairHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onselectedcandidatepairchange`"}, :name rtc.RTCIceTransport/onselectedcandidatepairchange, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 36, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `rtc.RTCIceTransport` interface's onselectedcandidatepairchange\n  handler specifies a function to be called to handle the selectedcandidatepairchange\n  which is fired when the ICE agent selects a new candidate pair\n  be used for the connection.\n\n  `RTCIceTransport.onselectedcandidatepairchange = candidatePairHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onselectedcandidatepairchange`"}, role {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 183, :column 7, :end-line 183, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property role indicates which\n  role the transport is fulfilling: that of the controlling agent,\n  the agent that is being controlled.\n\n  `iceRole = RTCIceTransport.role;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/role`"}, :name rtc.RTCIceTransport/role, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property role indicates which\n  role the transport is fulfilling: that of the controlling agent,\n  the agent that is being controlled.\n\n  `iceRole = RTCIceTransport.role;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/role`"}, onstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 155, :column 7, :end-line 155, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onstatechange event handler for the `rtc.RTCIceTransport`\n  is a property which specifies a function to serve as the `web.EventHandler`\n  the statechange event that is fired whenever the transport's\n  changes.\n\n  `RTCIceTransport.onstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onstatechange`"}, :name rtc.RTCIceTransport/onstatechange, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onstatechange event handler for the `rtc.RTCIceTransport`\n  is a property which specifies a function to serve as the `web.EventHandler`\n  the statechange event that is fired whenever the transport's\n  changes.\n\n  `RTCIceTransport.onstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onstatechange`"}, ongatheringstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 101, :column 7, :end-line 101, :end-column 29, :arglists (quote ([this])), :doc "Property.\n\n  The ongatheringstatechange event handler for the `rtc.RTCIceTransport`\n  specifies an event handler that is to be called when the gatheringstatechange\n  occurs on the transport.\n\n  `RTCIceTransport.ongatheringstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/ongatheringstatechange`"}, :name rtc.RTCIceTransport/ongatheringstatechange, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ongatheringstatechange event handler for the `rtc.RTCIceTransport`\n  specifies an event handler that is to be called when the gatheringstatechange\n  occurs on the transport.\n\n  `RTCIceTransport.ongatheringstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/ongatheringstatechange`"}, state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 196, :column 7, :end-line 196, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property state returns the\n  state of the ICE transport, so you can determine the state of\n  gathering in which the ICE agent currently is operating.\n\n  `iceState = iceTransport.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/state`"}, :name rtc.RTCIceTransport/state, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property state returns the\n  state of the ICE transport, so you can determine the state of\n  gathering in which the ICE agent currently is operating.\n\n  `iceState = iceTransport.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/state`"}, component {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 74, :column 7, :end-line 74, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property component specifies\n  the object is serving to transport RTP or RTCP. The value is\n  of the strings in `rtc.RTCIceComponent`.\n\n  `iceComponent = RTCIceTransport.component;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/component`"}, :name rtc.RTCIceTransport/component, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `rtc.RTCIceTransport` property component specifies\n  the object is serving to transport RTP or RTCP. The value is\n  of the strings in `rtc.RTCIceComponent`.\n\n  `iceComponent = RTCIceTransport.component;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/component`"}, set-onselectedcandidatepairchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 141, :column 7, :end-line 141, :end-column 41, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceTransport` interface's onselectedcandidatepairchange\n  handler specifies a function to be called to handle the selectedcandidatepairchange\n  which is fired when the ICE agent selects a new candidate pair\n  be used for the connection.\n\n  `RTCIceTransport.onselectedcandidatepairchange = candidatePairHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onselectedcandidatepairchange`"}, :name rtc.RTCIceTransport/set-onselectedcandidatepairchange!, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 41, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `rtc.RTCIceTransport` interface's onselectedcandidatepairchange\n  handler specifies a function to be called to handle the selectedcandidatepairchange\n  which is fired when the ICE agent selects a new candidate pair\n  be used for the connection.\n\n  `RTCIceTransport.onselectedcandidatepairchange = candidatePairHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onselectedcandidatepairchange`"}, get-local-candidates {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 6, :column 7, :end-line 6, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getLocalCandidates() returns\n  array of `rtc.RTCIceCandidate` objects, one for each of the candidates\n  have been gathered by the local device during the current ICE\n  session.\n\n  `localCandidates = RTCIceTransport.getLocalCandidates();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalCandidates`"}, :name rtc.RTCIceTransport/get-local-candidates, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getLocalCandidates() returns\n  array of `rtc.RTCIceCandidate` objects, one for each of the candidates\n  have been gathered by the local device during the current ICE\n  session.\n\n  `localCandidates = RTCIceTransport.getLocalCandidates();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalCandidates`"}, set-onstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 169, :column 7, :end-line 169, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onstatechange event handler for the `rtc.RTCIceTransport`\n  is a property which specifies a function to serve as the `web.EventHandler`\n  the statechange event that is fired whenever the transport's\n  changes.\n\n  `RTCIceTransport.onstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onstatechange`"}, :name rtc.RTCIceTransport/set-onstatechange!, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onstatechange event handler for the `rtc.RTCIceTransport`\n  is a property which specifies a function to serve as the `web.EventHandler`\n  the statechange event that is fired whenever the transport's\n  changes.\n\n  `RTCIceTransport.onstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/onstatechange`"}, get-selected-candidate-pair {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 33, :column 7, :end-line 33, :end-column 34, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getSelectedCandidatePair() returns\n  `rtc.RTCIceCandidatePair` object containing the current best-choice\n  of ICE candidates describing the configuration of the endpoints\n  the transport.\n\n  `candidatePair = RTCIceTransport.getSelectedCandidatePair();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getSelectedCandidatePair`"}, :name rtc.RTCIceTransport/get-selected-candidate-pair, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 34, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getSelectedCandidatePair() returns\n  `rtc.RTCIceCandidatePair` object containing the current best-choice\n  of ICE candidates describing the configuration of the endpoints\n  the transport.\n\n  `candidatePair = RTCIceTransport.getSelectedCandidatePair();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getSelectedCandidatePair`"}, set-ongatheringstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 114, :column 7, :end-line 114, :end-column 34, :arglists (quote ([this val])), :doc "Property.\n\n  The ongatheringstatechange event handler for the `rtc.RTCIceTransport`\n  specifies an event handler that is to be called when the gatheringstatechange\n  occurs on the transport.\n\n  `RTCIceTransport.ongatheringstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/ongatheringstatechange`"}, :name rtc.RTCIceTransport/set-ongatheringstatechange!, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 34, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ongatheringstatechange event handler for the `rtc.RTCIceTransport`\n  specifies an event handler that is to be called when the gatheringstatechange\n  occurs on the transport.\n\n  `RTCIceTransport.ongatheringstatechange = stateChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/ongatheringstatechange`"}, get-remote-candidates {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 47, :column 7, :end-line 47, :end-column 28, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getRemoteCandidates() returns\n  array which contains one `rtc.RTCIceCandidate` for each of the\n  that have been received from the remote peer so far during the\n  ICE gathering session.\n\n  `remoteCandidates = RTCIceTransport.getRemoteCandidates();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteCandidates`"}, :name rtc.RTCIceTransport/get-remote-candidates, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getRemoteCandidates() returns\n  array which contains one `rtc.RTCIceCandidate` for each of the\n  that have been received from the remote peer so far during the\n  ICE gathering session.\n\n  `remoteCandidates = RTCIceTransport.getRemoteCandidates();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getRemoteCandidates`"}, get-local-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/rtc/RTCIceTransport.cljs", :line 20, :column 7, :end-line 20, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getLocalParameters() returns\n  `rtc.RTCIceParameters` object which provides information uniquely\n  the local peer for the duration of the ICE session.\n\n  `parameters = RTCIceTransport.getLocalParameters();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalParameters`"}, :name rtc.RTCIceTransport/get-local-parameters, :variadic false, :file "src/rtc/RTCIceTransport.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `rtc.RTCIceTransport` method getLocalParameters() returns\n  `rtc.RTCIceParameters` object which provides information uniquely\n  the local peer for the duration of the ICE session.\n\n  `parameters = RTCIceTransport.getLocalParameters();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/RTCIceTransport/getLocalParameters`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The RTCIceTransport interface provides access to information\n  the ICE transport layer over which the data is being sent and"}