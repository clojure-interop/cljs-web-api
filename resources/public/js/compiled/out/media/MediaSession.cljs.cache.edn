{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaSession, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-action-handler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSession.cljs", :line 6, :column 7, :end-line 6, :end-column 25, :arglists (quote ([this type callback])), :doc "Method.\n\n  The setActionHandler() property of the `media.MediaSession` interface\n  an event handler for a media session action.\n\n  `navigator.mediaSession.setActionHandler(type, callback)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setActionHandler`"}, :name media.MediaSession/set-action-handler, :variadic false, :file "src/media/MediaSession.cljs", :end-column 25, :method-params ([this type callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this type callback])), :doc "Method.\n\n  The setActionHandler() property of the `media.MediaSession` interface\n  an event handler for a media session action.\n\n  `navigator.mediaSession.setActionHandler(type, callback)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/setActionHandler`"}, metadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSession.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The metadata property of the `media.MediaSession` interface,\n  an instance of `media.MediaMetadata` which contains rich media\n  for display in a platform UI.\n\n  `var mediaMetadata = MediaSession.metadata\n  MediaSession.metadata = mediaMetadata`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata`"}, :name media.MediaSession/metadata, :variadic false, :file "src/media/MediaSession.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The metadata property of the `media.MediaSession` interface,\n  an instance of `media.MediaMetadata` which contains rich media\n  for display in a platform UI.\n\n  `var mediaMetadata = MediaSession.metadata\n  MediaSession.metadata = mediaMetadata`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata`"}, set-metadata! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSession.cljs", :line 32, :column 7, :end-line 32, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The metadata property of the `media.MediaSession` interface,\n  an instance of `media.MediaMetadata` which contains rich media\n  for display in a platform UI.\n\n  `var mediaMetadata = MediaSession.metadata\n  MediaSession.metadata = mediaMetadata`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata`"}, :name media.MediaSession/set-metadata!, :variadic false, :file "src/media/MediaSession.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The metadata property of the `media.MediaSession` interface,\n  an instance of `media.MediaMetadata` which contains rich media\n  for display in a platform UI.\n\n  `var mediaMetadata = MediaSession.metadata\n  MediaSession.metadata = mediaMetadata`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/metadata`"}, playback-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSession.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The playbackState property of the `media.MediaSession` interface\n  whether the current media session is playing.\n\n  `var playbackState = MediaSession.playbackState\n  MediaSession.playbackState = playbackState`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState`"}, :name media.MediaSession/playback-state, :variadic false, :file "src/media/MediaSession.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The playbackState property of the `media.MediaSession` interface\n  whether the current media session is playing.\n\n  `var playbackState = MediaSession.playbackState\n  MediaSession.playbackState = playbackState`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState`"}, set-playback-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSession.cljs", :line 59, :column 7, :end-line 59, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The playbackState property of the `media.MediaSession` interface\n  whether the current media session is playing.\n\n  `var playbackState = MediaSession.playbackState\n  MediaSession.playbackState = playbackState`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState`"}, :name media.MediaSession/set-playback-state!, :variadic false, :file "src/media/MediaSession.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The playbackState property of the `media.MediaSession` interface\n  whether the current media session is playing.\n\n  `var playbackState = MediaSession.playbackState\n  MediaSession.playbackState = playbackState`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSession/playbackState`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaSession interface of the Media Session API allows a\n  page to provide custom behaviors for standard media playback"}