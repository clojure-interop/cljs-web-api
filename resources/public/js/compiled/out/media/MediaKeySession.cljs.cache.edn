{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{load remove update}, :name media.MediaKeySession, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {key-statuses {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 129, :column 7, :end-line 129, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.keyStatuses read-only property returns a\n  to a read-only `media.MediaKeyStatusMap` of the current session's\n  and their statuses.\n\n  `var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses`"}, :name media.MediaKeySession/key-statuses, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.keyStatuses read-only property returns a\n  to a read-only `media.MediaKeyStatusMap` of the current session's\n  and their statuses.\n\n  `var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses`"}, set-key-statuses! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 142, :column 7, :end-line 142, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.keyStatuses read-only property returns a\n  to a read-only `media.MediaKeyStatusMap` of the current session's\n  and their statuses.\n\n  `var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses`"}, :name media.MediaKeySession/set-key-statuses!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.keyStatuses read-only property returns a\n  to a read-only `media.MediaKeyStatusMap` of the current session's\n  and their statuses.\n\n  `var mediaKeyStatusMapObj = mediaKeySessionObj.keyStatuses;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/keyStatuses`"}, load {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([this session-id])), :doc "Method.\n\n  The MediaKeySession.load() method returns a `web.Promise` that\n  to a boolean value after loading data for a specified session\n\n  `mediaKeySession.load(sessionId).then(function(booleanValue) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load`"}, :name media.MediaKeySession/load, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 11, :method-params ([this session-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this session-id])), :doc "Method.\n\n  The MediaKeySession.load() method returns a `web.Promise` that\n  to a boolean value after loading data for a specified session\n\n  `mediaKeySession.load(sessionId).then(function(booleanValue) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/load`"}, closed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 67, :column 7, :end-line 67, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.closed read-only property returns a `web.Promise`\n  when a `media.MediaKeySession` closes. This promise can only\n  fulfilled and is never rejected. Closing a session means that\n  and keys associated with it are no longer valid for decrypting\n  data.\n\n  `var promise = mediaKeySessionObj.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed`"}, :name media.MediaKeySession/closed, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.closed read-only property returns a `web.Promise`\n  when a `media.MediaKeySession` closes. This promise can only\n  fulfilled and is never rejected. Closing a session means that\n  and keys associated with it are no longer valid for decrypting\n  data.\n\n  `var promise = mediaKeySessionObj.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed`"}, session-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 155, :column 7, :end-line 155, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.sessionId read-only property contains a unique\n  generated by the CDM for the current media object and its associated\n  or licenses.\n\n  `​var sessionId = mediaKeySessionObj.sessionId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId`"}, :name media.MediaKeySession/session-id, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.sessionId read-only property contains a unique\n  generated by the CDM for the current media object and its associated\n  or licenses.\n\n  `​var sessionId = mediaKeySessionObj.sessionId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 45, :column 7, :end-line 45, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The MediaKeySession.remove() method returns a `web.Promise` after\n  any session data associated with the current object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaKeySession/remove, :variadic true, :file "src/media/MediaKeySession.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The MediaKeySession.remove() method returns a `web.Promise` after\n  any session data associated with the current object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/remove`"}, onkeystatuseschange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 181, :column 7, :end-line 181, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The onkeystatuseschange property of the `media.MediaKeySession`\n  an event handler, fired whenever a keystatuschange event ocurrs,\n  there has been a change in the keys or their statuses within\n  session.\n\n  `MediaKeySession.onkeystatuseschange = function(keystatuschange) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onkeystatuseschange`"}, :name media.MediaKeySession/onkeystatuseschange, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeystatuseschange property of the `media.MediaKeySession`\n  an event handler, fired whenever a keystatuschange event ocurrs,\n  there has been a change in the keys or their statuses within\n  session.\n\n  `MediaKeySession.onkeystatuseschange = function(keystatuschange) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onkeystatuseschange`"}, generate-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 21, :column 7, :end-line 21, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The MediaKeySession.generateRequest() method returns a `web.Promise`\n  generating a media request based on initialization data.\n\n  `mediaKeySession.generateRequest().then(function) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaKeySession/generate-request, :variadic true, :file "src/media/MediaKeySession.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The MediaKeySession.generateRequest() method returns a `web.Promise`\n  generating a media request based on initialization data.\n\n  `mediaKeySession.generateRequest().then(function) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/generateRequest`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 209, :column 7, :end-line 209, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `media.MediaKeySession` is an event\n  fired whenever a `media.MediaKeyMessageEvent` occurs, denoting\n  message is generated by the content decryption module.\n\n  `MediaKeySession.onmessage = function(MediaKeyMessageEvent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onmessage`"}, :name media.MediaKeySession/onmessage, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `media.MediaKeySession` is an event\n  fired whenever a `media.MediaKeyMessageEvent` occurs, denoting\n  message is generated by the content decryption module.\n\n  `MediaKeySession.onmessage = function(MediaKeyMessageEvent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onmessage`"}, expiration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.expiration read-only property returns the\n  after which the keys in the current session can no longer be\n  to decrypt media data, or NaN if no such time exists. This value\n  determined by the CDM and measured in milliseconds since January\n  1970, UTC. This value may change during a session lifetime, such\n  when an action triggers the start of a window.\n\n  `​var expirationTime = mediaKeySessionObj.expiration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration`"}, :name media.MediaKeySession/expiration, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeySession.expiration read-only property returns the\n  after which the keys in the current session can no longer be\n  to decrypt media data, or NaN if no such time exists. This value\n  determined by the CDM and measured in milliseconds since January\n  1970, UTC. This value may change during a session lifetime, such\n  when an action triggers the start of a window.\n\n  `​var expirationTime = mediaKeySessionObj.expiration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 222, :column 7, :end-line 222, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `media.MediaKeySession` is an event\n  fired whenever a `media.MediaKeyMessageEvent` occurs, denoting\n  message is generated by the content decryption module.\n\n  `MediaKeySession.onmessage = function(MediaKeyMessageEvent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onmessage`"}, :name media.MediaKeySession/set-onmessage!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `media.MediaKeySession` is an event\n  fired whenever a `media.MediaKeyMessageEvent` occurs, denoting\n  message is generated by the content decryption module.\n\n  `MediaKeySession.onmessage = function(MediaKeyMessageEvent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onmessage`"}, update {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 55, :column 7, :end-line 55, :end-column 13, :arglists (quote ([this response])), :doc "Method.\n\n  The MediaKeySession.update() method loads messages and licenses\n  the CDM, and then returns a `web.Promise` .\n\n  `mediaKeySession.update(response).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update`"}, :name media.MediaKeySession/update, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 13, :method-params ([this response]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this response])), :doc "Method.\n\n  The MediaKeySession.update() method loads messages and licenses\n  the CDM, and then returns a `web.Promise` .\n\n  `mediaKeySession.update(response).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/update`"}, set-expiration! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 113, :column 7, :end-line 113, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.expiration read-only property returns the\n  after which the keys in the current session can no longer be\n  to decrypt media data, or NaN if no such time exists. This value\n  determined by the CDM and measured in milliseconds since January\n  1970, UTC. This value may change during a session lifetime, such\n  when an action triggers the start of a window.\n\n  `​var expirationTime = mediaKeySessionObj.expiration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration`"}, :name media.MediaKeySession/set-expiration!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.expiration read-only property returns the\n  after which the keys in the current session can no longer be\n  to decrypt media data, or NaN if no such time exists. This value\n  determined by the CDM and measured in milliseconds since January\n  1970, UTC. This value may change during a session lifetime, such\n  when an action triggers the start of a window.\n\n  `​var expirationTime = mediaKeySessionObj.expiration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/expiration`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The MediaKeySession.close() method notifies that the current\n  session is no longer needed, and that the content decryption\n  should release any resources associated with this object and\n  it. Then, it returns a `web.Promise`.\n\n  `mediaKeySession.close().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaKeySession/close, :variadic true, :file "src/media/MediaKeySession.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The MediaKeySession.close() method notifies that the current\n  session is no longer needed, and that the content decryption\n  should release any resources associated with this object and\n  it. Then, it returns a `web.Promise`.\n\n  `mediaKeySession.close().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/close`"}, set-closed! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 82, :column 7, :end-line 82, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.closed read-only property returns a `web.Promise`\n  when a `media.MediaKeySession` closes. This promise can only\n  fulfilled and is never rejected. Closing a session means that\n  and keys associated with it are no longer valid for decrypting\n  data.\n\n  `var promise = mediaKeySessionObj.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed`"}, :name media.MediaKeySession/set-closed!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.closed read-only property returns a `web.Promise`\n  when a `media.MediaKeySession` closes. This promise can only\n  fulfilled and is never rejected. Closing a session means that\n  and keys associated with it are no longer valid for decrypting\n  data.\n\n  `var promise = mediaKeySessionObj.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/closed`"}, set-onkeystatuseschange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 195, :column 7, :end-line 195, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeystatuseschange property of the `media.MediaKeySession`\n  an event handler, fired whenever a keystatuschange event ocurrs,\n  there has been a change in the keys or their statuses within\n  session.\n\n  `MediaKeySession.onkeystatuseschange = function(keystatuschange) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onkeystatuseschange`"}, :name media.MediaKeySession/set-onkeystatuseschange!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeystatuseschange property of the `media.MediaKeySession`\n  an event handler, fired whenever a keystatuschange event ocurrs,\n  there has been a change in the keys or their statuses within\n  session.\n\n  `MediaKeySession.onkeystatuseschange = function(keystatuschange) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/onkeystatuseschange`"}, set-session-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeySession.cljs", :line 168, :column 7, :end-line 168, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.sessionId read-only property contains a unique\n  generated by the CDM for the current media object and its associated\n  or licenses.\n\n  `​var sessionId = mediaKeySessionObj.sessionId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId`"}, :name media.MediaKeySession/set-session-id!, :variadic false, :file "src/media/MediaKeySession.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeySession.sessionId read-only property contains a unique\n  generated by the CDM for the current media object and its associated\n  or licenses.\n\n  `​var sessionId = mediaKeySessionObj.sessionId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeySession/sessionId`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaKeySession interface of the EncryptedMediaExtensions\n  represents a context for message exchange with a content decryption\n  (CDM)."}