{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaCapabilities, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {decoding-info {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaCapabilities.cljs", :line 10, :column 7, :end-line 10, :end-column 20, :arglists (quote ([this media-decoding-configuration])), :doc "Method.\n\n  The MediaCapabilities.decodingInfo() method, part of the Media\n  API, returns a promise with the tested media configuration's\n  this contains the three Boolean properties supported, smooth,\n  powerefficient, which describe whether decoding the media described\n  be supported, smooth, and powerefficient.\n\n  `mediaCapabilities.decodingInfo(MediaDecodingConfiguration)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities/decodingInfo`"}, :name media.MediaCapabilities/decoding-info, :variadic false, :file "src/media/MediaCapabilities.cljs", :end-column 20, :method-params ([this media-decoding-configuration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-decoding-configuration])), :doc "Method.\n\n  The MediaCapabilities.decodingInfo() method, part of the Media\n  API, returns a promise with the tested media configuration's\n  this contains the three Boolean properties supported, smooth,\n  powerefficient, which describe whether decoding the media described\n  be supported, smooth, and powerefficient.\n\n  `mediaCapabilities.decodingInfo(MediaDecodingConfiguration)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities/decodingInfo`"}, encoding-info {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaCapabilities.cljs", :line 25, :column 7, :end-line 25, :end-column 20, :arglists (quote ([this media-encoding-configuration])), :doc "Method.\n\n  The MediaCapabilities.encodingInfo() method, part of the `media.MediaCapabilities`\n  of the Media Capabilities API, returns a promise with the tested\n  configuration's `media.MediaCapabilitiesInfo`; this contains\n  three Boolean properties supported, smooth, and powerefficient,\n  describe how compatible the device is with the type of media.\n\n  `mediaCapabilities.encodingInfo(mediaEncodingConfiguration)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities/encodingInfo`"}, :name media.MediaCapabilities/encoding-info, :variadic false, :file "src/media/MediaCapabilities.cljs", :end-column 20, :method-params ([this media-encoding-configuration]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-encoding-configuration])), :doc "Method.\n\n  The MediaCapabilities.encodingInfo() method, part of the `media.MediaCapabilities`\n  of the Media Capabilities API, returns a promise with the tested\n  configuration's `media.MediaCapabilitiesInfo`; this contains\n  three Boolean properties supported, smooth, and powerefficient,\n  describe how compatible the device is with the type of media.\n\n  `mediaCapabilities.encodingInfo(mediaEncodingConfiguration)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaCapabilities/encodingInfo`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaCapabilities interface of the Media Capabilities API\n  information about the decoding abilities of the device, system\n  browser. The API can be used to query the browser about the decoding\n  of the device based on codecs, profile, resolution, and bitrates.\n  information can be used to serve optimal media streams to the\n  and determine if playback should be smooth and power efficient."}