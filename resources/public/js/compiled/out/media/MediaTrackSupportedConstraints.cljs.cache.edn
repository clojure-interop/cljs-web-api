{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaTrackSupportedConstraints, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {noise-suppression {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 378, :column 7, :end-line 378, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's noiseSuppression\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the noiseSuppression constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `noiseSuppressionSupported = supportedConstraintsDictionary.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression`"}, :name media.MediaTrackSupportedConstraints/noise-suppression, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's noiseSuppression\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the noiseSuppression constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `noiseSuppressionSupported = supportedConstraintsDictionary.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression`"}, channel-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 72, :column 7, :end-line 72, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's channelCount\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the channelCount constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `channelCountConstraintSupported = supportedConstraintsDictionary.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount`"}, :name media.MediaTrackSupportedConstraints/channel-count, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's channelCount\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the channelCount constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `channelCountConstraintSupported = supportedConstraintsDictionary.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount`"}, logical-surface {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 538, :column 7, :end-line 538, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's logicalSurface\n  indicates whether or not the `web.logicalSurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isLogicalSurfaceSupported = supportedConstraints.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/logicalSurface`"}, :name media.MediaTrackSupportedConstraints/logical-surface, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 538, :end-line 538, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's logicalSurface\n  indicates whether or not the `web.logicalSurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isLogicalSurfaceSupported = supportedConstraints.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/logicalSurface`"}, set-facing-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 238, :column 7, :end-line 238, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's facingMode\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the facingMode constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `facingModeConstraintSupported = supportedConstraintsDictionary.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode`"}, :name media.MediaTrackSupportedConstraints/set-facing-mode!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's facingMode\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the facingMode constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `facingModeConstraintSupported = supportedConstraintsDictionary.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 522, :column 7, :end-line 522, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's width\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the width constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `widthConstraintSupported = supportedConstraintsDictionary.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width`"}, :name media.MediaTrackSupportedConstraints/set-width!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 522, :end-line 522, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's width\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the width constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `widthConstraintSupported = supportedConstraintsDictionary.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 314, :column 7, :end-line 314, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's height\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the height constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `heightConstraintSupported = supportedConstraintsDictionary.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height`"}, :name media.MediaTrackSupportedConstraints/height, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's height\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the height constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `heightConstraintSupported = supportedConstraintsDictionary.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height`"}, set-device-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 146, :column 7, :end-line 146, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's deviceId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the deviceId constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `deviceIdConstraintSupported = supportedConstraintsDictionary.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId`"}, :name media.MediaTrackSupportedConstraints/set-device-id!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's deviceId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the deviceId constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `deviceIdConstraintSupported = supportedConstraintsDictionary.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId`"}, set-sample-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 426, :column 7, :end-line 426, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleRate constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleRateConstraintSupported = supportedConstraintsDictionary.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate`"}, :name media.MediaTrackSupportedConstraints/set-sample-rate!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleRate constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleRateConstraintSupported = supportedConstraintsDictionary.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate`"}, aspect-ratio {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's aspectRatio\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the aspectRatio constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `aspectConstraintSupported = supportedConstraintsDictionary.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio`"}, :name media.MediaTrackSupportedConstraints/aspect-ratio, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's aspectRatio\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the aspectRatio constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `aspectConstraintSupported = supportedConstraintsDictionary.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 330, :column 7, :end-line 330, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's height\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the height constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `heightConstraintSupported = supportedConstraintsDictionary.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height`"}, :name media.MediaTrackSupportedConstraints/set-height!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's height\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the height constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `heightConstraintSupported = supportedConstraintsDictionary.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/height`"}, display-surface {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 162, :column 7, :end-line 162, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's displaySurface\n  indicates whether or not the `web.displaySurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isDisplaySurfaceSupported = supportedConstraints.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/displaySurface`"}, :name media.MediaTrackSupportedConstraints/display-surface, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's displaySurface\n  indicates whether or not the `web.displaySurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isDisplaySurfaceSupported = supportedConstraints.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/displaySurface`"}, frame-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 254, :column 7, :end-line 254, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's frameRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the `web.frameRate` constraint.\n\n  `frameRateConstraintSupported = supportedConstraintsDictionary.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate`"}, :name media.MediaTrackSupportedConstraints/frame-rate, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's frameRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the `web.frameRate` constraint.\n\n  `frameRateConstraintSupported = supportedConstraintsDictionary.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate`"}, set-aspect-ratio! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 24, :column 7, :end-line 24, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's aspectRatio\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the aspectRatio constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `aspectConstraintSupported = supportedConstraintsDictionary.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio`"}, :name media.MediaTrackSupportedConstraints/set-aspect-ratio!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's aspectRatio\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the aspectRatio constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `aspectConstraintSupported = supportedConstraintsDictionary.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/aspectRatio`"}, set-echo-cancellation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 206, :column 7, :end-line 206, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's echoCancellation\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the echoCancellation constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `echoCancellationConstraintSupported = supportedConstraintsDictionary.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation`"}, :name media.MediaTrackSupportedConstraints/set-echo-cancellation!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's echoCancellation\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the echoCancellation constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `echoCancellationConstraintSupported = supportedConstraintsDictionary.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation`"}, device-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 130, :column 7, :end-line 130, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's deviceId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the deviceId constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `deviceIdConstraintSupported = supportedConstraintsDictionary.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId`"}, :name media.MediaTrackSupportedConstraints/device-id, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's deviceId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the deviceId constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `deviceIdConstraintSupported = supportedConstraintsDictionary.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/deviceId`"}, set-display-surface! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 176, :column 7, :end-line 176, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's displaySurface\n  indicates whether or not the `web.displaySurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isDisplaySurfaceSupported = supportedConstraints.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/displaySurface`"}, :name media.MediaTrackSupportedConstraints/set-display-surface!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's displaySurface\n  indicates whether or not the `web.displaySurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isDisplaySurfaceSupported = supportedConstraints.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/displaySurface`"}, group-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 282, :column 7, :end-line 282, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's groupId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the groupId constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `groupIdConstraintSupported = supportedConstraintsDictionary.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId`"}, :name media.MediaTrackSupportedConstraints/group-id, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's groupId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the groupId constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `groupIdConstraintSupported = supportedConstraintsDictionary.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId`"}, sample-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 410, :column 7, :end-line 410, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleRate constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleRateConstraintSupported = supportedConstraintsDictionary.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate`"}, :name media.MediaTrackSupportedConstraints/sample-rate, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleRate constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleRateConstraintSupported = supportedConstraintsDictionary.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleRate`"}, set-group-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 298, :column 7, :end-line 298, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's groupId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the groupId constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `groupIdConstraintSupported = supportedConstraintsDictionary.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId`"}, :name media.MediaTrackSupportedConstraints/set-group-id!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's groupId\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the groupId constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `groupIdConstraintSupported = supportedConstraintsDictionary.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/groupId`"}, set-volume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 490, :column 7, :end-line 490, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's volume\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the volume constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `volumeConstraintSupported = supportedConstraintsDictionary.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/volume`"}, :name media.MediaTrackSupportedConstraints/set-volume!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 490, :end-line 490, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's volume\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the volume constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `volumeConstraintSupported = supportedConstraintsDictionary.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/volume`"}, echo-cancellation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 190, :column 7, :end-line 190, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's echoCancellation\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the echoCancellation constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `echoCancellationConstraintSupported = supportedConstraintsDictionary.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation`"}, :name media.MediaTrackSupportedConstraints/echo-cancellation, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's echoCancellation\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the echoCancellation constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `echoCancellationConstraintSupported = supportedConstraintsDictionary.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/echoCancellation`"}, set-cursor! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 117, :column 7, :end-line 117, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's cursor\n  indicates whether or not the `web.cursor` constraint is supported\n  the user agent and the device on which the content is being used.\n\n  `isCursorSupported = supportedConstraints.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/cursor`"}, :name media.MediaTrackSupportedConstraints/set-cursor!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's cursor\n  indicates whether or not the `web.cursor` constraint is supported\n  the user agent and the device on which the content is being used.\n\n  `isCursorSupported = supportedConstraints.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/cursor`"}, set-latency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 362, :column 7, :end-line 362, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's latency\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the latency constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `latencyConstraintSupported = supportedConstraintsDictionary.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency`"}, :name media.MediaTrackSupportedConstraints/set-latency!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's latency\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the latency constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `latencyConstraintSupported = supportedConstraintsDictionary.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency`"}, set-noise-suppression! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 394, :column 7, :end-line 394, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's noiseSuppression\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the noiseSuppression constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `noiseSuppressionSupported = supportedConstraintsDictionary.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression`"}, :name media.MediaTrackSupportedConstraints/set-noise-suppression!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's noiseSuppression\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the noiseSuppression constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `noiseSuppressionSupported = supportedConstraintsDictionary.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/noiseSuppression`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 506, :column 7, :end-line 506, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's width\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the width constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `widthConstraintSupported = supportedConstraintsDictionary.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width`"}, :name media.MediaTrackSupportedConstraints/width, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 506, :end-line 506, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's width\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the width constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `widthConstraintSupported = supportedConstraintsDictionary.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/width`"}, sample-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 442, :column 7, :end-line 442, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleSize\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleSize constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleSizeConstraintSupported = supportedConstraintsDictionary.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize`"}, :name media.MediaTrackSupportedConstraints/sample-size, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleSize\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleSize constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleSizeConstraintSupported = supportedConstraintsDictionary.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize`"}, cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 104, :column 7, :end-line 104, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's cursor\n  indicates whether or not the `web.cursor` constraint is supported\n  the user agent and the device on which the content is being used.\n\n  `isCursorSupported = supportedConstraints.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/cursor`"}, :name media.MediaTrackSupportedConstraints/cursor, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's cursor\n  indicates whether or not the `web.cursor` constraint is supported\n  the user agent and the device on which the content is being used.\n\n  `isCursorSupported = supportedConstraints.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/cursor`"}, volume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 474, :column 7, :end-line 474, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's volume\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the volume constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `volumeConstraintSupported = supportedConstraintsDictionary.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/volume`"}, :name media.MediaTrackSupportedConstraints/volume, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's volume\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the volume constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `volumeConstraintSupported = supportedConstraintsDictionary.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/volume`"}, set-logical-surface! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 552, :column 7, :end-line 552, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's logicalSurface\n  indicates whether or not the `web.logicalSurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isLogicalSurfaceSupported = supportedConstraints.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/logicalSurface`"}, :name media.MediaTrackSupportedConstraints/set-logical-surface!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 552, :end-line 552, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's logicalSurface\n  indicates whether or not the `web.logicalSurface` constraint\n  supported by the user agent and the device on which the content\n  being used.\n\n  `isLogicalSurfaceSupported = supportedConstraints.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/logicalSurface`"}, set-sample-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 458, :column 7, :end-line 458, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleSize\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleSize constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleSizeConstraintSupported = supportedConstraintsDictionary.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize`"}, :name media.MediaTrackSupportedConstraints/set-sample-size!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's sampleSize\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the sampleSize constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `sampleSizeConstraintSupported = supportedConstraintsDictionary.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/sampleSize`"}, set-frame-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 268, :column 7, :end-line 268, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's frameRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the `web.frameRate` constraint.\n\n  `frameRateConstraintSupported = supportedConstraintsDictionary.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate`"}, :name media.MediaTrackSupportedConstraints/set-frame-rate!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's frameRate\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the `web.frameRate` constraint.\n\n  `frameRateConstraintSupported = supportedConstraintsDictionary.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/frameRate`"}, facing-mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 222, :column 7, :end-line 222, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's facingMode\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the facingMode constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `facingModeConstraintSupported = supportedConstraintsDictionary.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode`"}, :name media.MediaTrackSupportedConstraints/facing-mode, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's facingMode\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the facingMode constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `facingModeConstraintSupported = supportedConstraintsDictionary.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/facingMode`"}, set-auto-gain-control! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 56, :column 7, :end-line 56, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's autoGainControl\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the autoGainControl constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `autoGainSupported = supportedConstraintsDictionary.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl`"}, :name media.MediaTrackSupportedConstraints/set-auto-gain-control!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's autoGainControl\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the autoGainControl constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `autoGainSupported = supportedConstraintsDictionary.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl`"}, latency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 346, :column 7, :end-line 346, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's latency\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the latency constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `latencyConstraintSupported = supportedConstraintsDictionary.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency`"}, :name media.MediaTrackSupportedConstraints/latency, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's latency\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the latency constraint. If\n  constraint isn't supported, it's not included in the list, so\n  value will never be false.\n\n  `latencyConstraintSupported = supportedConstraintsDictionary.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/latency`"}, set-channel-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 88, :column 7, :end-line 88, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's channelCount\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the channelCount constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `channelCountConstraintSupported = supportedConstraintsDictionary.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount`"}, :name media.MediaTrackSupportedConstraints/set-channel-count!, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's channelCount\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the channelCount constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `channelCountConstraintSupported = supportedConstraintsDictionary.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/channelCount`"}, auto-gain-control {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSupportedConstraints.cljs", :line 40, :column 7, :end-line 40, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's autoGainControl\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the autoGainControl constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `autoGainSupported = supportedConstraintsDictionary.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl`"}, :name media.MediaTrackSupportedConstraints/auto-gain-control, :variadic false, :file "src/media/MediaTrackSupportedConstraints.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSupportedConstraints` dictionary's autoGainControl\n  is a read-only Boolean value which is present (and set to true)\n  the object returned by `media.MediaDevices.getSupportedConstraints()`\n  and only if the user agent supports the autoGainControl constraint.\n  the constraint isn't supported, it's not included in the list,\n  this value will never be false.\n\n  `autoGainSupported = supportedConstraintsDictionary.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSupportedConstraints/autoGainControl`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaTrackSupportedConstraints dictionary establishes the\n  of constrainable properties recognized by the user agent or browser\n  its implementation of the `media.MediaStreamTrack` object. An\n  conforming to MediaTrackSupportedConstraints is returned by `media.MediaDevices.getSupportedConstraints()`."}