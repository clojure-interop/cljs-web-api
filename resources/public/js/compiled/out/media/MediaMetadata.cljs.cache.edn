{:rename-macros {}, :renames {}, :externs {MediaMetadata {}}, :use-macros {}, :excludes #{}, :name media.MediaMetadata, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-artist! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The artist property of the `media.MediaMetaData` interface returns\n  sets the name of the artist, group, creator, etc., of the media\n  be played.\n\n  `var artist = mediaMetadata.artist\n  mediaMetadata.artist = artist`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist`"}, :name media.MediaMetadata/set-artist!, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The artist property of the `media.MediaMetaData` interface returns\n  sets the name of the artist, group, creator, etc., of the media\n  be played.\n\n  `var artist = mediaMetadata.artist\n  mediaMetadata.artist = artist`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist`"}, album {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The album property of the `media.MediaMetaData` interface returns\n  sets the name of the album or collection containing the media\n  be played.\n\n  `var album = mediaMetaData.album\n  mediaMetaData.album = album`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album`"}, :name media.MediaMetadata/album, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The album property of the `media.MediaMetaData` interface returns\n  sets the name of the album or collection containing the media\n  be played.\n\n  `var album = mediaMetaData.album\n  mediaMetaData.album = album`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album`"}, set-artwork! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 94, :column 7, :end-line 94, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The artwork property of the `media.MediaMetaData` interface returns\n  sets an array of images associated with playing media.\n\n  `var artwork[] = mediaMetadata.artwork\n  mediaMetadata.artwork = artwork[]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artwork`"}, :name media.MediaMetadata/set-artwork!, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The artwork property of the `media.MediaMetaData` interface returns\n  sets an array of images associated with playing media.\n\n  `var artwork[] = mediaMetadata.artwork\n  mediaMetadata.artwork = artwork[]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artwork`"}, set-media-metadata! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 118, :column 7, :end-line 118, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaMetadata() constructor creates a new `media.MediaMetadata`\n\n  `var mediaMetadata = new MediaMetadata([metadata])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata`"}, :name media.MediaMetadata/set-media-metadata!, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaMetadata() constructor creates a new `media.MediaMetadata`\n\n  `var mediaMetadata = new MediaMetadata([metadata])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata`"}, media-metadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 107, :column 7, :end-line 107, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The MediaMetadata() constructor creates a new `media.MediaMetadata`\n\n  `var mediaMetadata = new MediaMetadata([metadata])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata`"}, :name media.MediaMetadata/media-metadata, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaMetadata() constructor creates a new `media.MediaMetadata`\n\n  `var mediaMetadata = new MediaMetadata([metadata])`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata`"}, artwork {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 81, :column 7, :end-line 81, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The artwork property of the `media.MediaMetaData` interface returns\n  sets an array of images associated with playing media.\n\n  `var artwork[] = mediaMetadata.artwork\n  mediaMetadata.artwork = artwork[]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artwork`"}, :name media.MediaMetadata/artwork, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The artwork property of the `media.MediaMetaData` interface returns\n  sets an array of images associated with playing media.\n\n  `var artwork[] = mediaMetadata.artwork\n  mediaMetadata.artwork = artwork[]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artwork`"}, set-title! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 142, :column 7, :end-line 142, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The title property of the `media.MediaMetaData` interface returns\n  sets the title of the media to be played.\n\n  `var title = mediaMetaData.title\n  mediaMetaData.title = title`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title`"}, :name media.MediaMetadata/set-title!, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The title property of the `media.MediaMetaData` interface returns\n  sets the title of the media to be played.\n\n  `var title = mediaMetaData.title\n  mediaMetaData.title = title`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title`"}, artist {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 53, :column 7, :end-line 53, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The artist property of the `media.MediaMetaData` interface returns\n  sets the name of the artist, group, creator, etc., of the media\n  be played.\n\n  `var artist = mediaMetadata.artist\n  mediaMetadata.artist = artist`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist`"}, :name media.MediaMetadata/artist, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The artist property of the `media.MediaMetaData` interface returns\n  sets the name of the artist, group, creator, etc., of the media\n  be played.\n\n  `var artist = mediaMetadata.artist\n  mediaMetadata.artist = artist`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/artist`"}, title {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 129, :column 7, :end-line 129, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The title property of the `media.MediaMetaData` interface returns\n  sets the title of the media to be played.\n\n  `var title = mediaMetaData.title\n  mediaMetaData.title = title`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title`"}, :name media.MediaMetadata/title, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The title property of the `media.MediaMetaData` interface returns\n  sets the title of the media to be played.\n\n  `var title = mediaMetaData.title\n  mediaMetaData.title = title`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/title`"}, set-album! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 39, :column 7, :end-line 39, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The album property of the `media.MediaMetaData` interface returns\n  sets the name of the album or collection containing the media\n  be played.\n\n  `var album = mediaMetaData.album\n  mediaMetaData.album = album`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album`"}, :name media.MediaMetadata/set-album!, :variadic false, :file "src/media/MediaMetadata.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The album property of the `media.MediaMetaData` interface returns\n  sets the name of the album or collection containing the media\n  be played.\n\n  `var album = mediaMetaData.album\n  mediaMetaData.album = album`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/album`"}, constructor {:name media.MediaMetadata/constructor, :file "src/media/MediaMetadata.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaMetadata.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The MediaMetadata() constructor creates a new `media.MediaMetadata` object.\n\n  metadata Optional\n\n\n  \\tThe metadata parameters are as follows:\n\n\n  \\t\\ttitle: The title of the media to be played.\n  \\t\\tartist: The name of the artist, group, creator, etc. of the media to be played.\n  \\t\\talbum: The name of the album, or collection, containing the media to be played.\n  \\t\\tartwork: An array of images associated with the playing media.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaMetadata/MediaMetadata`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaMetadata interface of the the Media Session API provides\n  a web page to provide rich media metadata for display in a platform"}