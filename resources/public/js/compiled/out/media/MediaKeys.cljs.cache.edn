{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaKeys, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {create-session {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeys.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The MediaKeys.createSession() method returns a new `media.MediaKeySession`\n  which represents a context for message exchange with a content\n  module (CDM).\n\n  `​var mediaKeySessionObject = MediaKeys.createSession([MediaKeySessionType]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaKeys/create-session, :variadic true, :file "src/media/MediaKeys.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The MediaKeys.createSession() method returns a new `media.MediaKeySession`\n  which represents a context for message exchange with a content\n  module (CDM).\n\n  `​var mediaKeySessionObject = MediaKeys.createSession([MediaKeySessionType]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/createSession`"}, set-server-certificate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeys.cljs", :line 20, :column 7, :end-line 20, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The MediaKeys.setServerCertificate() method a `web.Promise` to\n  server certificate to be used to encrypt messages to the license\n\n  `MediaKeys.setServerCertificate([MediaKeySessionType]).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaKeys/set-server-certificate, :variadic true, :file "src/media/MediaKeys.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The MediaKeys.setServerCertificate() method a `web.Promise` to\n  server certificate to be used to encrypt messages to the license\n\n  `MediaKeys.setServerCertificate([MediaKeySessionType]).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeys/setServerCertificate`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaKeys interface of EncryptedMediaExtensions API represents\n  set of keys that an associated `html.HTMLMediaElement` can use\n  decryption of media data during playback."}