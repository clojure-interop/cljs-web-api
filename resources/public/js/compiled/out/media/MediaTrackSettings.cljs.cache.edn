{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaTrackSettings, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {noise-suppression {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 389, :column 7, :end-line 389, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's noiseSuppression\n  is a Boolean value whose value indicates whether or not noise\n  technology is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.noiseSuppression`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var noiseSuppression = MediaTrackSettings.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/noiseSuppression`"}, :name media.MediaTrackSettings/noise-suppression, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's noiseSuppression\n  is a Boolean value whose value indicates whether or not noise\n  technology is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.noiseSuppression`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var noiseSuppression = MediaTrackSettings.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/noiseSuppression`"}, channel-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 75, :column 7, :end-line 75, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's channelCount property\n  an integer indicating how many audio channel the `media.MediaStreamTrack`\n  currently configured to have. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.channelCount`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var channelCount = MediaTrackSettings.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount`"}, :name media.MediaTrackSettings/channel-count, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's channelCount property\n  an integer indicating how many audio channel the `media.MediaStreamTrack`\n  currently configured to have. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.channelCount`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var channelCount = MediaTrackSettings.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount`"}, logical-surface {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 551, :column 7, :end-line 551, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's logicalSurface property\n  whether or not the display area being captured is a logical surface.\n  surfaces are those which are not necessarily entirely onscreen,\n  may even be off-screen, such as windows' backing buffers (where\n  part of the buffer is visible without scrolling the containing\n  and offscreen rendering contexts.\n\n  `isLogicalSurface = mediaTrackSettings.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/logicalSurface`"}, :name media.MediaTrackSettings/logical-surface, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 551, :end-line 551, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's logicalSurface property\n  whether or not the display area being captured is a logical surface.\n  surfaces are those which are not necessarily entirely onscreen,\n  may even be off-screen, such as windows' backing buffers (where\n  part of the buffer is visible without scrolling the containing\n  and offscreen rendering contexts.\n\n  `isLogicalSurface = mediaTrackSettings.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/logicalSurface`"}, set-facing-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 240, :column 7, :end-line 240, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's facingMode property\n  a `dom.DOMString` indicating the direction in which the camera\n  the video track represented by the `media.MediaStreamTrack` is\n  facing. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.facingMode` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var facingMode = MediaTrackSettings.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/facingMode`"}, :name media.MediaTrackSettings/set-facing-mode!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's facingMode property\n  a `dom.DOMString` indicating the direction in which the camera\n  the video track represented by the `media.MediaStreamTrack` is\n  facing. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.facingMode` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var facingMode = MediaTrackSettings.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/facingMode`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 535, :column 7, :end-line 535, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's width property is\n  integer indicating the number of pixels wide `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.width` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var width = MediaTrackSettings.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/width`"}, :name media.MediaTrackSettings/set-width!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's width property is\n  integer indicating the number of pixels wide `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.width` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var width = MediaTrackSettings.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/width`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 323, :column 7, :end-line 323, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's height property is\n  integer indicating the number of pixels tall `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.height` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var height = MediaTrackSettings.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/height`"}, :name media.MediaTrackSettings/height, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's height property is\n  integer indicating the number of pixels tall `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.height` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var height = MediaTrackSettings.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/height`"}, set-device-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 150, :column 7, :end-line 150, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's deviceId property\n  a `dom.DOMString` which uniquely identifies the source for the\n  `media.MediaStreamTrack` for the origin corresponding to the\n  session. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.deviceId` property you provided\n  calling either `web.getUserMedia()`.\n\n  `var deviceId = MediaTrackSettings.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/deviceId`"}, :name media.MediaTrackSettings/set-device-id!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's deviceId property\n  a `dom.DOMString` which uniquely identifies the source for the\n  `media.MediaStreamTrack` for the origin corresponding to the\n  session. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.deviceId` property you provided\n  calling either `web.getUserMedia()`.\n\n  `var deviceId = MediaTrackSettings.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/deviceId`"}, set-sample-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 437, :column 7, :end-line 437, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleRate property\n  an integer indicating how many audio samples per second the `media.MediaStreamTrack`\n  currently configured for. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.sampleRate`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleRate = MediaTrackSettings.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleRate`"}, :name media.MediaTrackSettings/set-sample-rate!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleRate property\n  an integer indicating how many audio samples per second the `media.MediaStreamTrack`\n  currently configured for. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.sampleRate`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleRate = MediaTrackSettings.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleRate`"}, aspect-ratio {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 11, :column 7, :end-line 11, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's aspectRatio property\n  a double-precision floating-point number indicating the aspect\n  of the `media.MediaStreamTrack` as currently configured. This\n  you determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.aspectRatio`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var aspectRatio = MediaTrackSettings.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/aspectRatio`"}, :name media.MediaTrackSettings/aspect-ratio, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's aspectRatio property\n  a double-precision floating-point number indicating the aspect\n  of the `media.MediaStreamTrack` as currently configured. This\n  you determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.aspectRatio`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var aspectRatio = MediaTrackSettings.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/aspectRatio`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 339, :column 7, :end-line 339, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's height property is\n  integer indicating the number of pixels tall `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.height` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var height = MediaTrackSettings.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/height`"}, :name media.MediaTrackSettings/set-height!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's height property is\n  integer indicating the number of pixels tall `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.height` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var height = MediaTrackSettings.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/height`"}, display-surface {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 167, :column 7, :end-line 167, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's displaySurface property\n  the type of display surface being captured.\n\n  `displaySurface = mediaTrackSettings.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/displaySurface`"}, :name media.MediaTrackSettings/display-surface, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's displaySurface property\n  the type of display surface being captured.\n\n  `displaySurface = mediaTrackSettings.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/displaySurface`"}, frame-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 257, :column 7, :end-line 257, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's frameRate property\n  a double-precision floating-point number indicating the frame\n  in frames per second, of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.frameRate` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var frameRate = MediaTrackSettings.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/frameRate`"}, :name media.MediaTrackSettings/frame-rate, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's frameRate property\n  a double-precision floating-point number indicating the frame\n  in frames per second, of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.frameRate` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var frameRate = MediaTrackSettings.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/frameRate`"}, set-aspect-ratio! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 27, :column 7, :end-line 27, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's aspectRatio property\n  a double-precision floating-point number indicating the aspect\n  of the `media.MediaStreamTrack` as currently configured. This\n  you determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.aspectRatio`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var aspectRatio = MediaTrackSettings.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/aspectRatio`"}, :name media.MediaTrackSettings/set-aspect-ratio!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's aspectRatio property\n  a double-precision floating-point number indicating the aspect\n  of the `media.MediaStreamTrack` as currently configured. This\n  you determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.aspectRatio`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var aspectRatio = MediaTrackSettings.aspectRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/aspectRatio`"}, set-echo-cancellation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 207, :column 7, :end-line 207, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's echoCancellation\n  is a Boolean value whose value indicates whether or not echo\n  is enabled on an audio track. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.echoCancellation`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var echoCancellation = MediaTrackSettings.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/echoCancellation`"}, :name media.MediaTrackSettings/set-echo-cancellation!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's echoCancellation\n  is a Boolean value whose value indicates whether or not echo\n  is enabled on an audio track. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.echoCancellation`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var echoCancellation = MediaTrackSettings.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/echoCancellation`"}, device-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 133, :column 7, :end-line 133, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's deviceId property\n  a `dom.DOMString` which uniquely identifies the source for the\n  `media.MediaStreamTrack` for the origin corresponding to the\n  session. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.deviceId` property you provided\n  calling either `web.getUserMedia()`.\n\n  `var deviceId = MediaTrackSettings.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/deviceId`"}, :name media.MediaTrackSettings/device-id, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's deviceId property\n  a `dom.DOMString` which uniquely identifies the source for the\n  `media.MediaStreamTrack` for the origin corresponding to the\n  session. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.deviceId` property you provided\n  calling either `web.getUserMedia()`.\n\n  `var deviceId = MediaTrackSettings.deviceId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/deviceId`"}, set-display-surface! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 179, :column 7, :end-line 179, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's displaySurface property\n  the type of display surface being captured.\n\n  `displaySurface = mediaTrackSettings.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/displaySurface`"}, :name media.MediaTrackSettings/set-display-surface!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's displaySurface property\n  the type of display surface being captured.\n\n  `displaySurface = mediaTrackSettings.displaySurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/displaySurface`"}, group-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 291, :column 7, :end-line 291, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's groupId property\n  a browsing-session unique `dom.DOMString` which identifies the\n  of devices which includes the source for the `media.MediaStreamTrack`.\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.groupId`\n  you provided when calling either `web.getUserMedia()`.\n\n  `var groupId = MediaTrackSettings.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/groupId`"}, :name media.MediaTrackSettings/group-id, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's groupId property\n  a browsing-session unique `dom.DOMString` which identifies the\n  of devices which includes the source for the `media.MediaStreamTrack`.\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.groupId`\n  you provided when calling either `web.getUserMedia()`.\n\n  `var groupId = MediaTrackSettings.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/groupId`"}, sample-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 421, :column 7, :end-line 421, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleRate property\n  an integer indicating how many audio samples per second the `media.MediaStreamTrack`\n  currently configured for. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.sampleRate`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleRate = MediaTrackSettings.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleRate`"}, :name media.MediaTrackSettings/sample-rate, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleRate property\n  an integer indicating how many audio samples per second the `media.MediaStreamTrack`\n  currently configured for. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.sampleRate`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleRate = MediaTrackSettings.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleRate`"}, set-group-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 307, :column 7, :end-line 307, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's groupId property\n  a browsing-session unique `dom.DOMString` which identifies the\n  of devices which includes the source for the `media.MediaStreamTrack`.\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.groupId`\n  you provided when calling either `web.getUserMedia()`.\n\n  `var groupId = MediaTrackSettings.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/groupId`"}, :name media.MediaTrackSettings/set-group-id!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's groupId property\n  a browsing-session unique `dom.DOMString` which identifies the\n  of devices which includes the source for the `media.MediaStreamTrack`.\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.groupId`\n  you provided when calling either `web.getUserMedia()`.\n\n  `var groupId = MediaTrackSettings.groupId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/groupId`"}, set-volume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 502, :column 7, :end-line 502, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's volume property is\n  double-precision floating-point number indicating the volume\n  the `media.MediaStreamTrack` as currently configured, as a value\n  0.0 (silence) to 1.0 (maximum supported volume for the device).\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.volume`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var volume = MediaTrackSettings.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/volume`"}, :name media.MediaTrackSettings/set-volume!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 502, :end-line 502, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's volume property is\n  double-precision floating-point number indicating the volume\n  the `media.MediaStreamTrack` as currently configured, as a value\n  0.0 (silence) to 1.0 (maximum supported volume for the device).\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.volume`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var volume = MediaTrackSettings.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/volume`"}, echo-cancellation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 191, :column 7, :end-line 191, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's echoCancellation\n  is a Boolean value whose value indicates whether or not echo\n  is enabled on an audio track. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.echoCancellation`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var echoCancellation = MediaTrackSettings.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/echoCancellation`"}, :name media.MediaTrackSettings/echo-cancellation, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's echoCancellation\n  is a Boolean value whose value indicates whether or not echo\n  is enabled on an audio track. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.echoCancellation`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var echoCancellation = MediaTrackSettings.echoCancellation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/echoCancellation`"}, set-cursor! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 120, :column 7, :end-line 120, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's cursor property indicates\n  or not the cursor should be captured as part of the video track\n  in the `media.MediaStream` returned by `web.getDisplayMedia()`.\n\n  `cursorSetting = mediaTrackSettings.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/cursor`"}, :name media.MediaTrackSettings/set-cursor!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's cursor property indicates\n  or not the cursor should be captured as part of the video track\n  in the `media.MediaStream` returned by `web.getDisplayMedia()`.\n\n  `cursorSetting = mediaTrackSettings.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/cursor`"}, set-latency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 372, :column 7, :end-line 372, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's latency property\n  a double-precision floating-point number indicating the estimated\n  (specified in seconds) of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.latency` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var latency = MediaTrackSettings.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/latency`"}, :name media.MediaTrackSettings/set-latency!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's latency property\n  a double-precision floating-point number indicating the estimated\n  (specified in seconds) of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.latency` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var latency = MediaTrackSettings.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/latency`"}, set-noise-suppression! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 405, :column 7, :end-line 405, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's noiseSuppression\n  is a Boolean value whose value indicates whether or not noise\n  technology is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.noiseSuppression`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var noiseSuppression = MediaTrackSettings.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/noiseSuppression`"}, :name media.MediaTrackSettings/set-noise-suppression!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's noiseSuppression\n  is a Boolean value whose value indicates whether or not noise\n  technology is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.noiseSuppression`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var noiseSuppression = MediaTrackSettings.noiseSuppression;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/noiseSuppression`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 519, :column 7, :end-line 519, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's width property is\n  integer indicating the number of pixels wide `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.width` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var width = MediaTrackSettings.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/width`"}, :name media.MediaTrackSettings/width, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's width property is\n  integer indicating the number of pixels wide `media.MediaStreamTrack`\n  currently configured to be. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.width` property\n  provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var width = MediaTrackSettings.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/width`"}, sample-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 453, :column 7, :end-line 453, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleSize property\n  an integer indicating the linear sample size (in bits per sample)\n  `media.MediaStreamTrack` is currently configured for. This lets\n  determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.sampleSize`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleSize = MediaTrackSettings.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleSize`"}, :name media.MediaTrackSettings/sample-size, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleSize property\n  an integer indicating the linear sample size (in bits per sample)\n  `media.MediaStreamTrack` is currently configured for. This lets\n  determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.sampleSize`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleSize = MediaTrackSettings.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleSize`"}, cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's cursor property indicates\n  or not the cursor should be captured as part of the video track\n  in the `media.MediaStream` returned by `web.getDisplayMedia()`.\n\n  `cursorSetting = mediaTrackSettings.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/cursor`"}, :name media.MediaTrackSettings/cursor, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's cursor property indicates\n  or not the cursor should be captured as part of the video track\n  in the `media.MediaStream` returned by `web.getDisplayMedia()`.\n\n  `cursorSetting = mediaTrackSettings.cursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/cursor`"}, volume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 485, :column 7, :end-line 485, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's volume property is\n  double-precision floating-point number indicating the volume\n  the `media.MediaStreamTrack` as currently configured, as a value\n  0.0 (silence) to 1.0 (maximum supported volume for the device).\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.volume`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var volume = MediaTrackSettings.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/volume`"}, :name media.MediaTrackSettings/volume, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 485, :end-line 485, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's volume property is\n  double-precision floating-point number indicating the volume\n  the `media.MediaStreamTrack` as currently configured, as a value\n  0.0 (silence) to 1.0 (maximum supported volume for the device).\n  lets you determine what value was selected to comply with your\n  constraints for this property's value as described in the `media.MediaTrackConstraints.volume`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var volume = MediaTrackSettings.volume;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/volume`"}, set-logical-surface! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 567, :column 7, :end-line 567, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's logicalSurface property\n  whether or not the display area being captured is a logical surface.\n  surfaces are those which are not necessarily entirely onscreen,\n  may even be off-screen, such as windows' backing buffers (where\n  part of the buffer is visible without scrolling the containing\n  and offscreen rendering contexts.\n\n  `isLogicalSurface = mediaTrackSettings.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/logicalSurface`"}, :name media.MediaTrackSettings/set-logical-surface!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 567, :end-line 567, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's logicalSurface property\n  whether or not the display area being captured is a logical surface.\n  surfaces are those which are not necessarily entirely onscreen,\n  may even be off-screen, such as windows' backing buffers (where\n  part of the buffer is visible without scrolling the containing\n  and offscreen rendering contexts.\n\n  `isLogicalSurface = mediaTrackSettings.logicalSurface;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/logicalSurface`"}, set-sample-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 469, :column 7, :end-line 469, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleSize property\n  an integer indicating the linear sample size (in bits per sample)\n  `media.MediaStreamTrack` is currently configured for. This lets\n  determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.sampleSize`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleSize = MediaTrackSettings.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleSize`"}, :name media.MediaTrackSettings/set-sample-size!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 469, :end-line 469, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's sampleSize property\n  an integer indicating the linear sample size (in bits per sample)\n  `media.MediaStreamTrack` is currently configured for. This lets\n  determine what value was selected to comply with your specified\n  for this property's value as described in the `media.MediaTrackConstraints.sampleSize`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var sampleSize = MediaTrackSettings.sampleSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/sampleSize`"}, set-frame-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 274, :column 7, :end-line 274, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's frameRate property\n  a double-precision floating-point number indicating the frame\n  in frames per second, of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.frameRate` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var frameRate = MediaTrackSettings.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/frameRate`"}, :name media.MediaTrackSettings/set-frame-rate!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's frameRate property\n  a double-precision floating-point number indicating the frame\n  in frames per second, of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.frameRate` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var frameRate = MediaTrackSettings.frameRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/frameRate`"}, facing-mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 223, :column 7, :end-line 223, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's facingMode property\n  a `dom.DOMString` indicating the direction in which the camera\n  the video track represented by the `media.MediaStreamTrack` is\n  facing. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.facingMode` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var facingMode = MediaTrackSettings.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/facingMode`"}, :name media.MediaTrackSettings/facing-mode, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's facingMode property\n  a `dom.DOMString` indicating the direction in which the camera\n  the video track represented by the `media.MediaStreamTrack` is\n  facing. This lets you determine what value was selected to comply\n  your specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.facingMode` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var facingMode = MediaTrackSettings.facingMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/facingMode`"}, set-auto-gain-control! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 59, :column 7, :end-line 59, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's autoGainControl property\n  a Boolean value whose value indicates whether or not automatic\n  control (AGC) is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.autoGainControl`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var autoGainControl = MediaTrackSettings.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/autoGainControl`"}, :name media.MediaTrackSettings/set-auto-gain-control!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's autoGainControl property\n  a Boolean value whose value indicates whether or not automatic\n  control (AGC) is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.autoGainControl`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var autoGainControl = MediaTrackSettings.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/autoGainControl`"}, latency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 355, :column 7, :end-line 355, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's latency property\n  a double-precision floating-point number indicating the estimated\n  (specified in seconds) of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.latency` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var latency = MediaTrackSettings.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/latency`"}, :name media.MediaTrackSettings/latency, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's latency property\n  a double-precision floating-point number indicating the estimated\n  (specified in seconds) of the `media.MediaStreamTrack` as currently\n  This lets you determine what value was selected to comply with\n  specified constraints for this property's value as described\n  the `media.MediaTrackConstraints.latency` property you provided\n  calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var latency = MediaTrackSettings.latency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/latency`"}, set-channel-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 91, :column 7, :end-line 91, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's channelCount property\n  an integer indicating how many audio channel the `media.MediaStreamTrack`\n  currently configured to have. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.channelCount`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var channelCount = MediaTrackSettings.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount`"}, :name media.MediaTrackSettings/set-channel-count!, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's channelCount property\n  an integer indicating how many audio channel the `media.MediaStreamTrack`\n  currently configured to have. This lets you determine what value\n  selected to comply with your specified constraints for this property's\n  as described in the `media.MediaTrackConstraints.channelCount`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var channelCount = MediaTrackSettings.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/channelCount`"}, auto-gain-control {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaTrackSettings.cljs", :line 43, :column 7, :end-line 43, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's autoGainControl property\n  a Boolean value whose value indicates whether or not automatic\n  control (AGC) is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.autoGainControl`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var autoGainControl = MediaTrackSettings.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/autoGainControl`"}, :name media.MediaTrackSettings/auto-gain-control, :variadic false, :file "src/media/MediaTrackSettings.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaTrackSettings` dictionary's autoGainControl property\n  a Boolean value whose value indicates whether or not automatic\n  control (AGC) is enabled on an audio track. This lets you determine\n  value was selected to comply with your specified constraints\n  this property's value as described in the `media.MediaTrackConstraints.autoGainControl`\n  you provided when calling either `web.getUserMedia()` or `media.MediaStreamTrack.applyConstraints()`.\n\n  `var autoGainControl = MediaTrackSettings.autoGainControl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaTrackSettings/autoGainControl`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaTrackSettings dictionary is used to return the current\n  configured for each of a `media.MediaStreamTrack`'s settings.\n  values will adhere as closely as possible to any constraints\n  described using a `media.MediaTrackConstraints` object and set\n  `web.applyConstraints()`, and will adhere to the default constraints\n  any properties whose constraints haven't been changed, or whose\n  constraints couldn't be matched."}