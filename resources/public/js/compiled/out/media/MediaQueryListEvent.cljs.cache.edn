{:rename-macros {}, :renames {}, :externs {MediaQueryListEvent {}}, :use-macros {}, :excludes #{}, :name media.MediaQueryListEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name media.MediaQueryListEvent/constructor, :file "src/media/MediaQueryListEvent.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryListEvent.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The MediaQueryListEvent constructor creates a new MediaQueryListEvent instance.\n\n  init\n\n\n  An init object that defines features of the new object instance. The available properties are:\n\n\n  media: A `dom.DOMString` representing a serialized media query.\n  matches: A `web.Boolean` representing the media query status — true if it matches, false if not.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/MediaQueryListEvent`", :tag js}, matches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryListEvent.cljs", :line 25, :column 7, :end-line 25, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryListEvent`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryListEvent.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches`"}, :name media.MediaQueryListEvent/matches, :variadic false, :file "src/media/MediaQueryListEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryListEvent`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryListEvent.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches`"}, set-matches! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryListEvent.cljs", :line 38, :column 7, :end-line 38, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryListEvent`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryListEvent.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches`"}, :name media.MediaQueryListEvent/set-matches!, :variadic false, :file "src/media/MediaQueryListEvent.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryListEvent`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryListEvent.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/matches`"}, media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryListEvent.cljs", :line 51, :column 7, :end-line 51, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryListEvent`\n  is a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryListEvent.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media`"}, :name media.MediaQueryListEvent/media, :variadic false, :file "src/media/MediaQueryListEvent.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryListEvent`\n  is a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryListEvent.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media`"}, set-media! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryListEvent.cljs", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryListEvent`\n  is a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryListEvent.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media`"}, :name media.MediaQueryListEvent/set-media!, :variadic false, :file "src/media/MediaQueryListEvent.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryListEvent`\n  is a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryListEvent.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryListEvent/media`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaQueryListEvent object stores information on the changes\n  have happened to a `media.MediaQueryList` object — instances\n  available as the event object on a function referenced by a `media.MediaQueryList.onchange`\n  or `media.MediaQueryList.addListener()` call."}