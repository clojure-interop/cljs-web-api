{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{clone}, :name media.MediaStreamTrack, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 94, :column 7, :end-line 94, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The enabled property on the `media.MediaStreamTrack` interface\n  a Boolean value which is true if the track is allowed to render\n  source stream or false if it is not. This can be used to intentionally\n  a track.\n\n  `var bool = track.enabled;\n  track.enabled = [true | false];`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled`"}, :name media.MediaStreamTrack/enabled, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The enabled property on the `media.MediaStreamTrack` interface\n  a Boolean value which is true if the track is allowed to render\n  source stream or false if it is not. This can be used to intentionally\n  a track.\n\n  `var bool = track.enabled;\n  track.enabled = [true | false];`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled`"}, onunmute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 274, :column 7, :end-line 274, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onunmute event handler is called when\n  unmute event is received. Such an event is sent when the track\n  again able to send data.\n\n  `track.onunmute = unmuteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute`"}, :name media.MediaStreamTrack/onunmute, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onunmute event handler is called when\n  unmute event is received. Such an event is sent when the track\n  again able to send data.\n\n  `track.onunmute = unmuteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute`"}, remote {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 312, :column 7, :end-line 312, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.remote read-only property allows Javascript\n  know whether a WebRTC MediaStreamTrack is from a remote source\n  a local one. It returns a `web.Boolean` with a value of true\n  the track is sourced remotely (that is, sourced by an RTCPeerConnection),\n  false if it is sourced locally.\n\n  `var bool ​= track.remote;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/remote`"}, :name media.MediaStreamTrack/remote, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.remote read-only property allows Javascript\n  know whether a WebRTC MediaStreamTrack is from a remote source\n  a local one. It returns a `web.Boolean` with a value of true\n  the track is sourced remotely (that is, sourced by an RTCPeerConnection),\n  false if it is sourced locally.\n\n  `var bool ​= track.remote;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/remote`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 300, :column 7, :end-line 300, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.readyState returns an\n  value giving the status of the track.\n\n  `var state = track.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState`"}, :name media.MediaStreamTrack/ready-state, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.readyState returns an\n  value giving the status of the track.\n\n  `var state = track.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/readyState`"}, onoverconstrained {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 248, :column 7, :end-line 248, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.onoverconstrained event handler is a property\n  when the overconstrained event is received. Such an event is\n  when the track is again able to send data.\n\n  `track.onoverconstrained = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onoverconstrained`"}, :name media.MediaStreamTrack/onoverconstrained, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.onoverconstrained event handler is a property\n  when the overconstrained event is received. Such an event is\n  when the track is again able to send data.\n\n  `track.onoverconstrained = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onoverconstrained`"}, set-onunmute! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 287, :column 7, :end-line 287, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onunmute event handler is called when\n  unmute event is received. Such an event is sent when the track\n  again able to send data.\n\n  `track.onunmute = unmuteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute`"}, :name media.MediaStreamTrack/set-onunmute!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onunmute event handler is called when\n  unmute event is received. Such an event is sent when the track\n  again able to send data.\n\n  `track.onunmute = unmuteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onunmute`"}, muted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 166, :column 7, :end-line 166, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The muted read-only property of the `media.MediaStreamTrack`\n  returns a `web.Boolean` value indicating whether or not the track\n  currently unable to provide media output.\n\n  `mutedFlag = MediaStreamTrack.muted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted`"}, :name media.MediaStreamTrack/muted, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The muted read-only property of the `media.MediaStreamTrack`\n  returns a `web.Boolean` value indicating whether or not the track\n  currently unable to provide media output.\n\n  `mutedFlag = MediaStreamTrack.muted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted`"}, set-onoverconstrained! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 261, :column 7, :end-line 261, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStreamTrack.onoverconstrained event handler is a property\n  when the overconstrained event is received. Such an event is\n  when the track is again able to send data.\n\n  `track.onoverconstrained = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onoverconstrained`"}, :name media.MediaStreamTrack/set-onoverconstrained!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStreamTrack.onoverconstrained event handler is a property\n  when the overconstrained event is received. Such an event is\n  when the track is again able to send data.\n\n  `track.onoverconstrained = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onoverconstrained`"}, get-settings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The getSettings() method of the `media.MediaStreamTrack` interface\n  a `media.MediaTrackSettings` object containing the current values\n  each of the constrainable properties for the current MediaStreamTrack.\n\n  `var settings = MediaStreamTrack.getSettings();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings`"}, :name media.MediaStreamTrack/get-settings, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getSettings() method of the `media.MediaStreamTrack` interface\n  a `media.MediaTrackSettings` object containing the current values\n  each of the constrainable properties for the current MediaStreamTrack.\n\n  `var settings = MediaStreamTrack.getSettings();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getSettings`"}, onmute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onmute event handler is called when\n  mute event is received.\n\n  `track.onmute = muteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute`"}, :name media.MediaStreamTrack/onmute, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onmute event handler is called when\n  mute event is received.\n\n  `track.onmute = muteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute`"}, get-constraints {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 49, :column 7, :end-line 49, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The getConstraints() method of the `media.MediaStreamTrack` interface\n  a `media.MediaTrackConstraints` object containing the set of\n  most recently established for the track using a prior call to\n  These constraints indicate values and ranges of values that the\n  site or application has specified are required or acceptable\n  the included constrainable properties.\n\n  `var constraints = MediaStreamTrack.getConstraints();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints`"}, :name media.MediaStreamTrack/get-constraints, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getConstraints() method of the `media.MediaStreamTrack` interface\n  a `media.MediaTrackConstraints` object containing the set of\n  most recently established for the track using a prior call to\n  These constraints indicate values and ranges of values that the\n  site or application has specified are required or acceptable\n  the included constrainable properties.\n\n  `var constraints = MediaStreamTrack.getConstraints();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getConstraints`"}, onended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 192, :column 7, :end-line 192, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.onended event handler is used to specify\n  function which serves as an `web.EventHandler` to be called when\n  ended event occurs on the track. This event occurs when the track\n  no longer provide data to the stream for any reason, including\n  end of the media input being reached, the user revoking needed\n  the source device being removed, or the remote peer ending a\n\n  `MediaStreamTrack.onended = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended`"}, :name media.MediaStreamTrack/onended, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStreamTrack.onended event handler is used to specify\n  function which serves as an `web.EventHandler` to be called when\n  ended event occurs on the track. This event occurs when the track\n  no longer provide data to the stream for any reason, including\n  end of the media input being reached, the user revoking needed\n  the source device being removed, or the remote peer ending a\n\n  `MediaStreamTrack.onended = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended`"}, set-onmute! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 236, :column 7, :end-line 236, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onmute event handler is called when\n  mute event is received.\n\n  `track.onmute = muteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute`"}, :name media.MediaStreamTrack/set-onmute!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  `media.MediaStreamTrack`'s onmute event handler is called when\n  mute event is received.\n\n  `track.onmute = muteHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onmute`"}, set-enabled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 109, :column 7, :end-line 109, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The enabled property on the `media.MediaStreamTrack` interface\n  a Boolean value which is true if the track is allowed to render\n  source stream or false if it is not. This can be used to intentionally\n  a track.\n\n  `var bool = track.enabled;\n  track.enabled = [true | false];`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled`"}, :name media.MediaStreamTrack/set-enabled!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The enabled property on the `media.MediaStreamTrack` interface\n  a Boolean value which is true if the track is allowed to render\n  source stream or false if it is not. This can be used to intentionally\n  a track.\n\n  `var bool = track.enabled;\n  track.enabled = [true | false];`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/enabled`"}, apply-constraints {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 7, :column 7, :end-line 7, :end-column 24, :arglists (quote ([this constraints])), :doc "Method.\n\n  The applyConstraints() method of the `media.MediaStreamTrack`\n  applies a set of constraints to the track; these constraints\n  the Web site or app establish ideal values and acceptable ranges\n  values for the constrainable properties of the track, such as\n  rate, dimensions, echo cancelation, and so forth.\n\n  `var appliedPromise = MediaStreamTrack.applyConstraints(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints`"}, :name media.MediaStreamTrack/apply-constraints, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 24, :method-params ([this constraints]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this constraints])), :doc "Method.\n\n  The applyConstraints() method of the `media.MediaStreamTrack`\n  applies a set of constraints to the track; these constraints\n  the Web site or app establish ideal values and acceptable ranges\n  values for the constrainable properties of the track, such as\n  rate, dimensions, echo cancelation, and so forth.\n\n  `var appliedPromise = MediaStreamTrack.applyConstraints(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/applyConstraints`"}, get-capabilities {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 35, :column 7, :end-line 35, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The getCapabilities() method of the `media.MediaStreamTrack`\n  returns a `media.MediaTrackCapabilities` object which specifies\n  values or range of values which each constrianable property,\n  upon the platform and user agent.\n\n  `var capabilities = MediaStreamTrack.getCapabilities();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities`"}, :name media.MediaStreamTrack/get-capabilities, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getCapabilities() method of the `media.MediaStreamTrack`\n  returns a `media.MediaTrackCapabilities` object which specifies\n  values or range of values which each constrianable property,\n  upon the platform and user agent.\n\n  `var capabilities = MediaStreamTrack.getCapabilities();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/getCapabilities`"}, stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 78, :column 7, :end-line 78, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  In short, the `media.MediaStreamTrack` method stop() method stops\n  track.\n\n  `MediaStreamTrack.stop();\n\n  Calling stop() tells the user agent that the track's source—whatever that source may be, including files, network streams, or a local camera or microphone—is no longer needed by the MediaStreamTrack.  Since multiple tracks may use the same source (for example, if two tabs are using the device's microphone), the source itself isn't necessarily immediately stopped. It is instead disassociated from the track and the track object is stopped. Once no media tracks are using the source, the source may actually be completely stopped.\n\n  Immediately after calling stop(), the `web.track` state is set to ended.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name media.MediaStreamTrack/stop, :variadic true, :file "src/media/MediaStreamTrack.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  In short, the `media.MediaStreamTrack` method stop() method stops\n  track.\n\n  `MediaStreamTrack.stop();\n\n  Calling stop() tells the user agent that the track's source—whatever that source may be, including files, network streams, or a local camera or microphone—is no longer needed by the MediaStreamTrack.  Since multiple tracks may use the same source (for example, if two tabs are using the device's microphone), the source itself isn't necessarily immediately stopped. It is instead disassociated from the track and the track object is stopped. Once no media tracks are using the source, the source may actually be completely stopped.\n\n  Immediately after calling stop(), the `web.track` state is set to ended.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/stop`"}, set-muted! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 179, :column 7, :end-line 179, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The muted read-only property of the `media.MediaStreamTrack`\n  returns a `web.Boolean` value indicating whether or not the track\n  currently unable to provide media output.\n\n  `mutedFlag = MediaStreamTrack.muted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted`"}, :name media.MediaStreamTrack/set-muted!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The muted read-only property of the `media.MediaStreamTrack`\n  returns a `web.Boolean` value indicating whether or not the track\n  currently unable to provide media output.\n\n  `mutedFlag = MediaStreamTrack.muted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/muted`"}, label {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 151, :column 7, :end-line 151, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.label returns a `dom.DOMString`\n  a user agent-assigned label that identifies the track source,\n  in \\\"internal microphone\\\". The string may be left empty and\n  empty as long as no source has been connected. When the track\n  deassociated from its source, the label is not changed.\n\n  `var name = track.label;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label`"}, :name media.MediaStreamTrack/label, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.label returns a `dom.DOMString`\n  a user agent-assigned label that identifies the track source,\n  in \\\"internal microphone\\\". The string may be left empty and\n  empty as long as no source has been connected. When the track\n  deassociated from its source, the label is not changed.\n\n  `var name = track.label;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/label`"}, id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 124, :column 7, :end-line 124, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.id returns a `dom.DOMString`\n  a unique identifier (GUID) for the track; it is generated by\n  browser.\n\n  `var id = track.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id`"}, :name media.MediaStreamTrack/id, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.id returns a `dom.DOMString`\n  a unique identifier (GUID) for the track; it is generated by\n  browser.\n\n  `var id = track.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/id`"}, clone {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `media.MediaStreamTrack` interface\n  a duplicate of the MediaStreamTrack. This new MediaStreamTrack\n  is identical except for its unique `web.id`.\n\n  `var track = MediaStreamTrack.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone`"}, :name media.MediaStreamTrack/clone, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `media.MediaStreamTrack` interface\n  a duplicate of the MediaStreamTrack. This new MediaStreamTrack\n  is identical except for its unique `web.id`.\n\n  `var track = MediaStreamTrack.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/clone`"}, kind {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 137, :column 7, :end-line 137, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.kind returns a `dom.DOMString`\n  to \\\"audio\\\" if the track is an audio track and to \\\"video\\\",\n  it is a video track. It doesn't change if the track is deassociated\n  its source.\n\n  `var type = track.kind;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind`"}, :name media.MediaStreamTrack/kind, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamTrack.kind returns a `dom.DOMString`\n  to \\\"audio\\\" if the track is an audio track and to \\\"video\\\",\n  it is a video track. It doesn't change if the track is deassociated\n  its source.\n\n  `var type = track.kind;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/kind`"}, set-onended! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamTrack.cljs", :line 208, :column 7, :end-line 208, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStreamTrack.onended event handler is used to specify\n  function which serves as an `web.EventHandler` to be called when\n  ended event occurs on the track. This event occurs when the track\n  no longer provide data to the stream for any reason, including\n  end of the media input being reached, the user revoking needed\n  the source device being removed, or the remote peer ending a\n\n  `MediaStreamTrack.onended = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended`"}, :name media.MediaStreamTrack/set-onended!, :variadic false, :file "src/media/MediaStreamTrack.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStreamTrack.onended event handler is used to specify\n  function which serves as an `web.EventHandler` to be called when\n  ended event occurs on the track. This event occurs when the track\n  no longer provide data to the stream for any reason, including\n  end of the media input being reached, the user revoking needed\n  the source device being removed, or the remote peer ending a\n\n  `MediaStreamTrack.onended = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamTrack/onended`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaStreamTrack interface represents a single media track\n  a stream; typically, these are audio or video tracks, but other\n  types may exist as well."}