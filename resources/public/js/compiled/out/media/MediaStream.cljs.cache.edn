{:rename-macros {}, :renames {}, :externs {MediaStream {}}, :use-macros {}, :excludes #{clone}, :name media.MediaStream, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 72, :column 7, :end-line 72, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The getTracks() method of the `media.MediaStream` interface returns\n  sequence that represents all the `media.MediaStreamTrack` objects\n  this stream's track set, regardless of `media.MediaStreamTrack.kind`.\n\n  `var mediaStreamTracks = mediaStream.getTracks()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTracks`"}, :name media.MediaStream/get-tracks, :variadic false, :file "src/media/MediaStream.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getTracks() method of the `media.MediaStream` interface returns\n  sequence that represents all the `media.MediaStreamTrack` objects\n  this stream's track set, regardless of `media.MediaStreamTrack.kind`.\n\n  `var mediaStreamTracks = mediaStream.getTracks()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTracks`"}, onaddtrack {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 168, :column 7, :end-line 168, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.onaddtrack property is an `web.EventHandler`\n  specifies a function to be called when the addtrack event occurs\n  a `media.MediaStream` instance. This happens when a new track\n  any kind is added to the media stream.\n\n  `MediaStream.onaddtrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack`"}, :name media.MediaStream/onaddtrack, :variadic false, :file "src/media/MediaStream.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.onaddtrack property is an `web.EventHandler`\n  specifies a function to be called when the addtrack event occurs\n  a `media.MediaStream` instance. This happens when a new track\n  any kind is added to the media stream.\n\n  `MediaStream.onaddtrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack`"}, get-track-by-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 59, :column 7, :end-line 59, :end-column 22, :arglists (quote ([this id])), :doc "Method.\n\n  The MediaStream.getTrackById() method returns a `media.MediaStreamTrack`\n  representing the track with the specified ID string. If there\n  no track with the specified ID, this method returns null.\n\n  `var track = MediaStream.getTrackById(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTrackById`"}, :name media.MediaStream/get-track-by-id, :variadic false, :file "src/media/MediaStream.cljs", :end-column 22, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc "Method.\n\n  The MediaStream.getTrackById() method returns a `media.MediaStreamTrack`\n  representing the track with the specified ID string. If there\n  no track with the specified ID, this method returns null.\n\n  `var track = MediaStream.getTrackById(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getTrackById`"}, get-video-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 85, :column 7, :end-line 85, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The getVideoTracks() method of the `media.MediaStream` interface\n  a sequence of `media.MediaStreamTrack` objects representing the\n  tracks in this stream.\n\n  `var mediaStreamTracks[] = mediaStream.getVideoTracks();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks`"}, :name media.MediaStream/get-video-tracks, :variadic false, :file "src/media/MediaStream.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getVideoTracks() method of the `media.MediaStream` interface\n  a sequence of `media.MediaStreamTrack` objects representing the\n  tracks in this stream.\n\n  `var mediaStreamTracks[] = mediaStream.getVideoTracks();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getVideoTracks`"}, set-ended! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 142, :column 7, :end-line 142, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The ended read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream has been completely\n  or false if the end of the stream has not been reached. This\n  once the ended event has been fired.\n\n  `var hasEnded = MediaStream.ended;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/ended`"}, :name media.MediaStream/set-ended!, :variadic false, :file "src/media/MediaStream.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ended read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream has been completely\n  or false if the end of the stream has not been reached. This\n  once the ended event has been fired.\n\n  `var hasEnded = MediaStream.ended;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/ended`"}, ended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 128, :column 7, :end-line 128, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The ended read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream has been completely\n  or false if the end of the stream has not been reached. This\n  once the ended event has been fired.\n\n  `var hasEnded = MediaStream.ended;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/ended`"}, :name media.MediaStream/ended, :variadic false, :file "src/media/MediaStream.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ended read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream has been completely\n  or false if the end of the stream has not been reached. This\n  once the ended event has been fired.\n\n  `var hasEnded = MediaStream.ended;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/ended`"}, set-onremovetrack! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 210, :column 7, :end-line 210, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStream.onremovetrack property is an `web.EventHandler`\n  specifies a function to be called when the removetrack event\n  on a `media.MediaStream` instance. This happens when a track\n  any kind is removed from the media stream.\n\n  `MediaStream.onremovetrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack`"}, :name media.MediaStream/set-onremovetrack!, :variadic false, :file "src/media/MediaStream.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStream.onremovetrack property is an `web.EventHandler`\n  specifies a function to be called when the removetrack event\n  on a `media.MediaStream` instance. This happens when a track\n  any kind is removed from the media stream.\n\n  `MediaStream.onremovetrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack`"}, add-track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 20, :column 7, :end-line 20, :end-column 16, :arglists (quote ([this track])), :doc "Method.\n\n  The MediaStream.addTrack() method adds a new track to the stream.\n  track is specified as a parameter of type `media.MediaStreamTrack`.\n\n  `stream.addTrack(track);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack`"}, :name media.MediaStream/add-track, :variadic false, :file "src/media/MediaStream.cljs", :end-column 16, :method-params ([this track]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this track])), :doc "Method.\n\n  The MediaStream.addTrack() method adds a new track to the stream.\n  track is specified as a parameter of type `media.MediaStreamTrack`.\n\n  `stream.addTrack(track);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/addTrack`"}, get-audio-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 46, :column 7, :end-line 46, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The getAudioTracks() method of the `media.MediaStream` interface\n  a sequence that represents all the `media.MediaStreamTrack` objects\n  this stream's track set where `media.MediaStreamTrack.kind` is\n\n  `var mediaStreamTracks = mediaStream.getAudioTracks()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getAudioTracks`"}, :name media.MediaStream/get-audio-tracks, :variadic false, :file "src/media/MediaStream.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getAudioTracks() method of the `media.MediaStream` interface\n  a sequence that represents all the `media.MediaStreamTrack` objects\n  this stream's track set where `media.MediaStreamTrack.kind` is\n\n  `var mediaStreamTracks = mediaStream.getAudioTracks()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/getAudioTracks`"}, set-active! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 113, :column 7, :end-line 113, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The active read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream is currently active;\n  it returns false. A stream is considered active if at least one\n  its `media.MediaStreamTrack`s is not in the `media.MediaStreamTrack.ended`\n  Once every track has ended, the stream's active property becomes\n\n  `var isActive = MediaStream.active;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active`"}, :name media.MediaStream/set-active!, :variadic false, :file "src/media/MediaStream.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The active read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream is currently active;\n  it returns false. A stream is considered active if at least one\n  its `media.MediaStreamTrack`s is not in the `media.MediaStreamTrack.ended`\n  Once every track has ended, the stream's active property becomes\n\n  `var isActive = MediaStream.active;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active`"}, active {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 98, :column 7, :end-line 98, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The active read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream is currently active;\n  it returns false. A stream is considered active if at least one\n  its `media.MediaStreamTrack`s is not in the `media.MediaStreamTrack.ended`\n  Once every track has ended, the stream's active property becomes\n\n  `var isActive = MediaStream.active;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active`"}, :name media.MediaStream/active, :variadic false, :file "src/media/MediaStream.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The active read-only property of the `media.MediaStream` interface\n  a Boolean value which is true if the stream is currently active;\n  it returns false. A stream is considered active if at least one\n  its `media.MediaStreamTrack`s is not in the `media.MediaStreamTrack.ended`\n  Once every track has ended, the stream's active property becomes\n\n  `var isActive = MediaStream.active;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/active`"}, id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 156, :column 7, :end-line 156, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.id() read-only property is a `dom.DOMString`\n  36 characters denoting a unique identifier (GUID) for the object.\n\n  `var id = mediaStream.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/id`"}, :name media.MediaStream/id, :variadic false, :file "src/media/MediaStream.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.id() read-only property is a `dom.DOMString`\n  36 characters denoting a unique identifier (GUID) for the object.\n\n  `var id = mediaStream.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/id`"}, clone {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 32, :column 7, :end-line 32, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `media.MediaStream` interface creates\n  duplicate of the MediaStream. This new MediaStream object has\n  new unique `web.id` and contains clones of every `media.MediaStreamTrack`\n  by the MediaStream on which clone() was called.\n\n  `var stream = MediaStream.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/clone`"}, :name media.MediaStream/clone, :variadic false, :file "src/media/MediaStream.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `media.MediaStream` interface creates\n  duplicate of the MediaStream. This new MediaStream object has\n  new unique `web.id` and contains clones of every `media.MediaStreamTrack`\n  by the MediaStream on which clone() was called.\n\n  `var stream = MediaStream.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/clone`"}, constructor {:name media.MediaStream/constructor, :file "src/media/MediaStream.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The MediaStream() constructor returns a newly-created `media.MediaStream`, which serves as a collection of media tracks, each represented by a `media.MediaStreamTrack` object.\n\n  stream\n  A different `media.MediaStream` object whose tracks are added to the newly-created stream automatically. The tracks are not removed from the original stream, so they're shared by the two streams.\n  tracks\n  An `web.Array` of `media.MediaStreamTrack` objects, one for each track to add to the stream.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/MediaStream`", :tag js}, onremovetrack {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 196, :column 7, :end-line 196, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.onremovetrack property is an `web.EventHandler`\n  specifies a function to be called when the removetrack event\n  on a `media.MediaStream` instance. This happens when a track\n  any kind is removed from the media stream.\n\n  `MediaStream.onremovetrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack`"}, :name media.MediaStream/onremovetrack, :variadic false, :file "src/media/MediaStream.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 196, :end-line 196, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaStream.onremovetrack property is an `web.EventHandler`\n  specifies a function to be called when the removetrack event\n  on a `media.MediaStream` instance. This happens when a track\n  any kind is removed from the media stream.\n\n  `MediaStream.onremovetrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onremovetrack`"}, set-onaddtrack! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStream.cljs", :line 182, :column 7, :end-line 182, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStream.onaddtrack property is an `web.EventHandler`\n  specifies a function to be called when the addtrack event occurs\n  a `media.MediaStream` instance. This happens when a new track\n  any kind is added to the media stream.\n\n  `MediaStream.onaddtrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack`"}, :name media.MediaStream/set-onaddtrack!, :variadic false, :file "src/media/MediaStream.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaStream.onaddtrack property is an `web.EventHandler`\n  specifies a function to be called when the addtrack event occurs\n  a `media.MediaStream` instance. This happens when a new track\n  any kind is added to the media stream.\n\n  `MediaStream.onaddtrack = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStream/onaddtrack`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaStream interface represents a stream of media content.\n  stream consists of several tracks such as video or audio tracks.\n  track is specified as an instance of `media.MediaStreamTrack`."}