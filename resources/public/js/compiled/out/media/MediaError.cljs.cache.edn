{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaError, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {code {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaError.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaError.code returns a numeric value\n  represents the kind of error that occurred on a media element.\n  get a text string with specific diagnostic information, see `media.MediaError.message`.\n\n  `var myError = mediaError.code;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code`"}, :name media.MediaError/code, :variadic false, :file "src/media/MediaError.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaError.code returns a numeric value\n  represents the kind of error that occurred on a media element.\n  get a text string with specific diagnostic information, see `media.MediaError.message`.\n\n  `var myError = mediaError.code;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/code`"}, message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaError.cljs", :line 20, :column 7, :end-line 20, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaError.message returns a `dom.DOMString`\n  contains a human-readable string offering specific diagnostic\n  related to the error described by the MediaError object, or an\n  string (\\\"\\\") if no diagnostic information can be determined\n  provided.\n\n  `var errorMessage = mediaError.message;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message`"}, :name media.MediaError/message, :variadic false, :file "src/media/MediaError.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaError.message returns a `dom.DOMString`\n  contains a human-readable string offering specific diagnostic\n  related to the error described by the MediaError object, or an\n  string (\\\"\\\") if no diagnostic information can be determined\n  provided.\n\n  `var errorMessage = mediaError.message;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message`"}, set-message! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaError.cljs", :line 35, :column 7, :end-line 35, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only property MediaError.message returns a `dom.DOMString`\n  contains a human-readable string offering specific diagnostic\n  related to the error described by the MediaError object, or an\n  string (\\\"\\\") if no diagnostic information can be determined\n  provided.\n\n  `var errorMessage = mediaError.message;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message`"}, :name media.MediaError/set-message!, :variadic false, :file "src/media/MediaError.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only property MediaError.message returns a `dom.DOMString`\n  contains a human-readable string offering specific diagnostic\n  related to the error described by the MediaError object, or an\n  string (\\\"\\\") if no diagnostic information can be determined\n  provided.\n\n  `var errorMessage = mediaError.message;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaError/message`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaError interface represents an error which occurred while\n  media in an HTML media element based on `html.HTMLMediaElement`,\n  as `web.<audio>` or `web.<video>`."}