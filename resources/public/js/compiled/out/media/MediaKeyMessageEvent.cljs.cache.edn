{:rename-macros {}, :renames {}, :externs {MediaKeyMessageEvent {}}, :use-macros {}, :excludes #{}, :name media.MediaKeyMessageEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name media.MediaKeyMessageEvent/constructor, :file "src/media/MediaKeyMessageEvent.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeyMessageEvent.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The MediaKeyMessageEvent constructor creates a new `media.MediaKeyMessageEvent` object which creates a new instance of MediaKeyMessageEvent.\n\n  typeArg\n  A `dom.DOMString` containing one of May be one of license-request, license-renewal, license-renewal, or individualization-request.\n  options\n  Options are as follows:\n\n  messageType: A developer-defined message type that allows applications to differentiate messages without parsing them.\n  message: An array containing the message generated by the content decryption module.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/MediaKeyMessageEvent`", :tag js}, message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeyMessageEvent.cljs", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeyMessageEvent.message read-only property returns an\n  with a message from the content decryption module. Messages vary\n  key system.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message`"}, :name media.MediaKeyMessageEvent/message, :variadic false, :file "src/media/MediaKeyMessageEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeyMessageEvent.message read-only property returns an\n  with a message from the content decryption module. Messages vary\n  key system.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message`"}, set-message! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeyMessageEvent.cljs", :line 36, :column 7, :end-line 36, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeyMessageEvent.message read-only property returns an\n  with a message from the content decryption module. Messages vary\n  key system.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message`"}, :name media.MediaKeyMessageEvent/set-message!, :variadic false, :file "src/media/MediaKeyMessageEvent.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeyMessageEvent.message read-only property returns an\n  with a message from the content decryption module. Messages vary\n  key system.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/message`"}, message-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeyMessageEvent.cljs", :line 49, :column 7, :end-line 49, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeyMessageEvent.messageType read-only property indicates\n  type of message. It may be one of license-request, license-renewal,\n  or individualization-request.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType`"}, :name media.MediaKeyMessageEvent/message-type, :variadic false, :file "src/media/MediaKeyMessageEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaKeyMessageEvent.messageType read-only property indicates\n  type of message. It may be one of license-request, license-renewal,\n  or individualization-request.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType`"}, set-message-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaKeyMessageEvent.cljs", :line 62, :column 7, :end-line 62, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeyMessageEvent.messageType read-only property indicates\n  type of message. It may be one of license-request, license-renewal,\n  or individualization-request.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType`"}, :name media.MediaKeyMessageEvent/set-message-type!, :variadic false, :file "src/media/MediaKeyMessageEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaKeyMessageEvent.messageType read-only property indicates\n  type of message. It may be one of license-request, license-renewal,\n  or individualization-request.\n\n  `var messageType = mediaKeyMessageEvent.messageType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaKeyMessageEvent/messageType`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaKeyMessageEvent interface of the EncryptedMediaExtensions\n  contains the content and related data when the content decryption\n  generates a message for the session."}