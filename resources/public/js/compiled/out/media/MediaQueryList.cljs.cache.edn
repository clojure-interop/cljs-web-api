{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaQueryList, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {add-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 7, :column 7, :end-line 7, :end-column 19, :arglists (quote ([this func])), :doc "Method.\n\n  The addListener() method of the `media.MediaQueryList` interface\n  a listener to the MediaQueryListener that will run a custom callback\n  in response to the media query status changing.\n\n  `MediaQueryList.addListener(func)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener`"}, :name media.MediaQueryList/add-listener, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 19, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc "Method.\n\n  The addListener() method of the `media.MediaQueryList` interface\n  a listener to the MediaQueryListener that will run a custom callback\n  in response to the media query status changing.\n\n  `MediaQueryList.addListener(func)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/addListener`"}, remove-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 20, :column 7, :end-line 20, :end-column 22, :arglists (quote ([this func])), :doc "Method.\n\n  The removeListener() method of the `media.MediaQueryList` interface\n  a listener from the MediaQueryListener.\n\n  `MediaQueryList.removeListener(func)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener`"}, :name media.MediaQueryList/remove-listener, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 22, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc "Method.\n\n  The removeListener() method of the `media.MediaQueryList` interface\n  a listener from the MediaQueryListener.\n\n  `MediaQueryList.removeListener(func)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/removeListener`"}, matches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 32, :column 7, :end-line 32, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryList`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryList.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches`"}, :name media.MediaQueryList/matches, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryList`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryList.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches`"}, set-matches! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 45, :column 7, :end-line 45, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryList`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryList.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches`"}, :name media.MediaQueryList/set-matches!, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The matches read-only property of the `media.MediaQueryList`\n  is a `web.Boolean` that returns true if the `web.document` currently\n  the media query list, or false if not.\n\n  `var matches = MediaQueryList.matches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/matches`"}, media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 58, :column 7, :end-line 58, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryList` interface\n  a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryList.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media`"}, :name media.MediaQueryList/media, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryList` interface\n  a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryList.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media`"}, set-media! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 70, :column 7, :end-line 70, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryList` interface\n  a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryList.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media`"}, :name media.MediaQueryList/set-media!, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The media read-only property of the `media.MediaQueryList` interface\n  a `dom.DOMString` representing a serialized media query.\n\n  `var media = MediaQueryList.media;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/media`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 82, :column 7, :end-line 82, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `media.MediaQueryList` interface\n  an event handler property representing a function that is invoked\n  the change event fires, i.e when the status of media query support\n  The event object is a `media.MediaQueryListEvent` instance, which\n  recognised as a MediaListQuery instance in older browsers, for\n  compatibility purposes.\n\n  `MediaQueryList.onchange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange`"}, :name media.MediaQueryList/onchange, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `media.MediaQueryList` interface\n  an event handler property representing a function that is invoked\n  the change event fires, i.e when the status of media query support\n  The event object is a `media.MediaQueryListEvent` instance, which\n  recognised as a MediaListQuery instance in older browsers, for\n  compatibility purposes.\n\n  `MediaQueryList.onchange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange`"}, set-onchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaQueryList.cljs", :line 98, :column 7, :end-line 98, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `media.MediaQueryList` interface\n  an event handler property representing a function that is invoked\n  the change event fires, i.e when the status of media query support\n  The event object is a `media.MediaQueryListEvent` instance, which\n  recognised as a MediaListQuery instance in older browsers, for\n  compatibility purposes.\n\n  `MediaQueryList.onchange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange`"}, :name media.MediaQueryList/set-onchange!, :variadic false, :file "src/media/MediaQueryList.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `media.MediaQueryList` interface\n  an event handler property representing a function that is invoked\n  the change event fires, i.e when the status of media query support\n  The event object is a `media.MediaQueryListEvent` instance, which\n  recognised as a MediaListQuery instance in older browsers, for\n  compatibility purposes.\n\n  `MediaQueryList.onchange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/onchange`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A MediaQueryList object stores information on a media query applied\n  a document, with support for both immediate and event-driven\n  against the state of the document."}