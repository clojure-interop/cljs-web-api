{:rename-macros {}, :renames {}, :externs {MediaRecorder {}}, :use-macros {}, :excludes #{}, :name media.MediaRecorder, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 250, :column 7, :end-line 250, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onpause event handler (part of the MediaRecorder\n  handles the pause event, allowing you to run code in response\n  the media recording being paused.\n\n  `MediaRecorder.onpause = function(event) { ... }\n  MediaRecorder.addEventListener('pause', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause`"}, :name media.MediaRecorder/onpause, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onpause event handler (part of the MediaRecorder\n  handles the pause event, allowing you to run code in response\n  the media recording being paused.\n\n  `MediaRecorder.onpause = function(event) { ... }\n  MediaRecorder.addEventListener('pause', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause`"}, set-audio-bits-per-second! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 118, :column 7, :end-line 118, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The audioBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the audio encoding bit rate in use.\n\n  `var audioBitsPerSecond = MediaRecorder.audioBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond`"}, :name media.MediaRecorder/set-audio-bits-per-second!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The audioBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the audio encoding bit rate in use.\n\n  `var audioBitsPerSecond = MediaRecorder.audioBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond`"}, set-onwarning! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 377, :column 7, :end-line 377, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onwarning event handler (part of the MediaRecorder\n  handles the recordingwarning event, allowing you to run code\n  response to non-fatal errors being thrown during media recording\n  a MediaRecorder, which don't halt recording.\n\n  `MediaRecorder.onwarning = function(event) { ... }\n  MediaRecorder.addEventListener('warning', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning`"}, :name media.MediaRecorder/set-onwarning!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onwarning event handler (part of the MediaRecorder\n  handles the recordingwarning event, allowing you to run code\n  response to non-fatal errors being thrown during media recording\n  a MediaRecorder, which don't halt recording.\n\n  `MediaRecorder.onwarning = function(event) { ... }\n  MediaRecorder.addEventListener('warning', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning`"}, resume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 70, :column 7, :end-line 70, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.resume() method (part of the MediaRecorder\n  is used to resume media recording when it has been previously\n\n  `MediaRecorder.resume()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume`"}, :name media.MediaRecorder/resume, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.resume() method (part of the MediaRecorder\n  is used to resume media recording when it has been previously\n\n  `MediaRecorder.resume()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/resume`"}, onresume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 278, :column 7, :end-line 278, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onresume event handler (part of the MediaRecorder\n  handles the resume event, allowing you to run code in response\n  the media recording being resumed after pausing.\n\n  `MediaRecorder.onresume = function(event) { ... }\n  MediaRecorder.addEventListener('resume', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume`"}, :name media.MediaRecorder/onresume, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onresume event handler (part of the MediaRecorder\n  handles the resume event, allowing you to run code in response\n  the media recording being resumed after pausing.\n\n  `MediaRecorder.onresume = function(event) { ... }\n  MediaRecorder.addEventListener('resume', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume`"}, set-onresume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 292, :column 7, :end-line 292, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onresume event handler (part of the MediaRecorder\n  handles the resume event, allowing you to run code in response\n  the media recording being resumed after pausing.\n\n  `MediaRecorder.onresume = function(event) { ... }\n  MediaRecorder.addEventListener('resume', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume`"}, :name media.MediaRecorder/set-onresume!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onresume event handler (part of the MediaRecorder\n  handles the resume event, allowing you to run code in response\n  the media recording being resumed after pausing.\n\n  `MediaRecorder.onresume = function(event) { ... }\n  MediaRecorder.addEventListener('resume', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onresume`"}, set-ignore-muted-media! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 144, :column 7, :end-line 144, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ignoreMutedMedia property of the `media.MediaRecorder` interface\n  whether the MediaRecorder instance will record input, when the\n  MediaStreamTrack is muted.\n\n  `var boolean = MediaRecorder.ignoreMutedMedia\n  MediaRecorder.ignoreMutedMedia = boolean`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ignoreMutedMedia`"}, :name media.MediaRecorder/set-ignore-muted-media!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ignoreMutedMedia property of the `media.MediaRecorder` interface\n  whether the MediaRecorder instance will record input, when the\n  MediaStreamTrack is muted.\n\n  `var boolean = MediaRecorder.ignoreMutedMedia\n  MediaRecorder.ignoreMutedMedia = boolean`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ignoreMutedMedia`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 236, :column 7, :end-line 236, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaRecorder` interface's onerror event handler is\n  by the MediaStream Recording API when an error occurs. You can\n  an event handler to deal with errors that occur while creating\n  using a media recorder\n\n  `MediaRecorder.onerror = errorHandlerFunction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror`"}, :name media.MediaRecorder/set-onerror!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `media.MediaRecorder` interface's onerror event handler is\n  by the MediaStream Recording API when an error occurs. You can\n  an event handler to deal with errors that occur while creating\n  using a media recorder\n\n  `MediaRecorder.onerror = errorHandlerFunction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror`"}, set-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 404, :column 7, :end-line 404, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.state read-only property returns the current\n  of the current MediaRecorder object.\n\n  `var state = MediaRecorder.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state`"}, :name media.MediaRecorder/set-state!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 404, :end-line 404, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.state read-only property returns the current\n  of the current MediaRecorder object.\n\n  `var state = MediaRecorder.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state`"}, set-onpause! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 264, :column 7, :end-line 264, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onpause event handler (part of the MediaRecorder\n  handles the pause event, allowing you to run code in response\n  the media recording being paused.\n\n  `MediaRecorder.onpause = function(event) { ... }\n  MediaRecorder.addEventListener('pause', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause`"}, :name media.MediaRecorder/set-onpause!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onpause event handler (part of the MediaRecorder\n  handles the pause event, allowing you to run code in response\n  the media recording being paused.\n\n  `MediaRecorder.onpause = function(event) { ... }\n  MediaRecorder.addEventListener('pause', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onpause`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 222, :column 7, :end-line 222, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaRecorder` interface's onerror event handler is\n  by the MediaStream Recording API when an error occurs. You can\n  an event handler to deal with errors that occur while creating\n  using a media recorder\n\n  `MediaRecorder.onerror = errorHandlerFunction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror`"}, :name media.MediaRecorder/onerror, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `media.MediaRecorder` interface's onerror event handler is\n  by the MediaStream Recording API when an error occurs. You can\n  an event handler to deal with errors that occur while creating\n  using a media recorder\n\n  `MediaRecorder.onerror = errorHandlerFunction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onerror`"}, request-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.requestData() method (part of the MediaRecorder\n  is used to raise a `web.dataavailable` event containing a `web.Blob`\n  of the captured media as it was when the method was called.\n\n  `MediaRecorder.requestData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData`"}, :name media.MediaRecorder/request-data, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.requestData() method (part of the MediaRecorder\n  is used to raise a `web.dataavailable` event containing a `web.Blob`\n  of the captured media as it was when the method was called.\n\n  `MediaRecorder.requestData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/requestData`"}, ignore-muted-media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 130, :column 7, :end-line 130, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The ignoreMutedMedia property of the `media.MediaRecorder` interface\n  whether the MediaRecorder instance will record input, when the\n  MediaStreamTrack is muted.\n\n  `var boolean = MediaRecorder.ignoreMutedMedia\n  MediaRecorder.ignoreMutedMedia = boolean`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ignoreMutedMedia`"}, :name media.MediaRecorder/ignore-muted-media, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ignoreMutedMedia property of the `media.MediaRecorder` interface\n  whether the MediaRecorder instance will record input, when the\n  MediaStreamTrack is muted.\n\n  `var boolean = MediaRecorder.ignoreMutedMedia\n  MediaRecorder.ignoreMutedMedia = boolean`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ignoreMutedMedia`"}, set-ondataavailable! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 208, :column 7, :end-line 208, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.ondataavailable event handler (part of the\n  Recording API) handles the dataavailable event, letting you run\n  in response to `web.Blob` data being made available for use.\n\n  `MediaRecorder.ondataavailable = function(event) { ... }\n  MediaRecorder.addEventListener('dataavailable', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable`"}, :name media.MediaRecorder/set-ondataavailable!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.ondataavailable event handler (part of the\n  Recording API) handles the dataavailable event, letting you run\n  in response to `web.Blob` data being made available for use.\n\n  `MediaRecorder.ondataavailable = function(event) { ... }\n  MediaRecorder.addEventListener('dataavailable', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable`"}, mime-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 158, :column 7, :end-line 158, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.mimeType read-only property returns the MIME\n  that is being used as the recording container when it was created.\n  is the file format of the file that would result from writing\n  of the recorded data to disk. Keep in mind, of course, that the\n  format and the codecs associated with the individual tracks are\n  things entirely; writing tracks that work just fine in a WebM\n  into an MP4 wrapper may not result in a file that plays everywhere\n  want it to.\n\n  `var mimeType = MediaRecorder.mimeType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType`"}, :name media.MediaRecorder/mime-type, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.mimeType read-only property returns the MIME\n  that is being used as the recording container when it was created.\n  is the file format of the file that would result from writing\n  of the recorded data to disk. Keep in mind, of course, that the\n  format and the codecs associated with the individual tracks are\n  things entirely; writing tracks that work just fine in a WebM\n  into an MP4 wrapper may not result in a file that plays everywhere\n  want it to.\n\n  `var mimeType = MediaRecorder.mimeType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType`"}, is-type-supported {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 33, :column 7, :end-line 33, :end-column 24, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The MediaRecorder.isTypeSupported() method returns a Boolean\n  is true if the MIME type specified is one the user agent can\n\n  `var canRecord = MediaRecorder.isTypeSupported(mimeType)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported`"}, :name media.MediaRecorder/is-type-supported, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 24, :method-params ([this mime-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The MediaRecorder.isTypeSupported() method returns a Boolean\n  is true if the MIME type specified is one the user agent can\n\n  `var canRecord = MediaRecorder.isTypeSupported(mimeType)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported`"}, video-bits-per-second {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 442, :column 7, :end-line 442, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The videoBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the video encoding bit rate in use.\n\n  `var videoBitsPerSecond = MediaRecorder.videoBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond`"}, :name media.MediaRecorder/video-bits-per-second, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The videoBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the video encoding bit rate in use.\n\n  `var videoBitsPerSecond = MediaRecorder.videoBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond`"}, audio-bits-per-second {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 106, :column 7, :end-line 106, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The audioBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the audio encoding bit rate in use.\n\n  `var audioBitsPerSecond = MediaRecorder.audioBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond`"}, :name media.MediaRecorder/audio-bits-per-second, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The audioBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the audio encoding bit rate in use.\n\n  `var audioBitsPerSecond = MediaRecorder.audioBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/audioBitsPerSecond`"}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 82, :column 7, :end-line 82, :end-column 12, :arglists (quote ([this timeslice])), :doc "Method.\n\n  The `media.MediaRecorder` method start(), which is part of the\n  Recording API, begins recording media into one or more `web.Blob`\n\n  `MediaRecorder.start(timeslice)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start`"}, :name media.MediaRecorder/start, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 12, :method-params ([this timeslice]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this timeslice])), :doc "Method.\n\n  The `media.MediaRecorder` method start(), which is part of the\n  Recording API, begins recording media into one or more `web.Blob`\n\n  `MediaRecorder.start(timeslice)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/start`"}, onwarning {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 362, :column 7, :end-line 362, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onwarning event handler (part of the MediaRecorder\n  handles the recordingwarning event, allowing you to run code\n  response to non-fatal errors being thrown during media recording\n  a MediaRecorder, which don't halt recording.\n\n  `MediaRecorder.onwarning = function(event) { ... }\n  MediaRecorder.addEventListener('warning', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning`"}, :name media.MediaRecorder/onwarning, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onwarning event handler (part of the MediaRecorder\n  handles the recordingwarning event, allowing you to run code\n  response to non-fatal errors being thrown during media recording\n  a MediaRecorder, which don't halt recording.\n\n  `MediaRecorder.onwarning = function(event) { ... }\n  MediaRecorder.addEventListener('warning', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onwarning`"}, state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 392, :column 7, :end-line 392, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.state read-only property returns the current\n  of the current MediaRecorder object.\n\n  `var state = MediaRecorder.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state`"}, :name media.MediaRecorder/state, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.state read-only property returns the current\n  of the current MediaRecorder object.\n\n  `var state = MediaRecorder.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/state`"}, set-onstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 320, :column 7, :end-line 320, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onstartevent handler (part of the MediaRecorder\n  handles the start event, allowing you to run code in response\n  media recording being started by a MediaRecorder.\n\n  `MediaRecorder.onstart = function(event) { ... }\n  MediaRecorder.addEventListener('start', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart`"}, :name media.MediaRecorder/set-onstart!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onstartevent handler (part of the MediaRecorder\n  handles the start event, allowing you to run code in response\n  media recording being started by a MediaRecorder.\n\n  `MediaRecorder.onstart = function(event) { ... }\n  MediaRecorder.addEventListener('start', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart`"}, stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 416, :column 7, :end-line 416, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.stream read-only property returns the stream\n  was passed into the MediaRecorder() constructor when the MediaRecorder\n  created.\n\n  `var stream = MediaRecorder.stream`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream`"}, :name media.MediaRecorder/stream, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.stream read-only property returns the stream\n  was passed into the MediaRecorder() constructor when the MediaRecorder\n  created.\n\n  `var stream = MediaRecorder.stream`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream`"}, set-mime-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 176, :column 7, :end-line 176, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.mimeType read-only property returns the MIME\n  that is being used as the recording container when it was created.\n  is the file format of the file that would result from writing\n  of the recorded data to disk. Keep in mind, of course, that the\n  format and the codecs associated with the individual tracks are\n  things entirely; writing tracks that work just fine in a WebM\n  into an MP4 wrapper may not result in a file that plays everywhere\n  want it to.\n\n  `var mimeType = MediaRecorder.mimeType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType`"}, :name media.MediaRecorder/set-mime-type!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.mimeType read-only property returns the MIME\n  that is being used as the recording container when it was created.\n  is the file format of the file that would result from writing\n  of the recorded data to disk. Keep in mind, of course, that the\n  format and the codecs associated with the individual tracks are\n  things entirely; writing tracks that work just fine in a WebM\n  into an MP4 wrapper may not result in a file that plays everywhere\n  want it to.\n\n  `var mimeType = MediaRecorder.mimeType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/mimeType`"}, set-stream! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 429, :column 7, :end-line 429, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.stream read-only property returns the stream\n  was passed into the MediaRecorder() constructor when the MediaRecorder\n  created.\n\n  `var stream = MediaRecorder.stream`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream`"}, :name media.MediaRecorder/set-stream!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.stream read-only property returns the stream\n  was passed into the MediaRecorder() constructor when the MediaRecorder\n  created.\n\n  `var stream = MediaRecorder.stream`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stream`"}, stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 94, :column 7, :end-line 94, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.stop() method (part of the MediaRecorder API)\n  used to stop media capture.\n\n  `MediaRecorder.stop()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop`"}, :name media.MediaRecorder/stop, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The MediaRecorder.stop() method (part of the MediaRecorder API)\n  used to stop media capture.\n\n  `MediaRecorder.stop()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/stop`"}, onstop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 334, :column 7, :end-line 334, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onstop event handler (part of the MediaRecorder\n  handles the stop event, allowing you to run code in response\n  media recording via a MediaRecorder being stopped.\n\n  `MediaRecorder.onstop = function(event) { ... }\n  MediaRecorder.addEventListener('stop', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop`"}, :name media.MediaRecorder/onstop, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onstop event handler (part of the MediaRecorder\n  handles the stop event, allowing you to run code in response\n  media recording via a MediaRecorder being stopped.\n\n  `MediaRecorder.onstop = function(event) { ... }\n  MediaRecorder.addEventListener('stop', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop`"}, set-video-bits-per-second! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 454, :column 7, :end-line 454, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The videoBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the video encoding bit rate in use.\n\n  `var videoBitsPerSecond = MediaRecorder.videoBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond`"}, :name media.MediaRecorder/set-video-bits-per-second!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 454, :end-line 454, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The videoBitsPerSecond read-only property of the `media.MediaRecorder`\n  returns the video encoding bit rate in use.\n\n  `var videoBitsPerSecond = MediaRecorder.videoBitsPerSecond`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/videoBitsPerSecond`"}, onstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 306, :column 7, :end-line 306, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onstartevent handler (part of the MediaRecorder\n  handles the start event, allowing you to run code in response\n  media recording being started by a MediaRecorder.\n\n  `MediaRecorder.onstart = function(event) { ... }\n  MediaRecorder.addEventListener('start', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart`"}, :name media.MediaRecorder/onstart, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.onstartevent handler (part of the MediaRecorder\n  handles the start event, allowing you to run code in response\n  media recording being started by a MediaRecorder.\n\n  `MediaRecorder.onstart = function(event) { ... }\n  MediaRecorder.addEventListener('start', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstart`"}, constructor {:name media.MediaRecorder/constructor, :file "src/media/MediaRecorder.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The MediaRecorder() constructor creates a new `media.MediaRecorder` object that will record a specified `media.MediaStream`.\n\n  stream\n  The `media.MediaStream` that will be recorded. This source media can come from a stream created using `web.navigator.mediaDevices.getUserMedia()` or from an `web.<audio>`, `web.<video>` or `web.<canvas>` element.\n\n  options Optional\n\n\n  A dictionary object that can contain the following properties:\n\n\n  mimeType: The MIME type you want to use as the recording container for the new MediaRecorder. This field may simply specify the container format (allowing the browser to choose its preferred codecs) or may include the codec and/or profile options to use. Applications can check in advance if this mimeType is supported by the user agent by calling `media.MediaRecorder.isTypeSupported()`.\n  audioBitsPerSecond: The chosen bitrate for the audio component of the media.\n  videoBitsPerSecond: The chosen bitrate for the video component of the media.\n  bitsPerSecond: The chosen bitrate for the audio and video components of the media. This can be specified instead of the above two properties. If this is specified along with one or the other of the above properties, this will be used for the one that isn't specified.\n\n\n\n  If bits per second values are not specified for video and/or audio, the default adopted for video is 2.5Mbps, while the audio default is adaptive, depending upon the sample rate and the number of channels.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder`", :tag js}, ondataavailable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 194, :column 7, :end-line 194, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.ondataavailable event handler (part of the\n  Recording API) handles the dataavailable event, letting you run\n  in response to `web.Blob` data being made available for use.\n\n  `MediaRecorder.ondataavailable = function(event) { ... }\n  MediaRecorder.addEventListener('dataavailable', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable`"}, :name media.MediaRecorder/ondataavailable, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaRecorder.ondataavailable event handler (part of the\n  Recording API) handles the dataavailable event, letting you run\n  in response to `web.Blob` data being made available for use.\n\n  `MediaRecorder.ondataavailable = function(event) { ... }\n  MediaRecorder.addEventListener('dataavailable', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/ondataavailable`"}, pause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 45, :column 7, :end-line 45, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The Media.pause() method (part of the MediaRecorder API) is used\n  pause recording of media streams.\n\n  `MediaRecorder.pause()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause`"}, :name media.MediaRecorder/pause, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Media.pause() method (part of the MediaRecorder API) is used\n  pause recording of media streams.\n\n  `MediaRecorder.pause()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/pause`"}, set-onstop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaRecorder.cljs", :line 348, :column 7, :end-line 348, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onstop event handler (part of the MediaRecorder\n  handles the stop event, allowing you to run code in response\n  media recording via a MediaRecorder being stopped.\n\n  `MediaRecorder.onstop = function(event) { ... }\n  MediaRecorder.addEventListener('stop', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop`"}, :name media.MediaRecorder/set-onstop!, :variadic false, :file "src/media/MediaRecorder.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaRecorder.onstop event handler (part of the MediaRecorder\n  handles the stop event, allowing you to run code in response\n  media recording via a MediaRecorder being stopped.\n\n  `MediaRecorder.onstop = function(event) { ... }\n  MediaRecorder.addEventListener('stop', function(event) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/onstop`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaRecorder interface of the MediaStream Recording API\n  functionality to easily record media. It is created using the\n  constructor."}