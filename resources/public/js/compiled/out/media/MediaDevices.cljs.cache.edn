{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name media.MediaDevices, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {enumerate-devices {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 8, :column 7, :end-line 8, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The `media.MediaDevices` method enumerateDevices() requests a\n  of the available media input and output devices, such as microphones,\n  headsets, and so forth.\n\n  `var enumeratorPromise = navigator.mediaDevices.enumerateDevices();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices`"}, :name media.MediaDevices/enumerate-devices, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `media.MediaDevices` method enumerateDevices() requests a\n  of the available media input and output devices, such as microphones,\n  headsets, and so forth.\n\n  `var enumeratorPromise = navigator.mediaDevices.enumerateDevices();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices`"}, get-display-media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 21, :column 7, :end-line 21, :end-column 24, :arglists (quote ([this constraints])), :doc "Method.\n\n  The `media.MediaDevices` interface's getDisplayMedia() method\n  the user to select and grant permission to capture the contents\n  a display or portion thereof (such as a window) as a `media.MediaStream`.\n\n  `var promise = navigator.mediaDevices.getDisplayMedia(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia`"}, :name media.MediaDevices/get-display-media, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 24, :method-params ([this constraints]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this constraints])), :doc "Method.\n\n  The `media.MediaDevices` interface's getDisplayMedia() method\n  the user to select and grant permission to capture the contents\n  a display or portion thereof (such as a window) as a `media.MediaStream`.\n\n  `var promise = navigator.mediaDevices.getDisplayMedia(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia`"}, get-supported-constraints {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 34, :column 7, :end-line 34, :end-column 32, :arglists (quote ([this])), :doc "Method.\n\n  The getSupportedConstraints() method of the `media.MediaDevices`\n  returns an object based on the `media.MediaTrackSupportedConstraints`\n  whose member fields each specify one of the constrainable properties\n  user agent understands.\n\n  `var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getSupportedConstraints`"}, :name media.MediaDevices/get-supported-constraints, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getSupportedConstraints() method of the `media.MediaDevices`\n  returns an object based on the `media.MediaTrackSupportedConstraints`\n  whose member fields each specify one of the constrainable properties\n  user agent understands.\n\n  `var supportedConstraints = navigator.mediaDevices.getSupportedConstraints();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getSupportedConstraints`"}, get-user-media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 48, :column 7, :end-line 48, :end-column 21, :arglists (quote ([this constraints])), :doc "Method.\n\n  The `media.MediaDevices`.getUserMedia() method prompts the user\n  permission to use a media input which produces a `media.MediaStream`\n  tracks containing the requested types of media.\n\n  `var promise = navigator.mediaDevices.getUserMedia(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia`"}, :name media.MediaDevices/get-user-media, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 21, :method-params ([this constraints]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this constraints])), :doc "Method.\n\n  The `media.MediaDevices`.getUserMedia() method prompts the user\n  permission to use a media input which produces a `media.MediaStream`\n  tracks containing the requested types of media.\n\n  `var promise = navigator.mediaDevices.getUserMedia(constraints);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia`"}, ondevicechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 61, :column 7, :end-line 61, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The MediaDevices.ondevicechange property is an `web.EventHandler`\n  specifies a function to be called when the devicechange event\n  on a `media.MediaDevices` instance. This happens whenever the\n  of media devices available to the user agent and, by extension,\n  the web site or app has changed. You can at any time use `web.enumerateDevices()`\n  get the updated list of available devices.\n\n  `MediaDevices.ondevicechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/ondevicechange`"}, :name media.MediaDevices/ondevicechange, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The MediaDevices.ondevicechange property is an `web.EventHandler`\n  specifies a function to be called when the devicechange event\n  on a `media.MediaDevices` instance. This happens whenever the\n  of media devices available to the user agent and, by extension,\n  the web site or app has changed. You can at any time use `web.enumerateDevices()`\n  get the updated list of available devices.\n\n  `MediaDevices.ondevicechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/ondevicechange`"}, set-ondevicechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaDevices.cljs", :line 77, :column 7, :end-line 77, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaDevices.ondevicechange property is an `web.EventHandler`\n  specifies a function to be called when the devicechange event\n  on a `media.MediaDevices` instance. This happens whenever the\n  of media devices available to the user agent and, by extension,\n  the web site or app has changed. You can at any time use `web.enumerateDevices()`\n  get the updated list of available devices.\n\n  `MediaDevices.ondevicechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/ondevicechange`"}, :name media.MediaDevices/set-ondevicechange!, :variadic false, :file "src/media/MediaDevices.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The MediaDevices.ondevicechange property is an `web.EventHandler`\n  specifies a function to be called when the devicechange event\n  on a `media.MediaDevices` instance. This happens whenever the\n  of media devices available to the user agent and, by extension,\n  the web site or app has changed. You can at any time use `web.enumerateDevices()`\n  get the updated list of available devices.\n\n  `MediaDevices.ondevicechange = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/ondevicechange`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaDevices interface provides access to connected media\n  devices like cameras and microphones, as well as screen sharing.\n  essence, it lets you obtain access to any hardware source of\n  data."}