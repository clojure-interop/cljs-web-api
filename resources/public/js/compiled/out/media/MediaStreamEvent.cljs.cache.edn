{:rename-macros {}, :renames {}, :externs {MediaStreamEvent {}}, :use-macros {}, :excludes #{}, :name media.MediaStreamEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name media.MediaStreamEvent/constructor, :file "src/media/MediaStreamEvent.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamEvent.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The MediaStreamEvent() constructor creates a new `media.MediaStreamEvent`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/MediaStreamEvent`", :tag js}, stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaStreamEvent.cljs", :line 15, :column 7, :end-line 15, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamEvent.stream returns the `media.MediaStream`\n  with the event.\n\n  `var stream = event.stream;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/stream`"}, :name media.MediaStreamEvent/stream, :variadic false, :file "src/media/MediaStreamEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only property MediaStreamEvent.stream returns the `media.MediaStream`\n  with the event.\n\n  `var stream = event.stream;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaStreamEvent/stream`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaStreamEvent interface represents events that occurs\n  relation to a `media.MediaStream`. Two events of this type can\n  thrown: addstream and removestream."}