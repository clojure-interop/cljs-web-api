{:rename-macros {}, :renames {}, :externs {MediaSource {}}, :use-macros {}, :excludes #{}, :name media.MediaSource, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-source-buffers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 192, :column 7, :end-line 192, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The sourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing the list of\n  objects associated with this MediaSource.\n\n  `var mySourceBuffers = mediaSource.sourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers`"}, :name media.MediaSource/set-source-buffers!, :variadic false, :file "src/media/MediaSource.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The sourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing the list of\n  objects associated with this MediaSource.\n\n  `var mySourceBuffers = mediaSource.sourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers`"}, set-live-seekable-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 83, :column 7, :end-line 83, :end-column 30, :arglists (quote ([this start end])), :doc "Method.\n\n  The setLiveSeekableRange() method of the `media.MediaSource`\n  sets the range that the user can seek to in the media element.\n\n  `mediaSource.setLiveSeekableRange(start, end)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange`"}, :name media.MediaSource/set-live-seekable-range, :variadic false, :file "src/media/MediaSource.cljs", :end-column 30, :method-params ([this start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this start end])), :doc "Method.\n\n  The setLiveSeekableRange() method of the `media.MediaSource`\n  sets the range that the user can seek to in the media element.\n\n  `mediaSource.setLiveSeekableRange(start, end)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/setLiveSeekableRange`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 153, :column 7, :end-line 153, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The readyState read-only property of the `media.MediaSource`\n  returns an enum representing the state of the current MediaSource.\n  three possible values are:\n\n  `var myReadyState = mediaSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState`"}, :name media.MediaSource/ready-state, :variadic false, :file "src/media/MediaSource.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The readyState read-only property of the `media.MediaSource`\n  returns an enum representing the state of the current MediaSource.\n  three possible values are:\n\n  `var myReadyState = mediaSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState`"}, set-duration! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 139, :column 7, :end-line 139, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property of the `media.MediaSource` interface gets\n  sets the duration of the current media being presented.\n\n  `mediaSource.duration = 5.5; // 5.5 seconds\n\n  var myDuration = mediaSource.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration`"}, :name media.MediaSource/set-duration!, :variadic false, :file "src/media/MediaSource.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property of the `media.MediaSource` interface gets\n  sets the duration of the current media being presented.\n\n  `mediaSource.duration = 5.5; // 5.5 seconds\n\n  var myDuration = mediaSource.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration`"}, is-type-supported {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 56, :column 7, :end-line 56, :end-column 24, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The isTypeSupported() method of the `media.MediaSource` interface\n  a `web.Boolean` value indicating if the given MIME type is supported\n  the current user agent — this is, if it can successfully create\n  objects for that MIME type.\n\n  `var isItSupported = mediaSource.isTypeSupported(mimeType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported`"}, :name media.MediaSource/is-type-supported, :variadic false, :file "src/media/MediaSource.cljs", :end-column 24, :method-params ([this mime-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The isTypeSupported() method of the `media.MediaSource` interface\n  a `web.Boolean` value indicating if the given MIME type is supported\n  the current user agent — this is, if it can successfully create\n  objects for that MIME type.\n\n  `var isItSupported = mediaSource.isTypeSupported(mimeType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/isTypeSupported`"}, set-active-source-buffers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 110, :column 7, :end-line 110, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The activeSourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing a subset of\n  `web.SourceBuffer` objects contained within `web.sourceBuffers`\n  the list of objects providing the selected video track, enabled\n  tracks, and shown/hidden text tracks.\n\n  `var myActiveSourceBuffers = mediaSource.activeSourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers`"}, :name media.MediaSource/set-active-source-buffers!, :variadic false, :file "src/media/MediaSource.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The activeSourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing a subset of\n  `web.SourceBuffer` objects contained within `web.sourceBuffers`\n  the list of objects providing the selected video track, enabled\n  tracks, and shown/hidden text tracks.\n\n  `var myActiveSourceBuffers = mediaSource.activeSourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers`"}, source-buffers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 179, :column 7, :end-line 179, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The sourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing the list of\n  objects associated with this MediaSource.\n\n  `var mySourceBuffers = mediaSource.sourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers`"}, :name media.MediaSource/source-buffers, :variadic false, :file "src/media/MediaSource.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The sourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing the list of\n  objects associated with this MediaSource.\n\n  `var mySourceBuffers = mediaSource.sourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/sourceBuffers`"}, duration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 125, :column 7, :end-line 125, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The duration property of the `media.MediaSource` interface gets\n  sets the duration of the current media being presented.\n\n  `mediaSource.duration = 5.5; // 5.5 seconds\n\n  var myDuration = mediaSource.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration`"}, :name media.MediaSource/duration, :variadic false, :file "src/media/MediaSource.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The duration property of the `media.MediaSource` interface gets\n  sets the duration of the current media being presented.\n\n  `mediaSource.duration = 5.5; // 5.5 seconds\n\n  var myDuration = mediaSource.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/duration`"}, set-ready-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 166, :column 7, :end-line 166, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The readyState read-only property of the `media.MediaSource`\n  returns an enum representing the state of the current MediaSource.\n  three possible values are:\n\n  `var myReadyState = mediaSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState`"}, :name media.MediaSource/set-ready-state!, :variadic false, :file "src/media/MediaSource.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The readyState read-only property of the `media.MediaSource`\n  returns an enum representing the state of the current MediaSource.\n  three possible values are:\n\n  `var myReadyState = mediaSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/readyState`"}, clear-live-seekable-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 32, :column 7, :end-line 32, :end-column 32, :arglists (quote ([this])), :doc "Method.\n\n  The clearLiveSeekableRange() method of the `media.MediaSource`\n  clears a seekable range privious set with a call to `web.setLiveSeekableRange()`.\n\n  `mediaSource.clearLiveSeekableRange()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange`"}, :name media.MediaSource/clear-live-seekable-range, :variadic false, :file "src/media/MediaSource.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clearLiveSeekableRange() method of the `media.MediaSource`\n  clears a seekable range privious set with a call to `web.setLiveSeekableRange()`.\n\n  `mediaSource.clearLiveSeekableRange()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/clearLiveSeekableRange`"}, active-source-buffers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 95, :column 7, :end-line 95, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The activeSourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing a subset of\n  `web.SourceBuffer` objects contained within `web.sourceBuffers`\n  the list of objects providing the selected video track, enabled\n  tracks, and shown/hidden text tracks.\n\n  `var myActiveSourceBuffers = mediaSource.activeSourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers`"}, :name media.MediaSource/active-source-buffers, :variadic false, :file "src/media/MediaSource.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The activeSourceBuffers read-only property of the `media.MediaSource`\n  returns a `web.SourceBufferList` object containing a subset of\n  `web.SourceBuffer` objects contained within `web.sourceBuffers`\n  the list of objects providing the selected video track, enabled\n  tracks, and shown/hidden text tracks.\n\n  `var myActiveSourceBuffers = mediaSource.activeSourceBuffers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/activeSourceBuffers`"}, constructor {:name media.MediaSource/constructor, :file "src/media/MediaSource.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The MediaSource() constructor of the `media.MediaSource` interface constructs and returns a new MediaSource object with no associated source buffers.\n\n  None.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/MediaSource`", :tag js}, end-of-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 44, :column 7, :end-line 44, :end-column 20, :arglists (quote ([this end-of-stream-error])), :doc "Method.\n\n  The endOfStream() method of the `media.MediaSource` interface\n  the end of the stream.\n\n  `mediaSource.endOfStream(endOfStreamError);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/endOfStream`"}, :name media.MediaSource/end-of-stream, :variadic false, :file "src/media/MediaSource.cljs", :end-column 20, :method-params ([this end-of-stream-error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this end-of-stream-error])), :doc "Method.\n\n  The endOfStream() method of the `media.MediaSource` interface\n  the end of the stream.\n\n  `mediaSource.endOfStream(endOfStreamError);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/endOfStream`"}, add-source-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 18, :column 7, :end-line 18, :end-column 24, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The addSourceBuffer() method of the `media.MediaSource` interface\n  a new `web.SourceBuffer` of the given MIME type and adds it to\n  MediaSource's `web.sourceBuffers` list. The new SourceBuffer\n  also returned.\n\n  `var sourceBuffer = mediaSource.addSourceBuffer(mimeType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer`"}, :name media.MediaSource/add-source-buffer, :variadic false, :file "src/media/MediaSource.cljs", :end-column 24, :method-params ([this mime-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The addSourceBuffer() method of the `media.MediaSource` interface\n  a new `web.SourceBuffer` of the given MIME type and adds it to\n  MediaSource's `web.sourceBuffers` list. The new SourceBuffer\n  also returned.\n\n  `var sourceBuffer = mediaSource.addSourceBuffer(mimeType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/addSourceBuffer`"}, remove-source-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/media/MediaSource.cljs", :line 70, :column 7, :end-line 70, :end-column 27, :arglists (quote ([this source-buffer])), :doc "Method.\n\n  The removeSourceBuffer() method of the `media.MediaSource` interface\n  the given `web.SourceBuffer` from the `web.SourceBuffers` list\n  with this MediaSource object.\n\n  `mediaSource.removeSourceBuffer(sourceBuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/removeSourceBuffer`"}, :name media.MediaSource/remove-source-buffer, :variadic false, :file "src/media/MediaSource.cljs", :end-column 27, :method-params ([this source-buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this source-buffer])), :doc "Method.\n\n  The removeSourceBuffer() method of the `media.MediaSource` interface\n  the given `web.SourceBuffer` from the `web.SourceBuffers` list\n  with this MediaSource object.\n\n  `mediaSource.removeSourceBuffer(sourceBuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MediaSource/removeSourceBuffer`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MediaSource interface of the Media Source Extensions API\n  a source of media data for an `html.HTMLMediaElement` object.\n  MediaSource object can be attached to a `html.HTMLMediaElement`\n  be played in the user agent."}