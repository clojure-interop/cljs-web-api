{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name dom.DOMImplementation, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {create-document {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/dom/DOMImplementation.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([this namespace-uri qualified-name-str document-type])), :doc "Method.\n\n  The DOMImplementation.createDocument() method creates and returns\n  `xml.XMLDocument`.\n\n  `var doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument`"}, :name dom.DOMImplementation/create-document, :variadic false, :file "src/dom/DOMImplementation.cljs", :end-column 22, :method-params ([this namespace-uri qualified-name-str document-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this namespace-uri qualified-name-str document-type])), :doc "Method.\n\n  The DOMImplementation.createDocument() method creates and returns\n  `xml.XMLDocument`.\n\n  `var doc = document.implementation.createDocument(namespaceURI, qualifiedNameStr, documentType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument`"}, create-document-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/dom/DOMImplementation.cljs", :line 19, :column 7, :end-line 19, :end-column 27, :arglists (quote ([this qualified-name-str public-id system-id])), :doc "Method.\n\n  The DOMImplementation.createDocumentType() method returns a `web.DocumentType`\n  which can either be used with `dom.DOMImplementation.createDocument`\n  document creation or can be put into the document via methods\n  `web.Node.insertBefore()` or `web.Node.replaceChild()`.\n\n  `var doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType`"}, :name dom.DOMImplementation/create-document-type, :variadic false, :file "src/dom/DOMImplementation.cljs", :end-column 27, :method-params ([this qualified-name-str public-id system-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this qualified-name-str public-id system-id])), :doc "Method.\n\n  The DOMImplementation.createDocumentType() method returns a `web.DocumentType`\n  which can either be used with `dom.DOMImplementation.createDocument`\n  document creation or can be put into the document via methods\n  `web.Node.insertBefore()` or `web.Node.replaceChild()`.\n\n  `var doctype = document.implementation.createDocumentType(qualifiedNameStr, publicId, systemId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType`"}, create-html-document {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/dom/DOMImplementation.cljs", :line 33, :column 7, :end-line 33, :end-column 27, :arglists (quote ([this title])), :doc "Method.\n\n  The DOMImplementation.createHTMLDocument() method creates a new\n  `web.Document`.\n\n  `newDoc = document.implementation.createHTMLDocument(title);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument`"}, :name dom.DOMImplementation/create-html-document, :variadic false, :file "src/dom/DOMImplementation.cljs", :end-column 27, :method-params ([this title]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this title])), :doc "Method.\n\n  The DOMImplementation.createHTMLDocument() method creates a new\n  `web.Document`.\n\n  `newDoc = document.implementation.createHTMLDocument(title);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createHTMLDocument`"}, has-feature {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/dom/DOMImplementation.cljs", :line 45, :column 7, :end-line 45, :end-column 18, :arglists (quote ([this feature version])), :doc "Method.\n\n  The DOMImplementation.hasFeature() method returns a `web.Boolean`\n  indicating if a given feature is supported. It is deprecated\n  modern browsers return true in all cases.\n\n  `flag = document.implementation.hasFeature(feature, version);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature`"}, :name dom.DOMImplementation/has-feature, :variadic false, :file "src/dom/DOMImplementation.cljs", :end-column 18, :method-params ([this feature version]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this feature version])), :doc "Method.\n\n  The DOMImplementation.hasFeature() method returns a `web.Boolean`\n  indicating if a given feature is supported. It is deprecated\n  modern browsers return true in all cases.\n\n  `flag = document.implementation.hasFeature(feature, version);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The DOMImplementation interface represents an object providing\n  which are not dependent on any particular document. Such an object\n  returned by the `web.Document.implementation` property."}