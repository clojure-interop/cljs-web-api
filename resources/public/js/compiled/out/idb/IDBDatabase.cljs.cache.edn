{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{name}, :name idb.IDBDatabase, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {version {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 211, :column 7, :end-line 211, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  An integer containing the version of the connected database.\n\n  `var myInteger = IDBDatabase.version;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version`"}, :name idb.IDBDatabase/version, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An integer containing the version of the connected database.\n\n  `var myInteger = IDBDatabase.version;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 146, :column 7, :end-line 146, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  A function which is called when the close event is fired.\n\n  `IDBDatabase.onclose = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose`"}, :name idb.IDBDatabase/set-onclose!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A function which is called when the close event is fired.\n\n  `IDBDatabase.onclose = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose`"}, set-onversionchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 197, :column 7, :end-line 197, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  This example shows an `idb.IDBOpenDBRequest.onupgradeneeded`\n  that creates a new object store; it also includes onerror and\n  functions to handle non-success cases, and an onversionchange\n  to notify when a database structure change has occurred.\n\n  `IDBDatabase.onversionchange = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange`"}, :name idb.IDBDatabase/set-onversionchange!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  This example shows an `idb.IDBOpenDBRequest.onupgradeneeded`\n  that creates a new object store; it also includes onerror and\n  functions to handle non-success cases, and an onversionchange\n  to notify when a database structure change has occurred.\n\n  `IDBDatabase.onversionchange = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange`"}, object-store-names {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 85, :column 7, :end-line 85, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMStringList` containing a list of the names of the object\n  currently in the connected database.\n\n  `var list[] = IDBDatabase.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames`"}, :name idb.IDBDatabase/object-store-names, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMStringList` containing a list of the names of the object\n  currently in the connected database.\n\n  `var list[] = IDBDatabase.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 122, :column 7, :end-line 122, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort event handler of the `idb.IDBDatabase` interface\n  the abort event, fired when a transaction is aborted and bubbles\n  to the connection object.\n\n  `IDBDatabase.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort`"}, :name idb.IDBDatabase/set-onabort!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort event handler of the `idb.IDBDatabase` interface\n  the abort event, fired when a transaction is aborted and bubbles\n  to the connection object.\n\n  `IDBDatabase.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort`"}, set-version! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 222, :column 7, :end-line 222, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  An integer containing the version of the connected database.\n\n  `var myInteger = IDBDatabase.version;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version`"}, :name idb.IDBDatabase/set-version!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An integer containing the version of the connected database.\n\n  `var myInteger = IDBDatabase.version;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/version`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 170, :column 7, :end-line 170, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBDatabase` interface\n  the error event, fired when a request returns an error and bubbles\n  to the connection object.\n\n  `IDBDatabase.onerror = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror`"}, :name idb.IDBDatabase/set-onerror!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBDatabase` interface\n  the error event, fired when a request returns an error and bubbles\n  to the connection object.\n\n  `IDBDatabase.onerror = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 74, :column 7, :end-line 74, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` containing the name of the connected database.\n\n  `var dbName = IDBDatabase.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name`"}, :name idb.IDBDatabase/set-name!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` containing the name of the connected database.\n\n  `var dbName = IDBDatabase.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 157, :column 7, :end-line 157, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBDatabase` interface\n  the error event, fired when a request returns an error and bubbles\n  to the connection object.\n\n  `IDBDatabase.onerror = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror`"}, :name idb.IDBDatabase/onerror, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBDatabase` interface\n  the error event, fired when a request returns an error and bubbles\n  to the connection object.\n\n  `IDBDatabase.onerror = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onerror`"}, onversionchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 183, :column 7, :end-line 183, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  This example shows an `idb.IDBOpenDBRequest.onupgradeneeded`\n  that creates a new object store; it also includes onerror and\n  functions to handle non-success cases, and an onversionchange\n  to notify when a database structure change has occurred.\n\n  `IDBDatabase.onversionchange = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange`"}, :name idb.IDBDatabase/onversionchange, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  This example shows an `idb.IDBOpenDBRequest.onupgradeneeded`\n  that creates a new object store; it also includes onerror and\n  functions to handle non-success cases, and an onversionchange\n  to notify when a database structure change has occurred.\n\n  `IDBDatabase.onversionchange = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onversionchange`"}, set-object-store-names! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 97, :column 7, :end-line 97, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMStringList` containing a list of the names of the object\n  currently in the connected database.\n\n  `var list[] = IDBDatabase.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames`"}, :name idb.IDBDatabase/set-object-store-names!, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMStringList` containing a list of the names of the object\n  currently in the connected database.\n\n  `var list[] = IDBDatabase.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/objectStoreNames`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 63, :column 7, :end-line 63, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` containing the name of the connected database.\n\n  `var dbName = IDBDatabase.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name`"}, :name idb.IDBDatabase/name, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` containing the name of the connected database.\n\n  `var dbName = IDBDatabase.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/name`"}, transaction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 51, :column 7, :end-line 51, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  An `idb.IDBTransaction` object.\n\n  `IDBDatabase.transaction(storeNames);\n  IDBDatabase.transaction(storeNames, mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBDatabase/transaction, :variadic true, :file "src/idb/IDBDatabase.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  An `idb.IDBTransaction` object.\n\n  `IDBDatabase.transaction(storeNames);\n  IDBDatabase.transaction(storeNames, mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/transaction`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The connection is not actually closed until all transactions\n  using this connection are complete. No new transactions can be\n  for this connection once this method is called. Methods that\n  transactions throw an exception if a closing operation is pending.\n\n  `IDBDatabase.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close`"}, :name idb.IDBDatabase/close, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The connection is not actually closed until all transactions\n  using this connection are complete. No new transactions can be\n  for this connection once this method is called. Methods that\n  transactions throw an exception if a closing operation is pending.\n\n  `IDBDatabase.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/close`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 135, :column 7, :end-line 135, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  A function which is called when the close event is fired.\n\n  `IDBDatabase.onclose = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose`"}, :name idb.IDBDatabase/onclose, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A function which is called when the close event is fired.\n\n  `IDBDatabase.onclose = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onclose`"}, delete-object-store {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 39, :column 7, :end-line 39, :end-column 26, :arglists (quote ([this name])), :doc "Method.\n\n  As with `idb.IDBDatabase.createObjectStore`, this method can\n  called only within a `web.versionchange` transaction.\n\n  `dbInstance.deleteObjectStore(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore`"}, :name idb.IDBDatabase/delete-object-store, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 26, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  As with `idb.IDBDatabase.createObjectStore`, this method can\n  called only within a `web.versionchange` transaction.\n\n  `dbInstance.deleteObjectStore(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/deleteObjectStore`"}, create-object-store {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 23, :column 7, :end-line 23, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The method takes the name of the store as well as a parameter\n  that lets you define important optional properties. You can use\n  property to uniquely identify individual objects in the store.\n  the property is an identifier, it should be unique to every object,\n  every object should have that property.\n\n  `IDBDatabase.createObjectStore(name);\n  IDBDatabase.createObjectStore(name, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBDatabase/create-object-store, :variadic true, :file "src/idb/IDBDatabase.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The method takes the name of the store as well as a parameter\n  that lets you define important optional properties. You can use\n  property to uniquely identify individual objects in the store.\n  the property is an identifier, it should be unique to every object,\n  every object should have that property.\n\n  `IDBDatabase.createObjectStore(name);\n  IDBDatabase.createObjectStore(name, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/createObjectStore`"}, onabort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBDatabase.cljs", :line 109, :column 7, :end-line 109, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onabort event handler of the `idb.IDBDatabase` interface\n  the abort event, fired when a transaction is aborted and bubbles\n  to the connection object.\n\n  `IDBDatabase.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort`"}, :name idb.IDBDatabase/onabort, :variadic false, :file "src/idb/IDBDatabase.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onabort event handler of the `idb.IDBDatabase` interface\n  the abort event, fired when a transaction is aborted and bubbles\n  to the connection object.\n\n  `IDBDatabase.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBDatabase/onabort`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The IDBDatabase interface of the IndexedDB API provides a connection\n  a database; you can use an IDBDatabase object to open a transaction\n  your database then create, manipulate, and delete objects (data)\n  that database. The interface provides the only way to get and\n  versions of the database."}