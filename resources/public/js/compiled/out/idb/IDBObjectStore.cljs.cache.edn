{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{get name count}, :name idb.IDBObjectStore, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {put {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 184, :column 7, :end-line 184, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The put method is an update or insert method. See the `idb.IDBObjectStore.add`\n  for an insert only method.\n\n  `var request = objectStore.put(item);\n  var request = objectStore.put(item, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/put, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The put method is an update or insert method. See the `idb.IDBObjectStore.add`\n  for an insert only method.\n\n  `var request = objectStore.put(item);\n  var request = objectStore.put(item, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/put`"}, add {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 9, :column 7, :end-line 9, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the transaction’s complete event in addition to the IDBObjectStore.add\n  success event, because the transaction may still fail after the\n  event fires. In other words, the success event is only triggered\n  the transaction has been successfully queued.\n\n  `var request = objectStore.add(value);\n  var request = objectStore.add(value, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/add, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the transaction’s complete event in addition to the IDBObjectStore.add\n  success event, because the transaction may still fail after the\n  event fires. In other words, the success event is only triggered\n  the transaction has been successfully queued.\n\n  `var request = objectStore.add(value);\n  var request = objectStore.add(value, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/add`"}, get-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([this key])), :doc "Method.\n\n  If a key is successfully found, then a structured clone of it\n  created and set as the result of the request object.\n\n  `var request = objectStore.getKey(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getKey`"}, :name idb.IDBObjectStore/get-key, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 14, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Method.\n\n  If a key is successfully found, then a structured clone of it\n  created and set as the result of the request object.\n\n  `var request = objectStore.getKey(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getKey`"}, key-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 241, :column 7, :end-line 241, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  If this property is null, the application must provide a key\n  each modification operation.\n\n  `var mykeyPath = objectStore.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath`"}, :name idb.IDBObjectStore/key-path, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  If this property is null, the application must provide a key\n  each modification operation.\n\n  `var mykeyPath = objectStore.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath`"}, auto-increment {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 197, :column 7, :end-line 197, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var myAutoIncrement = objectStore.autoIncrement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement`"}, :name idb.IDBObjectStore/auto-increment, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var myAutoIncrement = objectStore.autoIncrement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement`"}, clear {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  Clearing an object store consists of removing all records from\n  object store and removing all records in indexes that reference\n  object store. To remove only some of the records in a store,\n  `idb.IDBObjectStore.delete` passing a key or `idb.IDBKeyRange`.\n\n  `var request = objectStore.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear`"}, :name idb.IDBObjectStore/clear, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  Clearing an object store consists of removing all records from\n  object store and removing all records in indexes that reference\n  object store. To remove only some of the records in a store,\n  `idb.IDBObjectStore.delete` passing a key or `idb.IDBKeyRange`.\n\n  `var request = objectStore.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/clear`"}, set-transaction! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 300, :column 7, :end-line 300, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBTransaction` object.\n\n  `var myTransaction = objectStore.transaction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction`"}, :name idb.IDBObjectStore/set-transaction!, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBTransaction` object.\n\n  `var myTransaction = objectStore.transaction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction`"}, set-auto-increment! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 208, :column 7, :end-line 208, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var myAutoIncrement = objectStore.autoIncrement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement`"}, :name idb.IDBObjectStore/set-auto-increment!, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var myAutoIncrement = objectStore.autoIncrement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/autoIncrement`"}, set-index-names! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 230, :column 7, :end-line 230, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMStringList`.\n\n  `var myindexNames = objectStore.indexNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames`"}, :name idb.IDBObjectStore/set-index-names!, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMStringList`.\n\n  `var myindexNames = objectStore.indexNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 93, :column 7, :end-line 93, :end-column 10, :arglists (quote ([this key])), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.get(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get`"}, :name idb.IDBObjectStore/get, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 10, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.get(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/get`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 277, :column 7, :end-line 277, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` containing the object store's name.\n\n  `IDBObjectStore.name = myNewName;\n  var myObjectStoreName = IDBObjectStore.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name`"}, :name idb.IDBObjectStore/set-name!, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` containing the object store's name.\n\n  `IDBObjectStore.name = myNewName;\n  var myObjectStoreName = IDBObjectStore.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name`"}, index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 145, :column 7, :end-line 145, :end-column 12, :arglists (quote ([this name])), :doc "Method.\n\n  An `idb.IDBIndex` object for accessing the index.\n\n  `var index = objectStore.index(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index`"}, :name idb.IDBObjectStore/index, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 12, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  An `idb.IDBIndex` object for accessing the index.\n\n  `var index = objectStore.index(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/index`"}, open-key-cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 170, :column 7, :end-line 170, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the results’s success event.\n\n  `var request = objectStore.openKeyCursor();\n  var request = objectStore.openKeyCursor(query);\n  var request = objectStore.openKeyCursor(query, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/open-key-cursor, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the results’s success event.\n\n  `var request = objectStore.openKeyCursor();\n  var request = objectStore.openKeyCursor(query);\n  var request = objectStore.openKeyCursor(query, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openKeyCursor`"}, get-all-keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 119, :column 7, :end-line 119, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.getAllKeys();\n  var request = objectStore.getAllKeys(query);\n  var request = objectStore.getAllKeys(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/get-all-keys, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.getAllKeys();\n  var request = objectStore.getAllKeys(query);\n  var request = objectStore.getAllKeys(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAllKeys`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 265, :column 7, :end-line 265, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` containing the object store's name.\n\n  `IDBObjectStore.name = myNewName;\n  var myObjectStoreName = IDBObjectStore.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name`"}, :name idb.IDBObjectStore/name, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` containing the object store's name.\n\n  `IDBObjectStore.name = myNewName;\n  var myObjectStoreName = IDBObjectStore.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/name`"}, delete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 65, :column 7, :end-line 65, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired. The request.result attribute is set\n  undefined.\n\n  `var request = objectStore.delete(Key);\n\n  var request = objectStore.delete(KeyRange);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/delete, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired. The request.result attribute is set\n  undefined.\n\n  `var request = objectStore.delete(Key);\n\n  var request = objectStore.delete(KeyRange);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete`"}, index-names {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 219, :column 7, :end-line 219, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMStringList`.\n\n  `var myindexNames = objectStore.indexNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames`"}, :name idb.IDBObjectStore/index-names, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMStringList`.\n\n  `var myindexNames = objectStore.indexNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/indexNames`"}, transaction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 289, :column 7, :end-line 289, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBTransaction` object.\n\n  `var myTransaction = objectStore.transaction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction`"}, :name idb.IDBObjectStore/transaction, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 289, :end-line 289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBTransaction` object.\n\n  `var myTransaction = objectStore.transaction;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/transaction`"}, set-key-path! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 253, :column 7, :end-line 253, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  If this property is null, the application must provide a key\n  each modification operation.\n\n  `var mykeyPath = objectStore.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath`"}, :name idb.IDBObjectStore/set-key-path!, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  If this property is null, the application must provide a key\n  each modification operation.\n\n  `var mykeyPath = objectStore.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/keyPath`"}, open-cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 156, :column 7, :end-line 156, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the results’s success event.\n\n  `var request = ObjectStore.openCursor();\n  var request = ObjectStore.openCursor(query);\n  var request = ObjectStore.openCursor(query, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/open-cursor, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  To determine if the add operation has completed successfully,\n  for the results’s success event.\n\n  `var request = ObjectStore.openCursor();\n  var request = ObjectStore.openCursor(query);\n  var request = ObjectStore.openCursor(query, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/openCursor`"}, delete-index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 80, :column 7, :end-line 80, :end-column 19, :arglists (quote ([this index-name])), :doc "Method.\n\n  Note that this method must be called only from a VersionChange\n  mode callback. Note that this method synchronously modifies the\n  property.\n\n  `objectStore.deleteIndex(indexName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex`"}, :name idb.IDBObjectStore/delete-index, :variadic false, :file "src/idb/IDBObjectStore.cljs", :end-column 19, :method-params ([this index-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index-name])), :doc "Method.\n\n  Note that this method must be called only from a VersionChange\n  mode callback. Note that this method synchronously modifies the\n  property.\n\n  `objectStore.deleteIndex(indexName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/deleteIndex`"}, create-index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  Note that this method must be called only from a VersionChange\n  mode callback.\n\n  `var myIDBIndex = objectStore.createIndex(indexName, keyPath);\n  var myIDBIndex = objectStore.createIndex(indexName, keyPath, objectParameters);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/create-index, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Note that this method must be called only from a VersionChange\n  mode callback.\n\n  `var myIDBIndex = objectStore.createIndex(indexName, keyPath);\n  var myIDBIndex = objectStore.createIndex(indexName, keyPath, objectParameters);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/createIndex`"}, count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 39, :column 7, :end-line 39, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var request = ObjectStore.count();\n  var request = ObjectStore.count(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/count, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var request = ObjectStore.count();\n  var request = ObjectStore.count(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/count`"}, get-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBObjectStore.cljs", :line 105, :column 7, :end-line 105, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.getAll();\n  var request = objectStore.getAll(query);\n  var request = objectStore.getAll(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBObjectStore/get-all, :variadic true, :file "src/idb/IDBObjectStore.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  If a value is successfully found, then a structured clone of\n  is created and set as the result of the request object.\n\n  `var request = objectStore.getAll();\n  var request = objectStore.getAll(query);\n  var request = objectStore.getAll(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "This example shows a variety of different uses of object stores,\n  updating the data structure with `idb.IDBObjectStore.createIndex`\n  an onupgradeneeded function, to adding a new item to our object\n  with `idb.IDBObjectStore.add`. For a full working example, see\n  To-do Notifications app (view example live.)"}