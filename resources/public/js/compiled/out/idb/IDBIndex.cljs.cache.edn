{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{get name count}, :name idb.IDBIndex, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 66, :column 7, :end-line 66, :end-column 14, :arglists (quote ([this key])), :doc "Method.\n\n  If a key is found it is set as the result of the request object:\n  returns the primary key of the record the key is associated with,\n  the whole record as `idb.IDBIndex.get` does.\n\n  `var request = myIndex.getKey(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey`"}, :name idb.IDBIndex/get-key, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 14, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Method.\n\n  If a key is found it is set as the result of the request object:\n  returns the primary key of the record the key is associated with,\n  the whole record as `idb.IDBIndex.get` does.\n\n  `var request = myIndex.getKey(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getKey`"}, set-locale! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 173, :column 7, :end-line 173, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The locale read-only property of the `idb.IDBIndex` interface\n  the locale of the index (for example en-US, or pl) if it had\n  locale value specified upon its creation (see createIndex()'s\n  Note that this property always returns the current locale being\n  in this index, in other words, it never returns \\\"auto\\\".\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.locale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale`"}, :name idb.IDBIndex/set-locale!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The locale read-only property of the `idb.IDBIndex` interface\n  the locale of the index (for example en-US, or pl) if it had\n  locale value specified upon its creation (see createIndex()'s\n  Note that this property always returns the current locale being\n  in this index, in other words, it never returns \\\"auto\\\".\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.locale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale`"}, key-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 135, :column 7, :end-line 135, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Any data type that can be used as a key path.\n\n  `var myKeyPath = myIndex.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath`"}, :name idb.IDBIndex/key-path, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Any data type that can be used as a key path.\n\n  `var myKeyPath = myIndex.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath`"}, set-unique! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 268, :column 7, :end-line 268, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isUnique = IDBIndex.unique;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique`"}, :name idb.IDBIndex/set-unique!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isUnique = IDBIndex.unique;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique`"}, set-object-store! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 246, :column 7, :end-line 246, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBObjectStore`.\n\n  `var myIDBObjectStore = myIndex.objectStore;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore`"}, :name idb.IDBIndex/set-object-store!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBObjectStore`.\n\n  `var myIDBObjectStore = myIndex.objectStore;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore`"}, set-is-auto-locale! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 121, :column 7, :end-line 121, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The isAutoLocale read-only property of the `idb.IDBIndex` interface\n  a `web.Boolean` indicating whether the index had a locale value\n  auto specified upon its creation (see createIndex()'s optionalParameters.)\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.isAutoLocale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale`"}, :name idb.IDBIndex/set-is-auto-locale!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isAutoLocale read-only property of the `idb.IDBIndex` interface\n  a `web.Boolean` indicating whether the index had a locale value\n  auto specified upon its creation (see createIndex()'s optionalParameters.)\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.isAutoLocale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale`"}, unique {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 257, :column 7, :end-line 257, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isUnique = IDBIndex.unique;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique`"}, :name idb.IDBIndex/unique, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isUnique = IDBIndex.unique;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/unique`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 21, :column 7, :end-line 21, :end-column 10, :arglists (quote ([this key])), :doc "Method.\n\n  If a value is found, then a structured clone of it is created\n  set as the result of the request object: this returns the record\n  key is associated with.\n\n  `var request = myIndex.get(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get`"}, :name idb.IDBIndex/get, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 10, :method-params ([this key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key])), :doc "Method.\n\n  If a value is found, then a structured clone of it is created\n  set as the result of the request object: this returns the record\n  key is associated with.\n\n  `var request = myIndex.get(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/get`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 223, :column 7, :end-line 223, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` specifying a name for the index.\n\n  `var indexName = IDBIndex.name;\n  IDBIndex.name = indexName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name`"}, :name idb.IDBIndex/set-name!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` specifying a name for the index.\n\n  `var indexName = IDBIndex.name;\n  IDBIndex.name = indexName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name`"}, locale {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 157, :column 7, :end-line 157, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The locale read-only property of the `idb.IDBIndex` interface\n  the locale of the index (for example en-US, or pl) if it had\n  locale value specified upon its creation (see createIndex()'s\n  Note that this property always returns the current locale being\n  in this index, in other words, it never returns \\\"auto\\\".\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.locale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale`"}, :name idb.IDBIndex/locale, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The locale read-only property of the `idb.IDBIndex` interface\n  the locale of the index (for example en-US, or pl) if it had\n  locale value specified upon its creation (see createIndex()'s\n  Note that this property always returns the current locale being\n  in this index, in other words, it never returns \\\"auto\\\".\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.locale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/locale`"}, open-key-cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 93, :column 7, :end-line 93, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The method sets the position of the cursor to the appropriate\n  based on the specified direction.\n\n  `var request = myIndex.openKeyCursor();\n  var request = myIndex.openKeyCursor(range);\n  var request = myIndex.openKeyCursor(range, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBIndex/open-key-cursor, :variadic true, :file "src/idb/IDBIndex.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The method sets the position of the cursor to the appropriate\n  based on the specified direction.\n\n  `var request = myIndex.openKeyCursor();\n  var request = myIndex.openKeyCursor(range);\n  var request = myIndex.openKeyCursor(range, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openKeyCursor`"}, get-all-keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var allKeysRequest = IDBIndex.getAllKeys();\n  var allKeysRequest = IDBIndex.getAllKeys(query);\n  var allKeysRequest = IDBIndex.getAllKeys(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBIndex/get-all-keys, :variadic true, :file "src/idb/IDBIndex.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  An `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var allKeysRequest = IDBIndex.getAllKeys();\n  var allKeysRequest = IDBIndex.getAllKeys(query);\n  var allKeysRequest = IDBIndex.getAllKeys(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAllKeys`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 211, :column 7, :end-line 211, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` specifying a name for the index.\n\n  `var indexName = IDBIndex.name;\n  IDBIndex.name = indexName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name`"}, :name idb.IDBIndex/name, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` specifying a name for the index.\n\n  `var indexName = IDBIndex.name;\n  IDBIndex.name = indexName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/name`"}, is-auto-locale {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 107, :column 7, :end-line 107, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The isAutoLocale read-only property of the `idb.IDBIndex` interface\n  a `web.Boolean` indicating whether the index had a locale value\n  auto specified upon its creation (see createIndex()'s optionalParameters.)\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.isAutoLocale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale`"}, :name idb.IDBIndex/is-auto-locale, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isAutoLocale read-only property of the `idb.IDBIndex` interface\n  a `web.Boolean` indicating whether the index had a locale value\n  auto specified upon its creation (see createIndex()'s optionalParameters.)\n\n  `var myIndex = objectStore.index('index');\n  console.log(myIndex.isAutoLocale);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/isAutoLocale`"}, set-multi-entry! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 200, :column 7, :end-line 200, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isMultiEntry = myIndex.multiEntry;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry`"}, :name idb.IDBIndex/set-multi-entry!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isMultiEntry = myIndex.multiEntry;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry`"}, set-key-path! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 146, :column 7, :end-line 146, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Any data type that can be used as a key path.\n\n  `var myKeyPath = myIndex.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath`"}, :name idb.IDBIndex/set-key-path!, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Any data type that can be used as a key path.\n\n  `var myKeyPath = myIndex.keyPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/keyPath`"}, open-cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 79, :column 7, :end-line 79, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The method sets the position of the cursor to the appropriate\n  based on the specified direction.\n\n  `var request = myIndex.openCursor();\n  var request = myIndex.openCursor(range);\n  var request = myIndex.openCursor(range, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBIndex/open-cursor, :variadic true, :file "src/idb/IDBIndex.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The method sets the position of the cursor to the appropriate\n  based on the specified direction.\n\n  `var request = myIndex.openCursor();\n  var request = myIndex.openCursor(range);\n  var request = myIndex.openCursor(range, direction);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/openCursor`"}, count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  A `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var request = myIndex.count();\n  var request = myIndex.count(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBIndex/count, :variadic true, :file "src/idb/IDBIndex.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  A `idb.IDBRequest` object on which subsequent events related\n  this operation are fired.\n\n  `var request = myIndex.count();\n  var request = myIndex.count(key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/count`"}, get-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  There is a performance cost associated with looking at the value\n  of a cursor, because the object is created lazily. To use a feature\n  getAll(), the browser has to create all the objects at once.\n  you are just interested in looking at each of the keys, for instance,\n  is more efficient to use a cursor. If you are trying to get an\n  of all the objects in an object store, though, you should use\n\n  `var getAllKeysRequest = IDBIndex.getAll();\n  var getAllKeysRequest = IDBIndex.getAll(query);\n  var getAllKeysRequest = IDBIndex.getAll(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBIndex/get-all, :variadic true, :file "src/idb/IDBIndex.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  There is a performance cost associated with looking at the value\n  of a cursor, because the object is created lazily. To use a feature\n  getAll(), the browser has to create all the objects at once.\n  you are just interested in looking at each of the keys, for instance,\n  is more efficient to use a cursor. If you are trying to get an\n  of all the objects in an object store, though, you should use\n\n  `var getAllKeysRequest = IDBIndex.getAll();\n  var getAllKeysRequest = IDBIndex.getAll(query);\n  var getAllKeysRequest = IDBIndex.getAll(query, count);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/getAll`"}, multi-entry {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 189, :column 7, :end-line 189, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isMultiEntry = myIndex.multiEntry;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry`"}, :name idb.IDBIndex/multi-entry, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean`:\n\n  `var isMultiEntry = myIndex.multiEntry;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/multiEntry`"}, object-store {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBIndex.cljs", :line 235, :column 7, :end-line 235, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBObjectStore`.\n\n  `var myIDBObjectStore = myIndex.objectStore;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore`"}, :name idb.IDBIndex/object-store, :variadic false, :file "src/idb/IDBIndex.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBObjectStore`.\n\n  `var myIDBObjectStore = myIndex.objectStore;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBIndex/objectStore`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "IDBIndex interface of the IndexedDB API provides asynchronous\n  to an index in a database. An index is a kind of object store\n  looking up records in another object store, called the referenced\n  store. You use this interface to retrieve data."}