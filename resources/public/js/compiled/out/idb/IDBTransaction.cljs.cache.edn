{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name idb.IDBTransaction, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {oncomplete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 188, :column 7, :end-line 188, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The oncomplete event handler of the `idb.IDBTransaction` interface\n  the complete event, fired when the transaction successfully completes.\n\n  `transaction.oncomplete = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete`"}, :name idb.IDBTransaction/oncomplete, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncomplete event handler of the `idb.IDBTransaction` interface\n  the complete event, fired when the transaction successfully completes.\n\n  `transaction.oncomplete = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete`"}, set-oncomplete! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 200, :column 7, :end-line 200, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The oncomplete event handler of the `idb.IDBTransaction` interface\n  the complete event, fired when the transaction successfully completes.\n\n  `transaction.oncomplete = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete`"}, :name idb.IDBTransaction/set-oncomplete!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncomplete event handler of the `idb.IDBTransaction` interface\n  the complete event, fired when the transaction successfully completes.\n\n  `transaction.oncomplete = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/oncomplete`"}, set-db! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 63, :column 7, :end-line 63, :end-column 14, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBDatabase` object.\n\n  `var myDatabase = transaction.db;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db`"}, :name idb.IDBTransaction/set-db!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 14, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBDatabase` object.\n\n  `var myDatabase = transaction.db;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db`"}, object-store-names {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 130, :column 7, :end-line 130, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The objectStoreNames read-only property of the `idb.IDBTransaction`\n  returns a `dom.DOMStringList` of names of `idb.IDBObjectStore`\n\n  `var myDatabase = transactionObj.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames`"}, :name idb.IDBTransaction/object-store-names, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The objectStoreNames read-only property of the `idb.IDBTransaction`\n  returns a `dom.DOMStringList` of names of `idb.IDBObjectStore`\n\n  `var myDatabase = transactionObj.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 171, :column 7, :end-line 171, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  In the following code snippet, we open a read/write transaction\n  our database and add some data to an object store. Note also\n  functions attached to transaction event handlers to report on\n  outcome of the transaction opening in the event of success or\n  Note the transaction.onabort = function(event) { }; block, reporting\n  the transaction has been aborted. For a full working example,\n  our To-do Notifications app (view example live.)\n\n  `transaction.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort`"}, :name idb.IDBTransaction/set-onabort!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  In the following code snippet, we open a read/write transaction\n  our database and add some data to an object store. Note also\n  functions attached to transaction event handlers to report on\n  outcome of the transaction opening in the event of success or\n  Note the transaction.onabort = function(event) { }; block, reporting\n  the transaction has been aborted. For a full working example,\n  our To-do Notifications app (view example live.)\n\n  `transaction.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 225, :column 7, :end-line 225, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBTransaction` interface\n  the error event, fired when a request returns an error and bubbles\n  to the transaction object.\n\n  `transaction.onerror = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror`"}, :name idb.IDBTransaction/set-onerror!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBTransaction` interface\n  the error event, fired when a request returns an error and bubbles\n  to the transaction object.\n\n  `transaction.onerror = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 212, :column 7, :end-line 212, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBTransaction` interface\n  the error event, fired when a request returns an error and bubbles\n  to the transaction object.\n\n  `transaction.onerror = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror`"}, :name idb.IDBTransaction/onerror, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror event handler of the `idb.IDBTransaction` interface\n  the error event, fired when a request returns an error and bubbles\n  to the transaction object.\n\n  `transaction.onerror = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onerror`"}, db {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 52, :column 7, :end-line 52, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBDatabase` object.\n\n  `var myDatabase = transaction.db;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db`"}, :name idb.IDBTransaction/db, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBDatabase` object.\n\n  `var myDatabase = transaction.db;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/db`"}, set-object-store-names! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 142, :column 7, :end-line 142, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The objectStoreNames read-only property of the `idb.IDBTransaction`\n  returns a `dom.DOMStringList` of names of `idb.IDBObjectStore`\n\n  `var myDatabase = transactionObj.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames`"}, :name idb.IDBTransaction/set-object-store-names!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The objectStoreNames read-only property of the `idb.IDBTransaction`\n  returns a `dom.DOMStringList` of names of `idb.IDBObjectStore`\n\n  `var myDatabase = transactionObj.objectStoreNames;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/ObjectStoreNames`"}, mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 106, :column 7, :end-line 106, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBTransactionMode` object defining the mode for isolating\n  to data in the current object stores:\n\n  `var myCurrentMode = IDBTransaction.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode`"}, :name idb.IDBTransaction/mode, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `idb.IDBTransactionMode` object defining the mode for isolating\n  to data in the current object stores:\n\n  `var myCurrentMode = IDBTransaction.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode`"}, abort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 15, :column 7, :end-line 15, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `idb.IDBTransaction` interface rolls\n  all the changes to objects in the database associated with this\n\n  `transaction.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort`"}, :name idb.IDBTransaction/abort, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `idb.IDBTransaction` interface rolls\n  all the changes to objects in the database associated with this\n\n  `transaction.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/abort`"}, set-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 118, :column 7, :end-line 118, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBTransactionMode` object defining the mode for isolating\n  to data in the current object stores:\n\n  `var myCurrentMode = IDBTransaction.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode`"}, :name idb.IDBTransaction/set-mode!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `idb.IDBTransactionMode` object defining the mode for isolating\n  to data in the current object stores:\n\n  `var myCurrentMode = IDBTransaction.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/mode`"}, set-error! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 90, :column 7, :end-line 90, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMError` containing the relevant error. In Chrome 48+/Firefox\n  this property returns a `dom.DOMException` because DOMError has\n  removed from the DOM standard. The exact error is one of serveral\n  It can be a reference to the same error as the request object\n  raised it, or a transaction failure (for example `web.QuotaExceededError`\n  `web.UnknownError`).\n\n  `var myError = transaction.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error`"}, :name idb.IDBTransaction/set-error!, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMError` containing the relevant error. In Chrome 48+/Firefox\n  this property returns a `dom.DOMException` because DOMError has\n  removed from the DOM standard. The exact error is one of serveral\n  It can be a reference to the same error as the request object\n  raised it, or a transaction failure (for example `web.QuotaExceededError`\n  `web.UnknownError`).\n\n  `var myError = transaction.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error`"}, onabort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 154, :column 7, :end-line 154, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  In the following code snippet, we open a read/write transaction\n  our database and add some data to an object store. Note also\n  functions attached to transaction event handlers to report on\n  outcome of the transaction opening in the event of success or\n  Note the transaction.onabort = function(event) { }; block, reporting\n  the transaction has been aborted. For a full working example,\n  our To-do Notifications app (view example live.)\n\n  `transaction.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort`"}, :name idb.IDBTransaction/onabort, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  In the following code snippet, we open a read/write transaction\n  our database and add some data to an object store. Note also\n  functions attached to transaction event handlers to report on\n  outcome of the transaction opening in the event of success or\n  Note the transaction.onabort = function(event) { }; block, reporting\n  the transaction has been aborted. For a full working example,\n  our To-do Notifications app (view example live.)\n\n  `transaction.onabort = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/onabort`"}, commit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 39, :column 7, :end-line 39, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The commit() method of the `idb.IDBTransaction` interface commits\n  transaction if it is alled on an active transaction. If it is\n  on a transaction that is not active, it throws and `web.InvalidStateError`\n\n  `transaction.commit();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/commit`"}, :name idb.IDBTransaction/commit, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The commit() method of the `idb.IDBTransaction` interface commits\n  transaction if it is alled on an active transaction. If it is\n  on a transaction that is not active, it throws and `web.InvalidStateError`\n\n  `transaction.commit();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/commit`"}, object-store {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 27, :column 7, :end-line 27, :end-column 19, :arglists (quote ([this name])), :doc "Method.\n\n  The objectStore() method of the `idb.IDBTransaction` interface\n  an object store that has already been added to the scope of this\n\n  `IDBTransaction.objectStore(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore`"}, :name idb.IDBTransaction/object-store, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 19, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The objectStore() method of the `idb.IDBTransaction` interface\n  an object store that has already been added to the scope of this\n\n  `IDBTransaction.objectStore(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/objectStore`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBTransaction.cljs", :line 74, :column 7, :end-line 74, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMError` containing the relevant error. In Chrome 48+/Firefox\n  this property returns a `dom.DOMException` because DOMError has\n  removed from the DOM standard. The exact error is one of serveral\n  It can be a reference to the same error as the request object\n  raised it, or a transaction failure (for example `web.QuotaExceededError`\n  `web.UnknownError`).\n\n  `var myError = transaction.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error`"}, :name idb.IDBTransaction/error, :variadic false, :file "src/idb/IDBTransaction.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMError` containing the relevant error. In Chrome 48+/Firefox\n  this property returns a `dom.DOMException` because DOMError has\n  removed from the DOM standard. The exact error is one of serveral\n  It can be a reference to the same error as the request object\n  raised it, or a transaction failure (for example `web.QuotaExceededError`\n  `web.UnknownError`).\n\n  `var myError = transaction.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBTransaction/error`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Note that as of Firefox 40, IndexedDB transactions have relaxed\n  guarantees to increase performance (see bug 1112702.) Previously\n  a readwrite transaction `idb.IDBTransaction.oncomplete` was fired\n  when all data was guaranteed to have been flushed to disk. In\n  40+ the complete event is fired after the OS has been told to\n  the data but potentially before that data has actually been flushed\n  disk. The complete event may thus be delivered quicker than before,\n  there exists a small chance that the entire transaction will\n  lost if the OS crashes or there is a loss of system power before\n  data is flushed to disk. Since such catastrophic events are rare\n  consumers should not need to concern themselves further."}