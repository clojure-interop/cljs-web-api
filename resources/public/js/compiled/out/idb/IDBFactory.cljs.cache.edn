{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name idb.IDBFactory, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {cmp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBFactory.cljs", :line 7, :column 7, :end-line 7, :end-column 10, :arglists (quote ([this first second])), :doc "Method.\n\n  An integer that indicates the result of the comparison; the table\n  lists the possible values and their meanings:\n\n  `var result = indexedDB.cmp(first, second);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp`"}, :name idb.IDBFactory/cmp, :variadic false, :file "src/idb/IDBFactory.cljs", :end-column 10, :method-params ([this first second]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this first second])), :doc "Method.\n\n  An integer that indicates the result of the comparison; the table\n  lists the possible values and their meanings:\n\n  `var result = indexedDB.cmp(first, second);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/cmp`"}, databases {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBFactory.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The databases method of the `idb.IDBFactory` interface returns\n  list represening all the available databases, including their\n  and versions.\n\n  `const promise = indexedDB.databases()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases`"}, :name idb.IDBFactory/databases, :variadic false, :file "src/idb/IDBFactory.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The databases method of the `idb.IDBFactory` interface returns\n  list represening all the available databases, including their\n  and versions.\n\n  `const promise = indexedDB.databases()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/databases`"}, delete-database {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBFactory.cljs", :line 32, :column 7, :end-line 32, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The deleteDatabase() method of the `idb.IDBFactory` interface\n  the deletion of a database. The method returns an `idb.IDBOpenDBRequest`\n  immediately, and performs the deletion operation asynchronously.\n\n  `For the current standard:\n\n\n\n  var request = indexedDB.deleteDatabase(name);\n\n  For the experimental version with options (see below):\n\n\n\n  var request = indexedDB.deleteDatabase(name, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBFactory/delete-database, :variadic true, :file "src/idb/IDBFactory.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The deleteDatabase() method of the `idb.IDBFactory` interface\n  the deletion of a database. The method returns an `idb.IDBOpenDBRequest`\n  immediately, and performs the deletion operation asynchronously.\n\n  `For the current standard:\n\n\n\n  var request = indexedDB.deleteDatabase(name);\n\n  For the experimental version with options (see below):\n\n\n\n  var request = indexedDB.deleteDatabase(name, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/deleteDatabase`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/idb/IDBFactory.cljs", :line 55, :column 7, :end-line 55, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  If an error occurs while the database connection is being opened,\n  an error event is fired on the request object returned from this\n\n  `For the current standard:\n\n\n\n  var IDBOpenDBRequest = indexedDB.open(name);\n  var IDBOpenDBRequest = indexedDB.open(name, version);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name idb.IDBFactory/open, :variadic true, :file "src/idb/IDBFactory.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  If an error occurs while the database connection is being opened,\n  an error event is fired on the request object returned from this\n\n  `For the current standard:\n\n\n\n  var IDBOpenDBRequest = indexedDB.open(name);\n  var IDBOpenDBRequest = indexedDB.open(name, version);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IDBFactory/open`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "In the following code snippet, we make a request to open a database,\n  include handlers for the success and error cases. For a full\n  example, see our To-do Notifications app (view example live.)"}