{:rename-macros {}, :renames {}, :externs {AudioWorkletNode {}}, :use-macros {}, :excludes #{}, :name audio.AudioWorkletNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name audio.AudioWorkletNode/constructor, :file "src/audio/AudioWorkletNode.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The AudioWorkletNode() constructor creates a new `audio.AudioWorkletNode` object, which represents an `audio.AudioNode` with custom audio processing capabilities.\n\n  context\n  The `web.BaseAudioContext` instance this node will be associated with.\n  name\n  A string, which represents the name of the `audio.AudioWorkletProcessor` this node will be based on. A processor with the provided name must first be registered using the `audio.AudioWorkletGlobalScope.registerProcessor` method.\n  options Optional\n  An object based on the `audio.AudioWorkletNodeOptions` dictionary, which contains zero or more optional properties to configure the new node. The result of the structured clone algorithm applied to the object is also internally passed into the associated `audio.AudioWorkletProcessor's constructor` — this allows custom initialization of an underlying user-defined `audio.AudioWorkletProcessor`. Available properties are as follows:\n  numberOfInputs Optional\n  The value to initialize the `web.numberOfInputs` property to. Defaults to 1.\n  numberOfOutputs Optional\n  The value to initialize the `web.numberOfOutputs` property to. Defaults to 1.\n  outputChannelCount Optional\n  An array defining the number of channels for each output. For example, outputChannelCount: [n, m] specifies the number of channels in the first output to be n and the second output to be m. The array length must match numberOfOutputs.\n  parameterData Optional\n  An object containing the initial values of custom `audio.AudioParam` objects on this node (in its `web.parameters` property), with key being the name of a custom parameter and value being its initial value.\n  processorOptions Optional\n  Any additional data that can be used for custom initialization of the underlying `audio.AudioWorkletProcessor`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/AudioWorkletNode`", :tag js}, onprocessorerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 33, :column 7, :end-line 33, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onprocessorerror property of the `audio.AudioWorkletNode`\n  defines an event handler function to be called when the `web.processorerror`\n  fires. This occurs when the underlying `audio.AudioWorkletProcessor`\n  the node throws an exception in its constructor, the `web.process`\n  or any user-defined class method.\n\n  `audioWorkletNode.onprocessorerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/onprocessorerror`"}, :name audio.AudioWorkletNode/onprocessorerror, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onprocessorerror property of the `audio.AudioWorkletNode`\n  defines an event handler function to be called when the `web.processorerror`\n  fires. This occurs when the underlying `audio.AudioWorkletProcessor`\n  the node throws an exception in its constructor, the `web.process`\n  or any user-defined class method.\n\n  `audioWorkletNode.onprocessorerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/onprocessorerror`"}, set-onprocessorerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 48, :column 7, :end-line 48, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The onprocessorerror property of the `audio.AudioWorkletNode`\n  defines an event handler function to be called when the `web.processorerror`\n  fires. This occurs when the underlying `audio.AudioWorkletProcessor`\n  the node throws an exception in its constructor, the `web.process`\n  or any user-defined class method.\n\n  `audioWorkletNode.onprocessorerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/onprocessorerror`"}, :name audio.AudioWorkletNode/set-onprocessorerror!, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onprocessorerror property of the `audio.AudioWorkletNode`\n  defines an event handler function to be called when the `web.processorerror`\n  fires. This occurs when the underlying `audio.AudioWorkletProcessor`\n  the node throws an exception in its constructor, the `web.process`\n  or any user-defined class method.\n\n  `audioWorkletNode.onprocessorerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/onprocessorerror`"}, parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 63, :column 7, :end-line 63, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The read-only parameters property of the `audio.AudioWorkletNode`\n  returns the associated `audio.AudioParamMap` — that is, a Map-like\n  of `audio.AudioParam` objects. They are instantiated during creation\n  the underlying `audio.AudioWorkletProcessor` according to its\n  static getter.\n\n  `audioWorkletNodeInstance.parameters`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters`"}, :name audio.AudioWorkletNode/parameters, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only parameters property of the `audio.AudioWorkletNode`\n  returns the associated `audio.AudioParamMap` — that is, a Map-like\n  of `audio.AudioParam` objects. They are instantiated during creation\n  the underlying `audio.AudioWorkletProcessor` according to its\n  static getter.\n\n  `audioWorkletNodeInstance.parameters`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters`"}, set-parameters! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 78, :column 7, :end-line 78, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only parameters property of the `audio.AudioWorkletNode`\n  returns the associated `audio.AudioParamMap` — that is, a Map-like\n  of `audio.AudioParam` objects. They are instantiated during creation\n  the underlying `audio.AudioWorkletProcessor` according to its\n  static getter.\n\n  `audioWorkletNodeInstance.parameters`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters`"}, :name audio.AudioWorkletNode/set-parameters!, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only parameters property of the `audio.AudioWorkletNode`\n  returns the associated `audio.AudioParamMap` — that is, a Map-like\n  of `audio.AudioParam` objects. They are instantiated during creation\n  the underlying `audio.AudioWorkletProcessor` according to its\n  static getter.\n\n  `audioWorkletNodeInstance.parameters`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/parameters`"}, port {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 93, :column 7, :end-line 93, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only port property of the `audio.AudioWorkletNode` interface\n  the associated `web.MessagePort`. It can be used to communicate\n  the node and its associated `audio.AudioWorkletProcessor`.\n\n  `audioWorkletNodeInstance.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port`"}, :name audio.AudioWorkletNode/port, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only port property of the `audio.AudioWorkletNode` interface\n  the associated `web.MessagePort`. It can be used to communicate\n  the node and its associated `audio.AudioWorkletProcessor`.\n\n  `audioWorkletNodeInstance.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port`"}, set-port! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletNode.cljs", :line 106, :column 7, :end-line 106, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only port property of the `audio.AudioWorkletNode` interface\n  the associated `web.MessagePort`. It can be used to communicate\n  the node and its associated `audio.AudioWorkletProcessor`.\n\n  `audioWorkletNodeInstance.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port`"}, :name audio.AudioWorkletNode/set-port!, :variadic false, :file "src/audio/AudioWorkletNode.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only port property of the `audio.AudioWorkletNode` interface\n  the associated `web.MessagePort`. It can be used to communicate\n  the node and its associated `audio.AudioWorkletProcessor`.\n\n  `audioWorkletNodeInstance.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletNode/port`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioWorkletNode interface of the Web Audio API represents\n  base class for a user-defined `audio.AudioNode`, which can be\n  to an audio routing graph along with other nodes. It has an associated\n  which does the actual audio processing in a Web Audio rendering"}