{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name audio.AudioNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-number-of-outputs! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 185, :column 7, :end-line 185, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The numberOfOutputs property of the `audio.AudioNode` interface\n  the number of outputs coming out of the node.\n\n  `var numOutputs = audioNode.numberOfOutputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs`"}, :name audio.AudioNode/set-number-of-outputs!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The numberOfOutputs property of the `audio.AudioNode` interface\n  the number of outputs coming out of the node.\n\n  `var numOutputs = audioNode.numberOfOutputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs`"}, channel-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 41, :column 7, :end-line 41, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The channelCount property of the `audio.AudioNode` interface\n  an integer used to determine how many channels are used when\n  and down-mixing connections to any inputs to the node.\n\n  `var oscillator = audioCtx.createOscillator();\n  var channels = oscillator.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount`"}, :name audio.AudioNode/channel-count, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The channelCount property of the `audio.AudioNode` interface\n  an integer used to determine how many channels are used when\n  and down-mixing connections to any inputs to the node.\n\n  `var oscillator = audioCtx.createOscillator();\n  var channels = oscillator.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount`"}, set-number-of-inputs! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 161, :column 7, :end-line 161, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The numberOfInputs property of the `audio.AudioNode` interface\n  the number of inputs feeding the node.\n\n  `var numInputs = audioNode.numberOfInputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs`"}, :name audio.AudioNode/set-number-of-inputs!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The numberOfInputs property of the `audio.AudioNode` interface\n  the number of inputs feeding the node.\n\n  `var numInputs = audioNode.numberOfInputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs`"}, channel-count-mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 69, :column 7, :end-line 69, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The possible values of channelCountMode and their meanings are:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelCountMode = 'explicit';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode`"}, :name audio.AudioNode/channel-count-mode, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The possible values of channelCountMode and their meanings are:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelCountMode = 'explicit';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode`"}, set-context! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 136, :column 7, :end-line 136, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only context property of the `audio.AudioNode` interface\n  the associated `web.BaseAudioContext`, that is the object representing\n  processing graph the node is participating in.\n\n  `var aContext = anAudioNode.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context`"}, :name audio.AudioNode/set-context!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only context property of the `audio.AudioNode` interface\n  the associated `web.BaseAudioContext`, that is the object representing\n  processing graph the node is participating in.\n\n  `var aContext = anAudioNode.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context`"}, set-channel-interpretation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 108, :column 7, :end-line 108, :end-column 34, :arglists (quote ([this val])), :doc "Property.\n\n  When the number of channels doesn't match between an input and\n  output, up- or down-mixing happens according the following rules.\n  can be somewhat controlled by setting the `audio.AudioNode.channelInterpretation`\n  to speakers or discrete:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelInterpretation = 'discrete';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation`"}, :name audio.AudioNode/set-channel-interpretation!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 34, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  When the number of channels doesn't match between an input and\n  output, up- or down-mixing happens according the following rules.\n  can be somewhat controlled by setting the `audio.AudioNode.channelInterpretation`\n  to speakers or discrete:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelInterpretation = 'discrete';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation`"}, connect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  If the destination is a node, connect() returns a reference to\n  destination `audio.AudioNode` object, allowing you to chain multiple\n  calls. In some browsers, older implementations of this interface\n  `web.undefined`.\n\n  `var destinationNode = AudioNode.connect(destination, outputIndex, inputIndex);\n\n  AudioNode.connect(destination, outputIndex);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioNode/connect, :variadic true, :file "src/audio/AudioNode.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  If the destination is a node, connect() returns a reference to\n  destination `audio.AudioNode` object, allowing you to chain multiple\n  calls. In some browsers, older implementations of this interface\n  `web.undefined`.\n\n  `var destinationNode = AudioNode.connect(destination, outputIndex, inputIndex);\n\n  AudioNode.connect(destination, outputIndex);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/connect`"}, number-of-inputs {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 149, :column 7, :end-line 149, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The numberOfInputs property of the `audio.AudioNode` interface\n  the number of inputs feeding the node.\n\n  `var numInputs = audioNode.numberOfInputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs`"}, :name audio.AudioNode/number-of-inputs, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The numberOfInputs property of the `audio.AudioNode` interface\n  the number of inputs feeding the node.\n\n  `var numInputs = audioNode.numberOfInputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfInputs`"}, number-of-outputs {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 173, :column 7, :end-line 173, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The numberOfOutputs property of the `audio.AudioNode` interface\n  the number of outputs coming out of the node.\n\n  `var numOutputs = audioNode.numberOfOutputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs`"}, :name audio.AudioNode/number-of-outputs, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The numberOfOutputs property of the `audio.AudioNode` interface\n  the number of outputs coming out of the node.\n\n  `var numOutputs = audioNode.numberOfOutputs;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/numberOfOutputs`"}, context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 123, :column 7, :end-line 123, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only context property of the `audio.AudioNode` interface\n  the associated `web.BaseAudioContext`, that is the object representing\n  processing graph the node is participating in.\n\n  `var aContext = anAudioNode.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context`"}, :name audio.AudioNode/context, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only context property of the `audio.AudioNode` interface\n  the associated `web.BaseAudioContext`, that is the object representing\n  processing graph the node is participating in.\n\n  `var aContext = anAudioNode.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/context`"}, set-channel-count-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 81, :column 7, :end-line 81, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The possible values of channelCountMode and their meanings are:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelCountMode = 'explicit';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode`"}, :name audio.AudioNode/set-channel-count-mode!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The possible values of channelCountMode and their meanings are:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelCountMode = 'explicit';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCountMode`"}, disconnect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 22, :column 7, :end-line 22, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  `web.undefined`\n\n  `AudioNode.disconnect();\n\n  AudioNode.disconnect(output);\n\n  AudioNode.disconnect(destination);\n\n  AudioNode.disconnect(destination, output);\n\n  AudioNode.disconnect(destination, output, input);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioNode/disconnect, :variadic true, :file "src/audio/AudioNode.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  `web.undefined`\n\n  `AudioNode.disconnect();\n\n  AudioNode.disconnect(output);\n\n  AudioNode.disconnect(destination);\n\n  AudioNode.disconnect(destination, output);\n\n  AudioNode.disconnect(destination, output, input);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/disconnect`"}, set-channel-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 55, :column 7, :end-line 55, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The channelCount property of the `audio.AudioNode` interface\n  an integer used to determine how many channels are used when\n  and down-mixing connections to any inputs to the node.\n\n  `var oscillator = audioCtx.createOscillator();\n  var channels = oscillator.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount`"}, :name audio.AudioNode/set-channel-count!, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The channelCount property of the `audio.AudioNode` interface\n  an integer used to determine how many channels are used when\n  and down-mixing connections to any inputs to the node.\n\n  `var oscillator = audioCtx.createOscillator();\n  var channels = oscillator.channelCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelCount`"}, channel-interpretation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioNode.cljs", :line 93, :column 7, :end-line 93, :end-column 29, :arglists (quote ([this])), :doc "Property.\n\n  When the number of channels doesn't match between an input and\n  output, up- or down-mixing happens according the following rules.\n  can be somewhat controlled by setting the `audio.AudioNode.channelInterpretation`\n  to speakers or discrete:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelInterpretation = 'discrete';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation`"}, :name audio.AudioNode/channel-interpretation, :variadic false, :file "src/audio/AudioNode.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  When the number of channels doesn't match between an input and\n  output, up- or down-mixing happens according the following rules.\n  can be somewhat controlled by setting the `audio.AudioNode.channelInterpretation`\n  to speakers or discrete:\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.channelInterpretation = 'discrete';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioNode/channelInterpretation`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioNode interface is a generic interface for representing\n  audio processing module. Examples include:"}