{:rename-macros {}, :renames {}, :externs {AudioContext {}}, :use-macros {}, :excludes #{}, :name audio.AudioContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {resume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 123, :column 7, :end-line 123, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The resume() method of the `audio.AudioContext` interface resumes\n  progression of time in an audio context that has previously been\n\n  `completePromise = audioContext.resume();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume`"}, :name audio.AudioContext/resume, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The resume() method of the `audio.AudioContext` interface resumes\n  progression of time in an audio context that has previously been\n\n  `completePromise = audioContext.resume();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/resume`"}, create-media-stream-source {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 75, :column 7, :end-line 75, :end-column 33, :arglists (quote ([this stream])), :doc "Method.\n\n  For more details about media stream audio source nodes, check\n  the `media.MediaStreamAudioSourceNode` reference page.\n\n  `audioSourceNode = audioContext.createMediaStreamSource(stream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource`"}, :name audio.AudioContext/create-media-stream-source, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 33, :method-params ([this stream]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this stream])), :doc "Method.\n\n  For more details about media stream audio source nodes, check\n  the `media.MediaStreamAudioSourceNode` reference page.\n\n  `audioSourceNode = audioContext.createMediaStreamSource(stream);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamSource`"}, set-output-latency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 191, :column 7, :end-line 191, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The outputLatency read-only property of the `audio.AudioContext`\n  provides an estimation of the output latency of the current audio\n\n  `var latency = audioCtx.outputLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency`"}, :name audio.AudioContext/set-output-latency!, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The outputLatency read-only property of the `audio.AudioContext`\n  provides an estimation of the output latency of the current audio\n\n  `var latency = audioCtx.outputLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency`"}, create-wave-table {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 100, :column 7, :end-line 100, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The `audio.AudioContext` method createWaveTable() is now obsolete;\n  should instead use the method `web.createPeriodicWave()`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createWaveTable`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/create-wave-table, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `audio.AudioContext` method createWaveTable() is now obsolete;\n  should instead use the method `web.createPeriodicWave()`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createWaveTable`"}, create-media-element-source {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 46, :column 7, :end-line 46, :end-column 34, :arglists (quote ([this & args])), :doc "Method.\n\n  For more details about media element audio source nodes, check\n  the `media.MediaElementAudioSourceNode` reference page.\n\n  `var audioCtx = new AudioContext();\n  var source = audioCtx.createMediaElementSource(myMediaElement);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/create-media-element-source, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  For more details about media element audio source nodes, check\n  the `media.MediaElementAudioSourceNode` reference page.\n\n  `var audioCtx = new AudioContext();\n  var source = audioCtx.createMediaElementSource(myMediaElement);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaElementSource`"}, create-media-stream-track-source {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 87, :column 7, :end-line 87, :end-column 39, :arglists (quote ([this & args])), :doc "Method.\n\n  A `media.MediaStreamTrackAudioSourceNode` object which acts as\n  source for audio data found in the specified audio track.\n\n  `var audioCtx = new AudioContext();\n  var track = audioCtx.createMediaStreamTrackSource(track);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/create-media-stream-track-source, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 39, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  A `media.MediaStreamTrackAudioSourceNode` object which acts as\n  source for audio data found in the specified audio track.\n\n  `var audioCtx = new AudioContext();\n  var track = audioCtx.createMediaStreamTrackSource(track);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamTrackSource`"}, set-base-latency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 165, :column 7, :end-line 165, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The baseLatency read-only property of the `audio.AudioContext`\n  returns a double that represents the number of seconds of processing\n  incurred by the AudioContext passing the audio from the `audio.AudioDestinationNode`\n  the audio subsystem.\n\n  `var baseLatency = audioCtx.baseLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency`"}, :name audio.AudioContext/set-base-latency!, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The baseLatency read-only property of the `audio.AudioContext`\n  returns a double that represents the number of seconds of processing\n  incurred by the AudioContext passing the audio from the `audio.AudioDestinationNode`\n  the audio subsystem.\n\n  `var baseLatency = audioCtx.baseLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 21, :column 7, :end-line 21, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The close() method of the `audio.AudioContext` Interface closes\n  audio context, releasing any system audio resources that it uses.\n\n  `var audioCtx = new AudioContext();\n  audioCtx.close().then(function() { ... });\n  await audioCtx.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/close, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The close() method of the `audio.AudioContext` Interface closes\n  audio context, releasing any system audio resources that it uses.\n\n  `var audioCtx = new AudioContext();\n  audioCtx.close().then(function() { ... });\n  await audioCtx.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/close`"}, suspend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 135, :column 7, :end-line 135, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The suspend() method of the `audio.AudioContext` Interface suspends\n  progression of time in the audio context, temporarily halting\n  hardware access and reducing CPU/battery usage in the process\n  this is useful if you want an application to power down the audio\n  when it will not be using an audio context for a while.\n\n  `var audioCtx = new AudioContext();\n  audioCtx.suspend().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/suspend, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The suspend() method of the `audio.AudioContext` Interface suspends\n  progression of time in the audio context, temporarily halting\n  hardware access and reducing CPU/battery usage in the process\n  this is useful if you want an application to power down the audio\n  when it will not be using an audio context for a while.\n\n  `var audioCtx = new AudioContext();\n  audioCtx.suspend().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/suspend`"}, create-media-stream-destination {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 59, :column 7, :end-line 59, :end-column 38, :arglists (quote ([this & args])), :doc "Method.\n\n  The `media.MediaStream` is created when the node is created and\n  accessible via the `media.MediaStreamAudioDestinationNode`'s\n  attribute. This stream can be used in a similar way as a MediaStream\n  via `web.navigator.getUserMedia` — it can, for example, be sent\n  a remote peer using the RTCPeerConnection addStream() method.\n\n  `var audioCtx = new AudioContext();\n  var destination = audioCtx.createMediaStreamDestination();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioContext/create-media-stream-destination, :variadic true, :file "src/audio/AudioContext.cljs", :end-column 38, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `media.MediaStream` is created when the node is created and\n  accessible via the `media.MediaStreamAudioDestinationNode`'s\n  attribute. This stream can be used in a similar way as a MediaStream\n  via `web.navigator.getUserMedia` — it can, for example, be sent\n  a remote peer using the RTCPeerConnection addStream() method.\n\n  `var audioCtx = new AudioContext();\n  var destination = audioCtx.createMediaStreamDestination();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createMediaStreamDestination`"}, create-java-script-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 35, :column 7, :end-line 35, :end-column 30, :arglists (quote ([this buffer-size num-input-channels num-output-channels])), :doc "Method.\n\n  The following script illustrates the use of createJavaScriptNode():\n\n  `var jsNode = audioCtx.createJavaScriptNode(bufferSize, numInputChannels, numOutputChannels);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createJavaScriptNode`"}, :name audio.AudioContext/create-java-script-node, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 30, :method-params ([this buffer-size num-input-channels num-output-channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this buffer-size num-input-channels num-output-channels])), :doc "Method.\n\n  The following script illustrates the use of createJavaScriptNode():\n\n  `var jsNode = audioCtx.createJavaScriptNode(bufferSize, numInputChannels, numOutputChannels);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createJavaScriptNode`"}, base-latency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 151, :column 7, :end-line 151, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The baseLatency read-only property of the `audio.AudioContext`\n  returns a double that represents the number of seconds of processing\n  incurred by the AudioContext passing the audio from the `audio.AudioDestinationNode`\n  the audio subsystem.\n\n  `var baseLatency = audioCtx.baseLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency`"}, :name audio.AudioContext/base-latency, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The baseLatency read-only property of the `audio.AudioContext`\n  returns a double that represents the number of seconds of processing\n  incurred by the AudioContext passing the audio from the `audio.AudioDestinationNode`\n  the audio subsystem.\n\n  `var baseLatency = audioCtx.baseLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/baseLatency`"}, output-latency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 179, :column 7, :end-line 179, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The outputLatency read-only property of the `audio.AudioContext`\n  provides an estimation of the output latency of the current audio\n\n  `var latency = audioCtx.outputLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency`"}, :name audio.AudioContext/output-latency, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The outputLatency read-only property of the `audio.AudioContext`\n  provides an estimation of the output latency of the current audio\n\n  `var latency = audioCtx.outputLatency;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/outputLatency`"}, get-output-timestamp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 110, :column 7, :end-line 110, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  The getOutputTimestamp() property of the `audio.AudioContext`\n  returns a new AudioTimestamp object containing two correlated\n  audio stream position values.\n\n  `var timestamp = AudioContext.getOutputTimestamp()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp`"}, :name audio.AudioContext/get-output-timestamp, :variadic false, :file "src/audio/AudioContext.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getOutputTimestamp() property of the `audio.AudioContext`\n  returns a new AudioTimestamp object containing two correlated\n  audio stream position values.\n\n  `var timestamp = AudioContext.getOutputTimestamp()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/getOutputTimestamp`"}, constructor {:name audio.AudioContext/constructor, :file "src/audio/AudioContext.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioContext.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The AudioContext() constructor creates a new `audio.AudioContext` object which represents an audio-processing graph, built from audio modules linked together, each represented by an `audio.AudioNode`.\n\n  options Optional\n  An object based on the `audio.AudioContextOptions` dictionary that contains zero or more optional properties to configure the new context. Available properties are as follows:\n  `web.latencyHint` Optional\n  The type of playback that the context will be used for, as a value from the `audio.AudioContextLatencyCategory` enum or a double-precision floating-point value indicating the preferred maximum latency of the context in seconds. The user agent may or may not choose to meet this request; check the value of `audio.AudioContext.baseLatency` to determine the true latency after creating the context.\n  `web.sampleRate` Optional\n  The `web.sampleRate` to be used by the AudioContext, specified in samples per second. The value may be any value supported by `audio.AudioBuffer`. If not specified, the preferred sample rate for the context's output device is used by default.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/AudioContext`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioContext interface represents an audio-processing graph\n  from audio modules linked together, each represented by an `audio.AudioNode`."}