{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name audio.AudioWorkletGlobalScope, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {register-processor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioWorkletGlobalScope.cljs", :line 9, :column 7, :end-line 9, :end-column 25, :arglists (quote ([this name processor-ctor])), :doc "Method.\n\n  The registerProcessor method of the `audio.AudioWorkletGlobalScope`\n  registers a class constructor derived from `audio.AudioWorkletProcessor`\n  under a specified name.\n\n  `AudioWorkletGlobalScope.registerProcessor(name, processorCtor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor`"}, :name audio.AudioWorkletGlobalScope/register-processor, :variadic false, :file "src/audio/AudioWorkletGlobalScope.cljs", :end-column 25, :method-params ([this name processor-ctor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name processor-ctor])), :doc "Method.\n\n  The registerProcessor method of the `audio.AudioWorkletGlobalScope`\n  registers a class constructor derived from `audio.AudioWorkletProcessor`\n  under a specified name.\n\n  `AudioWorkletGlobalScope.registerProcessor(name, processorCtor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioWorkletGlobalScope/registerProcessor`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioWorkletGlobalScope interface of the Web Audio API represents\n  global execution context for user-supplied code, which defines\n  `audio.AudioWorkletProcessor`-derived classes. Each `web.BaseAudioContext`\n  a single `audio.AudioWorklet` available under the `web.audioWorklet`\n  which runs its code in a single AudioWorkletGlobalScope."}