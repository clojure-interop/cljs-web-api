{:rename-macros {}, :renames {}, :externs {AudioBufferSourceNode {}}, :use-macros {}, :excludes #{loop}, :name audio.AudioBufferSourceNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-loop-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 178, :column 7, :end-line 178, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The loopStart property of the `audio.AudioBufferSourceNode` interface\n  a floating-point value indicating, in seconds, where in the `audio.AudioBuffer`\n  restart of the play must happen.\n\n  `AudioBufferSourceNode.loopStart = startOffsetInSeconds;\n\n  startOffsetInSeconds = AudioBufferSourceNode.loopStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart`"}, :name audio.AudioBufferSourceNode/set-loop-start!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The loopStart property of the `audio.AudioBufferSourceNode` interface\n  a floating-point value indicating, in seconds, where in the `audio.AudioBuffer`\n  restart of the play must happen.\n\n  `AudioBufferSourceNode.loopStart = startOffsetInSeconds;\n\n  startOffsetInSeconds = AudioBufferSourceNode.loopStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart`"}, buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 47, :column 7, :end-line 47, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The buffer property of the `audio.AudioBufferSourceNode` interface\n  the ability to play back audio using an `audio.AudioBuffer` as\n  source of the sound data.\n\n  `AudioBufferSourceNode.buffer = soundBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer`"}, :name audio.AudioBufferSourceNode/buffer, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The buffer property of the `audio.AudioBufferSourceNode` interface\n  the ability to play back audio using an `audio.AudioBuffer` as\n  source of the sound data.\n\n  `AudioBufferSourceNode.buffer = soundBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer`"}, set-loop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 119, :column 7, :end-line 119, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The loop property's default value is false.\n\n  `var loopingEnabled = AudioBufferSourceNode.loop;\n  AudioBufferSourceNode.loop = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop`"}, :name audio.AudioBufferSourceNode/set-loop!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The loop property's default value is false.\n\n  `var loopingEnabled = AudioBufferSourceNode.loop;\n  AudioBufferSourceNode.loop = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop`"}, set-playback-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 206, :column 7, :end-line 206, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The playbackRate property of the `audio.AudioBufferSourceNode`\n  Is a k-rate `audio.AudioParam` that defines the speed at which\n  audio asset will be played.\n\n  `AudioBufferSourceNode.playbackRate.value = playbackRateProportion;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate`"}, :name audio.AudioBufferSourceNode/set-playback-rate!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The playbackRate property of the `audio.AudioBufferSourceNode`\n  Is a k-rate `audio.AudioParam` that defines the speed at which\n  audio asset will be played.\n\n  `AudioBufferSourceNode.playbackRate.value = playbackRateProportion;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate`"}, set-buffer! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 60, :column 7, :end-line 60, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The buffer property of the `audio.AudioBufferSourceNode` interface\n  the ability to play back audio using an `audio.AudioBuffer` as\n  source of the sound data.\n\n  `AudioBufferSourceNode.buffer = soundBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer`"}, :name audio.AudioBufferSourceNode/set-buffer!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The buffer property of the `audio.AudioBufferSourceNode` interface\n  the ability to play back audio using an `audio.AudioBuffer` as\n  source of the sound data.\n\n  `AudioBufferSourceNode.buffer = soundBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/buffer`"}, set-detune! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 90, :column 7, :end-line 90, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The detune property of the `audio.AudioBufferSourceNode` interface\n  a k-rate `audio.AudioParam` representing detuning of oscillation\n  cents.\n\n  `var source = audioCtx.createBufferSource();\n  source.detune.value = 100; // value in cents\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune`"}, :name audio.AudioBufferSourceNode/set-detune!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The detune property of the `audio.AudioBufferSourceNode` interface\n  a k-rate `audio.AudioParam` representing detuning of oscillation\n  cents.\n\n  `var source = audioCtx.createBufferSource();\n  source.detune.value = 100; // value in cents\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune`"}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 36, :column 7, :end-line 36, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  `web.undefined`.\n\n  `AudioBufferSourceNode.start([when][, offset][, duration]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioBufferSourceNode/start, :variadic true, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  `web.undefined`.\n\n  `AudioBufferSourceNode.start([when][, offset][, duration]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/start`"}, set-loop-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 147, :column 7, :end-line 147, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  A floating-point number indicating the offset, in seconds, into\n  audio buffer at which each loop will loop return to the beginning\n  the loop (that is, the current play time gets reset to `audio.AudioBufferSourceNode.loopStart`).\n  property is only used if the `web.loop` property is true.\n\n  `AudioBufferSourceNode.loopEnd = endOffsetInSeconds;\n\n  var endOffsetInSeconds = AudioBufferSourceNode.loopEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd`"}, :name audio.AudioBufferSourceNode/set-loop-end!, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A floating-point number indicating the offset, in seconds, into\n  audio buffer at which each loop will loop return to the beginning\n  the loop (that is, the current play time gets reset to `audio.AudioBufferSourceNode.loopStart`).\n  property is only used if the `web.loop` property is true.\n\n  `AudioBufferSourceNode.loopEnd = endOffsetInSeconds;\n\n  var endOffsetInSeconds = AudioBufferSourceNode.loopEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd`"}, playback-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 193, :column 7, :end-line 193, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The playbackRate property of the `audio.AudioBufferSourceNode`\n  Is a k-rate `audio.AudioParam` that defines the speed at which\n  audio asset will be played.\n\n  `AudioBufferSourceNode.playbackRate.value = playbackRateProportion;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate`"}, :name audio.AudioBufferSourceNode/playback-rate, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The playbackRate property of the `audio.AudioBufferSourceNode`\n  Is a k-rate `audio.AudioParam` that defines the speed at which\n  audio asset will be played.\n\n  `AudioBufferSourceNode.playbackRate.value = playbackRateProportion;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/playbackRate`"}, loop-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 163, :column 7, :end-line 163, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The loopStart property of the `audio.AudioBufferSourceNode` interface\n  a floating-point value indicating, in seconds, where in the `audio.AudioBuffer`\n  restart of the play must happen.\n\n  `AudioBufferSourceNode.loopStart = startOffsetInSeconds;\n\n  startOffsetInSeconds = AudioBufferSourceNode.loopStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart`"}, :name audio.AudioBufferSourceNode/loop-start, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The loopStart property of the `audio.AudioBufferSourceNode` interface\n  a floating-point value indicating, in seconds, where in the `audio.AudioBuffer`\n  restart of the play must happen.\n\n  `AudioBufferSourceNode.loopStart = startOffsetInSeconds;\n\n  startOffsetInSeconds = AudioBufferSourceNode.loopStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopStart`"}, loop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 107, :column 7, :end-line 107, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The loop property's default value is false.\n\n  `var loopingEnabled = AudioBufferSourceNode.loop;\n  AudioBufferSourceNode.loop = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop`"}, :name audio.AudioBufferSourceNode/loop, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The loop property's default value is false.\n\n  `var loopingEnabled = AudioBufferSourceNode.loop;\n  AudioBufferSourceNode.loop = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loop`"}, loop-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 131, :column 7, :end-line 131, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  A floating-point number indicating the offset, in seconds, into\n  audio buffer at which each loop will loop return to the beginning\n  the loop (that is, the current play time gets reset to `audio.AudioBufferSourceNode.loopStart`).\n  property is only used if the `web.loop` property is true.\n\n  `AudioBufferSourceNode.loopEnd = endOffsetInSeconds;\n\n  var endOffsetInSeconds = AudioBufferSourceNode.loopEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd`"}, :name audio.AudioBufferSourceNode/loop-end, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A floating-point number indicating the offset, in seconds, into\n  audio buffer at which each loop will loop return to the beginning\n  the loop (that is, the current play time gets reset to `audio.AudioBufferSourceNode.loopStart`).\n  property is only used if the `web.loop` property is true.\n\n  `AudioBufferSourceNode.loopEnd = endOffsetInSeconds;\n\n  var endOffsetInSeconds = AudioBufferSourceNode.loopEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/loopEnd`"}, detune {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 73, :column 7, :end-line 73, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The detune property of the `audio.AudioBufferSourceNode` interface\n  a k-rate `audio.AudioParam` representing detuning of oscillation\n  cents.\n\n  `var source = audioCtx.createBufferSource();\n  source.detune.value = 100; // value in cents\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune`"}, :name audio.AudioBufferSourceNode/detune, :variadic false, :file "src/audio/AudioBufferSourceNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The detune property of the `audio.AudioBufferSourceNode` interface\n  a k-rate `audio.AudioParam` representing detuning of oscillation\n  cents.\n\n  `var source = audioCtx.createBufferSource();\n  source.detune.value = 100; // value in cents\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/detune`"}, constructor {:name audio.AudioBufferSourceNode/constructor, :file "src/audio/AudioBufferSourceNode.cljs", :line 10, :column 1, :end-line 10, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioBufferSourceNode.cljs", :line 10, :column 6, :end-line 10, :end-column 17}, :doc "Constructor.\n\n  The AudioBufferSourceNode() constructor creates a new `audio.AudioBufferSourceNode` object instance.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  context\n  A reference to an `audio.AudioContext`.\n  options Optional\n  Options are as follows:\n\n  buffer: An instance of `audio.AudioBuffer` to be played.\n  detune: A value in cents to modulate the speed of audio stream rendering. Its nominal range is (-∞ to ∞). The default is 0.\n  loop: A boolean indicating whether the audio should play in a loop. The default is false. If the loop is dynamically modified during playback, the new value will take effect on the next processing block of audio.\n  loopEnd: An optional value, in seconds, where looping should end if the loop attribute is true. The default is 0. Its value is exclusive to the content of the loop. The sample frames, comprising the loop, run from the values loopStart to loopEnd-(1/sampleRate). It's sensible to set this to a value between 0 and the duration of the buffer. If loopEnd is less than 0, looping will end at 0. If loopEnd is greater than the duration of the buffer, looping will end at the end of the buffer. This attribute is converted to an exact sample frame offset within the buffer, by multiplying by the buffer's sample rate and rounding to the nearest integer value. Thus, its behavior is independent of the value of the playbackRate parameter.\n\n\n\n  loopStart: An optional value in seconds, where looping should end if the loop attribute is true. The default is 0. It's sensible to set this to a value between 0 and the duration of the buffer. If loopStart is less than 0, looping will begin at 0. If loopStart is greater than the duration of the buffer, looping will begin at the end of the buffer. This attribute is converted to an exact sample frame offset within the buffer, by multiplying by the buffer's sample rate and rounding to the nearest integer value. Thus, its behavior is independent of the value of the playbackRate parameter.\n  playbackRate: The speed at which to render the audio stream. Its default value is 1. This parameter is k-rate. This is a compound parameter with detune. Its nominal range is (-∞ to ∞).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioBufferSourceNode/AudioBufferSourceNode`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioBufferSourceNode interface is an `audio.AudioScheduledSourceNode`\n  represents an audio source consisting of in-memory audio data,\n  in an `audio.AudioBuffer`. It's especially useful for playing\n  audio which has particularly stringent timing accuracy requirements,\n  as for sounds that must match a specific rhythm and can be kept\n  memory rather than being played from disk or the network."}