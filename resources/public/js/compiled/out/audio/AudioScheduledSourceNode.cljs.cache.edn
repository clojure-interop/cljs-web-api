{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name audio.AudioScheduledSourceNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioScheduledSourceNode.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  `web.undefined`\n\n  `AudioScheduledSourceNode.start([when [, offset [, duration]]]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioScheduledSourceNode/start, :variadic true, :file "src/audio/AudioScheduledSourceNode.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  `web.undefined`\n\n  `AudioScheduledSourceNode.start([when [, offset [, duration]]]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/start`"}, stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioScheduledSourceNode.cljs", :line 20, :column 7, :end-line 20, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The stop() method on `audio.AudioScheduledSourceNode` schedules\n  sound to cease playback at the specified time. If no time is\n  then the sound stops playing immediately.\n\n  `AudioScheduledSourceNode.stop([when]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name audio.AudioScheduledSourceNode/stop, :variadic true, :file "src/audio/AudioScheduledSourceNode.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The stop() method on `audio.AudioScheduledSourceNode` schedules\n  sound to cease playback at the specified time. If no time is\n  then the sound stops playing immediately.\n\n  `AudioScheduledSourceNode.stop([when]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/stop`"}, onended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioScheduledSourceNode.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onended event handler for the AudioScheduledSourceNode interface\n  an `web.EventHandler` to be executed when the ended event occurs\n  the node. This event is sent to the node when the concrete interface\n  as `audio.AudioBufferSourceNode`, `web.OscillatorNode`, or `web.ConstantSourceNode`)\n  that it has stopped playing.\n\n  `AudioScheduledSourceNode.onended = EventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended`"}, :name audio.AudioScheduledSourceNode/onended, :variadic false, :file "src/audio/AudioScheduledSourceNode.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onended event handler for the AudioScheduledSourceNode interface\n  an `web.EventHandler` to be executed when the ended event occurs\n  the node. This event is sent to the node when the concrete interface\n  as `audio.AudioBufferSourceNode`, `web.OscillatorNode`, or `web.ConstantSourceNode`)\n  that it has stopped playing.\n\n  `AudioScheduledSourceNode.onended = EventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended`"}, set-onended! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/audio/AudioScheduledSourceNode.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onended event handler for the AudioScheduledSourceNode interface\n  an `web.EventHandler` to be executed when the ended event occurs\n  the node. This event is sent to the node when the concrete interface\n  as `audio.AudioBufferSourceNode`, `web.OscillatorNode`, or `web.ConstantSourceNode`)\n  that it has stopped playing.\n\n  `AudioScheduledSourceNode.onended = EventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended`"}, :name audio.AudioScheduledSourceNode/set-onended!, :variadic false, :file "src/audio/AudioScheduledSourceNode.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onended event handler for the AudioScheduledSourceNode interface\n  an `web.EventHandler` to be executed when the ended event occurs\n  the node. This event is sent to the node when the concrete interface\n  as `audio.AudioBufferSourceNode`, `web.OscillatorNode`, or `web.ConstantSourceNode`)\n  that it has stopped playing.\n\n  `AudioScheduledSourceNode.onended = EventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AudioScheduledSourceNode/onended`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AudioScheduledSourceNode interfaceâ€”part of the Web Audio\n  a parent interface for several types of audio source node interfaces\n  share the ability to be started and stopped, optionally at specified\n  Specifically, this interface defines the `web.start()` and `web.stop()`\n  as well as the `web.onended` event handler."}