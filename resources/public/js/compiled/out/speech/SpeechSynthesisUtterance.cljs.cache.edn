{:rename-macros {}, :renames {}, :externs {SpeechSynthesisUtterance {}}, :use-macros {}, :excludes #{}, :name speech.SpeechSynthesisUtterance, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 151, :column 7, :end-line 151, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  paused part way through (when the pause event fires.)\n\n  `speechSynthesisUtteranceInstance.onpause = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause`"}, :name speech.SpeechSynthesisUtterance/onpause, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  paused part way through (when the pause event fires.)\n\n  `speechSynthesisUtteranceInstance.onpause = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause`"}, set-lang! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 32, :column 7, :end-line 32, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The lang property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the language of the utterance.\n\n  `var myLang = speechSynthesisUtteranceInstance.lang;\n  speechSynthesisUtteranceInstance.lang = 'en-US';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang`"}, :name speech.SpeechSynthesisUtterance/set-lang!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The lang property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the language of the utterance.\n\n  `var myLang = speechSynthesisUtteranceInstance.lang;\n  speechSynthesisUtteranceInstance.lang = 'en-US';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang`"}, onresume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 177, :column 7, :end-line 177, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onresume property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when a paused utterance\n  resumed (when the resume event fires.)\n\n  `speechSynthesisUtteranceInstance.onresume = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume`"}, :name speech.SpeechSynthesisUtterance/onresume, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onresume property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when a paused utterance\n  resumed (when the resume event fires.)\n\n  `speechSynthesisUtteranceInstance.onresume = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume`"}, onboundary {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onboundary property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a word or sentence boundary (when the boundary event fires.)\n\n  `speechSynthesisUtteranceInstance.onboundary = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary`"}, :name speech.SpeechSynthesisUtterance/onboundary, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onboundary property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a word or sentence boundary (when the boundary event fires.)\n\n  `speechSynthesisUtteranceInstance.onboundary = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary`"}, text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 281, :column 7, :end-line 281, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The text property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the text that will be synthesised when the utterance\n  spoken.\n\n  `var myText = speechSynthesisUtteranceInstance.text;\n  speechSynthesisUtteranceInstance.text = 'Hello I am speaking';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text`"}, :name speech.SpeechSynthesisUtterance/text, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The text property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the text that will be synthesised when the utterance\n  spoken.\n\n  `var myText = speechSynthesisUtteranceInstance.text;\n  speechSynthesisUtteranceInstance.text = 'Hello I am speaking';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text`"}, onend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The onend property of the `speech.SpeechSynthesisUtterance` interface\n  an event handler that will run when the utterance has finished\n  spoken (when the end event fires.)\n\n  `speechSynthesisUtteranceInstance.onend = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend`"}, :name speech.SpeechSynthesisUtterance/onend, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onend property of the `speech.SpeechSynthesisUtterance` interface\n  an event handler that will run when the utterance has finished\n  spoken (when the end event fires.)\n\n  `speechSynthesisUtteranceInstance.onend = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend`"}, set-onresume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 190, :column 7, :end-line 190, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onresume property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when a paused utterance\n  resumed (when the resume event fires.)\n\n  `speechSynthesisUtteranceInstance.onresume = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume`"}, :name speech.SpeechSynthesisUtterance/set-onresume!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onresume property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when a paused utterance\n  resumed (when the resume event fires.)\n\n  `speechSynthesisUtteranceInstance.onresume = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onresume`"}, onmark {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 125, :column 7, :end-line 125, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onmark property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a named SSML mark tag (when the mark event fires.)\n\n  `speechSynthesisUtteranceInstance.onmark = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark`"}, :name speech.SpeechSynthesisUtterance/onmark, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmark property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a named SSML mark tag (when the mark event fires.)\n\n  `speechSynthesisUtteranceInstance.onmark = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when an error occurs\n  prevents the utterance from being succesfully spoken (when the\n  event fires.)\n\n  `speechSynthesisUtteranceInstance.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror`"}, :name speech.SpeechSynthesisUtterance/set-onerror!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when an error occurs\n  prevents the utterance from being succesfully spoken (when the\n  event fires.)\n\n  `speechSynthesisUtteranceInstance.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror`"}, set-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 295, :column 7, :end-line 295, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The text property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the text that will be synthesised when the utterance\n  spoken.\n\n  `var myText = speechSynthesisUtteranceInstance.text;\n  speechSynthesisUtteranceInstance.text = 'Hello I am speaking';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text`"}, :name speech.SpeechSynthesisUtterance/set-text!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The text property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the text that will be synthesised when the utterance\n  spoken.\n\n  `var myText = speechSynthesisUtteranceInstance.text;\n  speechSynthesisUtteranceInstance.text = 'Hello I am speaking';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/text`"}, set-pitch! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 242, :column 7, :end-line 242, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The pitch property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the pitch at which the utterance will be spoken at.\n\n  `// default 1\n  speechSynthesisUtteranceInstance.pitch = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch`"}, :name speech.SpeechSynthesisUtterance/set-pitch!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The pitch property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the pitch at which the utterance will be spoken at.\n\n  `// default 1\n  speechSynthesisUtteranceInstance.pitch = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch`"}, set-onpause! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 164, :column 7, :end-line 164, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  paused part way through (when the pause event fires.)\n\n  `speechSynthesisUtteranceInstance.onpause = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause`"}, :name speech.SpeechSynthesisUtterance/set-onpause!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  paused part way through (when the pause event fires.)\n\n  `speechSynthesisUtteranceInstance.onpause = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onpause`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 97, :column 7, :end-line 97, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when an error occurs\n  prevents the utterance from being succesfully spoken (when the\n  event fires.)\n\n  `speechSynthesisUtteranceInstance.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror`"}, :name speech.SpeechSynthesisUtterance/onerror, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when an error occurs\n  prevents the utterance from being succesfully spoken (when the\n  event fires.)\n\n  `speechSynthesisUtteranceInstance.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onerror`"}, set-volume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 348, :column 7, :end-line 348, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The volume property of the `speech.SpeechSynthesisUtterance`\n  gets and sets the volume that the utterance will be spoken at.\n\n  `var myVolume = speechSynthesisUtteranceInstance.volume;\n  speechSynthesisUtteranceInstance.volume = 0.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume`"}, :name speech.SpeechSynthesisUtterance/set-volume!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The volume property of the `speech.SpeechSynthesisUtterance`\n  gets and sets the volume that the utterance will be spoken at.\n\n  `var myVolume = speechSynthesisUtteranceInstance.volume;\n  speechSynthesisUtteranceInstance.volume = 0.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume`"}, set-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 268, :column 7, :end-line 268, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The rate property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the speed at which the utterance will be spoken at.\n\n  `var myRate = speechSynthesisUtteranceInstance.rate;\n  speechSynthesisUtteranceInstance.rate = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate`"}, :name speech.SpeechSynthesisUtterance/set-rate!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The rate property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the speed at which the utterance will be spoken at.\n\n  `var myRate = speechSynthesisUtteranceInstance.rate;\n  speechSynthesisUtteranceInstance.rate = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate`"}, pitch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 229, :column 7, :end-line 229, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The pitch property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the pitch at which the utterance will be spoken at.\n\n  `// default 1\n  speechSynthesisUtteranceInstance.pitch = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch`"}, :name speech.SpeechSynthesisUtterance/pitch, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The pitch property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the pitch at which the utterance will be spoken at.\n\n  `// default 1\n  speechSynthesisUtteranceInstance.pitch = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/pitch`"}, voice {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 309, :column 7, :end-line 309, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The voice property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the voice that will be used to speak the utterance.\n\n  `var myVoice = speechSynthesisUtteranceInstance.voice;\n  speechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice`"}, :name speech.SpeechSynthesisUtterance/voice, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The voice property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the voice that will be used to speak the utterance.\n\n  `var myVoice = speechSynthesisUtteranceInstance.voice;\n  speechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice`"}, set-voice! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 322, :column 7, :end-line 322, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The voice property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the voice that will be used to speak the utterance.\n\n  `var myVoice = speechSynthesisUtteranceInstance.voice;\n  speechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice`"}, :name speech.SpeechSynthesisUtterance/set-voice!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The voice property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the voice that will be used to speak the utterance.\n\n  `var myVoice = speechSynthesisUtteranceInstance.voice;\n  speechSynthesisUtteranceInstance.voice = speechSynthesisVoiceInstance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/voice`"}, rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 255, :column 7, :end-line 255, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The rate property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the speed at which the utterance will be spoken at.\n\n  `var myRate = speechSynthesisUtteranceInstance.rate;\n  speechSynthesisUtteranceInstance.rate = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate`"}, :name speech.SpeechSynthesisUtterance/rate, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The rate property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the speed at which the utterance will be spoken at.\n\n  `var myRate = speechSynthesisUtteranceInstance.rate;\n  speechSynthesisUtteranceInstance.rate = 1.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/rate`"}, set-onmark! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 138, :column 7, :end-line 138, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onmark property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a named SSML mark tag (when the mark event fires.)\n\n  `speechSynthesisUtteranceInstance.onmark = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark`"}, :name speech.SpeechSynthesisUtterance/set-onmark!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmark property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a named SSML mark tag (when the mark event fires.)\n\n  `speechSynthesisUtteranceInstance.onmark = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onmark`"}, volume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 335, :column 7, :end-line 335, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The volume property of the `speech.SpeechSynthesisUtterance`\n  gets and sets the volume that the utterance will be spoken at.\n\n  `var myVolume = speechSynthesisUtteranceInstance.volume;\n  speechSynthesisUtteranceInstance.volume = 0.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume`"}, :name speech.SpeechSynthesisUtterance/volume, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The volume property of the `speech.SpeechSynthesisUtterance`\n  gets and sets the volume that the utterance will be spoken at.\n\n  `var myVolume = speechSynthesisUtteranceInstance.volume;\n  speechSynthesisUtteranceInstance.volume = 0.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/volume`"}, set-onstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 216, :column 7, :end-line 216, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onstart property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  begun to be spoken (when the start event fires.)\n\n  `speechSynthesisUtteranceInstance.onstart = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart`"}, :name speech.SpeechSynthesisUtterance/set-onstart!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onstart property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  begun to be spoken (when the start event fires.)\n\n  `speechSynthesisUtteranceInstance.onstart = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart`"}, lang {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The lang property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the language of the utterance.\n\n  `var myLang = speechSynthesisUtteranceInstance.lang;\n  speechSynthesisUtteranceInstance.lang = 'en-US';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang`"}, :name speech.SpeechSynthesisUtterance/lang, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The lang property of the `speech.SpeechSynthesisUtterance` interface\n  and sets the language of the utterance.\n\n  `var myLang = speechSynthesisUtteranceInstance.lang;\n  speechSynthesisUtteranceInstance.lang = 'en-US';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/lang`"}, set-onboundary! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 58, :column 7, :end-line 58, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onboundary property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a word or sentence boundary (when the boundary event fires.)\n\n  `speechSynthesisUtteranceInstance.onboundary = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary`"}, :name speech.SpeechSynthesisUtterance/set-onboundary!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onboundary property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the spoken utterance\n  a word or sentence boundary (when the boundary event fires.)\n\n  `speechSynthesisUtteranceInstance.onboundary = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onboundary`"}, set-onend! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 84, :column 7, :end-line 84, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The onend property of the `speech.SpeechSynthesisUtterance` interface\n  an event handler that will run when the utterance has finished\n  spoken (when the end event fires.)\n\n  `speechSynthesisUtteranceInstance.onend = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend`"}, :name speech.SpeechSynthesisUtterance/set-onend!, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onend property of the `speech.SpeechSynthesisUtterance` interface\n  an event handler that will run when the utterance has finished\n  spoken (when the end event fires.)\n\n  `speechSynthesisUtteranceInstance.onend = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onend`"}, onstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 203, :column 7, :end-line 203, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onstart property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  begun to be spoken (when the start event fires.)\n\n  `speechSynthesisUtteranceInstance.onstart = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart`"}, :name speech.SpeechSynthesisUtterance/onstart, :variadic false, :file "src/speech/SpeechSynthesisUtterance.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onstart property of the `speech.SpeechSynthesisUtterance`\n  represents an event handler that will run when the utterance\n  begun to be spoken (when the start event fires.)\n\n  `speechSynthesisUtteranceInstance.onstart = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/onstart`"}, constructor {:name speech.SpeechSynthesisUtterance/constructor, :file "src/speech/SpeechSynthesisUtterance.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/speech/SpeechSynthesisUtterance.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The SpeechSynthesisUtterance() constructor of the `speech.SpeechSynthesisUtterance` interface returns a new SpeechSynthesisUtterance object instance.\n\n  text\n  A `dom.DOMString` containing the text that will be synthesised when the utterance is spoken..\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance/SpeechSynthesisUtterance`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The SpeechSynthesisUtterance interface of the Web Speech API\n  a speech request. It contains the content the speech service\n  read and information about how to read it (e.g. language, pitch\n  volume.)"}