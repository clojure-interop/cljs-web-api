{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name css.CSSPseudoElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {add-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 7, :column 7, :end-line 7, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name css.CSSPseudoElement/add-event-listener, :variadic true, :file "src/css/CSSPseudoElement.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`"}, dispatch-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, :name css.CSSPseudoElement/dispatch-event, :variadic false, :file "src/css/CSSPseudoElement.cljs", :end-column 21, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, remove-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 35, :column 7, :end-line 35, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name css.CSSPseudoElement/remove-event-listener, :variadic true, :file "src/css/CSSPseudoElement.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`"}, element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 52, :column 7, :end-line 52, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The element read-only property of the `css.CSSPseudoElement`\n  returns a reference to the originating element of the pseudo-element,\n  other words its parent element.\n\n  `var originatingElement = cssPseudoElement.element;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/element`"}, :name css.CSSPseudoElement/element, :variadic false, :file "src/css/CSSPseudoElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The element read-only property of the `css.CSSPseudoElement`\n  returns a reference to the originating element of the pseudo-element,\n  other words its parent element.\n\n  `var originatingElement = cssPseudoElement.element;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/element`"}, set-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 65, :column 7, :end-line 65, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The element read-only property of the `css.CSSPseudoElement`\n  returns a reference to the originating element of the pseudo-element,\n  other words its parent element.\n\n  `var originatingElement = cssPseudoElement.element;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/element`"}, :name css.CSSPseudoElement/set-element!, :variadic false, :file "src/css/CSSPseudoElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The element read-only property of the `css.CSSPseudoElement`\n  returns a reference to the originating element of the pseudo-element,\n  other words its parent element.\n\n  `var originatingElement = cssPseudoElement.element;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/element`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 78, :column 7, :end-line 78, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `css.CSSPseudoElement` interface\n  the type of the pseudo-element as a string, represented in the\n  of a CSS selector.\n\n  `var typeOfPseudoElement = cssPseudoElement.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/type`"}, :name css.CSSPseudoElement/type, :variadic false, :file "src/css/CSSPseudoElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `css.CSSPseudoElement` interface\n  the type of the pseudo-element as a string, represented in the\n  of a CSS selector.\n\n  `var typeOfPseudoElement = cssPseudoElement.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/type`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSSPseudoElement.cljs", :line 91, :column 7, :end-line 91, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `css.CSSPseudoElement` interface\n  the type of the pseudo-element as a string, represented in the\n  of a CSS selector.\n\n  `var typeOfPseudoElement = cssPseudoElement.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/type`"}, :name css.CSSPseudoElement/set-type!, :variadic false, :file "src/css/CSSPseudoElement.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `css.CSSPseudoElement` interface\n  the type of the pseudo-element as a string, represented in the\n  of a CSS selector.\n\n  `var typeOfPseudoElement = cssPseudoElement.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSSPseudoElement/type`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CSSPseudoElement interface represents a pseudo-element that\n  be the target of an event or animated using the Web Animations\n  Instances of this interface may be obtained by calling `web.Element.pseudo()`."}