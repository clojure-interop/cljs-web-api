{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name css.CSS, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {escape {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSS.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([this str])), :doc "Method.\n\n  The CSS.escape() static method returns a `css.CSSOMString` containing\n  escaped string passed as parameter, mostly for use as part of\n  CSS selector.\n\n  `escapedStr = CSS.escape(str);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape`"}, :name css.CSS/escape, :variadic false, :file "src/css/CSS.cljs", :end-column 13, :method-params ([this str]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this str])), :doc "Method.\n\n  The CSS.escape() static method returns a `css.CSSOMString` containing\n  escaped string passed as parameter, mostly for use as part of\n  CSS selector.\n\n  `escapedStr = CSS.escape(str);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape`"}, supports {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSS.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The CSS.supports() method returns a `web.Boolean` value indicating\n  the browser supports a given CSS feature, or not.\n\n  `CSS.supports(propertyName, value);\n  CSS.supports(supportCondition);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name css.CSS/supports, :variadic true, :file "src/css/CSS.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CSS.supports() method returns a `web.Boolean` value indicating\n  the browser supports a given CSS feature, or not.\n\n  `CSS.supports(propertyName, value);\n  CSS.supports(supportCondition);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/supports`"}, paint-worklet {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSS.cljs", :line 33, :column 7, :end-line 33, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  paintWorklet is a static, read-only property of the `css.CSS`\n  that provides access to the `web.PaintWorklet`, which programmatically\n  an image where a CSS property expects a file.\n\n  `var worklet = CSS.paintWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet`"}, :name css.CSS/paint-worklet, :variadic false, :file "src/css/CSS.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  paintWorklet is a static, read-only property of the `css.CSS`\n  that provides access to the `web.PaintWorklet`, which programmatically\n  an image where a CSS property expects a file.\n\n  `var worklet = CSS.paintWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet`"}, set-paint-worklet! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/css/CSS.cljs", :line 46, :column 7, :end-line 46, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  paintWorklet is a static, read-only property of the `css.CSS`\n  that provides access to the `web.PaintWorklet`, which programmatically\n  an image where a CSS property expects a file.\n\n  `var worklet = CSS.paintWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet`"}, :name css.CSS/set-paint-worklet!, :variadic false, :file "src/css/CSS.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  paintWorklet is a static, read-only property of the `css.CSS`\n  that provides access to the `web.PaintWorklet`, which programmatically\n  an image where a CSS property expects a file.\n\n  `var worklet = CSS.paintWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CSS/paintWorklet`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CSS interface holds useful CSS-related methods. No object\n  this interface are implemented: it contains only static methods\n  therefore is a utilitarian interface."}