{:rename-macros {}, :renames {}, :externs {Error {}, String {fromCharCode {}}, parseInt {}, Number {NaN {}, NEGATIVE_INFINITY {}, POSITIVE_INFINITY {}}}, :use-macros {}, :excludes #{char read default-data-readers read-string}, :name cljs.tools.reader.edn, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.tools.reader.impl.utils cljs.tools.reader.impl.utils, cljs.tools.reader.impl.commons cljs.tools.reader.impl.commons, cljs.tools.reader cljs.tools.reader, gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :cljs.spec/speced-vars [], :uses {match-number cljs.tools.reader.impl.commons, whitespace? cljs.tools.reader.impl.utils, read-comment cljs.tools.reader.impl.commons, char-code cljs.tools.reader, char cljs.tools.reader.impl.utils, numeric? cljs.tools.reader.impl.utils, reader-error cljs.tools.reader.reader-types, unread cljs.tools.reader.reader-types, peek-char cljs.tools.reader.reader-types, parse-symbol cljs.tools.reader.impl.commons, desugar-meta cljs.tools.reader.impl.utils, default-data-readers cljs.tools.reader, number-literal? cljs.tools.reader.impl.commons, read-past cljs.tools.reader.impl.commons, indexing-reader? cljs.tools.reader.reader-types, read-char cljs.tools.reader.reader-types, get-column-number cljs.tools.reader.reader-types, ex-info? cljs.tools.reader.impl.utils, get-file-name cljs.tools.reader.reader-types, throwing-reader cljs.tools.reader.impl.commons, string-push-back-reader cljs.tools.reader.reader-types, get-line-number cljs.tools.reader.reader-types}, :defs {read-tagged {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 327, :column 8, :end-line 327, :end-column 19, :private true, :arglists (quote ([rdr initch opts]))}, :private true, :name cljs.tools.reader.edn/read-tagged, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr initch opts]))}, wrapping-reader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 278, :column 8, :end-line 278, :end-column 23, :private true, :arglists (quote ([sym]))}, :private true, :name cljs.tools.reader.edn/wrapping-reader, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 23, :method-params ([sym]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sym]))}, read-meta {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 283, :column 8, :end-line 283, :end-column 17, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-meta, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 17, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-unicode-char {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 84, :column 8, :end-line 84, :end-column 25, :private true, :arglists (quote ([token offset length base] [rdr initch base length exact?])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader.edn/read-unicode-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 25, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([token offset length base] [rdr initch base length exact?]), :arglists ([token offset length base] [rdr initch base length exact?]), :arglists-meta (nil nil)}, :method-params ([token offset length base] [rdr initch base length exact?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 5, :fn-var true, :arglists ([token offset length base] [rdr initch base length exact?])}, read-unmatched-delimiter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 76, :column 8, :end-line 76, :end-column 32, :private true, :arglists (quote ([rdr ch opts]))}, :private true, :name cljs.tools.reader.edn/read-unmatched-delimiter, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 32, :method-params ([rdr ch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr ch opts]))}, not-constituent? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 36, :column 17, :end-line 36, :end-column 33, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/not-constituent?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 33, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :ret-tag boolean, :end-line 36, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, read {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 343, :column 7, :end-line 343, :end-column 11, :arglists (quote ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts])), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists-meta (nil nil nil)}}, :name cljs.tools.reader.edn/read, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :arglists-meta (nil nil nil)}, :method-params ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 4, :fn-var true, :arglists ([reader] [{:keys [eof], :as opts} reader] [reader eof-error? eof opts]), :doc "Reads the first object from an IPushbackReader or a java.io.PushbackReader.\n   Returns the object read. If EOF, throws if eof-error? is true otherwise returns eof.\n   If no reader is provided, *in* will be used.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   clojure.tools.reader.edn/read doesn't depend on dynamic Vars, all configuration\n   is done by passing an opt map.\n\n   opts is a map that can include the following keys:\n   :eof - value to return on end-of-file. When not supplied, eof throws an exception.\n   :readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n              When not supplied, only the default-data-readers will be used.\n   :default - A function of two args, that will, if present and no reader is found for a tag,\n              be called with the tag and the value."}, read-set {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 293, :column 8, :end-line 293, :end-column 16, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-set, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 16, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-symbol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 245, :column 8, :end-line 245, :end-column 19, :private true, :arglists (quote ([rdr initch]))}, :private true, :name cljs.tools.reader.edn/read-symbol, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr initch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([rdr initch]))}, read-map {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 195, :column 8, :end-line 195, :end-column 16, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-map, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 16, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, macros {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 302, :column 8, :end-line 302, :end-column 14, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/macros, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 14, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-list {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 184, :column 8, :end-line 184, :end-column 17, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-list, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 17, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, dispatch-macros {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 318, :column 8, :end-line 318, :end-column 23, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/dispatch-macros, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 23, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ch]))}, read-delimited {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 165, :column 8, :end-line 165, :end-column 22, :private true, :arglists (quote ([delim rdr opts]))}, :private true, :name cljs.tools.reader.edn/read-delimited, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 22, :method-params ([delim rdr opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([delim rdr opts]))}, read-token {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 41, :column 8, :end-line 41, :end-column 18, :private true, :arglists (quote ([rdr initch] [rdr initch validate-leading?])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rdr initch] [rdr initch validate-leading?]), :arglists ([rdr initch] [rdr initch validate-leading?]), :arglists-meta (nil nil)}}, :private true, :name cljs.tools.reader.edn/read-token, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([rdr initch] [rdr initch validate-leading?]), :arglists ([rdr initch] [rdr initch validate-leading?]), :arglists-meta (nil nil)}, :method-params ([rdr initch] [rdr initch validate-leading?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists ([rdr initch] [rdr initch validate-leading?])}, upper-limit {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 121, :column 24, :end-line 121, :end-column 35, :const true, :private true}, :private true, :name cljs.tools.reader.edn/upper-limit, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :column 1, :const true, :line 121, :end-line 121, :tag number}, read-dispatch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 66, :column 8, :end-line 66, :end-column 21, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-dispatch, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 21, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-string {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 400, :column 7, :end-line 400, :end-column 18, :arglists (quote ([s] [opts s])), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}}, :name cljs.tools.reader.edn/read-string, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([s] [opts s]), :arglists ([s] [opts s]), :arglists-meta (nil nil)}, :method-params ([s] [opts s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists ([s] [opts s]), :doc "Reads one object from the string s.\n   Returns nil when s is nil or empty.\n\n   Reads data in the edn format (subset of Clojure data):\n   http://edn-format.org\n\n   opts is a map as per clojure.tools.reader.edn/read"}, escape-char {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 213, :column 8, :end-line 213, :end-column 19, :private true, :arglists (quote ([sb rdr]))}, :private true, :name cljs.tools.reader.edn/escape-char, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([sb rdr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sb rdr]))}, read-char* {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 124, :column 8, :end-line 124, :end-column 18, :private true, :arglists (quote ([rdr backslash opts]))}, :private true, :name cljs.tools.reader.edn/read-char*, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 18, :method-params ([rdr backslash opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr backslash opts]))}, read-string* {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 234, :column 8, :end-line 234, :end-column 20, :private true, :arglists (quote ([reader _ opts]))}, :private true, :name cljs.tools.reader.edn/read-string*, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([reader _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 234, :end-line 234, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reader _ opts]))}, macro-terminating? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 30, :column 17, :end-line 30, :end-column 35, :tag boolean, :private true, :arglists (quote ([ch]))}, :private true, :name cljs.tools.reader.edn/macro-terminating?, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :method-params ([ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :ret-tag boolean, :end-line 30, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([ch]))}, lower-limit {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 122, :column 24, :end-line 122, :end-column 35, :const true, :private true}, :private true, :name cljs.tools.reader.edn/lower-limit, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 35, :column 1, :const true, :line 122, :end-line 122, :tag number}, read-keyword {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 263, :column 8, :end-line 263, :end-column 20, :private true, :arglists (quote ([reader initch opts]))}, :private true, :name cljs.tools.reader.edn/read-keyword, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([reader initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reader initch opts]))}, read-discard {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 297, :column 8, :end-line 297, :end-column 20, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-discard, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 20, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-vector {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 191, :column 8, :end-line 191, :end-column 19, :private true, :arglists (quote ([rdr _ opts]))}, :private true, :name cljs.tools.reader.edn/read-vector, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([rdr _ opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 3, :fn-var true, :arglists (quote ([rdr _ opts]))}, read-number {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :line 202, :column 8, :end-line 202, :end-column 19, :private true, :arglists (quote ([reader initch opts]))}, :private true, :name cljs.tools.reader.edn/read-number, :variadic false, :file "resources/public/js/compiled/out/cljs/tools/reader/edn.cljs", :end-column 19, :method-params ([reader initch opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 3, :fn-var true, :arglists (quote ([reader initch opts]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:reader-exception :else :default :file :readers :type :illegal-argument :column :line / :eof}, :order [:else :type :illegal-argument / :readers :default :eof :reader-exception :line :column :file]}, :doc "An EDN reader in clojure"}