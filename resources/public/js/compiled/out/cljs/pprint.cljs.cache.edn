{:rename-macros {}, :renames {}, :externs {isNaN {}, Infinity {}, parseFloat {}, parseInt {}, Error {}, String {}, Number {}, RegExp {prototype {exec {}, lastIndex {}}}, Object {exec {}, index {}}}, :use-macros {deftype cljs.pprint, print-length-loop cljs.pprint, defdirectives cljs.pprint, getf cljs.pprint, pprint-logical-block cljs.pprint, formatter-out cljs.pprint, with-pretty-writer cljs.pprint, setf cljs.pprint}, :excludes #{pr float? deftype prn println print}, :name cljs.pprint, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.core cljs.core, string clojure.string, clojure.string clojure.string, gstring goog.string, goog.string goog.string, StringBuffer goog.string.StringBuffer}, :cljs.spec/speced-vars [], :uses {IWriter cljs.core, IDeref cljs.core}, :defs {indent-t {:num-fields 6, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/indent-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :type true, :column 10, :internal-ctor true, :line 259, :record true, :end-line 259, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, write-token-string {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 399, :column 8, :end-line 399, :end-column 26, :private true, :arglists (quote ([this tokens]))}, :private true, :name cljs.pprint/write-token-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([this tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tokens]))}, process-nesting {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2659, :column 8, :end-line 2659, :end-column 23, :private true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, :private true, :name cljs.pprint/process-nesting, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2659, :end-line 2659, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "Take a linearly compiled format and process the bracket directives to give it\n   the appropriate tree structure"}, init-cap-writer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2009, :column 8, :end-line 2009, :end-column 23, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, :private true, :name cljs.pprint/init-cap-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2009, :end-line 2009, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, capitalizing the first word"}, check-enumerated-arg {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 835, :column 8, :end-line 835, :end-column 28, :private true, :arglists (quote ([arg choices]))}, :private true, :name cljs.pprint/check-enumerated-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :method-params ([arg choices]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 2, :fn-var true, :arglists (quote ([arg choices]))}, brackets {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2929, :column 8, :end-line 2929, :end-column 16, :private true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, :private true, :name cljs.pprint/brackets, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2929, :end-line 2929, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form])), :doc "Figure out which kind of brackets to use"}, get-section {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 358, :column 8, :end-line 358, :end-column 19, :private true, :arglists (quote ([buffer]))}, :private true, :name cljs.pprint/get-section, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([buffer]))}, readable-character {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1361, :column 8, :end-line 1361, :end-column 26, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/readable-character, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1361, :end-line 1361, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, linear-nl? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 324, :column 8, :end-line 324, :end-column 18, :private true, :arglists (quote ([this lb section]))}, :private true, :name cljs.pprint/linear-nl?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this lb section]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this lb section]))}, t_cljs$pprint54775 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint54775, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 1987, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, base-str {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1089, :column 8, :end-line 1089, :end-column 16, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, :private true, :name cljs.pprint/base-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1089, :end-line 1089, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base"}, buffer-length {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 243, :column 8, :end-line 243, :end-column 21, :private true, :arglists (quote ([l]))}, :private true, :name cljs.pprint/buffer-length, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, integral? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1067, :column 8, :end-line 1067, :end-column 17, :private true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, :private true, :name cljs.pprint/integral?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1067, :end-line 1067, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns true if a number is actually an integer (that is, has no fractional part)"}, *print-circle* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 649, :column 1, :end-line 649, :end-column 15, :private true, :doc "Mark circular structures (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-circle*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 646, :end-line 649, :tag clj-nil, :doc "Mark circular structures (N.B. This is not yet used)"}, param-pattern {:name cljs.pprint/param-pattern, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2448, :column 1, :end-line 2449, :end-column 19, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2449, :column 6, :end-line 2449, :end-column 19, :private true}, :tag any}, boolean-conditional {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1703, :column 8, :end-line 1703, :end-column 27, :private true, :arglists (quote ([params arg-navigator offsets]))}, :private true, :name cljs.pprint/boolean-conditional, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params arg-navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1703, :end-line 1703, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params arg-navigator offsets]))}, add-english-scales {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1198, :column 8, :end-line 1198, :end-column 26, :private true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, :private true, :name cljs.pprint/add-english-scales, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([parts offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1198, :end-line 1198, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parts offset])), :doc "Take a sequence of parts, add scale numbers (e.g., million) and combine into a string\n  offset is a factor of 10^3 to multiply by"}, pprint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 813, :column 7, :end-line 813, :end-column 13, :arglists (quote ([object] [object writer])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}}, :name cljs.pprint/pprint, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([object] [object writer]), :arglists ([object] [object writer]), :arglists-meta (nil nil)}, :method-params ([object] [object writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 813, :end-line 813, :max-fixed-arity 2, :fn-var true, :arglists ([object] [object writer])}, t_cljs$pprint54763 {:num-fields 2, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint54763, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 3, :line 1921, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, iterate-main-sublists {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1804, :column 8, :end-line 1804, :end-column 29, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-main-sublists, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1804, :end-line 1804, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, simple-dispatch {:name cljs.pprint/simple-dispatch, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2904, :column 1, :end-line 2904, :end-column 26, :doc "The pretty print dispatch function for simple data structure format.", :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2904, :column 11, :end-line 2904, :end-column 26, :doc "The pretty print dispatch function for simple data structure format."}, :tag cljs.core/MultiFn}, pr {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 43, :column 18, :end-line 43, :end-column 20, :dynamic true, :private true, :arglists (quote ([& more])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}}, :private true, :name cljs.pprint/pr, :variadic true, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(more)], :arglists ([& more]), :arglists-meta (nil)}, :method-params [(more)], :protocol-impl nil, :arglists-meta (nil), :column 1, :dynamic true, :line 43, :end-line 43, :max-fixed-arity 0, :fn-var true, :arglists ([& more])}, needs-pretty {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2694, :column 8, :end-line 2694, :end-column 20, :private true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, :private true, :name cljs.pprint/needs-pretty, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2694, :end-line 2694, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "determine whether a given compiled format has any directives that depend on the\ncolumn number or pretty printing"}, get-column {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 159, :column 8, :end-line 159, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, pprint-let {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3063, :column 8, :end-line 3063, :end-column 18, :private true, :arglists (quote ([alis]))}, :private true, :name cljs.pprint/pprint-let, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3063, :end-line 3063, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis]))}, english-cardinal-tens {:name cljs.pprint/english-cardinal-tens, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1159, :column 1, :end-line 1160, :end-column 27, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1160, :column 6, :end-line 1160, :end-column 27, :private true}, :tag cljs.core/IVector}, special-chars {:name cljs.pprint/special-chars, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1344, :column 1, :end-line 1345, :end-column 19, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1345, :column 6, :end-line 1345, :end-column 19, :private true}, :tag cljs.core/IMap}, justify-clauses {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1863, :column 8, :end-line 1863, :end-column 23, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/justify-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1863, :end-line 1863, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-line {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 423, :column 8, :end-line 423, :end-column 18, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-line, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-pretty-writer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2054, :column 7, :end-line 2054, :end-column 24, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, :name cljs.pprint/get-pretty-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2054, :end-line 2054, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns the IWriter passed in wrapped in a pretty writer proxy, unless it's\nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be\npreserved across calls, you will want to wrap them with this.\n\nFor example, when you want to generate column-aware output with multiple calls to cl-format,\ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user> (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1\n       2      4       8\n       3      9      27\n       4     16      64\n       5     25     125\n       6     36     216\n       7     49     343\n       8     64     512\n       9     81     729\n      10    100    1000"}, *print-suppress-namespaces* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 661, :column 1, :end-line 661, :end-column 28, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-suppress-namespaces*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 28, :column 1, :dynamic true, :line 657, :end-line 661, :tag clj-nil, :doc "Don't print namespaces with symbols. This is particularly useful when\npretty printing the results of macro expansions"}, level-exceeded {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 840, :column 8, :end-line 840, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name cljs.pprint/level-exceeded, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 840, :end-line 840, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, logical-block {:private true, :num-fields 10, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/logical-block, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 42, :type true, :column 29, :internal-ctor true, :line 230, :record true, :end-line 230, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, make-nl-t {:protocol-inline nil, :meta {:private true, :arglists (quote ([type logical-block start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([type logical-block start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :max-fixed-arity 4, :fn-var true, :arglists (quote ([type logical-block start-pos end-pos]))}, map->nl-t {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 253, :column 10, :end-line 253, :end-column 14, :internal-ctor true, :factory :map, :arglists (quote ([G__54336]))}, :name cljs.pprint/map->nl-t, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :method-params ([G__54336]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54336]))}, dollar-float {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1665, :column 8, :end-line 1665, :end-column 20, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/dollar-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1665, :end-line 1665, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, write-initial-lines {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 453, :column 8, :end-line 453, :end-column 27, :private true, :arglists (quote ([this s]))}, :private true, :name cljs.pprint/write-initial-lines, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s]))}, indent-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__48181__auto__])), :file nil}, :private true, :name cljs.pprint/indent-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__48181__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__48181__auto__]))}, char-code {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 62, :column 7, :end-line 62, :end-column 16, :arglists (quote ([c])), :doc "Convert char to int"}, :name cljs.pprint/char-code, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :method-params ([c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([c])), :doc "Convert char to int"}, insert-scaled-decimal {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1508, :column 8, :end-line 1508, :end-column 29, :private true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, :private true, :name cljs.pprint/insert-scaled-decimal, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1508, :end-line 1508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k])), :doc "Insert the decimal point at the right spot in the number to match an exponent"}, add-padding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3297, :column 8, :end-line 3297, :end-column 19, :private true, :arglists (quote ([width s]))}, :private true, :name cljs.pprint/add-padding, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 19, :method-params ([width s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3297, :end-line 3297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([width s]))}, arg-navigator {:private true, :num-fields 3, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/arg-navigator, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :type true, :column 3, :internal-ctor true, :line 946, :record true, :end-line 946, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, map->compiled-directive {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 990, :column 3, :end-line 990, :end-column 21, :private true, :internal-ctor true, :factory :map, :arglists (quote ([G__54517]))}, :private true, :name cljs.pprint/map->compiled-directive, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([G__54517]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :line 989, :end-line 990, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__54517]))}, *current-length* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 684, :column 33, :end-line 684, :end-column 49, :private true, :dynamic true}, :private true, :name cljs.pprint/*current-length*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 49, :column 1, :dynamic true, :line 684, :end-line 684, :tag clj-nil}, round-str {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1441, :column 8, :end-line 1441, :end-column 17, :private true, :arglists (quote ([m e d w]))}, :private true, :name cljs.pprint/round-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([m e d w]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1441, :end-line 1441, :max-fixed-arity 4, :fn-var true, :arglists (quote ([m e d w]))}, *print-pretty* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 617, :column 2, :end-line 617, :end-column 16, :doc "Bind to true if you want write to use pretty printing", :dynamic true}, :name cljs.pprint/*print-pretty*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :column 1, :dynamic true, :line 615, :end-line 617, :tag boolean, :doc "Bind to true if you want write to use pretty printing"}, *print-pprint-dispatch* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 623, :column 2, :end-line 623, :end-column 25, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify.", :added "1.2", :dynamic true}, :added "1.2", :name cljs.pprint/*print-pprint-dispatch*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :column 1, :dynamic true, :line 619, :end-line 623, :tag clj-nil, :doc "The pretty print dispatch function. Use with-pprint-dispatch or\nset-pprint-dispatch to modify."}, t_cljs$pprint54304 {:num-fields 4, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint54304, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 6, :line 188, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, ->t_cljs$pprint54775 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer last-was-whitespace? meta54776])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint54775, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer last-was-whitespace? meta54776]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 1987, :max-fixed-arity 3, :fn-var true, :arglists (quote ([writer last-was-whitespace? meta54776])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pp-newline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 261, :column 16, :end-line 261, :end-column 26, :private true}, :private true, :name cljs.pprint/pp-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([]), :protocol-impl nil, :arglists-meta (), :column 1, :line 261, :end-line 261, :max-fixed-arity 0, :fn-var true, :arglists nil}, upcase-writer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1939, :column 8, :end-line 1939, :end-column 21, :private true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, :private true, :name cljs.pprint/upcase-writer, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([writer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1939, :end-line 1939, :max-fixed-arity 1, :fn-var true, :arglists (quote ([writer])), :doc "Returns a proxy that wraps writer, converting all characters to upper case"}, start-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/start-block-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :type true, :column 10, :internal-ctor true, :line 255, :record true, :end-line 255, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, ->t_cljs$pprint54446 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer max-columns miser-width lb fields meta54447])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.pprint/IPrettyFlush cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint54446, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer max-columns miser-width lb fields meta54447]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 509, :max-fixed-arity 6, :fn-var true, :arglists (quote ([writer max-columns miser-width lb fields meta54447])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, execute-sub-format {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1381, :column 8, :end-line 1381, :end-column 26, :private true, :arglists (quote ([format args base-args]))}, :private true, :name cljs.pprint/execute-sub-format, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([format args base-args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1381, :end-line 1381, :max-fixed-arity 3, :fn-var true, :arglists (quote ([format args base-args]))}, end-block-t? {:protocol-inline nil, :meta {:private true, :arglists (quote ([x__48181__auto__])), :file nil}, :private true, :name cljs.pprint/end-block-t?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([x__48181__auto__]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x__48181__auto__]))}, nl-t {:num-fields 5, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/nl-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 14, :type true, :column 10, :internal-ctor true, :line 253, :record true, :end-line 253, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, conditional-newline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2154, :column 8, :end-line 2154, :end-column 27, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/conditional-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2154, :end-line 2154, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, make-buffer-blob {:protocol-inline nil, :meta {:private true, :arglists (quote ([data trailing-white-space start-pos end-pos])), :file nil}, :private true, :name cljs.pprint/make-buffer-blob, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([data trailing-white-space start-pos end-pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :max-fixed-arity 4, :fn-var true, :arglists (quote ([data trailing-white-space start-pos end-pos]))}, pprint-newline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 843, :column 7, :end-line 843, :end-column 21, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, :name cljs.pprint/pprint-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([kind]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 843, :end-line 843, :max-fixed-arity 1, :fn-var true, :arglists (quote ([kind])), :doc "Print a conditional newline to a pretty printing stream. kind specifies if the\n  newline is :linear, :miser, :fill, or :mandatory.\n\n  This function is intended for use when writing custom dispatch functions.\n\n  Output is sent to *out* which must be a pretty printing writer."}, float-parts-base {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1399, :column 8, :end-line 1399, :end-column 24, :private true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, :private true, :name cljs.pprint/float-parts-base, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1399, :end-line 1399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Produce string parts for the mantissa (normalize 1-9) and exponent"}, rtrim {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 112, :column 8, :end-line 112, :end-column 13, :private true, :arglists (quote ([s c]))}, :private true, :name cljs.pprint/rtrim, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 13, :method-params ([s c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s c]))}, collect-clauses {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2610, :column 8, :end-line 2610, :end-column 23, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/collect-clauses, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2610, :end-line 2610, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, ->t_cljs$pprint54781 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer capped meta54782])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint54781, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer capped meta54782]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 2013, :max-fixed-arity 3, :fn-var true, :arglists (quote ([writer capped meta54782])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pprint-vector {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2828, :column 8, :end-line 2828, :end-column 21, :private true, :arglists (quote ([avec]))}, :private true, :name cljs.pprint/pprint-vector, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([avec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2828, :end-line 2828, :max-fixed-arity 1, :fn-var true, :arglists (quote ([avec]))}, compile-raw-string {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2564, :column 8, :end-line 2564, :end-column 26, :private true, :arglists (quote ([s offset]))}, :private true, :name cljs.pprint/compile-raw-string, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 26, :method-params ([s offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2564, :end-line 2564, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s offset]))}, code-dispatch {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3203, :column 3, :end-line 3203, :end-column 16, :added "1.2", :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, :added "1.2", :name cljs.pprint/code-dispatch, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 16, :column 1, :line 3202, :end-line 3203, :tag cljs.core/MultiFn, :arglists (quote [[object]]), :doc "The pretty print dispatch function for pretty printing Clojure code."}, end-block-t {:num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/end-block-t, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :type true, :column 10, :internal-ctor true, :line 257, :record true, :end-line 257, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, emit-nl? {:name cljs.pprint/emit-nl?, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 335, :column 1, :end-line 335, :end-column 36, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 335, :column 28, :end-line 335, :end-column 36, :private true}, :tag cljs.core/MultiFn}, get-max-column {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 165, :column 8, :end-line 165, :end-column 22, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-max-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, set-max-column {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 168, :column 8, :end-line 168, :end-column 22, :private true, :arglists (quote ([this new-max]))}, :private true, :name cljs.pprint/set-max-column, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([this new-max]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-max]))}, cached-compile {:name cljs.pprint/cached-compile, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2757, :column 1, :end-line 2757, :end-column 37, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2757, :column 23, :end-line 2757, :end-column 37, :private true}, :tag any}, ->t_cljs$pprint54304 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer max-columns fields meta54305])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint54304, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer max-columns fields meta54305]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 188, :max-fixed-arity 4, :fn-var true, :arglists (quote ([writer max-columns fields meta54305])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IDeref cljs.core/IWithMeta}}, c-write-char {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 176, :column 8, :end-line 176, :end-column 20, :private true, :arglists (quote ([this c]))}, :private true, :name cljs.pprint/c-write-char, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([this c]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this c]))}, ->t_cljs$pprint54769 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([writer meta54770])), :file nil}, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/->t_cljs$pprint54769, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :method-params ([writer meta54770]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 1942, :max-fixed-arity 2, :fn-var true, :arglists (quote ([writer meta54770])), :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, pprint-array {:name cljs.pprint/pprint-array, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2838, :column 1, :end-line 2838, :end-column 35, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2838, :column 23, :end-line 2838, :end-column 35, :private true}, :tag function}, general-float {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1642, :column 8, :end-line 1642, :end-column 21, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/general-float, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1642, :end-line 1642, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, t_cljs$pprint54781 {:num-fields 3, :protocols #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}, :name cljs.pprint/t_cljs$pprint54781, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :type true, :anonymous true, :column 5, :line 2013, :record false, :skip-protocol-flag #{cljs.core/IWriter cljs.core/IMeta cljs.core/IWithMeta}}, write-buffered-output {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 439, :column 8, :end-line 439, :end-column 29, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-buffered-output, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, realize-parameter-list {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1016, :column 8, :end-line 1016, :end-column 30, :private true, :arglists (quote ([parameter-map navigator]))}, :private true, :name cljs.pprint/realize-parameter-list, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 30, :method-params ([parameter-map navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1016, :end-line 1016, :max-fixed-arity 2, :fn-var true, :arglists (quote ([parameter-map navigator]))}, process-clause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2586, :column 8, :end-line 2586, :end-column 22, :private true, :arglists (quote ([bracket-info offset remainder]))}, :private true, :name cljs.pprint/process-clause, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([bracket-info offset remainder]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2586, :end-line 2586, :max-fixed-arity 3, :fn-var true, :arglists (quote ([bracket-info offset remainder]))}, update-nl-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 373, :column 8, :end-line 373, :end-column 23, :private true, :arglists (quote ([lb]))}, :private true, :name cljs.pprint/update-nl-state, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([lb]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 373, :end-line 373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([lb]))}, javascript-base-formats {:name cljs.pprint/javascript-base-formats, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 1104, :column 1, :end-line 1105, :end-column 26, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1105, :column 3, :end-line 1105, :end-column 26, :private true}, :tag cljs.core/IMap}, write-token {:name cljs.pprint/write-token, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 265, :column 1, :end-line 265, :end-column 39, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 265, :column 28, :end-line 265, :end-column 39, :private true}, :tag cljs.core/MultiFn}, pprint-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2970, :column 8, :end-line 2970, :end-column 17, :private true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, :private true, :name cljs.pprint/pprint-ns, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([alis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2970, :end-line 2970, :max-fixed-arity 1, :fn-var true, :arglists (quote ([alis])), :doc "The pretty print dispatch chunk for the ns macro"}, float? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 54, :column 16, :end-line 54, :end-column 22, :tag boolean, :arglists (quote ([n])), :doc "Returns true if n is an float."}, :name cljs.pprint/float?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :ret-tag boolean, :end-line 54, :max-fixed-arity 1, :tag boolean, :fn-var true, :arglists (quote ([n])), :doc "Returns true if n is an float."}, iterate-list-of-sublists {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1757, :column 8, :end-line 1757, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/iterate-list-of-sublists, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1757, :end-line 1757, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, logical-block-or-justify {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1838, :column 8, :end-line 1838, :end-column 32, :private true, :arglists (quote ([params navigator offsets]))}, :private true, :name cljs.pprint/logical-block-or-justify, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 32, :method-params ([params navigator offsets]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1838, :end-line 1838, :max-fixed-arity 3, :fn-var true, :arglists (quote ([params navigator offsets]))}, opt-base-str {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1107, :column 8, :end-line 1107, :end-column 20, :private true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, :private true, :name cljs.pprint/opt-base-str, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 20, :method-params ([base val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1107, :end-line 1107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base val])), :doc "Return val as a string in the given base. No cljs format, so no improved performance."}, compiled-directive {:private true, :num-fields 4, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cljs.pprint/compiled-directive, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 21, :type true, :column 3, :internal-ctor true, :line 990, :record true, :end-line 990, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IIterable cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, get-format-arg {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 969, :column 8, :end-line 969, :end-column 22, :private true, :arglists (quote ([navigator]))}, :private true, :name cljs.pprint/get-format-arg, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([navigator]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 969, :end-line 969, :max-fixed-arity 1, :fn-var true, :arglists (quote ([navigator]))}, split-at-newline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 393, :column 8, :end-line 393, :end-column 24, :private true, :arglists (quote ([tokens]))}, :private true, :name cljs.pprint/split-at-newline, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 24, :method-params ([tokens]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 393, :end-line 393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tokens]))}, special-params {:name cljs.pprint/special-params, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :line 2451, :column 1, :end-line 2452, :end-column 20, :private true, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2452, :column 6, :end-line 2452, :end-column 20, :private true}, :tag cljs.core/ISet}, *symbol-map* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 3119, :column 33, :end-line 3119, :end-column 45, :private true, :dynamic true}, :private true, :name cljs.pprint/*symbol-map*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 45, :column 1, :dynamic true, :line 3119, :end-line 3119, :tag cljs.core/IMap}, pprint-ns-reference {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2936, :column 8, :end-line 2936, :end-column 27, :private true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, :private true, :name cljs.pprint/pprint-ns-reference, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 27, :method-params ([reference]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2936, :end-line 2936, :max-fixed-arity 1, :fn-var true, :arglists (quote ([reference])), :doc "Pretty print a single reference (import, use, etc.) from a namespace decl"}, else-separator? {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 2571, :column 8, :end-line 2571, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/else-separator?, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2571, :end-line 2571, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, get-miser-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 603, :column 8, :end-line 603, :end-column 23, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/get-miser-width, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 603, :end-line 603, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, group-by* {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 1112, :column 8, :end-line 1112, :end-column 17, :private true, :arglists (quote ([unit lis]))}, :private true, :name cljs.pprint/group-by*, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 17, :method-params ([unit lis]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1112, :end-line 1112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([unit lis]))}, init-navigator {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 948, :column 8, :end-line 948, :end-column 22, :private true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0", :skip-wiki true}, :private true, :name cljs.pprint/init-navigator, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 948, :end-line 948, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Create a new arg-navigator from the sequence with the position set to 0"}, write-white-space {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 446, :column 8, :end-line 446, :end-column 25, :private true, :arglists (quote ([this]))}, :private true, :name cljs.pprint/write-white-space, :variadic false, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 446, :end-line 446, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this]))}, *print-shared* {:meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/resources/public/js/compiled/out/cljs/pprint.cljs", :line 655, :column 1, :end-line 655, :end-column 15, :private true, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)", :dynamic true}, :private true, :name cljs.pprint/*print-shared*, :file "resources/public/js/compiled/out/cljs/pprint.cljs", :end-column 15, :column 1, :dynamic true, :line 652, :end-line 655, :tag clj-nil, :doc "Mark repeated structures rather than repeat them (N.B. This is not yet used)"}, ...}, :cljs.spec/registry-ref [], :require-macros {m cljs.pprint, cljs.pprint cljs.pprint}, :cljs.analyzer/constants {:seen #{:mandatory seq :logical-blocks cljs.core/unquote when-first :arg3 logical-block-callback :suffix intra-block-nl :selector :else-params :block :allows-separator last-was-whitespace? :indent logical-block :miser-width struct rest .. type-tag :buffer-block max-columns :arg2 :commainterval :pretty-writer start-pos :parent :sections :private data :else :miser :right-margin if-not cljs.core/deref :offset meta54782 doseq :cur :queue :default suffix when-let :func :ns :symbol :generator-fn :name :n :w :not-delivered :remaining-arg-count :fill cljs.core/lift-ns :section cljs.core miser-width let :file -> :end-pos :circle indent meta54776 :end-column :mode :start :lines :params fn :max-iterations :pos :writing :type parent :parameter-from-args :done-nl when-not :suppress-namespaces when :relative-to :string :vector defn capped offset :e if :char-format :start-col :radix func :colon-up-arrow ns meta54305 :k :prefix :column :colon ...}, :order [:else :cur :line :max :base writer max-columns fields meta54305 :parent :section :start-col :indent :done-nl :intra-block-nl :prefix :per-line-prefix :suffix :logical-block-callback parent section start-col indent done-nl intra-block-nl prefix per-line-prefix suffix logical-block-callback :end-pos :start-pos :type-tag :data :trailing-white-space type-tag data trailing-white-space start-pos end-pos :buffer-blob :type :logical-block type logical-block :nl-t :start-block-t :end-block-t :relative-to :offset relative-to offset :indent-t :hierarchy :default :start :end :block :current :mandatory :fill :linear :miser :buffer :logical-blocks :buffering :mode :pos :writing :miser-width :buffer-block :pretty-writer :sections :buffer-level miser-width lb meta54447 :stream :circle :length :level :lines :dispatch :pretty :radix :readably :right-margin :suppress-namespaces :line-relative :section-relative :seq :rest seq rest pos :func :def :params func def params ...]}, :doc nil}