{:rename-macros {}, :renames {}, :externs {XMLHttpRequest {}}, :use-macros {}, :excludes #{load}, :name xml.XMLHttpRequest, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {timeout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 300, :column 7, :end-line 300, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.timeout property is an unsigned long representing\n  number of milliseconds a request can take before automatically\n  terminated. The default value is 0, which means there is no timeout.\n  shouldn't be used for synchronous XMLHttpRequests requests used\n  a document environment or it will throw an InvalidAccessError\n  When a timeout happens, a timeout event is fired.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout`"}, :name xml.XMLHttpRequest/timeout, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 300, :end-line 300, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.timeout property is an unsigned long representing\n  number of milliseconds a request can take before automatically\n  terminated. The default value is 0, which means there is no timeout.\n  shouldn't be used for synchronous XMLHttpRequests requests used\n  a document environment or it will throw an InvalidAccessError\n  When a timeout happens, a timeout event is fired.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout`"}, multipart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 470, :column 7, :end-line 470, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  This boolean indicates if the response is expected to be a stream\n  possibly multiple XML documents.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/multipart`"}, :name xml.XMLHttpRequest/multipart, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  This boolean indicates if the response is expected to be a stream\n  possibly multiple XML documents.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/multipart`"}, set-onreadystatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 150, :column 7, :end-line 150, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  An `web.EventHandler` that is called whenever the readyState\n  changes. The callback is called from the user interface thread.\n  XMLHttpRequest.onreadystatechange property contains the event\n  to be called when the readystatechange event is fired, that is\n  time the `web.readyState` property of the `xml.XMLHttpRequest`\n\n  `XMLHttpRequest.onreadystatechange = callback;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange`"}, :name xml.XMLHttpRequest/set-onreadystatechange!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `web.EventHandler` that is called whenever the readyState\n  changes. The callback is called from the user interface thread.\n  XMLHttpRequest.onreadystatechange property contains the event\n  to be called when the readystatechange event is fired, that is\n  time the `web.readyState` property of the `xml.XMLHttpRequest`\n\n  `XMLHttpRequest.onreadystatechange = callback;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange`"}, with-credentials {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 338, :column 7, :end-line 338, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.withCredentials property is a `web.Boolean`\n  indicates whether or not cross-site Access-Control requests should\n  made using credentials such as cookies, authorization headers\n  TLS client certificates. Setting withCredentials has no effect\n  same-site requests.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials`"}, :name xml.XMLHttpRequest/with-credentials, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.withCredentials property is a `web.Boolean`\n  indicates whether or not cross-site Access-Control requests should\n  made using credentials such as cookies, authorization headers\n  TLS client certificates. Setting withCredentials has no effect\n  same-site requests.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials`"}, open-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  This Mozilla-specific method is available only from within privileged\n  and is only called from a C++ context in order to initialize\n  XMLHttpRequest.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/openRequest`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name xml.XMLHttpRequest/open-request, :variadic true, :file "src/xml/XMLHttpRequest.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  This Mozilla-specific method is available only from within privileged\n  and is only called from a C++ context in order to initialize\n  XMLHttpRequest.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/openRequest`"}, moz-system {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 410, :column 7, :end-line 410, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  mozSystem is a boolean. If true, the same origin policy is not\n  on the request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozSystem`"}, :name xml.XMLHttpRequest/moz-system, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  mozSystem is a boolean. If true, the same origin policy is not\n  on the request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozSystem`"}, upload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 328, :column 7, :end-line 328, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` upload property returns an `xml.XMLHttpRequestUpload`\n  that can be observed to monitor an upload's progress.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload`"}, :name xml.XMLHttpRequest/upload, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` upload property returns an `xml.XMLHttpRequestUpload`\n  that can be observed to monitor an upload's progress.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/upload`"}, set-request-header {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 96, :column 7, :end-line 96, :end-column 25, :arglists (quote ([this header value])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method setRequestHeader() sets the value\n  an HTTP request header. When using setRequestHeader(), you must\n  it after calling `web.open()`, but before calling `web.send()`.\n  this method is called several times with the same header, the\n  are merged into one single request header.\n\n  `XMLHttpRequest.setRequestHeader(header, value)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader`"}, :name xml.XMLHttpRequest/set-request-header, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 25, :method-params ([this header value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this header value])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method setRequestHeader() sets the value\n  an HTTP request header. When using setRequestHeader(), you must\n  it after calling `web.open()`, but before calling `web.send()`.\n  this method is called several times with the same header, the\n  are merged into one single request header.\n\n  `XMLHttpRequest.setRequestHeader(header, value)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 57, :column 7, :end-line 57, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method open() initializes a newly-created\n  or re-initializes an existing one.\n\n  `XMLHttpRequest.open(method, url)\n  XMLHttpRequest.open(method, url, async)\n  XMLHttpRequest.open(method, url, async, user)\n  XMLHttpRequest.open(method, url, async, user, password)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name xml.XMLHttpRequest/open, :variadic true, :file "src/xml/XMLHttpRequest.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `xml.XMLHttpRequest` method open() initializes a newly-created\n  or re-initializes an existing one.\n\n  `XMLHttpRequest.open(method, url)\n  XMLHttpRequest.open(method, url, async)\n  XMLHttpRequest.open(method, url, async, user)\n  XMLHttpRequest.open(method, url, async, user, password)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/open`"}, response {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 185, :column 7, :end-line 185, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` response property returns the response's\n  content as an `web.ArrayBuffer`, `web.Blob`, `web.Document`,\n  `web.Object`, or `dom.DOMString`, depending on the value of the\n  `web.responseType` property.\n\n  `var body = XMLHttpRequest.response;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response`"}, :name xml.XMLHttpRequest/response, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` response property returns the response's\n  content as an `web.ArrayBuffer`, `web.Blob`, `web.Document`,\n  `web.Object`, or `dom.DOMString`, depending on the value of the\n  `web.responseType` property.\n\n  `var body = XMLHttpRequest.response;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/response`"}, response-xml {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 252, :column 7, :end-line 252, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.responseXML read-only property returns a `web.Document`\n  the HTML or XML retrieved by the request; or null if the request\n  unsuccessful, has not yet been sent, or if the data can't be\n  as XML or HTML.\n\n  `var data = XMLHttpRequest.responseXML;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML`"}, :name xml.XMLHttpRequest/response-xml, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.responseXML read-only property returns a `web.Document`\n  the HTML or XML retrieved by the request; or null if the request\n  unsuccessful, has not yet been sent, or if the data can't be\n  as XML or HTML.\n\n  `var data = XMLHttpRequest.responseXML;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML`"}, set-moz-response-array-buffer! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 460, :column 7, :end-line 460, :end-column 37, :arglists (quote ([this val])), :doc "Property.\n\n  Is an ArrayBuffer response to the request, written as a JavaScript\n  array.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozResponseArrayBuffer`"}, :name xml.XMLHttpRequest/set-moz-response-array-buffer!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 37, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Is an ArrayBuffer response to the request, written as a JavaScript\n  array.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozResponseArrayBuffer`"}, set-multipart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 480, :column 7, :end-line 480, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  This boolean indicates if the response is expected to be a stream\n  possibly multiple XML documents.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/multipart`"}, :name xml.XMLHttpRequest/set-multipart!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 480, :end-line 480, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  This boolean indicates if the response is expected to be a stream\n  possibly multiple XML documents.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/multipart`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 165, :column 7, :end-line 165, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.readyState property returns the state an XMLHttpRequest\n  is in. An XHR client exists in one of the following states:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState`"}, :name xml.XMLHttpRequest/ready-state, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The XMLHttpRequest.readyState property returns the state an XMLHttpRequest\n  is in. An XHR client exists in one of the following states:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState`"}, response-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 239, :column 7, :end-line 239, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.responseURL property returns the\n  URL of the response or the empty string if the URL is null. If\n  URL is returned, any URL fragment present in the URL will be\n  away. The value of responseURL will be the final URL obtained\n  any redirects.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL`"}, :name xml.XMLHttpRequest/response-url, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.responseURL property returns the\n  URL of the response or the empty string if the URL is null. If\n  URL is returned, any URL fragment present in the URL will be\n  away. The value of responseURL will be the final URL obtained\n  any redirects.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseURL`"}, moz-anon {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 390, :column 7, :end-line 390, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.mozAnon is a boolean. If true, the request will\n  sent without cookies or authentication headers.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozAnon`"}, :name xml.XMLHttpRequest/moz-anon, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 390, :end-line 390, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.mozAnon is a boolean. If true, the request will\n  sent without cookies or authentication headers.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozAnon`"}, response-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 211, :column 7, :end-line 211, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` property responseType is an enumerated\n  value specifying the type of data contained in the response.\n\n  `var type = XMLHttpRequest.responseType;\n\n  XMLHttpRequest.responseType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType`"}, :name xml.XMLHttpRequest/response-type, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `xml.XMLHttpRequest` property responseType is an enumerated\n  value specifying the type of data contained in the response.\n\n  `var type = XMLHttpRequest.responseType;\n\n  XMLHttpRequest.responseType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType`"}, set-response-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 225, :column 7, :end-line 225, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `xml.XMLHttpRequest` property responseType is an enumerated\n  value specifying the type of data contained in the response.\n\n  `var type = XMLHttpRequest.responseType;\n\n  XMLHttpRequest.responseType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType`"}, :name xml.XMLHttpRequest/set-response-type!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `xml.XMLHttpRequest` property responseType is an enumerated\n  value specifying the type of data contained in the response.\n\n  `var type = XMLHttpRequest.responseType;\n\n  XMLHttpRequest.responseType = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType`"}, set-moz-system! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 420, :column 7, :end-line 420, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  mozSystem is a boolean. If true, the same origin policy is not\n  on the request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozSystem`"}, :name xml.XMLHttpRequest/set-moz-system!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 420, :end-line 420, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  mozSystem is a boolean. If true, the same origin policy is not\n  on the request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozSystem`"}, set-timeout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 314, :column 7, :end-line 314, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.timeout property is an unsigned long representing\n  number of milliseconds a request can take before automatically\n  terminated. The default value is 0, which means there is no timeout.\n  shouldn't be used for synchronous XMLHttpRequests requests used\n  a document environment or it will throw an InvalidAccessError\n  When a timeout happens, a timeout event is fired.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout`"}, :name xml.XMLHttpRequest/set-timeout!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.timeout property is an unsigned long representing\n  number of milliseconds a request can take before automatically\n  terminated. The default value is 0, which means there is no timeout.\n  shouldn't be used for synchronous XMLHttpRequests requests used\n  a document environment or it will throw an InvalidAccessError\n  When a timeout happens, a timeout event is fired.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/timeout`"}, status-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 286, :column 7, :end-line 286, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.statusText property returns a DOMString\n  the response's status message as returned by the HTTP server.\n  XMLHTTPRequest.status which indicates a numerical status code,\n  property contains the text of the response status, such as \\\"OK\\\"\n  \\\"Not Found\\\". If the request's readyState is in UNSENT or OPENED\n  the value of statusText will be an empty string.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText`"}, :name xml.XMLHttpRequest/status-text, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.statusText property returns a DOMString\n  the response's status message as returned by the HTTP server.\n  XMLHTTPRequest.status which indicates a numerical status code,\n  property contains the text of the response status, such as \\\"OK\\\"\n  \\\"Not Found\\\". If the request's readyState is in UNSENT or OPENED\n  the value of statusText will be an empty string.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/statusText`"}, set-moz-anon! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 400, :column 7, :end-line 400, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.mozAnon is a boolean. If true, the request will\n  sent without cookies or authentication headers.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozAnon`"}, :name xml.XMLHttpRequest/set-moz-anon!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.mozAnon is a boolean. If true, the request will\n  sent without cookies or authentication headers.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozAnon`"}, channel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 364, :column 7, :end-line 364, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.channel is an nsIChannel that used by the object\n  performing the request. This is null if the channel hasn't been\n  yet. In the case of a multi-part request, this is the initial\n  not the different parts in the multi-part request. Requires elevated\n  to access.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/channel`"}, :name xml.XMLHttpRequest/channel, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.channel is an nsIChannel that used by the object\n  performing the request. This is null if the channel hasn't been\n  yet. In the case of a multi-part request, this is the initial\n  not the different parts in the multi-part request. Requires elevated\n  to access.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/channel`"}, set-status! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 276, :column 7, :end-line 276, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only XMLHttpRequest.status property returns the numerical\n  status code of the XMLHttpRequest's response.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status`"}, :name xml.XMLHttpRequest/set-status!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only XMLHttpRequest.status property returns the numerical\n  status code of the XMLHttpRequest's response.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status`"}, onreadystatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 135, :column 7, :end-line 135, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  An `web.EventHandler` that is called whenever the readyState\n  changes. The callback is called from the user interface thread.\n  XMLHttpRequest.onreadystatechange property contains the event\n  to be called when the readystatechange event is fired, that is\n  time the `web.readyState` property of the `xml.XMLHttpRequest`\n\n  `XMLHttpRequest.onreadystatechange = callback;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange`"}, :name xml.XMLHttpRequest/onreadystatechange, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `web.EventHandler` that is called whenever the readyState\n  changes. The callback is called from the user interface thread.\n  XMLHttpRequest.onreadystatechange property contains the event\n  to be called when the readystatechange event is fired, that is\n  time the `web.readyState` property of the `xml.XMLHttpRequest`\n\n  `XMLHttpRequest.onreadystatechange = callback;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/onreadystatechange`"}, get-all-response-headers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 32, :column 7, :end-line 32, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method getAllResponseHeaders() returns\n  the response headers, separated by CRLF, as a string, or returns\n  if no response has been received.\n\n  `var headers = XMLHttpRequest.getAllResponseHeaders();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders`"}, :name xml.XMLHttpRequest/get-all-response-headers, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method getAllResponseHeaders() returns\n  the response headers, separated by CRLF, as a string, or returns\n  if no response has been received.\n\n  `var headers = XMLHttpRequest.getAllResponseHeaders();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders`"}, abort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 18, :column 7, :end-line 18, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The XMLHttpRequest.abort() method aborts the request if it has\n  been sent. When a request is aborted, its `web.readyState` is\n  to `xml.XMLHttpRequest.UNSENT` (0) and the request's `web.status`\n  is set to 0.\n\n  `XMLHttpRequest.abort()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort`"}, :name xml.XMLHttpRequest/abort, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The XMLHttpRequest.abort() method aborts the request if it has\n  been sent. When a request is aborted, its `web.readyState` is\n  to `xml.XMLHttpRequest.UNSENT` (0) and the request's `web.status`\n  is set to 0.\n\n  `XMLHttpRequest.abort()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/abort`"}, set-ready-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 175, :column 7, :end-line 175, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.readyState property returns the state an XMLHttpRequest\n  is in. An XHR client exists in one of the following states:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState`"}, :name xml.XMLHttpRequest/set-ready-state!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.readyState property returns the state an XMLHttpRequest\n  is in. An XHR client exists in one of the following states:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/readyState`"}, moz-background-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 430, :column 7, :end-line 430, :end-column 29, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.mozBackgroundRequest is a Boolean, indicating\n  the object represents a background service request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest`"}, :name xml.XMLHttpRequest/moz-background-request, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  XMLHttpRequest.mozBackgroundRequest is a Boolean, indicating\n  the object represents a background service request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest`"}, set-channel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 377, :column 7, :end-line 377, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.channel is an nsIChannel that used by the object\n  performing the request. This is null if the channel hasn't been\n  yet. In the case of a multi-part request, this is the initial\n  not the different parts in the multi-part request. Requires elevated\n  to access.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/channel`"}, :name xml.XMLHttpRequest/set-channel!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.channel is an nsIChannel that used by the object\n  performing the request. This is null if the channel hasn't been\n  yet. In the case of a multi-part request, this is the initial\n  not the different parts in the multi-part request. Requires elevated\n  to access.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/channel`"}, set-moz-background-request! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 440, :column 7, :end-line 440, :end-column 34, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.mozBackgroundRequest is a Boolean, indicating\n  the object represents a background service request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest`"}, :name xml.XMLHttpRequest/set-moz-background-request!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 34, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 440, :end-line 440, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  XMLHttpRequest.mozBackgroundRequest is a Boolean, indicating\n  the object represents a background service request.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozBackgroundRequest`"}, set-with-credentials! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 351, :column 7, :end-line 351, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.withCredentials property is a `web.Boolean`\n  indicates whether or not cross-site Access-Control requests should\n  made using credentials such as cookies, authorization headers\n  TLS client certificates. Setting withCredentials has no effect\n  same-site requests.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials`"}, :name xml.XMLHttpRequest/set-with-credentials!, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The XMLHttpRequest.withCredentials property is a `web.Boolean`\n  indicates whether or not cross-site Access-Control requests should\n  made using credentials such as cookies, authorization headers\n  TLS client certificates. Setting withCredentials has no effect\n  same-site requests.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials`"}, status {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 266, :column 7, :end-line 266, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.status property returns the numerical\n  status code of the XMLHttpRequest's response.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status`"}, :name xml.XMLHttpRequest/status, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only XMLHttpRequest.status property returns the numerical\n  status code of the XMLHttpRequest's response.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/status`"}, send-as-binary {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 122, :column 7, :end-line 122, :end-column 21, :arglists (quote ([this binary-string])), :doc "Method.\n\n  The obsolete `xml.XMLHttpRequest` method sendAsBinary() is a\n  of the `web.send()` method that sends binary data. The send()\n  now supports binary data and should now be used instead.\n\n  `XMLHttpRequest.sendAsBinary(binaryString);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/sendAsBinary`"}, :name xml.XMLHttpRequest/send-as-binary, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 21, :method-params ([this binary-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this binary-string])), :doc "Method.\n\n  The obsolete `xml.XMLHttpRequest` method sendAsBinary() is a\n  of the `web.send()` method that sends binary data. The send()\n  now supports binary data and should now be used instead.\n\n  `XMLHttpRequest.sendAsBinary(binaryString);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/sendAsBinary`"}, get-response-header {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 45, :column 7, :end-line 45, :end-column 26, :arglists (quote ([this header-name])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method getResponseHeader() returns the\n  containing the text of a particular header's value.\n\n  `var myHeader = XMLHttpRequest.getResponseHeader(headerName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader`"}, :name xml.XMLHttpRequest/get-response-header, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 26, :method-params ([this header-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this header-name])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method getResponseHeader() returns the\n  containing the text of a particular header's value.\n\n  `var myHeader = XMLHttpRequest.getResponseHeader(headerName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getResponseHeader`"}, response-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 199, :column 7, :end-line 199, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `xml.XMLHttpRequest` property responseText returns\n  text received from a server following a request being sent.\n\n  `var resultText = XMLHttpRequest.responseText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText`"}, :name xml.XMLHttpRequest/response-text, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `xml.XMLHttpRequest` property responseText returns\n  text received from a server following a request being sent.\n\n  `var resultText = XMLHttpRequest.responseText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseText`"}, constructor {:name xml.XMLHttpRequest/constructor, :file "src/xml/XMLHttpRequest.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The XMLHttpRequest() constructor creates a new `xml.XMLHttpRequest`.\n\n  None.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/XMLHttpRequest`", :tag js}, override-mime-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 72, :column 7, :end-line 72, :end-column 25, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method overrideMimeType() specifies\n  MIME type other than the one provided by the server to be used\n  when interpreting the data being transferred in a request.\n\n  `XMLHttpRequest.overrideMimeType(mimeType)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType`"}, :name xml.XMLHttpRequest/override-mime-type, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 25, :method-params ([this mime-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mime-type])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method overrideMimeType() specifies\n  MIME type other than the one provided by the server to be used\n  when interpreting the data being transferred in a request.\n\n  `XMLHttpRequest.overrideMimeType(mimeType)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/overrideMimeType`"}, send {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 85, :column 7, :end-line 85, :end-column 11, :arglists (quote ([this body])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method send() sends the request to the\n\n  `XMLHttpRequest.send(body)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send`"}, :name xml.XMLHttpRequest/send, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 11, :method-params ([this body]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this body])), :doc "Method.\n\n  The `xml.XMLHttpRequest` method send() sends the request to the\n\n  `XMLHttpRequest.send(body)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/send`"}, moz-response-array-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/xml/XMLHttpRequest.cljs", :line 450, :column 7, :end-line 450, :end-column 32, :arglists (quote ([this])), :doc "Property.\n\n  Is an ArrayBuffer response to the request, written as a JavaScript\n  array.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozResponseArrayBuffer`"}, :name xml.XMLHttpRequest/moz-response-array-buffer, :variadic false, :file "src/xml/XMLHttpRequest.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Is an ArrayBuffer response to the request, written as a JavaScript\n  array.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/mozResponseArrayBuffer`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Use XMLHttpRequest (XHR) objects to interact with servers. You\n  retrieve data from a URL without having to do a full page refresh.\n  enables a Web page to update just part of a page without disrupting\n  the user is doing."}