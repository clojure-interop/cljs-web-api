{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name performance.Performance, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {clear-marks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The clearMarks() method removes the named mark from the browser's\n  entry buffer. If the method is called with no arguments, all\n  entries` with an `web.entry type` of \\\"mark\\\" will be removed\n  the performance entry buffer.\n\n  `performance.clearMarks();\n  performance.clearMarks(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name performance.Performance/clear-marks, :variadic true, :file "src/performance/Performance.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The clearMarks() method removes the named mark from the browser's\n  entry buffer. If the method is called with no arguments, all\n  entries` with an `web.entry type` of \\\"mark\\\" will be removed\n  the performance entry buffer.\n\n  `performance.clearMarks();\n  performance.clearMarks(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMarks`"}, now {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 133, :column 7, :end-line 133, :end-column 10, :arglists (quote ([this])), :doc "Method.\n\n  The performance.now() method returns a `dom.DOMHighResTimeStamp`,\n  in milliseconds.\n\n  `t = performance.now();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/now`"}, :name performance.Performance/now, :variadic false, :file "src/performance/Performance.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The performance.now() method returns a `dom.DOMHighResTimeStamp`,\n  in milliseconds.\n\n  `t = performance.now();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/now`"}, get-entries-by-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 73, :column 7, :end-line 73, :end-column 26, :arglists (quote ([this name type])), :doc "Method.\n\n  The getEntriesByName() method returns a list of `performance.PerformanceEntry`\n  for the given name and type. The list's members (entries) can\n  created by making performance marks or measures (for example\n  calling the `web.mark()` method) at explicit points in time.\n\n  `entries = window.performance.getEntriesByName(name, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName`"}, :name performance.Performance/get-entries-by-name, :variadic false, :file "src/performance/Performance.cljs", :end-column 26, :method-params ([this name type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name type])), :doc "Method.\n\n  The getEntriesByName() method returns a list of `performance.PerformanceEntry`\n  for the given name and type. The list's members (entries) can\n  created by making performance marks or measures (for example\n  calling the `web.mark()` method) at explicit points in time.\n\n  `entries = window.performance.getEntriesByName(name, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByName`"}, get-entries-by-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 87, :column 7, :end-line 87, :end-column 26, :arglists (quote ([this type])), :doc "Method.\n\n  The getEntriesByType() method returns a list of `performance.PerformanceEntry`\n  for a given type. The list's members (entries) can be created\n  making performance marks or measures (for example by calling\n  `web.mark()` method) at explicit points in time.\n\n  `entries = window.performance.getEntriesByType(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType`"}, :name performance.Performance/get-entries-by-type, :variadic false, :file "src/performance/Performance.cljs", :end-column 26, :method-params ([this type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this type])), :doc "Method.\n\n  The getEntriesByType() method returns a list of `performance.PerformanceEntry`\n  for a given type. The list's members (entries) can be created\n  making performance marks or measures (for example by calling\n  `web.mark()` method) at explicit points in time.\n\n  `entries = window.performance.getEntriesByType(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType`"}, mark {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([this name])), :doc "Method.\n\n  The mark() method creates a `web.timestamp` in the browser's\n  entry buffer with the given name. The application defined timestamp\n  be retrieved by one of the `performance.Performance` interface's\n  methods (`web.getEntries()`, `web.getEntriesByName()` or `web.getEntriesByType()`).\n\n  `performance.mark(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark`"}, :name performance.Performance/mark, :variadic false, :file "src/performance/Performance.cljs", :end-column 11, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The mark() method creates a `web.timestamp` in the browser's\n  entry buffer with the given name. The application defined timestamp\n  be retrieved by one of the `performance.Performance` interface's\n  methods (`web.getEntries()`, `web.getEntriesByName()` or `web.getEntriesByType()`).\n\n  `performance.mark(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark`"}, set-time-origin! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 226, :column 7, :end-line 226, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The timeOrigin read-only property of the `performance.Performance`\n  returns the high resolution timestamp of the start time of the\n  measurement.\n\n  `var timeOrigin = performance.timeOrigin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin`"}, :name performance.Performance/set-time-origin!, :variadic false, :file "src/performance/Performance.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timeOrigin read-only property of the `performance.Performance`\n  returns the high resolution timestamp of the start time of the\n  measurement.\n\n  `var timeOrigin = performance.timeOrigin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin`"}, navigation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 171, :column 7, :end-line 171, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The legacy Performance.navigation read-only property returns\n  `performance.PerformanceNavigation` object representing the type\n  navigation that occurs in the given browsing context, such as\n  number of redirections needed to fetch the resource.\n\n  `navObject = performance.navigation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation`"}, :name performance.Performance/navigation, :variadic false, :file "src/performance/Performance.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The legacy Performance.navigation read-only property returns\n  `performance.PerformanceNavigation` object representing the type\n  navigation that occurs in the given browsing context, such as\n  number of redirections needed to fetch the resource.\n\n  `navObject = performance.navigation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/navigation`"}, set-resource-timing-buffer-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 145, :column 7, :end-line 145, :end-column 38, :arglists (quote ([this max-size])), :doc "Method.\n\n  The setResourceTimingBufferSize() method sets the browser's resource\n  buffer size to the specified number of \\\"resource\\\" `web.performance\n  type` objects.\n\n  `performance.setResourceTimingBufferSize(maxSize);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize`"}, :name performance.Performance/set-resource-timing-buffer-size, :variadic false, :file "src/performance/Performance.cljs", :end-column 38, :method-params ([this max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this max-size])), :doc "Method.\n\n  The setResourceTimingBufferSize() method sets the browser's resource\n  buffer size to the specified number of \\\"resource\\\" `web.performance\n  type` objects.\n\n  `performance.setResourceTimingBufferSize(maxSize);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/setResourceTimingBufferSize`"}, clear-resource-timings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 38, :column 7, :end-line 38, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The clearResourceTimings() method removes all `web.performance\n  with an `web.entryType` of \\\"resource\\\" from the browser's performance\n  buffer and sets the size of the performance data buffer to zero.\n  set the size of the browser's performance data buffer, use the\n  method.\n\n  `performance.clearResourceTimings();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings`"}, :name performance.Performance/clear-resource-timings, :variadic false, :file "src/performance/Performance.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clearResourceTimings() method removes all `web.performance\n  with an `web.entryType` of \\\"resource\\\" from the browser's performance\n  buffer and sets the size of the performance data buffer to zero.\n  set the size of the browser's performance data buffer, use the\n  method.\n\n  `performance.clearResourceTimings();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearResourceTimings`"}, to-json {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 158, :column 7, :end-line 158, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The toJSON() method of the `performance.Performance` interface\n  a standard serializer: it returns a JSON representation of the\n  object's properties.\n\n  `myPerf = performance.toJSON()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON`"}, :name performance.Performance/to-json, :variadic false, :file "src/performance/Performance.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The toJSON() method of the `performance.Performance` interface\n  a standard serializer: it returns a JSON representation of the\n  object's properties.\n\n  `myPerf = performance.toJSON()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/toJSON`"}, memory {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 251, :column 7, :end-line 251, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  None.\n\n  `timingInfo = performance.memory`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory`"}, :name performance.Performance/memory, :variadic false, :file "src/performance/Performance.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  None.\n\n  `timingInfo = performance.memory`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory`"}, set-memory! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 262, :column 7, :end-line 262, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  None.\n\n  `timingInfo = performance.memory`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory`"}, :name performance.Performance/set-memory!, :variadic false, :file "src/performance/Performance.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  None.\n\n  `timingInfo = performance.memory`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/memory`"}, onresourcetimingbufferfull {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 185, :column 7, :end-line 185, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The onresourcetimingbufferfull property is an event handler that\n  be called when the resourcetimingbufferfull event is fired. This\n  is fired when the browser's resource timing performance buffer\n  full.\n\n  `callback = performance.onresourcetimingbufferfull = buffer_full_cb;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull`"}, :name performance.Performance/onresourcetimingbufferfull, :variadic false, :file "src/performance/Performance.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onresourcetimingbufferfull property is an event handler that\n  be called when the resourcetimingbufferfull event is fired. This\n  is fired when the browser's resource timing performance buffer\n  full.\n\n  `callback = performance.onresourcetimingbufferfull = buffer_full_cb;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull`"}, get-entries {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 53, :column 7, :end-line 53, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The getEntries() method returns a list of all `performance.PerformanceEntry`\n  for the page. The list's members (entries) can be created by\n  performance marks or measures (for example by calling the `web.mark()`\n  at explicit points in time. If you are only interested in performance\n  of certain types or that have certain names, see `web.getEntriesByType()`\n  `web.getEntriesByName()`.\n\n  `General syntax:\n\n\n\n  entries = window.performance.getEntries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name performance.Performance/get-entries, :variadic true, :file "src/performance/Performance.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getEntries() method returns a list of all `performance.PerformanceEntry`\n  for the page. The list's members (entries) can be created by\n  performance marks or measures (for example by calling the `web.mark()`\n  at explicit points in time. If you are only interested in performance\n  of certain types or that have certain names, see `web.getEntriesByType()`\n  `web.getEntriesByName()`.\n\n  `General syntax:\n\n\n\n  entries = window.performance.getEntries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/getEntries`"}, measure {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 115, :column 7, :end-line 115, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The measure() method creates a named `web.timestamp` in the browser's\n  entry buffer between marks, the navigation start time, or the\n  time. When measuring between two marks, there is a start mark\n  end mark, respectively. The named timestamp is referred to as\n  measure.\n\n  `performance.measure(name);\n  performance.measure(name, startMark);\n  performance.measure(name, startMark, endMark);\n  performance.measure(name, undefined, endMark);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name performance.Performance/measure, :variadic true, :file "src/performance/Performance.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The measure() method creates a named `web.timestamp` in the browser's\n  entry buffer between marks, the navigation start time, or the\n  time. When measuring between two marks, there is a start mark\n  end mark, respectively. The named timestamp is referred to as\n  measure.\n\n  `performance.measure(name);\n  performance.measure(name, startMark);\n  performance.measure(name, startMark, endMark);\n  performance.measure(name, undefined, endMark);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure`"}, clear-measures {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 23, :column 7, :end-line 23, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The clearMeasures() method removes the named measure from the\n  performance entry buffer. If the method is called with no arguments,\n  `web.performance entries` with an `web.entry type` of \\\"measure\\\"\n  be removed from the performance entry buffer.\n\n  `performance.clearMeasures();\n  performance.clearMeasures(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name performance.Performance/clear-measures, :variadic true, :file "src/performance/Performance.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The clearMeasures() method removes the named measure from the\n  performance entry buffer. If the method is called with no arguments,\n  `web.performance entries` with an `web.entry type` of \\\"measure\\\"\n  be removed from the performance entry buffer.\n\n  `performance.clearMeasures();\n  performance.clearMeasures(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/clearMeasures`"}, set-onresourcetimingbufferfull! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 199, :column 7, :end-line 199, :end-column 38, :arglists (quote ([this val])), :doc "Property.\n\n  The onresourcetimingbufferfull property is an event handler that\n  be called when the resourcetimingbufferfull event is fired. This\n  is fired when the browser's resource timing performance buffer\n  full.\n\n  `callback = performance.onresourcetimingbufferfull = buffer_full_cb;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull`"}, :name performance.Performance/set-onresourcetimingbufferfull!, :variadic false, :file "src/performance/Performance.cljs", :end-column 38, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onresourcetimingbufferfull property is an event handler that\n  be called when the resourcetimingbufferfull event is fired. This\n  is fired when the browser's resource timing performance buffer\n  full.\n\n  `callback = performance.onresourcetimingbufferfull = buffer_full_cb;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/onresourcetimingbufferfull`"}, time-origin {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 213, :column 7, :end-line 213, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The timeOrigin read-only property of the `performance.Performance`\n  returns the high resolution timestamp of the start time of the\n  measurement.\n\n  `var timeOrigin = performance.timeOrigin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin`"}, :name performance.Performance/time-origin, :variadic false, :file "src/performance/Performance.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timeOrigin read-only property of the `performance.Performance`\n  returns the high resolution timestamp of the start time of the\n  measurement.\n\n  `var timeOrigin = performance.timeOrigin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timeOrigin`"}, timing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/Performance.cljs", :line 239, :column 7, :end-line 239, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The legacy Performance.timing read-only property returns a `performance.PerformanceTiming`\n  containing latency-related performance information.\n\n  `timingInfo = performance.timing;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing`"}, :name performance.Performance/timing, :variadic false, :file "src/performance/Performance.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The legacy Performance.timing read-only property returns a `performance.PerformanceTiming`\n  containing latency-related performance information.\n\n  `timingInfo = performance.timing;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Performance/timing`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Performance interface provides access to performance-related\n  for the current page. It's part of the High Resolution Time API,\n  is enhanced by the Performance Timeline API, the Navigation Timing\n  the User Timing API, and the Resource Timing API."}