{:rename-macros {}, :renames {}, :externs {PerformanceObserver {}}, :use-macros {}, :excludes #{}, :name performance.PerformanceObserver, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name performance.PerformanceObserver/constructor, :file "src/performance/PerformanceObserver.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceObserver.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The PerformanceObserver() constructor creates a new `performance.PerformanceObserver` object with the given observer callback. The observer callback is invoked when performance entry events are recorded for the entry types that have been registered, via the `web.observe()` method.\n\n  callback\n  A PerformanceObserverCallback callback that will be invoked when observed performance events are recorded. When the callback is invoked, its first parameter is a list of performance observer entries and the second parameter is the `web.observer` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/PerformanceObserver`", :tag js}, disconnect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceObserver.cljs", :line 18, :column 7, :end-line 18, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The disconnect() method of the `performance.PerformanceObserver`\n  is used to stop the performance observer from receiving any performance\n  events.\n\n  `performanceObserver.disconnect();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect`"}, :name performance.PerformanceObserver/disconnect, :variadic false, :file "src/performance/PerformanceObserver.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The disconnect() method of the `performance.PerformanceObserver`\n  is used to stop the performance observer from receiving any performance\n  events.\n\n  `performanceObserver.disconnect();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/disconnect`"}, observe {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceObserver.cljs", :line 31, :column 7, :end-line 31, :end-column 14, :arglists (quote ([this options])), :doc "Method.\n\n  The observe() method of the `performance.PerformanceObserver`\n  is used to specify the set of performance entry types to observe.\n\n  `observer.observe(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe`"}, :name performance.PerformanceObserver/observe, :variadic false, :file "src/performance/PerformanceObserver.cljs", :end-column 14, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The observe() method of the `performance.PerformanceObserver`\n  is used to specify the set of performance entry types to observe.\n\n  `observer.observe(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/observe`"}, take-records {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceObserver.cljs", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The takeRecords() method of the `performance.PerformanceObserver`\n  returns the current list of `web.performance entries` stored\n  the performance observer, emptying it out.\n\n  `var PerformanceEntry[] = performanceObserver.takeRecords();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/takeRecords`"}, :name performance.PerformanceObserver/take-records, :variadic false, :file "src/performance/PerformanceObserver.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The takeRecords() method of the `performance.PerformanceObserver`\n  returns the current list of `web.performance entries` stored\n  the performance observer, emptying it out.\n\n  `var PerformanceEntry[] = performanceObserver.takeRecords();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver/takeRecords`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PerformanceObserver interface is used to observe performance\n  events and be notified of new performance entries as they are\n  in the browser's performance timeline."}