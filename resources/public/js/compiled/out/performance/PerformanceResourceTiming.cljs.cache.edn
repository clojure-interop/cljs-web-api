{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{name}, :name performance.PerformanceResourceTiming, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {redirect-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 279, :column 7, :end-line 279, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The redirectStart read-only property returns a `web.timestamp`\n  the start time of the fetch which that initiates the redirect.\n\n  `resource.redirectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart`"}, :name performance.PerformanceResourceTiming/redirect-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The redirectStart read-only property returns a `web.timestamp`\n  the start time of the fetch which that initiates the redirect.\n\n  `resource.redirectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart`"}, set-server-timing! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 425, :column 7, :end-line 425, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The serverTiming read-only property returns an array of `performance.PerformanceServerTiming`\n  containing server timing metrics.\n\n  `resource.serverTiming;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/serverTiming`"}, :name performance.PerformanceResourceTiming/set-server-timing!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 425, :end-line 425, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The serverTiming read-only property returns an array of `performance.PerformanceServerTiming`\n  containing server timing metrics.\n\n  `resource.serverTiming;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/serverTiming`"}, set-decoded-body-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 92, :column 7, :end-line 92, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The decodedBodySize read-only property returns the size (in octets)\n  from the fetch (HTTP or cache) of the message body, after removing\n  applied content-codings. If the resource is retrieved from an\n  cache or local resources, it returns the size of the payload\n  removing any applied content-codings.\n\n  `resource.decodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize`"}, :name performance.PerformanceResourceTiming/set-decoded-body-size!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The decodedBodySize read-only property returns the size (in octets)\n  from the fetch (HTTP or cache) of the message body, after removing\n  applied content-codings. If the resource is retrieved from an\n  cache or local resources, it returns the size of the payload\n  removing any applied content-codings.\n\n  `resource.decodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize`"}, set-domain-lookup-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 119, :column 7, :end-line 119, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The domainLookupEnd read-only property returns the `web.timestamp`\n  after the browser finishes the domain name lookup for the resource.\n\n  `resource.domainLookupEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd`"}, :name performance.PerformanceResourceTiming/set-domain-lookup-end!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The domainLookupEnd read-only property returns the `web.timestamp`\n  after the browser finishes the domain name lookup for the resource.\n\n  `resource.domainLookupEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd`"}, set-fetch-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 193, :column 7, :end-line 193, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The fetchStart read-only property represents a `web.timestamp`\n  before the browser starts to fetch the resource.\n\n  `resource.fetchStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart`"}, :name performance.PerformanceResourceTiming/set-fetch-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The fetchStart read-only property represents a `web.timestamp`\n  before the browser starts to fetch the resource.\n\n  `resource.fetchStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart`"}, domain-lookup-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 131, :column 7, :end-line 131, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The domainLookupStart read-only property returns the `web.timestamp`\n  before the browser starts the domain name lookup for the resource.\n\n  `resource.domainLookupStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart`"}, :name performance.PerformanceResourceTiming/domain-lookup-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The domainLookupStart read-only property returns the `web.timestamp`\n  before the browser starts the domain name lookup for the resource.\n\n  `resource.domainLookupStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart`"}, secure-connection-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 385, :column 7, :end-line 385, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The secureConnectionStart read-only property returns a `web.timestamp`\n  before the browser starts the handshake process to secure the\n  connection. If a secure connection is not used, the property\n  zero.\n\n  `resource.secureConnectionStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart`"}, :name performance.PerformanceResourceTiming/secure-connection-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The secureConnectionStart read-only property returns a `web.timestamp`\n  before the browser starts the handshake process to secure the\n  connection. If a secure connection is not used, the property\n  zero.\n\n  `resource.secureConnectionStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart`"}, fetch-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 181, :column 7, :end-line 181, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The fetchStart read-only property represents a `web.timestamp`\n  before the browser starts to fetch the resource.\n\n  `resource.fetchStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart`"}, :name performance.PerformanceResourceTiming/fetch-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The fetchStart read-only property represents a `web.timestamp`\n  before the browser starts to fetch the resource.\n\n  `resource.fetchStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/fetchStart`"}, set-response-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 346, :column 7, :end-line 346, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The responseEnd read-only property returns a `web.timestamp`\n  after the browser receives the last byte of the resource or immediately\n  the transport connection is closed, whichever comes first.\n\n  `resource.responseEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd`"}, :name performance.PerformanceResourceTiming/set-response-end!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The responseEnd read-only property returns a `web.timestamp`\n  after the browser receives the last byte of the resource or immediately\n  the transport connection is closed, whichever comes first.\n\n  `resource.responseEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd`"}, set-redirect-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 267, :column 7, :end-line 267, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The redirectEnd read-only property returns a `web.timestamp`\n  after receiving the last byte of the response of the last redirect.\n\n  `resource.redirectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd`"}, :name performance.PerformanceResourceTiming/set-redirect-end!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The redirectEnd read-only property returns a `web.timestamp`\n  after receiving the last byte of the response of the last redirect.\n\n  `resource.redirectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd`"}, server-timing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 413, :column 7, :end-line 413, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The serverTiming read-only property returns an array of `performance.PerformanceServerTiming`\n  containing server timing metrics.\n\n  `resource.serverTiming;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/serverTiming`"}, :name performance.PerformanceResourceTiming/server-timing, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The serverTiming read-only property returns an array of `performance.PerformanceServerTiming`\n  containing server timing metrics.\n\n  `resource.serverTiming;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/serverTiming`"}, transfer-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 437, :column 7, :end-line 437, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The transferSize read-only property represents the size (in octets)\n  the fetched resource. The size includes the response header fields\n  the response payload body (as defined by RFC7230).\n\n  `resource.transferSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize`"}, :name performance.PerformanceResourceTiming/transfer-size, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The transferSize read-only property represents the size (in octets)\n  the fetched resource. The size includes the response header fields\n  the response payload body (as defined by RFC7230).\n\n  `resource.transferSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize`"}, set-duration! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 583, :column 7, :end-line 583, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property returns a `web.timestamp` that is the duration\n  the `web.performance entry`.\n\n  `entry.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration`"}, :name performance.PerformanceResourceTiming/set-duration!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 583, :end-line 583, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property returns a `web.timestamp` that is the duration\n  the `web.performance entry`.\n\n  `entry.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration`"}, connect-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 51, :column 7, :end-line 51, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The connectStart read-only property returns the `web.timestamp`\n  before the user agent starts establishing the connection to the\n  to retrieve the resource.\n\n  `resource.connectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart`"}, :name performance.PerformanceResourceTiming/connect-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The connectStart read-only property returns the `web.timestamp`\n  before the user agent starts establishing the connection to the\n  to retrieve the resource.\n\n  `resource.connectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart`"}, set-response-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 372, :column 7, :end-line 372, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The responseStart read-only property returns a `web.timestamp`\n  after the browser receives the first byte of the response from\n  server, cache, or local resource.\n\n  `resource.responseStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart`"}, :name performance.PerformanceResourceTiming/set-response-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The responseStart read-only property returns a `web.timestamp`\n  after the browser receives the first byte of the response from\n  server, cache, or local resource.\n\n  `resource.responseStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart`"}, response-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 359, :column 7, :end-line 359, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The responseStart read-only property returns a `web.timestamp`\n  after the browser receives the first byte of the response from\n  server, cache, or local resource.\n\n  `resource.responseStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart`"}, :name performance.PerformanceResourceTiming/response-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The responseStart read-only property returns a `web.timestamp`\n  after the browser receives the first byte of the response from\n  server, cache, or local resource.\n\n  `resource.responseStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseStart`"}, set-worker-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 479, :column 7, :end-line 479, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The workerStart read-only property of the `performance.PerformanceResourceTiming`\n  returns a `dom.DOMHighResTimeStamp` immediately before dispatching\n  `web.FetchEvent` if a Service Worker thread is already running,\n  immediately before starting the Service Worker thread if it is\n  already running. If the resource is not intercepted by a Service\n  the property will always return 0.\n\n  `resource.workerStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/workerStart`"}, :name performance.PerformanceResourceTiming/set-worker-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 479, :end-line 479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The workerStart read-only property of the `performance.PerformanceResourceTiming`\n  returns a `dom.DOMHighResTimeStamp` immediately before dispatching\n  `web.FetchEvent` if a Service Worker thread is already running,\n  immediately before starting the Service Worker thread if it is\n  already running. If the resource is not intercepted by a Service\n  the property will always return 0.\n\n  `resource.workerStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/workerStart`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 534, :column 7, :end-line 534, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The name property of the `performance.PerformanceEntry` interface\n  a value that further specifies the value returned by the `performance.PerformanceEntry.entryType`\n  This property is read only.\n\n  `var name = entry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name`"}, :name performance.PerformanceResourceTiming/set-name!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The name property of the `performance.PerformanceEntry` interface\n  a value that further specifies the value returned by the `performance.PerformanceEntry.entryType`\n  This property is read only.\n\n  `var name = entry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name`"}, request-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 303, :column 7, :end-line 303, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The requestStart read-only property returns a `web.timestamp`\n  the time immediately before the browser starts requesting the\n  from the server, cache, or local resource. If the transport connection\n  and the browser retires the request, the value returned will\n  the start of the retry request.\n\n  `resource.requestStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart`"}, :name performance.PerformanceResourceTiming/request-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The requestStart read-only property returns a `web.timestamp`\n  the time immediately before the browser starts requesting the\n  from the server, cache, or local resource. If the transport connection\n  and the browser retires the request, the value returned will\n  the start of the retry request.\n\n  `resource.requestStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart`"}, worker-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 463, :column 7, :end-line 463, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The workerStart read-only property of the `performance.PerformanceResourceTiming`\n  returns a `dom.DOMHighResTimeStamp` immediately before dispatching\n  `web.FetchEvent` if a Service Worker thread is already running,\n  immediately before starting the Service Worker thread if it is\n  already running. If the resource is not intercepted by a Service\n  the property will always return 0.\n\n  `resource.workerStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/workerStart`"}, :name performance.PerformanceResourceTiming/worker-start, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The workerStart read-only property of the `performance.PerformanceResourceTiming`\n  returns a `dom.DOMHighResTimeStamp` immediately before dispatching\n  `web.FetchEvent` if a Service Worker thread is already running,\n  immediately before starting the Service Worker thread if it is\n  already running. If the resource is not intercepted by a Service\n  the property will always return 0.\n\n  `resource.workerStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/workerStart`"}, set-next-hop-protocol! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 242, :column 7, :end-line 242, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The nextHopProtocol read-only property is a `web.string` representing\n  network protocol used to fetch the resource, as identified by\n  ALPN Protocol ID (RFC7301).\n\n  `resource.nextHopProtocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol`"}, :name performance.PerformanceResourceTiming/set-next-hop-protocol!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The nextHopProtocol read-only property is a `web.string` representing\n  network protocol used to fetch the resource, as identified by\n  ALPN Protocol ID (RFC7301).\n\n  `resource.nextHopProtocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol`"}, response-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 333, :column 7, :end-line 333, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The responseEnd read-only property returns a `web.timestamp`\n  after the browser receives the last byte of the resource or immediately\n  the transport connection is closed, whichever comes first.\n\n  `resource.responseEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd`"}, :name performance.PerformanceResourceTiming/response-end, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The responseEnd read-only property returns a `web.timestamp`\n  after the browser receives the last byte of the resource or immediately\n  the transport connection is closed, whichever comes first.\n\n  `resource.responseEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/responseEnd`"}, set-initiator-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 217, :column 7, :end-line 217, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The initiatorType read-only property is a `web.string` that represents\n  type of resource that initiated the performance event.\n\n  `resource.initiatorType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType`"}, :name performance.PerformanceResourceTiming/set-initiator-type!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The initiatorType read-only property is a `web.string` that represents\n  type of resource that initiated the performance event.\n\n  `resource.initiatorType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType`"}, redirect-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 255, :column 7, :end-line 255, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The redirectEnd read-only property returns a `web.timestamp`\n  after receiving the last byte of the response of the last redirect.\n\n  `resource.redirectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd`"}, :name performance.PerformanceResourceTiming/redirect-end, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The redirectEnd read-only property returns a `web.timestamp`\n  after receiving the last byte of the response of the last redirect.\n\n  `resource.redirectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectEnd`"}, set-entry-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 508, :column 7, :end-line 508, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The entryType property returns a `dom.DOMString` representing\n  type of performance metric such as, for example, \\\"mark\\\". This\n  is read only.\n\n  `var type = entry.entryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType`"}, :name performance.PerformanceResourceTiming/set-entry-type!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 508, :end-line 508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The entryType property returns a `dom.DOMString` representing\n  type of performance metric such as, for example, \\\"mark\\\". This\n  is read only.\n\n  `var type = entry.entryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 521, :column 7, :end-line 521, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The name property of the `performance.PerformanceEntry` interface\n  a value that further specifies the value returned by the `performance.PerformanceEntry.entryType`\n  This property is read only.\n\n  `var name = entry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name`"}, :name performance.PerformanceResourceTiming/name, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 521, :end-line 521, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The name property of the `performance.PerformanceEntry` interface\n  a value that further specifies the value returned by the `performance.PerformanceEntry.entryType`\n  This property is read only.\n\n  `var name = entry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/name`"}, start-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 547, :column 7, :end-line 547, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The startTime property returns the first recorded `web.timestamp`\n  the `web.performance entry`.\n\n  `entry.startTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime`"}, :name performance.PerformanceResourceTiming/start-time, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The startTime property returns the first recorded `web.timestamp`\n  the `web.performance entry`.\n\n  `entry.startTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime`"}, to-json {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 9, :column 7, :end-line 9, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The toJSON() method is a serializer that returns a JSON representation\n  the `performance.PerformanceResourceTiming` object.\n\n  `json = resourcePerfEntry.toJSON();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON`"}, :name performance.PerformanceResourceTiming/to-json, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The toJSON() method is a serializer that returns a JSON representation\n  the `performance.PerformanceResourceTiming` object.\n\n  `json = resourcePerfEntry.toJSON();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/toJSON`"}, set-start-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 559, :column 7, :end-line 559, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The startTime property returns the first recorded `web.timestamp`\n  the `web.performance entry`.\n\n  `entry.startTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime`"}, :name performance.PerformanceResourceTiming/set-start-time!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 559, :end-line 559, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The startTime property returns the first recorded `web.timestamp`\n  the `web.performance entry`.\n\n  `entry.startTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/startTime`"}, entry-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 495, :column 7, :end-line 495, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The entryType property returns a `dom.DOMString` representing\n  type of performance metric such as, for example, \\\"mark\\\". This\n  is read only.\n\n  `var type = entry.entryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType`"}, :name performance.PerformanceResourceTiming/entry-type, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The entryType property returns a `dom.DOMString` representing\n  type of performance metric such as, for example, \\\"mark\\\". This\n  is read only.\n\n  `var type = entry.entryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/entryType`"}, set-connect-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 36, :column 7, :end-line 36, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The connectEnd read-only property returns the `web.timestamp`\n  after the browser finishes establishing the connection to the\n  to retrieve the resource. The timestamp value includes the time\n  to establish the transport connection, as well as other time\n  such as SSL handshake and SOCKS authentication.\n\n  `resource.connectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd`"}, :name performance.PerformanceResourceTiming/set-connect-end!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The connectEnd read-only property returns the `web.timestamp`\n  after the browser finishes establishing the connection to the\n  to retrieve the resource. The timestamp value includes the time\n  to establish the transport connection, as well as other time\n  such as SSL handshake and SOCKS authentication.\n\n  `resource.connectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd`"}, duration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 571, :column 7, :end-line 571, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The duration property returns a `web.timestamp` that is the duration\n  the `web.performance entry`.\n\n  `entry.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration`"}, :name performance.PerformanceResourceTiming/duration, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 571, :end-line 571, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The duration property returns a `web.timestamp` that is the duration\n  the `web.performance entry`.\n\n  `entry.duration;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration`"}, set-secure-connection-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 399, :column 7, :end-line 399, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The secureConnectionStart read-only property returns a `web.timestamp`\n  before the browser starts the handshake process to secure the\n  connection. If a secure connection is not used, the property\n  zero.\n\n  `resource.secureConnectionStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart`"}, :name performance.PerformanceResourceTiming/set-secure-connection-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The secureConnectionStart read-only property returns a `web.timestamp`\n  before the browser starts the handshake process to secure the\n  connection. If a secure connection is not used, the property\n  zero.\n\n  `resource.secureConnectionStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/secureConnectionStart`"}, encoded-body-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 155, :column 7, :end-line 155, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The encodedBodySize read-only property represents the size (in\n  received from the fetch (HTTP or cache), of the payload body,\n  removing any applied content-codings.\n\n  `resource.encodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize`"}, :name performance.PerformanceResourceTiming/encoded-body-size, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The encodedBodySize read-only property represents the size (in\n  received from the fetch (HTTP or cache), of the payload body,\n  removing any applied content-codings.\n\n  `resource.encodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize`"}, next-hop-protocol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 229, :column 7, :end-line 229, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The nextHopProtocol read-only property is a `web.string` representing\n  network protocol used to fetch the resource, as identified by\n  ALPN Protocol ID (RFC7301).\n\n  `resource.nextHopProtocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol`"}, :name performance.PerformanceResourceTiming/next-hop-protocol, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The nextHopProtocol read-only property is a `web.string` representing\n  network protocol used to fetch the resource, as identified by\n  ALPN Protocol ID (RFC7301).\n\n  `resource.nextHopProtocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/nextHopProtocol`"}, set-redirect-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 291, :column 7, :end-line 291, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The redirectStart read-only property returns a `web.timestamp`\n  the start time of the fetch which that initiates the redirect.\n\n  `resource.redirectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart`"}, :name performance.PerformanceResourceTiming/set-redirect-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 291, :end-line 291, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The redirectStart read-only property returns a `web.timestamp`\n  the start time of the fetch which that initiates the redirect.\n\n  `resource.redirectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/redirectStart`"}, set-request-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 318, :column 7, :end-line 318, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The requestStart read-only property returns a `web.timestamp`\n  the time immediately before the browser starts requesting the\n  from the server, cache, or local resource. If the transport connection\n  and the browser retires the request, the value returned will\n  the start of the retry request.\n\n  `resource.requestStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart`"}, :name performance.PerformanceResourceTiming/set-request-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The requestStart read-only property returns a `web.timestamp`\n  the time immediately before the browser starts requesting the\n  from the server, cache, or local resource. If the transport connection\n  and the browser retires the request, the value returned will\n  the start of the retry request.\n\n  `resource.requestStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/requestStart`"}, decoded-body-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 77, :column 7, :end-line 77, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The decodedBodySize read-only property returns the size (in octets)\n  from the fetch (HTTP or cache) of the message body, after removing\n  applied content-codings. If the resource is retrieved from an\n  cache or local resources, it returns the size of the payload\n  removing any applied content-codings.\n\n  `resource.decodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize`"}, :name performance.PerformanceResourceTiming/decoded-body-size, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The decodedBodySize read-only property returns the size (in octets)\n  from the fetch (HTTP or cache) of the message body, after removing\n  applied content-codings. If the resource is retrieved from an\n  cache or local resources, it returns the size of the payload\n  removing any applied content-codings.\n\n  `resource.decodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/decodedBodySize`"}, connect-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The connectEnd read-only property returns the `web.timestamp`\n  after the browser finishes establishing the connection to the\n  to retrieve the resource. The timestamp value includes the time\n  to establish the transport connection, as well as other time\n  such as SSL handshake and SOCKS authentication.\n\n  `resource.connectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd`"}, :name performance.PerformanceResourceTiming/connect-end, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The connectEnd read-only property returns the `web.timestamp`\n  after the browser finishes establishing the connection to the\n  to retrieve the resource. The timestamp value includes the time\n  to establish the transport connection, as well as other time\n  such as SSL handshake and SOCKS authentication.\n\n  `resource.connectEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectEnd`"}, initiator-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 205, :column 7, :end-line 205, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The initiatorType read-only property is a `web.string` that represents\n  type of resource that initiated the performance event.\n\n  `resource.initiatorType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType`"}, :name performance.PerformanceResourceTiming/initiator-type, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The initiatorType read-only property is a `web.string` that represents\n  type of resource that initiated the performance event.\n\n  `resource.initiatorType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/initiatorType`"}, domain-lookup-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 107, :column 7, :end-line 107, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The domainLookupEnd read-only property returns the `web.timestamp`\n  after the browser finishes the domain name lookup for the resource.\n\n  `resource.domainLookupEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd`"}, :name performance.PerformanceResourceTiming/domain-lookup-end, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The domainLookupEnd read-only property returns the `web.timestamp`\n  after the browser finishes the domain name lookup for the resource.\n\n  `resource.domainLookupEnd;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupEnd`"}, set-transfer-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 450, :column 7, :end-line 450, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The transferSize read-only property represents the size (in octets)\n  the fetched resource. The size includes the response header fields\n  the response payload body (as defined by RFC7230).\n\n  `resource.transferSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize`"}, :name performance.PerformanceResourceTiming/set-transfer-size!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The transferSize read-only property represents the size (in octets)\n  the fetched resource. The size includes the response header fields\n  the response payload body (as defined by RFC7230).\n\n  `resource.transferSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/transferSize`"}, set-connect-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 64, :column 7, :end-line 64, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The connectStart read-only property returns the `web.timestamp`\n  before the user agent starts establishing the connection to the\n  to retrieve the resource.\n\n  `resource.connectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart`"}, :name performance.PerformanceResourceTiming/set-connect-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The connectStart read-only property returns the `web.timestamp`\n  before the user agent starts establishing the connection to the\n  to retrieve the resource.\n\n  `resource.connectStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/connectStart`"}, set-domain-lookup-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 143, :column 7, :end-line 143, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The domainLookupStart read-only property returns the `web.timestamp`\n  before the browser starts the domain name lookup for the resource.\n\n  `resource.domainLookupStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart`"}, :name performance.PerformanceResourceTiming/set-domain-lookup-start!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The domainLookupStart read-only property returns the `web.timestamp`\n  before the browser starts the domain name lookup for the resource.\n\n  `resource.domainLookupStart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/domainLookupStart`"}, set-encoded-body-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/performance/PerformanceResourceTiming.cljs", :line 168, :column 7, :end-line 168, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The encodedBodySize read-only property represents the size (in\n  received from the fetch (HTTP or cache), of the payload body,\n  removing any applied content-codings.\n\n  `resource.encodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize`"}, :name performance.PerformanceResourceTiming/set-encoded-body-size!, :variadic false, :file "src/performance/PerformanceResourceTiming.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The encodedBodySize read-only property represents the size (in\n  received from the fetch (HTTP or cache), of the payload body,\n  removing any applied content-codings.\n\n  `resource.encodedBodySize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/encodedBodySize`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PerformanceResourceTiming interface enables retrieval and\n  of detailed network timing data regarding the loading of an application's\n  An application can use the timing metrics to determine, for example,\n  length of time it takes to fetch a specific resource, such as\n  `xml.XMLHttpRequest`, `web.<SVG>`, image, or script."}