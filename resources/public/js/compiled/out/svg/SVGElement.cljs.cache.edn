{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name svg.SVGElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {oncanplaythrough {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 258, :column 7, :end-line 258, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name svg.SVGElement/oncanplaythrough, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-onselectionchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1448, :column 7, :end-line 1448, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name svg.SVGElement/set-onselectionchange!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1448, :end-line 1448, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, set-onmouseenter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 905, :column 7, :end-line 905, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, :name svg.SVGElement/set-onmouseenter!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 905, :end-line 905, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, oncanplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 228, :column 7, :end-line 228, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, :name svg.SVGElement/oncanplay, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, onscroll {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1388, :column 7, :end-line 1388, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name svg.SVGElement/onscroll, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1388, :end-line 1388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, set-onpointermove! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1242, :column 7, :end-line 1242, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, :name svg.SVGElement/set-onpointermove!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1242, :end-line 1242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1046, :column 7, :end-line 1046, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name svg.SVGElement/onpause, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1046, :end-line 1046, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, onsubmit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1484, :column 7, :end-line 1484, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name svg.SVGElement/onsubmit, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1484, :end-line 1484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, onmousemove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 950, :column 7, :end-line 950, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, :name svg.SVGElement/onmousemove, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 950, :end-line 950, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, set-onpointerdown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1150, :column 7, :end-line 1150, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, :name svg.SVGElement/set-onpointerdown!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1150, :end-line 1150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, set-onkeyup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 688, :column 7, :end-line 688, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name svg.SVGElement/set-onkeyup!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 688, :end-line 688, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, set-onpointerout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1270, :column 7, :end-line 1270, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, :name svg.SVGElement/set-onpointerout!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1270, :end-line 1270, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, onanimationend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 96, :column 7, :end-line 96, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name svg.SVGElement/onanimationend, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, onselectstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1460, :column 7, :end-line 1460, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name svg.SVGElement/onselectstart, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1460, :end-line 1460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, set-onselect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1424, :column 7, :end-line 1424, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name svg.SVGElement/set-onselect!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1424, :end-line 1424, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, set-onselectstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1472, :column 7, :end-line 1472, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name svg.SVGElement/set-onselectstart!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1472, :end-line 1472, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, onplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1076, :column 7, :end-line 1076, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name svg.SVGElement/onplay, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :end-line 1076, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, onloadstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 814, :column 7, :end-line 814, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name svg.SVGElement/onloadstart, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 814, :end-line 814, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, dataset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 6, :column 7, :end-line 6, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The SVGElement.dataset property allows access, both in reading\n  writing mode, to all the custom data attributes (data-*) set\n  the element. It is a map of `dom.DOMString`s representing keys\n  `dom.DOMString`s representing the values for those keys, with\n  entry for each custom data attribute. Each key corresponds to\n  name of a custom data attribute; for example, a custom attribute\n  data-foo is in the map with the key \\\"foo\\\".\n\n  `string = SVGElement.dataset.camelCasedName;\n\n  SVGElement.dataset.camelCasedName = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset`"}, :name svg.SVGElement/dataset, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The SVGElement.dataset property allows access, both in reading\n  writing mode, to all the custom data attributes (data-*) set\n  the element. It is a map of `dom.DOMString`s representing keys\n  `dom.DOMString`s representing the values for those keys, with\n  entry for each custom data attribute. Each key corresponds to\n  name of a custom data attribute; for example, a custom attribute\n  data-foo is in the map with the key \\\"foo\\\".\n\n  `string = SVGElement.dataset.camelCasedName;\n\n  SVGElement.dataset.camelCasedName = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset`"}, set-onloadstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 828, :column 7, :end-line 828, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name svg.SVGElement/set-onloadstart!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 828, :end-line 828, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, onpointercancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1106, :column 7, :end-line 1106, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name svg.SVGElement/onpointercancel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1106, :end-line 1106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, set-onscroll! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1400, :column 7, :end-line 1400, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name svg.SVGElement/set-onscroll!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1400, :end-line 1400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, onpointerleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1194, :column 7, :end-line 1194, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, :name svg.SVGElement/onpointerleave, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1194, :end-line 1194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 352, :column 7, :end-line 352, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, :name svg.SVGElement/set-onclose!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, onmouseup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1022, :column 7, :end-line 1022, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, :name svg.SVGElement/onmouseup, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1022, :end-line 1022, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, onselectionchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1436, :column 7, :end-line 1436, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name svg.SVGElement/onselectionchange, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1436, :end-line 1436, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, set-oninput! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 588, :column 7, :end-line 588, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, :name svg.SVGElement/set-oninput!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 588, :end-line 588, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, onloadedmetadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 756, :column 7, :end-line 756, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, :name svg.SVGElement/onloadedmetadata, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 756, :end-line 756, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, ontouchcancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1508, :column 7, :end-line 1508, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name svg.SVGElement/ontouchcancel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1508, :end-line 1508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, set-onpointercancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1120, :column 7, :end-line 1120, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name svg.SVGElement/set-onpointercancel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1120, :end-line 1120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 288, :column 7, :end-line 288, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name svg.SVGElement/onchange, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, ontransitionend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1584, :column 7, :end-line 1584, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, :name svg.SVGElement/ontransitionend, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1584, :end-line 1584, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, set-onwheel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1624, :column 7, :end-line 1624, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, :name svg.SVGElement/set-onwheel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1624, :end-line 1624, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, onresize {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1364, :column 7, :end-line 1364, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, :name svg.SVGElement/onresize, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1364, :end-line 1364, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, ongotpointercapture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 550, :column 7, :end-line 550, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, :name svg.SVGElement/ongotpointercapture, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 550, :end-line 550, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, onreset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1340, :column 7, :end-line 1340, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name svg.SVGElement/onreset, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1340, :end-line 1340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, onblur {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 176, :column 7, :end-line 176, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, :name svg.SVGElement/onblur, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, set-onreset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1352, :column 7, :end-line 1352, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name svg.SVGElement/set-onreset!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1352, :end-line 1352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 56, :column 7, :end-line 56, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, :name svg.SVGElement/set-onabort!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, onkeyup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 676, :column 7, :end-line 676, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name svg.SVGElement/onkeyup, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 676, :end-line 676, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, set-onmousedown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 878, :column 7, :end-line 878, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onmousedown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousedown events.\n\n  `target.onmousedown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown`"}, :name svg.SVGElement/set-onmousedown!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 878, :end-line 878, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmousedown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousedown events.\n\n  `target.onmousedown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown`"}, set-oncanplaythrough! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 273, :column 7, :end-line 273, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name svg.SVGElement/set-oncanplaythrough!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 514, :column 7, :end-line 514, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, :name svg.SVGElement/set-onerror!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 514, :end-line 514, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, set-onpointerover! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1298, :column 7, :end-line 1298, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, :name svg.SVGElement/set-onpointerover!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1298, :end-line 1298, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, onmouseleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 920, :column 7, :end-line 920, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, :name svg.SVGElement/onmouseleave, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 920, :end-line 920, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, set-oncontextmenu! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 376, :column 7, :end-line 376, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontextmenu property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes contextmenu events.\n\n  `target.oncontextmenu = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu`"}, :name svg.SVGElement/set-oncontextmenu!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontextmenu property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes contextmenu events.\n\n  `target.oncontextmenu = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu`"}, set-onfocus! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 538, :column 7, :end-line 538, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, :name svg.SVGElement/set-onfocus!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 538, :end-line 538, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, ondurationchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 442, :column 7, :end-line 442, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, :name svg.SVGElement/ondurationchange, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 442, :end-line 442, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, set-onanimationend! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 110, :column 7, :end-line 110, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name svg.SVGElement/set-onanimationend!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, set-onpause! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1061, :column 7, :end-line 1061, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name svg.SVGElement/set-onpause!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1061, :end-line 1061, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, set-onlostpointercapture! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 854, :column 7, :end-line 854, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The onlostpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes lostpointercapture events.\n\n  `target.onlostpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture`"}, :name svg.SVGElement/set-onlostpointercapture!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 854, :end-line 854, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onlostpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes lostpointercapture events.\n\n  `target.onlostpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture`"}, set-oninvalid! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 615, :column 7, :end-line 615, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The oninvalid property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes invalid events.\n\n  `target.oninvalid = functionRef;\n  var functionRef = target.oninvalid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid`"}, :name svg.SVGElement/set-oninvalid!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 615, :end-line 615, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninvalid property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes invalid events.\n\n  `target.oninvalid = functionRef;\n  var functionRef = target.oninvalid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 502, :column 7, :end-line 502, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, :name svg.SVGElement/onerror, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 502, :end-line 502, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, set-ontouchstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1544, :column 7, :end-line 1544, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, :name svg.SVGElement/set-ontouchstart!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1544, :end-line 1544, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, set-oncuechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 403, :column 7, :end-line 403, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, :name svg.SVGElement/set-oncuechange!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 403, :end-line 403, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, set-onpointerup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1326, :column 7, :end-line 1326, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerup events.\n\n  `targetElement.onpointerup = upHandler;\n\n  var upHandler = targetElement.onpointerup;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup`"}, :name svg.SVGElement/set-onpointerup!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1326, :end-line 1326, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerup events.\n\n  `targetElement.onpointerup = upHandler;\n\n  var upHandler = targetElement.onpointerup;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup`"}, ontransitioncancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1556, :column 7, :end-line 1556, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, :name svg.SVGElement/ontransitioncancel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1556, :end-line 1556, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, onwheel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1612, :column 7, :end-line 1612, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, :name svg.SVGElement/onwheel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1612, :end-line 1612, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, set-onload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 713, :column 7, :end-line 713, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onload property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes load events on a `web.Window`,\n  `web.<img>` element, etc.\n\n  `target.onload = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload`"}, :name svg.SVGElement/set-onload!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 713, :end-line 713, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onload property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes load events on a `web.Window`,\n  `web.<img>` element, etc.\n\n  `target.onload = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload`"}, set-ontouchcancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1520, :column 7, :end-line 1520, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name svg.SVGElement/set-ontouchcancel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1520, :end-line 1520, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, set-onplay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1091, :column 7, :end-line 1091, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name svg.SVGElement/set-onplay!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1091, :end-line 1091, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, onloadeddata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 726, :column 7, :end-line 726, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The onloadeddata property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing loadeddata events.\n\n  `element.onloadeddata = handlerFunction;\n  var handlerFunction = element.onloadeddata;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata`"}, :name svg.SVGElement/onloadeddata, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 726, :end-line 726, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadeddata property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing loadeddata events.\n\n  `element.onloadeddata = handlerFunction;\n  var handlerFunction = element.onloadeddata;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata`"}, onmouseover {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 998, :column 7, :end-line 998, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, :name svg.SVGElement/onmouseover, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 998, :end-line 998, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, set-dataset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGElement.dataset property allows access, both in reading\n  writing mode, to all the custom data attributes (data-*) set\n  the element. It is a map of `dom.DOMString`s representing keys\n  `dom.DOMString`s representing the values for those keys, with\n  entry for each custom data attribute. Each key corresponds to\n  name of a custom data attribute; for example, a custom attribute\n  data-foo is in the map with the key \\\"foo\\\".\n\n  `string = SVGElement.dataset.camelCasedName;\n\n  SVGElement.dataset.camelCasedName = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset`"}, :name svg.SVGElement/set-dataset!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGElement.dataset property allows access, both in reading\n  writing mode, to all the custom data attributes (data-*) set\n  the element. It is a map of `dom.DOMString`s representing keys\n  `dom.DOMString`s representing the values for those keys, with\n  entry for each custom data attribute. Each key corresponds to\n  name of a custom data attribute; for example, a custom attribute\n  data-foo is in the map with the key \\\"foo\\\".\n\n  `string = SVGElement.dataset.camelCasedName;\n\n  SVGElement.dataset.camelCasedName = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGElement/dataset`"}, oncancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 202, :column 7, :end-line 202, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, :name svg.SVGElement/oncancel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, onselect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1412, :column 7, :end-line 1412, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name svg.SVGElement/onselect, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1412, :end-line 1412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, set-onauxclick! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 164, :column 7, :end-line 164, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onauxclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing auxclick events.\n\n  `target.onauxclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick`"}, :name svg.SVGElement/set-onauxclick!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onauxclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing auxclick events.\n\n  `target.onauxclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick`"}, set-onmouseleave! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 935, :column 7, :end-line 935, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, :name svg.SVGElement/set-onmouseleave!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 935, :end-line 935, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, set-onmouseout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 986, :column 7, :end-line 986, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, :name svg.SVGElement/set-onmouseout!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 986, :end-line 986, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, set-onkeypress! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 664, :column 7, :end-line 664, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, :name svg.SVGElement/set-onkeypress!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 664, :end-line 664, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, onfocus {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 526, :column 7, :end-line 526, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, :name svg.SVGElement/onfocus, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 526, :end-line 526, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, set-onsubmit! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1496, :column 7, :end-line 1496, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name svg.SVGElement/set-onsubmit!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1496, :end-line 1496, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, onkeydown {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 628, :column 7, :end-line 628, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onkeydown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keydown events.\n\n  `target.onkeydown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown`"}, :name svg.SVGElement/onkeydown, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeydown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keydown events.\n\n  `target.onkeydown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown`"}, onmouseout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 974, :column 7, :end-line 974, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, :name svg.SVGElement/onmouseout, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 974, :end-line 974, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, onclick {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 316, :column 7, :end-line 316, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, :name svg.SVGElement/onclick, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, set-onchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 302, :column 7, :end-line 302, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name svg.SVGElement/set-onchange!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, set-onanimationcancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 82, :column 7, :end-line 82, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, :name svg.SVGElement/set-onanimationcancel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, ontouchstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1532, :column 7, :end-line 1532, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, :name svg.SVGElement/ontouchstart, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1532, :end-line 1532, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, onpointerover {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1284, :column 7, :end-line 1284, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, :name svg.SVGElement/onpointerover, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1284, :end-line 1284, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, onanimationcancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 68, :column 7, :end-line 68, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, :name svg.SVGElement/onanimationcancel, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, onloadend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 786, :column 7, :end-line 786, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onloadend property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadend event is raised (when progress has stopped on the loading\n  a resource.)\n\n  `img.onloadend = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadend`"}, :name svg.SVGElement/onloadend, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 786, :end-line 786, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadend property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadend event is raised (when progress has stopped on the loading\n  a resource.)\n\n  `img.onloadend = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadend`"}, set-onresize! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1376, :column 7, :end-line 1376, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, :name svg.SVGElement/set-onresize!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1376, :end-line 1376, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, set-onmouseover! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1010, :column 7, :end-line 1010, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, :name svg.SVGElement/set-onmouseover!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1010, :end-line 1010, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, set-oncancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 215, :column 7, :end-line 215, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, :name svg.SVGElement/set-oncancel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, set-ondurationchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 457, :column 7, :end-line 457, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, :name svg.SVGElement/set-ondurationchange!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 457, :end-line 457, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, onkeypress {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 652, :column 7, :end-line 652, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, :name svg.SVGElement/onkeypress, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 652, :end-line 652, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, oncuechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 388, :column 7, :end-line 388, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, :name svg.SVGElement/oncuechange, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, set-onclick! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 328, :column 7, :end-line 328, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, :name svg.SVGElement/set-onclick!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, set-ontransitioncancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1570, :column 7, :end-line 1570, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, :name svg.SVGElement/set-ontransitioncancel!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1570, :end-line 1570, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, set-onloadedmetadata! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 771, :column 7, :end-line 771, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, :name svg.SVGElement/set-onloadedmetadata!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 771, :end-line 771, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, onended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 472, :column 7, :end-line 472, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onended property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing ended events.\n\n  `element.onended = handlerFunction;\n  var handlerFunction = element.onended;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended`"}, :name svg.SVGElement/onended, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 472, :end-line 472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onended property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing ended events.\n\n  `element.onended = handlerFunction;\n  var handlerFunction = element.onended;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onended`"}, set-ontransitionend! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1598, :column 7, :end-line 1598, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, :name svg.SVGElement/set-ontransitionend!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1598, :end-line 1598, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, set-ongotpointercapture! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 562, :column 7, :end-line 562, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, :name svg.SVGElement/set-ongotpointercapture!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, oninput {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 574, :column 7, :end-line 574, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, :name svg.SVGElement/oninput, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, set-onanimationiteration! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 138, :column 7, :end-line 138, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationiteration property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationiteration events.\n\n  `var animIterationHandler = target.onanimationiteration;\n\n  target.onanimationiteration = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration`"}, :name svg.SVGElement/set-onanimationiteration!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationiteration property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationiteration events.\n\n  `var animIterationHandler = target.onanimationiteration;\n\n  target.onanimationiteration = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationiteration`"}, set-onpointerleave! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1211, :column 7, :end-line 1211, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, :name svg.SVGElement/set-onpointerleave!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1211, :end-line 1211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, set-oncanplay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 243, :column 7, :end-line 243, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, :name svg.SVGElement/set-oncanplay!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 340, :column 7, :end-line 340, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, :name svg.SVGElement/onclose, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, set-ondblclick! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 430, :column 7, :end-line 430, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The ondblclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes dblclick events on the given\n\n  `target.ondblclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick`"}, :name svg.SVGElement/set-ondblclick!, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ondblclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes dblclick events on the given\n\n  `target.ondblclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondblclick`"}, onpointermove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGElement.cljs", :line 1228, :column 7, :end-line 1228, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, :name svg.SVGElement/onpointermove, :variadic false, :file "src/svg/SVGElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1228, :end-line 1228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "All of the SVG DOM interfaces that correspond directly to elements\n  the SVG language derive from the SVGElement interface."}