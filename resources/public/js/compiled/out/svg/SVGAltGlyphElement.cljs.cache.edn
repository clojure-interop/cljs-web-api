{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name svg.SVGAltGlyphElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {glyph-ref {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGAltGlyphElement.cljs", :line 10, :column 7, :end-line 10, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The SVGAltGlyphElement.glyphRef property is a `dom.DOMString`\n  a glyph identifier. It has the same meaning as the ‘glyphRef’\n  on the `svg.SVGGlyphRefElement` interface of the `web.<glyphRef>`\n\n  `string = myGlyph.glyphRef;\n  myGlyph.glyphRef = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/glyphRef`"}, :name svg.SVGAltGlyphElement/glyph-ref, :variadic false, :file "src/svg/SVGAltGlyphElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The SVGAltGlyphElement.glyphRef property is a `dom.DOMString`\n  a glyph identifier. It has the same meaning as the ‘glyphRef’\n  on the `svg.SVGGlyphRefElement` interface of the `web.<glyphRef>`\n\n  `string = myGlyph.glyphRef;\n  myGlyph.glyphRef = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/glyphRef`"}, set-glyph-ref! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGAltGlyphElement.cljs", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGAltGlyphElement.glyphRef property is a `dom.DOMString`\n  a glyph identifier. It has the same meaning as the ‘glyphRef’\n  on the `svg.SVGGlyphRefElement` interface of the `web.<glyphRef>`\n\n  `string = myGlyph.glyphRef;\n  myGlyph.glyphRef = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/glyphRef`"}, :name svg.SVGAltGlyphElement/set-glyph-ref!, :variadic false, :file "src/svg/SVGAltGlyphElement.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGAltGlyphElement.glyphRef property is a `dom.DOMString`\n  a glyph identifier. It has the same meaning as the ‘glyphRef’\n  on the `svg.SVGGlyphRefElement` interface of the `web.<glyphRef>`\n\n  `string = myGlyph.glyphRef;\n  myGlyph.glyphRef = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/glyphRef`"}, format {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGAltGlyphElement.cljs", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The SVGAltGlyphElement.format property is a `dom.DOMString` that\n  the format of the given font. It has the same meaning as the\n  property of `svg.SVGGlyphRefElement` property. If the font is\n  one of the formats listed in CSS2([CSS2], section15.3.5), then\n  value is the corresponding <string> parameter of the font.\n\n  `string = myGlyph.format;\n  myGlyph.format = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/format`"}, :name svg.SVGAltGlyphElement/format, :variadic false, :file "src/svg/SVGAltGlyphElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The SVGAltGlyphElement.format property is a `dom.DOMString` that\n  the format of the given font. It has the same meaning as the\n  property of `svg.SVGGlyphRefElement` property. If the font is\n  one of the formats listed in CSS2([CSS2], section15.3.5), then\n  value is the corresponding <string> parameter of the font.\n\n  `string = myGlyph.format;\n  myGlyph.format = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/format`"}, set-format! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/svg/SVGAltGlyphElement.cljs", :line 54, :column 7, :end-line 54, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGAltGlyphElement.format property is a `dom.DOMString` that\n  the format of the given font. It has the same meaning as the\n  property of `svg.SVGGlyphRefElement` property. If the font is\n  one of the formats listed in CSS2([CSS2], section15.3.5), then\n  value is the corresponding <string> parameter of the font.\n\n  `string = myGlyph.format;\n  myGlyph.format = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/format`"}, :name svg.SVGAltGlyphElement/set-format!, :variadic false, :file "src/svg/SVGAltGlyphElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The SVGAltGlyphElement.format property is a `dom.DOMString` that\n  the format of the given font. It has the same meaning as the\n  property of `svg.SVGGlyphRefElement` property. If the font is\n  one of the formats listed in CSS2([CSS2], section15.3.5), then\n  value is the corresponding <string> parameter of the font.\n\n  `string = myGlyph.format;\n  myGlyph.format = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SVGAltGlyphElement/format`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The SVGAltGlyphElement interface represents an `web.<altglyph>`\n  This interface makes it possible to implement more sophisticated\n  particular glyph characters. For some textal representations\n  ligatures (e.g. æ, ß, etc ), special-purpose fonts (e.g. musical\n  or even alternate glyphs such as Asian text strings it is required\n  a different set of glyphs be used than the normal given character"}