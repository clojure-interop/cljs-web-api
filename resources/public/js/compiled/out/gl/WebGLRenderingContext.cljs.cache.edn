{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{flush}, :name gl.WebGLRenderingContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-program-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 883, :column 7, :end-line 883, :end-column 28, :arglists (quote ([this program pname])), :doc "Method.\n\n  The WebGLRenderingContext.getProgramParameter() method of the\n  API returns information about the given program.\n\n  `any gl.getProgramParameter(program, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter`"}, :name gl.WebGLRenderingContext/get-program-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this program pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 883, :end-line 883, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program pname])), :doc "Method.\n\n  The WebGLRenderingContext.getProgramParameter() method of the\n  API returns information about the given program.\n\n  `any gl.getProgramParameter(program, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramParameter`"}, create-texture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 444, :column 7, :end-line 444, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createTexture() method of the WebGL\n  creates and initializes a `gl.WebGLTexture` object.\n\n  `WebGLTexture gl.createTexture();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture`"}, :name gl.WebGLRenderingContext/create-texture, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createTexture() method of the WebGL\n  creates and initializes a `gl.WebGLTexture` object.\n\n  `WebGLTexture gl.createTexture();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createTexture`"}, get-renderbuffer-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 895, :column 7, :end-line 895, :end-column 33, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getRenderbufferParameter() method of\n  WebGL API returns information about the renderbuffer.\n\n  `any gl.getRenderbufferParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter`"}, :name gl.WebGLRenderingContext/get-renderbuffer-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 33, :method-params ([this target pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 895, :end-line 895, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getRenderbufferParameter() method of\n  WebGL API returns information about the renderbuffer.\n\n  `any gl.getRenderbufferParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter`"}, validate-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1584, :column 7, :end-line 1584, :end-column 23, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.validateProgram() method of the WebGL\n  validates a `gl.WebGLProgram`. It checks if it is successfully\n  and if it can be used in the current WebGL state.\n\n  `void gl.validateProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/validateProgram`"}, :name gl.WebGLRenderingContext/validate-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 23, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1584, :end-line 1584, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.validateProgram() method of the WebGL\n  validates a `gl.WebGLProgram`. It checks if it is successfully\n  and if it can be used in the current WebGL state.\n\n  `void gl.validateProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/validateProgram`"}, create-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 382, :column 7, :end-line 382, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createBuffer() method of the WebGL\n  creates and initializes a `gl.WebGLBuffer` storing data such\n  vertices or colors.\n\n  `WebGLBuffer gl.createBuffer();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer`"}, :name gl.WebGLRenderingContext/create-buffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createBuffer() method of the WebGL\n  creates and initializes a `gl.WebGLBuffer` storing data such\n  vertices or colors.\n\n  `WebGLBuffer gl.createBuffer();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createBuffer`"}, viewport {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1691, :column 7, :end-line 1691, :end-column 15, :arglists (quote ([this x y width height])), :doc "Method.\n\n  The WebGLRenderingContext.viewport() method of the WebGL API\n  the viewport, which specifies the affine transformation of x\n  y from normalized device coordinates to window coordinates.\n\n  `void gl.viewport(x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport`"}, :name gl.WebGLRenderingContext/viewport, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 15, :method-params ([this x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1691, :end-line 1691, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this x y width height])), :doc "Method.\n\n  The WebGLRenderingContext.viewport() method of the WebGL API\n  the viewport, which specifies the affine transformation of x\n  y from normalized device coordinates to window coordinates.\n\n  `void gl.viewport(x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/viewport`"}, clear-stencil {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 237, :column 7, :end-line 237, :end-column 20, :arglists (quote ([this s])), :doc "Method.\n\n  The WebGLRenderingContext.clearStencil() method of the WebGL\n  specifies the clear value for the stencil buffer.\n\n  `void gl.clearStencil(s);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearStencil`"}, :name gl.WebGLRenderingContext/clear-stencil, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this s])), :doc "Method.\n\n  The WebGLRenderingContext.clearStencil() method of the WebGL\n  specifies the clear value for the stencil buffer.\n\n  `void gl.clearStencil(s);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearStencil`"}, buffer-sub-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 172, :column 7, :end-line 172, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.bufferSubData() method of the WebGL\n  updates a subset of a buffer object's data store.\n\n  `// WebGL1:\n  void gl.bufferSubData(target, offset, ArrayBuffer srcData);\n  void gl.bufferSubData(target, offset, ArrayBufferView srcData);\n\n  // WebGL2:\n  void gl.bufferSubData(target, dstByteOffset, ArrayBufferView srcData, srcOffset, length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/buffer-sub-data, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.bufferSubData() method of the WebGL\n  updates a subset of a buffer object's data store.\n\n  `// WebGL1:\n  void gl.bufferSubData(target, offset, ArrayBuffer srcData);\n  void gl.bufferSubData(target, offset, ArrayBufferView srcData);\n\n  // WebGL2:\n  void gl.bufferSubData(target, dstByteOffset, ArrayBufferView srcData, srcOffset, length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferSubData`"}, disable-vertex-attrib-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 611, :column 7, :end-line 611, :end-column 34, :arglists (quote ([this index])), :doc "Method.\n\n  The WebGLRenderingContext.disableVertexAttribArray() method of\n  WebGL API turns the generic vertex attribute array off at a given\n  position.\n\n  `void gl.disableVertexAttribArray(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray`"}, :name gl.WebGLRenderingContext/disable-vertex-attrib-array, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 34, :method-params ([this index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 611, :end-line 611, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index])), :doc "Method.\n\n  The WebGLRenderingContext.disableVertexAttribArray() method of\n  WebGL API turns the generic vertex attribute array off at a given\n  position.\n\n  `void gl.disableVertexAttribArray(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray`"}, is-context-lost {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1055, :column 7, :end-line 1055, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.isContextLost() method returns a `web.Boolean`\n  whether or not the WebGL context has been lost.\n\n  `gl.isContextLost();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isContextLost`"}, :name gl.WebGLRenderingContext/is-context-lost, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1055, :end-line 1055, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.isContextLost() method returns a `web.Boolean`\n  whether or not the WebGL context has been lost.\n\n  `gl.isContextLost();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isContextLost`"}, tex-image-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1330, :column 7, :end-line 1330, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.texImage2D() method of the WebGL API\n  a two-dimensional texture image.\n\n  `// WebGL1:\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);\n\n  // WebGL2:\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/tex-image-2d, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1330, :end-line 1330, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.texImage2D() method of the WebGL API\n  a two-dimensional texture image.\n\n  `// WebGL1:\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, ImageData? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLImageElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLCanvasElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, HTMLVideoElement? pixels);\n  void gl.texImage2D(target, level, internalformat, format, type, ImageBitmap? pixels);\n\n  // WebGL2:\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, GLintptr offset);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLCanvasElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLImageElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, HTMLVideoElement source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageBitmap source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ImageData source);\n  void gl.texImage2D(target, level, internalformat, width, height, border, format, type, ArrayBufferView srcData, srcOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texImage2D`"}, create-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 407, :column 7, :end-line 407, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createProgram() method of the WebGL\n  creates and initializes a `gl.WebGLProgram` object.\n\n  `WebGLProgram gl.createProgram();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram`"}, :name gl.WebGLRenderingContext/create-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 407, :end-line 407, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createProgram() method of the WebGL\n  creates and initializes a `gl.WebGLProgram` object.\n\n  `WebGLProgram gl.createProgram();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createProgram`"}, get-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 858, :column 7, :end-line 858, :end-column 20, :arglists (quote ([this pname])), :doc "Method.\n\n  The WebGLRenderingContext.getParameter() method of the WebGL\n  returns a value for the passed parameter name.\n\n  `any gl.getParameter(pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter`"}, :name gl.WebGLRenderingContext/get-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 858, :end-line 858, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this pname])), :doc "Method.\n\n  The WebGLRenderingContext.getParameter() method of the WebGL\n  returns a value for the passed parameter name.\n\n  `any gl.getParameter(pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getParameter`"}, stencil-op-separate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1318, :column 7, :end-line 1318, :end-column 26, :arglists (quote ([this face fail zfail zpass])), :doc "Method.\n\n  The WebGLRenderingContext.stencilOpSeparate() method of the WebGL\n  sets the front and/or back-facing stencil test actions.\n\n  `void gl.stencilOpSeparate(face, fail, zfail, zpass);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate`"}, :name gl.WebGLRenderingContext/stencil-op-separate, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this face fail zfail zpass]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1318, :end-line 1318, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this face fail zfail zpass])), :doc "Method.\n\n  The WebGLRenderingContext.stencilOpSeparate() method of the WebGL\n  sets the front and/or back-facing stencil test actions.\n\n  `void gl.stencilOpSeparate(face, fail, zfail, zpass);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOpSeparate`"}, blend-func-separate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 141, :column 7, :end-line 141, :end-column 26, :arglists (quote ([this src-rgb dst-rgb src-alpha dst-alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendFuncSeparate() method of the WebGL\n  defines which function is used for blending pixel arithmetic\n  RGB and alpha components separately.\n\n  `void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate`"}, :name gl.WebGLRenderingContext/blend-func-separate, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this src-rgb dst-rgb src-alpha dst-alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this src-rgb dst-rgb src-alpha dst-alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendFuncSeparate() method of the WebGL\n  defines which function is used for blending pixel arithmetic\n  RGB and alpha components separately.\n\n  `void gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFuncSeparate`"}, detach-shader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 587, :column 7, :end-line 587, :end-column 20, :arglists (quote ([this program shader])), :doc "Method.\n\n  The WebGLRenderingContext.detachShader() method of the WebGL\n  detaches a previously attached `gl.WebGLShader` from a `gl.WebGLProgram`.\n\n  `void gl.detachShader(program, shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader`"}, :name gl.WebGLRenderingContext/detach-shader, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this program shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 587, :end-line 587, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program shader])), :doc "Method.\n\n  The WebGLRenderingContext.detachShader() method of the WebGL\n  detaches a previously attached `gl.WebGLShader` from a `gl.WebGLProgram`.\n\n  `void gl.detachShader(program, shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/detachShader`"}, pixel-storei {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1165, :column 7, :end-line 1165, :end-column 19, :arglists (quote ([this pname param])), :doc "Method.\n\n  The WebGLRenderingContext.pixelStorei() method of the WebGL API\n  the pixel storage modes.\n\n  `void gl.pixelStorei(pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei`"}, :name gl.WebGLRenderingContext/pixel-storei, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 19, :method-params ([this pname param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1165, :end-line 1165, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this pname param])), :doc "Method.\n\n  The WebGLRenderingContext.pixelStorei() method of the WebGL API\n  the pixel storage modes.\n\n  `void gl.pixelStorei(pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/pixelStorei`"}, depth-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 574, :column 7, :end-line 574, :end-column 18, :arglists (quote ([this z-near z-far])), :doc "Method.\n\n  The WebGLRenderingContext.depthRange() method of the WebGL API\n  the depth range mapping from normalized device coordinates to\n  or viewport coordinates.\n\n  `void gl.depthRange(zNear, zFar);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthRange`"}, :name gl.WebGLRenderingContext/depth-range, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :method-params ([this z-near z-far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this z-near z-far])), :doc "Method.\n\n  The WebGLRenderingContext.depthRange() method of the WebGL API\n  the depth range mapping from normalized device coordinates to\n  or viewport coordinates.\n\n  `void gl.depthRange(zNear, zFar);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthRange`"}, is-framebuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1079, :column 7, :end-line 1079, :end-column 21, :arglists (quote ([this framebuffer])), :doc "Method.\n\n  The WebGLRenderingContext.isFramebuffer() method of the WebGL\n  returns true if the passed `gl.WebGLFramebuffer` is valid and\n  otherwise.\n\n  `GLboolean gl.isFramebuffer(framebuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isFramebuffer`"}, :name gl.WebGLRenderingContext/is-framebuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this framebuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1079, :end-line 1079, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this framebuffer])), :doc "Method.\n\n  The WebGLRenderingContext.isFramebuffer() method of the WebGL\n  returns true if the passed `gl.WebGLFramebuffer` is valid and\n  otherwise.\n\n  `GLboolean gl.isFramebuffer(framebuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isFramebuffer`"}, get-program-info-log {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 870, :column 7, :end-line 870, :end-column 27, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.getProgramInfoLog returns the information\n  for the specified `gl.WebGLProgram` object. It contains errors\n  occurred during failed linking or validation of WebGLProgram\n\n  `gl.getProgramInfoLog(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog`"}, :name gl.WebGLRenderingContext/get-program-info-log, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 870, :end-line 870, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.getProgramInfoLog returns the information\n  for the specified `gl.WebGLProgram` object. It contains errors\n  occurred during failed linking or validation of WebGLProgram\n\n  `gl.getProgramInfoLog(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getProgramInfoLog`"}, clear {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 201, :column 7, :end-line 201, :end-column 12, :arglists (quote ([this mask])), :doc "Method.\n\n  The WebGLRenderingContext.clear() method of the WebGL API clears\n  to preset values.\n\n  `void gl.clear(mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear`"}, :name gl.WebGLRenderingContext/clear, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 12, :method-params ([this mask]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mask])), :doc "Method.\n\n  The WebGLRenderingContext.clear() method of the WebGL API clears\n  to preset values.\n\n  `void gl.clear(mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clear`"}, sample-coverage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1219, :column 7, :end-line 1219, :end-column 22, :arglists (quote ([this value invert])), :doc "Method.\n\n  The WebGLRenderingContext.sampleCoverage() method of the WebGL\n  specifies multi-sample coverage parameters for anti-aliasing\n\n  `void gl.sampleCoverage(value, invert);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/sampleCoverage`"}, :name gl.WebGLRenderingContext/sample-coverage, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 22, :method-params ([this value invert]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1219, :end-line 1219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this value invert])), :doc "Method.\n\n  The WebGLRenderingContext.sampleCoverage() method of the WebGL\n  specifies multi-sample coverage parameters for anti-aliasing\n\n  `void gl.sampleCoverage(value, invert);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/sampleCoverage`"}, delete-shader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 520, :column 7, :end-line 520, :end-column 20, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.deleteShader() method of the WebGL\n  marks a given `gl.WebGLShader` object for deletion. It will then\n  deleted whenever the shader is no longer in use. This method\n  no effect if the shader has already been deleted, and the `gl.WebGLShader`\n  automatically marked for deletion when it is destroyed by the\n  collector.\n\n  `void gl.deleteShader(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader`"}, :name gl.WebGLRenderingContext/delete-shader, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.deleteShader() method of the WebGL\n  marks a given `gl.WebGLShader` object for deletion. It will then\n  deleted whenever the shader is no longer in use. This method\n  no effect if the shader has already been deleted, and the `gl.WebGLShader`\n  automatically marked for deletion when it is destroyed by the\n  collector.\n\n  `void gl.deleteShader(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteShader`"}, draw-elements {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 636, :column 7, :end-line 636, :end-column 20, :arglists (quote ([this mode count type offset])), :doc "Method.\n\n  The WebGLRenderingContext.drawElements() method of the WebGL\n  renders primitives from array data.\n\n  `void gl.drawElements(mode, count, type, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements`"}, :name gl.WebGLRenderingContext/draw-elements, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this mode count type offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 636, :end-line 636, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this mode count type offset])), :doc "Method.\n\n  The WebGLRenderingContext.drawElements() method of the WebGL\n  renders primitives from array data.\n\n  `void gl.drawElements(mode, count, type, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawElements`"}, disable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 599, :column 7, :end-line 599, :end-column 14, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.disable() method of the WebGL API disables\n  WebGL capabilities for this context.\n\n  `void gl.disable(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disable`"}, :name gl.WebGLRenderingContext/disable, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 14, :method-params ([this cap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 599, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.disable() method of the WebGL API disables\n  WebGL capabilities for this context.\n\n  `void gl.disable(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/disable`"}, depth-func {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 549, :column 7, :end-line 549, :end-column 17, :arglists (quote ([this func])), :doc "Method.\n\n  The WebGLRenderingContext.depthFunc() method of the WebGL API\n  a function that compares incoming pixel depth to the current\n  buffer value.\n\n  `void gl.depthFunc(func);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc`"}, :name gl.WebGLRenderingContext/depth-func, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this func]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 549, :end-line 549, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this func])), :doc "Method.\n\n  The WebGLRenderingContext.depthFunc() method of the WebGL API\n  a function that compares incoming pixel depth to the current\n  buffer value.\n\n  `void gl.depthFunc(func);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthFunc`"}, get-attrib-location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 786, :column 7, :end-line 786, :end-column 26, :arglists (quote ([this program name])), :doc "Method.\n\n  The WebGLRenderingContext.getAttribLocation() method of the WebGL\n  returns the location of an attribute variable in a given `gl.WebGLProgram`.\n\n  `GLint gl.getAttribLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation`"}, :name gl.WebGLRenderingContext/get-attrib-location, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this program name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 786, :end-line 786, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program name])), :doc "Method.\n\n  The WebGLRenderingContext.getAttribLocation() method of the WebGL\n  returns the location of an attribute variable in a given `gl.WebGLProgram`.\n\n  `GLint gl.getAttribLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttribLocation`"}, delete-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 494, :column 7, :end-line 494, :end-column 21, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.deleteProgram() method of the WebGL\n  deletes a given `gl.WebGLProgram` object. This method has no\n  if the program has already been deleted.\n\n  `void gl.deleteProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram`"}, :name gl.WebGLRenderingContext/delete-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 494, :end-line 494, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.deleteProgram() method of the WebGL\n  deletes a given `gl.WebGLProgram` object. This method has no\n  if the program has already been deleted.\n\n  `void gl.deleteProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteProgram`"}, bind-attrib-location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 31, :column 7, :end-line 31, :end-column 27, :arglists (quote ([this program index name])), :doc "Method.\n\n  The WebGLRenderingContext.bindAttribLocation() method of the\n  API binds a generic vertex index to an attribute variable.\n\n  `void gl.bindAttribLocation(program, index, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation`"}, :name gl.WebGLRenderingContext/bind-attrib-location, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this program index name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this program index name])), :doc "Method.\n\n  The WebGLRenderingContext.bindAttribLocation() method of the\n  API binds a generic vertex index to an attribute variable.\n\n  `void gl.bindAttribLocation(program, index, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindAttribLocation`"}, is-renderbuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1104, :column 7, :end-line 1104, :end-column 22, :arglists (quote ([this renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.isRenderbuffer() method of the WebGL\n  returns true if the passed `gl.WebGLRenderbuffer` is valid and\n  otherwise.\n\n  `GLboolean gl.isRenderbuffer(renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isRenderbuffer`"}, :name gl.WebGLRenderingContext/is-renderbuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 22, :method-params ([this renderbuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1104, :end-line 1104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.isRenderbuffer() method of the WebGL\n  returns true if the passed `gl.WebGLRenderbuffer` is valid and\n  otherwise.\n\n  `GLboolean gl.isRenderbuffer(renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isRenderbuffer`"}, tex-parameterf {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1357, :column 7, :end-line 1357, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.texParameter[fi]() methods of the WebGL\n  set texture parameters.\n\n  `void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\n  void gl.texParameteri(GLenum target, GLenum pname, GLint param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/tex-parameterf, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1357, :end-line 1357, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.texParameter[fi]() methods of the WebGL\n  set texture parameters.\n\n  `void gl.texParameterf(GLenum target, GLenum pname, GLfloat param);\n  void gl.texParameteri(GLenum target, GLenum pname, GLint param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/texParameter`"}, flush {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 685, :column 7, :end-line 685, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.flush() method of the WebGL API empties\n  buffer commands, causing all commands to be executed as quickly\n  possible.\n\n  `void gl.flush();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/flush`"}, :name gl.WebGLRenderingContext/flush, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 685, :end-line 685, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.flush() method of the WebGL API empties\n  buffer commands, causing all commands to be executed as quickly\n  possible.\n\n  `void gl.flush();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/flush`"}, copy-tex-image-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 356, :column 7, :end-line 356, :end-column 24, :arglists (quote ([this target level internalformat x y width height border])), :doc "Method.\n\n  The WebGLRenderingContext.copyTexImage2D() method of the WebGL\n  copies pixels from the current `gl.WebGLFramebuffer` into a 2D\n  image.\n\n  `void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D`"}, :name gl.WebGLRenderingContext/copy-tex-image-2d, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 24, :method-params ([this target level internalformat x y width height border]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 9, :fn-var true, :arglists (quote ([this target level internalformat x y width height border])), :doc "Method.\n\n  The WebGLRenderingContext.copyTexImage2D() method of the WebGL\n  copies pixels from the current `gl.WebGLFramebuffer` into a 2D\n  image.\n\n  `void gl.copyTexImage2D(target, level, internalformat, x, y, width, height, border);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexImage2D`"}, compressed-tex-image-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 313, :column 7, :end-line 313, :end-column 30, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexImage2D() and WebGL2RenderingContext.compressedTexImage3D()\n  of the WebGL API specify a two- or three-dimensional texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/compressed-tex-image-3d, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexImage2D() and WebGL2RenderingContext.compressedTexImage3D()\n  of the WebGL API specify a two- or three-dimensional texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D`"}, get-vertex-attrib {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1006, :column 7, :end-line 1006, :end-column 24, :arglists (quote ([this index pname])), :doc "Method.\n\n  The WebGLRenderingContext.getVertexAttrib() method of the WebGL\n  returns information about a vertex attribute at a given position.\n\n  `any gl.getVertexAttrib(index, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttrib`"}, :name gl.WebGLRenderingContext/get-vertex-attrib, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 24, :method-params ([this index pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1006, :end-line 1006, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this index pname])), :doc "Method.\n\n  The WebGLRenderingContext.getVertexAttrib() method of the WebGL\n  returns information about a vertex attribute at a given position.\n\n  `any gl.getVertexAttrib(index, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttrib`"}, create-shader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 431, :column 7, :end-line 431, :end-column 20, :arglists (quote ([this type])), :doc "Method.\n\n  The WebGLRenderingContext.createShader() method of the WebGL\n  creates a `gl.WebGLShader` that can then be configured further\n  `gl.WebGLRenderingContext.shaderSource()` and `gl.WebGLRenderingContext.compileShader()`.\n\n  `WebGLShader gl.createShader(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader`"}, :name gl.WebGLRenderingContext/create-shader, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this type])), :doc "Method.\n\n  The WebGLRenderingContext.createShader() method of the WebGL\n  creates a `gl.WebGLShader` that can then be configured further\n  `gl.WebGLRenderingContext.shaderSource()` and `gl.WebGLRenderingContext.compileShader()`.\n\n  `WebGLShader gl.createShader(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createShader`"}, buffer-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 154, :column 7, :end-line 154, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.bufferData() method of the WebGL API\n  and creates the buffer object's data store.\n\n  `// WebGL1:\n  void gl.bufferData(target, size, usage);\n  void gl.bufferData(target, ArrayBuffer? srcData, usage);\n  void gl.bufferData(target, ArrayBufferView srcData, usage);\n\n  // WebGL2:\n  void gl.bufferData(target, ArrayBufferView srcData, usage, srcOffset, length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/buffer-data, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.bufferData() method of the WebGL API\n  and creates the buffer object's data store.\n\n  `// WebGL1:\n  void gl.bufferData(target, size, usage);\n  void gl.bufferData(target, ArrayBuffer? srcData, usage);\n  void gl.bufferData(target, ArrayBufferView srcData, usage);\n\n  // WebGL2:\n  void gl.bufferData(target, ArrayBufferView srcData, usage, srcOffset, length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bufferData`"}, front-face {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 722, :column 7, :end-line 722, :end-column 17, :arglists (quote ([this mode])), :doc "Method.\n\n  The WebGLRenderingContext.frontFace() method of the WebGL API\n  whether polygons are front- or back-facing by setting a winding\n\n  `void gl.frontFace(mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace`"}, :name gl.WebGLRenderingContext/front-face, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 722, :end-line 722, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mode])), :doc "Method.\n\n  The WebGLRenderingContext.frontFace() method of the WebGL API\n  whether polygons are front- or back-facing by setting a winding\n\n  `void gl.frontFace(mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/frontFace`"}, get-vertex-attrib-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1018, :column 7, :end-line 1018, :end-column 31, :arglists (quote ([this index pname])), :doc "Method.\n\n  The WebGLRenderingContext.getVertexAttribOffset() method of the\n  API returns the address of a specified vertex attribute.\n\n  `GLintptr gl.getVertexAttribOffset(index, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset`"}, :name gl.WebGLRenderingContext/get-vertex-attrib-offset, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 31, :method-params ([this index pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1018, :end-line 1018, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this index pname])), :doc "Method.\n\n  The WebGLRenderingContext.getVertexAttribOffset() method of the\n  API returns the address of a specified vertex attribute.\n\n  `GLintptr gl.getVertexAttribOffset(index, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset`"}, polygon-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1177, :column 7, :end-line 1177, :end-column 21, :arglists (quote ([this factor units])), :doc "Method.\n\n  The WebGLRenderingContext.polygonOffset() method of the WebGL\n  specifies the scale factors and units to calculate depth values.\n\n  `void gl.polygonOffset(factor, units);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/polygonOffset`"}, :name gl.WebGLRenderingContext/polygon-offset, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this factor units]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1177, :end-line 1177, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this factor units])), :doc "Method.\n\n  The WebGLRenderingContext.polygonOffset() method of the WebGL\n  specifies the scale factors and units to calculate depth values.\n\n  `void gl.polygonOffset(factor, units);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/polygonOffset`"}, get-error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 823, :column 7, :end-line 823, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getError() method of the WebGL API\n  error information.\n\n  `GLenum gl.getError();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getError`"}, :name gl.WebGLRenderingContext/get-error, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 823, :end-line 823, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getError() method of the WebGL API\n  error information.\n\n  `GLenum gl.getError();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getError`"}, delete-framebuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 481, :column 7, :end-line 481, :end-column 25, :arglists (quote ([this framebuffer])), :doc "Method.\n\n  The WebGLRenderingContext.deleteFramebuffer() method of the WebGL\n  deletes a given `gl.WebGLFramebuffer` object. This method has\n  effect if the frame buffer has already been deleted.\n\n  `void gl.deleteFramebuffer(framebuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteFramebuffer`"}, :name gl.WebGLRenderingContext/delete-framebuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :method-params ([this framebuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 481, :end-line 481, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this framebuffer])), :doc "Method.\n\n  The WebGLRenderingContext.deleteFramebuffer() method of the WebGL\n  deletes a given `gl.WebGLFramebuffer` object. This method has\n  effect if the frame buffer has already been deleted.\n\n  `void gl.deleteFramebuffer(framebuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteFramebuffer`"}, delete-texture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 536, :column 7, :end-line 536, :end-column 21, :arglists (quote ([this texture])), :doc "Method.\n\n  The WebGLRenderingContext.deleteTexture() method of the WebGL\n  deletes a given `gl.WebGLTexture` object. This method has no\n  if the texture has already been deleted.\n\n  `void gl.deleteTexture(texture);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteTexture`"}, :name gl.WebGLRenderingContext/delete-texture, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this texture]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 536, :end-line 536, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this texture])), :doc "Method.\n\n  The WebGLRenderingContext.deleteTexture() method of the WebGL\n  deletes a given `gl.WebGLTexture` object. This method has no\n  if the texture has already been deleted.\n\n  `void gl.deleteTexture(texture);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteTexture`"}, use-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1572, :column 7, :end-line 1572, :end-column 18, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.useProgram() method of the WebGL API\n  the specified `gl.WebGLProgram` as part of the current rendering\n\n  `void gl.useProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram`"}, :name gl.WebGLRenderingContext/use-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1572, :end-line 1572, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.useProgram() method of the WebGL API\n  the specified `gl.WebGLProgram` as part of the current rendering\n\n  `void gl.useProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/useProgram`"}, enable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 648, :column 7, :end-line 648, :end-column 13, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.enable() method of the WebGL API enables\n  WebGL capabilities for this context.\n\n  `void gl.enable(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enable`"}, :name gl.WebGLRenderingContext/enable, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 13, :method-params ([this cap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 648, :end-line 648, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.enable() method of the WebGL API enables\n  WebGL capabilities for this context.\n\n  `void gl.enable(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enable`"}, renderbuffer-storage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1207, :column 7, :end-line 1207, :end-column 27, :arglists (quote ([this target internal-format width height])), :doc "Method.\n\n  The WebGLRenderingContext.renderbufferStorage() method of the\n  API creates and initializes a renderbuffer object's data store.\n\n  `void gl.renderbufferStorage(target, internalFormat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage`"}, :name gl.WebGLRenderingContext/renderbuffer-storage, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this target internal-format width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1207, :end-line 1207, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this target internal-format width height])), :doc "Method.\n\n  The WebGLRenderingContext.renderbufferStorage() method of the\n  API creates and initializes a renderbuffer object's data store.\n\n  `void gl.renderbufferStorage(target, internalFormat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/renderbufferStorage`"}, enable-vertex-attrib-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 660, :column 7, :end-line 660, :end-column 33, :arglists (quote ([this index])), :doc "Method.\n\n  The `gl.WebGLRenderingContext` method enableVertexAttribArray(),\n  of the WebGL API, turns on the generic vertex attribute array\n  the specified index into the list of attribute arrays.\n\n  `void gl.enableVertexAttribArray(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray`"}, :name gl.WebGLRenderingContext/enable-vertex-attrib-array, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 33, :method-params ([this index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 660, :end-line 660, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index])), :doc "Method.\n\n  The `gl.WebGLRenderingContext` method enableVertexAttribArray(),\n  of the WebGL API, turns on the generic vertex attribute array\n  the specified index into the list of attribute arrays.\n\n  `void gl.enableVertexAttribArray(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray`"}, copy-tex-sub-image-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 369, :column 7, :end-line 369, :end-column 28, :arglists (quote ([this target level xoffset yoffset x y width height])), :doc "Method.\n\n  The WebGLRenderingContext.copyTexSubImage2D() method of the WebGL\n  copies pixels from the current `gl.WebGLFramebuffer` into an\n  2D texture sub-image.\n\n  `void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D`"}, :name gl.WebGLRenderingContext/copy-tex-sub-image-2d, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this target level xoffset yoffset x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 9, :fn-var true, :arglists (quote ([this target level xoffset yoffset x y width height])), :doc "Method.\n\n  The WebGLRenderingContext.copyTexSubImage2D() method of the WebGL\n  copies pixels from the current `gl.WebGLFramebuffer` into an\n  2D texture sub-image.\n\n  `void gl.copyTexSubImage2D(target, level, xoffset, yoffset, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D`"}, get-extension {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 835, :column 7, :end-line 835, :end-column 20, :arglists (quote ([this name])), :doc "Method.\n\n  The WebGLRenderingContext.getExtension() method enables a WebGL\n\n  `gl.getExtension(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension`"}, :name gl.WebGLRenderingContext/get-extension, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The WebGLRenderingContext.getExtension() method enables a WebGL\n\n  `gl.getExtension(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getExtension`"}, get-shader-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 920, :column 7, :end-line 920, :end-column 27, :arglists (quote ([this shader pname])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderParameter() method of the\n  API returns information about the given shader.\n\n  `any gl.getShaderParameter(shader, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter`"}, :name gl.WebGLRenderingContext/get-shader-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this shader pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 920, :end-line 920, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this shader pname])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderParameter() method of the\n  API returns information about the given shader.\n\n  `any gl.getShaderParameter(shader, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderParameter`"}, clear-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 213, :column 7, :end-line 213, :end-column 18, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.clearColor() method of the WebGL API\n  the color values used when clearing color buffers.\n\n  `void gl.clearColor(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor`"}, :name gl.WebGLRenderingContext/clear-color, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :method-params ([this red green blue alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.clearColor() method of the WebGL API\n  the color values used when clearing color buffers.\n\n  `void gl.clearColor(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/clearColor`"}, get-tex-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 969, :column 7, :end-line 969, :end-column 24, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getTexParameter() method of the WebGL\n  returns information about the given texture.\n\n  `any gl.getTexParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter`"}, :name gl.WebGLRenderingContext/get-tex-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 24, :method-params ([this target pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 969, :end-line 969, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getTexParameter() method of the WebGL\n  returns information about the given texture.\n\n  `any gl.getTexParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getTexParameter`"}, stencil-mask {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1280, :column 7, :end-line 1280, :end-column 19, :arglists (quote ([this mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilMask() method of the WebGL API\n  enabling and disabling of both the front and back writing of\n  bits in the stencil planes.\n\n  `void gl.stencilMask(mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMask`"}, :name gl.WebGLRenderingContext/stencil-mask, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 19, :method-params ([this mask]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1280, :end-line 1280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilMask() method of the WebGL API\n  enabling and disabling of both the front and back writing of\n  bits in the stencil planes.\n\n  `void gl.stencilMask(mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMask`"}, attach-shader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([this program shader])), :doc "Method.\n\n  The WebGLRenderingContext.attachShader() method of the WebGL\n  attaches either a fragment or vertex `gl.WebGLShader` to a `gl.WebGLProgram`.\n\n  `void gl.attachShader(program, shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader`"}, :name gl.WebGLRenderingContext/attach-shader, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 20, :method-params ([this program shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program shader])), :doc "Method.\n\n  The WebGLRenderingContext.attachShader() method of the WebGL\n  attaches either a fragment or vertex `gl.WebGLShader` to a `gl.WebGLProgram`.\n\n  `void gl.attachShader(program, shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/attachShader`"}, uniform-matrix-4fv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1558, :column 7, :end-line 1558, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.uniformMatrix[234]fv() methods of the\n  API specify matrix values for uniform variables.\n\n  `WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix4fv(location, transpose, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/uniform-matrix-4fv, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1558, :end-line 1558, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.uniformMatrix[234]fv() methods of the\n  API specify matrix values for uniform variables.\n\n  `WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix4fv(location, transpose, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix`"}, compressed-tex-image-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 288, :column 7, :end-line 288, :end-column 30, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexImage2D() and WebGL2RenderingContext.compressedTexImage3D()\n  of the WebGL API specify a two- or three-dimensional texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/compressed-tex-image-2d, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexImage2D() and WebGL2RenderingContext.compressedTexImage3D()\n  of the WebGL API specify a two- or three-dimensional texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage2D(target, level, internalformat, width, height, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);\n\n  // read from buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border, GLsizei imageSize, GLintptr offset);\n  void gl.compressedTexImage3D(target, level, internalformat, width, height, depth, border,\n  ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexImage2D`"}, blend-equation-separate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 117, :column 7, :end-line 117, :end-column 30, :arglists (quote ([this mode-rgb mode-alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendEquationSeparate() method of the\n  API is used to set the RGB blend equation and alpha blend equation\n\n  `void gl.blendEquationSeparate(modeRGB, modeAlpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate`"}, :name gl.WebGLRenderingContext/blend-equation-separate, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 30, :method-params ([this mode-rgb mode-alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this mode-rgb mode-alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendEquationSeparate() method of the\n  API is used to set the RGB blend equation and alpha blend equation\n\n  `void gl.blendEquationSeparate(modeRGB, modeAlpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendEquationSeparate`"}, create-renderbuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 419, :column 7, :end-line 419, :end-column 26, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createRenderbuffer() method of the\n  API creates and initializes a `gl.WebGLRenderbuffer` object.\n\n  `WebGLRenderbuffer gl.createRenderbuffer();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createRenderbuffer`"}, :name gl.WebGLRenderingContext/create-renderbuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 419, :end-line 419, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.createRenderbuffer() method of the\n  API creates and initializes a `gl.WebGLRenderbuffer` object.\n\n  `WebGLRenderbuffer gl.createRenderbuffer();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/createRenderbuffer`"}, is-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1092, :column 7, :end-line 1092, :end-column 17, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.isProgram() method of the WebGL API\n  true if the passed `gl.WebGLProgram` is valid, false otherwise.\n\n  `GLboolean gl.isProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isProgram`"}, :name gl.WebGLRenderingContext/is-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1092, :end-line 1092, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.isProgram() method of the WebGL API\n  true if the passed `gl.WebGLProgram` is valid, false otherwise.\n\n  `GLboolean gl.isProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isProgram`"}, cull-face {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 456, :column 7, :end-line 456, :end-column 16, :arglists (quote ([this mode])), :doc "Method.\n\n  The WebGLRenderingContext.cullFace() method of the WebGL API\n  whether or not front- and/or back-facing polygons can be culled.\n\n  `void gl.cullFace(mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace`"}, :name gl.WebGLRenderingContext/cull-face, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 16, :method-params ([this mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this mode])), :doc "Method.\n\n  The WebGLRenderingContext.cullFace() method of the WebGL API\n  whether or not front- and/or back-facing polygons can be culled.\n\n  `void gl.cullFace(mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/cullFace`"}, framebuffer-texture-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 710, :column 7, :end-line 710, :end-column 29, :arglists (quote ([this target attachment textarget texture level])), :doc "Method.\n\n  The WebGLRenderingContext.framebufferTexture2D() method of the\n  API attaches a texture to a `gl.WebGLFramebuffer`.\n\n  `void gl.framebufferTexture2D(target, attachment, textarget, texture, level);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D`"}, :name gl.WebGLRenderingContext/framebuffer-texture-2d, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 29, :method-params ([this target attachment textarget texture level]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 710, :end-line 710, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this target attachment textarget texture level])), :doc "Method.\n\n  The WebGLRenderingContext.framebufferTexture2D() method of the\n  API attaches a texture to a `gl.WebGLFramebuffer`.\n\n  `void gl.framebufferTexture2D(target, attachment, textarget, texture, level);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferTexture2D`"}, get-context-attributes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 810, :column 7, :end-line 810, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getContextAttributes() method returns\n  WebGLContextAttributes object that contains the actual context\n  Might return `web.null`, if the context is lost.\n\n  `gl.getContextAttributes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getContextAttributes`"}, :name gl.WebGLRenderingContext/get-context-attributes, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 810, :end-line 810, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getContextAttributes() method returns\n  WebGLContextAttributes object that contains the actual context\n  Might return `web.null`, if the context is lost.\n\n  `gl.getContextAttributes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getContextAttributes`"}, get-uniform-location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 993, :column 7, :end-line 993, :end-column 27, :arglists (quote ([this program name])), :doc "Method.\n\n  Part of the WebGL API, the `gl.WebGLRenderingContext` method\n  returns the location of a specific uniform variable which is\n  of a given `gl.WebGLProgram`.\n\n  `WebGLUniformLocation = WebGLRenderingContext.getUniformLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation`"}, :name gl.WebGLRenderingContext/get-uniform-location, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this program name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program name])), :doc "Method.\n\n  Part of the WebGL API, the `gl.WebGLRenderingContext` method\n  returns the location of a specific uniform variable which is\n  of a given `gl.WebGLProgram`.\n\n  `WebGLUniformLocation = WebGLRenderingContext.getUniformLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniformLocation`"}, get-shader-info-log {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 907, :column 7, :end-line 907, :end-column 26, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderInfoLog returns the information\n  for the specified `gl.WebGLShader` object. It contains warnings,\n  and compile information.\n\n  `gl.getShaderInfoLog(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog`"}, :name gl.WebGLRenderingContext/get-shader-info-log, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 907, :end-line 907, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderInfoLog returns the information\n  for the specified `gl.WebGLShader` object. It contains warnings,\n  and compile information.\n\n  `gl.getShaderInfoLog(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderInfoLog`"}, vertex-attrib-pointer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1677, :column 7, :end-line 1677, :end-column 28, :arglists (quote ([this index size type normalized stride offset])), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttribPointer() method of the\n  API binds the buffer currently bound to gl.ARRAY_BUFFER to a\n  vertex attribute of the current vertex buffer object and specifies\n  layout.\n\n  `void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer`"}, :name gl.WebGLRenderingContext/vertex-attrib-pointer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this index size type normalized stride offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1677, :end-line 1677, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this index size type normalized stride offset])), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttribPointer() method of the\n  API binds the buffer currently bound to gl.ARRAY_BUFFER to a\n  vertex attribute of the current vertex buffer object and specifies\n  layout.\n\n  `void gl.vertexAttribPointer(index, size, type, normalized, stride, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttribPointer`"}, get-buffer-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 798, :column 7, :end-line 798, :end-column 27, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getBufferParameter() method of the\n  API returns information about the buffer.\n\n  `any gl.getBufferParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getBufferParameter`"}, :name gl.WebGLRenderingContext/get-buffer-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this target pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 798, :end-line 798, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGLRenderingContext.getBufferParameter() method of the\n  API returns information about the buffer.\n\n  `any gl.getBufferParameter(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getBufferParameter`"}, vertex-attrib-4f-4 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1657, :column 7, :end-line 1657, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/vertex-attrib-4f-4, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1657, :end-line 1657, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`"}, compile-shader {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 275, :column 7, :end-line 275, :end-column 21, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.compileShader() method of the WebGL\n  compiles a GLSL shader into binary data so that it can be used\n  a `gl.WebGLProgram`.\n\n  `void gl.compileShader(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader`"}, :name gl.WebGLRenderingContext/compile-shader, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 21, :method-params ([this shader]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this shader])), :doc "Method.\n\n  The WebGLRenderingContext.compileShader() method of the WebGL\n  compiles a GLSL shader into binary data so that it can be used\n  a `gl.WebGLProgram`.\n\n  `void gl.compileShader(shader);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compileShader`"}, delete-renderbuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 507, :column 7, :end-line 507, :end-column 26, :arglists (quote ([this renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.deleteRenderbuffer() method of the\n  API deletes a given `gl.WebGLRenderbuffer` object. This method\n  no effect if the render buffer has already been deleted.\n\n  `void gl.deleteRenderbuffer(renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer`"}, :name gl.WebGLRenderingContext/delete-renderbuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 26, :method-params ([this renderbuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 507, :end-line 507, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.deleteRenderbuffer() method of the\n  API deletes a given `gl.WebGLRenderbuffer` object. This method\n  no effect if the render buffer has already been deleted.\n\n  `void gl.deleteRenderbuffer(renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer`"}, stencil-op {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1306, :column 7, :end-line 1306, :end-column 17, :arglists (quote ([this fail zfail zpass])), :doc "Method.\n\n  The WebGLRenderingContext.stencilOp() method of the WebGL API\n  both the front and back-facing stencil test actions.\n\n  `void gl.stencilOp(fail, zfail, zpass);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp`"}, :name gl.WebGLRenderingContext/stencil-op, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this fail zfail zpass]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1306, :end-line 1306, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this fail zfail zpass])), :doc "Method.\n\n  The WebGLRenderingContext.stencilOp() method of the WebGL API\n  both the front and back-facing stencil test actions.\n\n  `void gl.stencilOp(fail, zfail, zpass);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilOp`"}, check-framebuffer-status {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 189, :column 7, :end-line 189, :end-column 31, :arglists (quote ([this target])), :doc "Method.\n\n  The WebGLRenderingContext.checkFramebufferStatus() method of\n  WebGL API returns the completeness status of the `gl.WebGLFramebuffer`\n\n  `GLenum gl.checkFramebufferStatus(target);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus`"}, :name gl.WebGLRenderingContext/check-framebuffer-status, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 31, :method-params ([this target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this target])), :doc "Method.\n\n  The WebGLRenderingContext.checkFramebufferStatus() method of\n  WebGL API returns the completeness status of the `gl.WebGLFramebuffer`\n\n  `GLenum gl.checkFramebufferStatus(target);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus`"}, stencil-mask-separate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1293, :column 7, :end-line 1293, :end-column 28, :arglists (quote ([this face mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilMaskSeparate() method of the\n  API controls enabling and disabling of front and/or back writing\n  individual bits in the stencil planes.\n\n  `void gl.stencilMaskSeparate(face, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate`"}, :name gl.WebGLRenderingContext/stencil-mask-separate, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this face mask]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1293, :end-line 1293, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this face mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilMaskSeparate() method of the\n  API controls enabling and disabling of front and/or back writing\n  individual bits in the stencil planes.\n\n  `void gl.stencilMaskSeparate(face, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate`"}, blend-func {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 129, :column 7, :end-line 129, :end-column 17, :arglists (quote ([this sfactor dfactor])), :doc "Method.\n\n  The WebGLRenderingContext.blendFunc() method of the WebGL API\n  which function is used for blending pixel arithmetic.\n\n  `void gl.blendFunc(sfactor, dfactor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc`"}, :name gl.WebGLRenderingContext/blend-func, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this sfactor dfactor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this sfactor dfactor])), :doc "Method.\n\n  The WebGLRenderingContext.blendFunc() method of the WebGL API\n  which function is used for blending pixel arithmetic.\n\n  `void gl.blendFunc(sfactor, dfactor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendFunc`"}, drawing-buffer-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1718, :column 7, :end-line 1718, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The read-only WebGLRenderingContext.drawingBufferHeight property\n  the actual height of the current drawing buffer. It should match\n  height attribute of the `web.<canvas>` element associated with\n  context, but might differ if the implementation is not able to\n  the requested height.\n\n  `gl.drawingBufferHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferHeight`"}, :name gl.WebGLRenderingContext/drawing-buffer-height, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1718, :end-line 1718, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only WebGLRenderingContext.drawingBufferHeight property\n  the actual height of the current drawing buffer. It should match\n  height attribute of the `web.<canvas>` element associated with\n  context, but might differ if the implementation is not able to\n  the requested height.\n\n  `gl.drawingBufferHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/drawingBufferHeight`"}, color-mask {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 249, :column 7, :end-line 249, :end-column 17, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.colorMask() method of the WebGL API\n  which color components to enable or to disable when drawing or\n  to a `gl.WebGLFramebuffer`.\n\n  `void gl.colorMask(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask`"}, :name gl.WebGLRenderingContext/color-mask, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this red green blue alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.colorMask() method of the WebGL API\n  which color components to enable or to disable when drawing or\n  to a `gl.WebGLFramebuffer`.\n\n  `void gl.colorMask(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/colorMask`"}, is-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1067, :column 7, :end-line 1067, :end-column 17, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.isEnabled() method of the WebGL API\n  whether a specific WebGL capability is enabled or not for this\n\n  `GLboolean gl.isEnabled(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isEnabled`"}, :name gl.WebGLRenderingContext/is-enabled, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this cap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1067, :end-line 1067, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this cap])), :doc "Method.\n\n  The WebGLRenderingContext.isEnabled() method of the WebGL API\n  whether a specific WebGL capability is enabled or not for this\n\n  `GLboolean gl.isEnabled(cap);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isEnabled`"}, get-supported-extensions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 957, :column 7, :end-line 957, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getSupportedExtensions() method returns\n  list of all the supported WebGL extensions.\n\n  `gl.getSupportedExtensions();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions`"}, :name gl.WebGLRenderingContext/get-supported-extensions, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 957, :end-line 957, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.getSupportedExtensions() method returns\n  list of all the supported WebGL extensions.\n\n  `gl.getSupportedExtensions();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getSupportedExtensions`"}, uniform-111 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1410, :column 7, :end-line 1410, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.uniform[1234][fi][v]() methods of the\n  API specify values of uniform variables.\n\n  `void gl.uniform1f(location, v0);\n  void gl.uniform1fv(location, value);\n  void gl.uniform1i(location, v0);\n  void gl.uniform1iv(location, value);\n\n  void gl.uniform2f(location, v0, v1);\n  void gl.uniform2fv(location, value);\n  void gl.uniform2i(location, v0, v1);\n  void gl.uniform2iv(location, value);\n\n  void gl.uniform3f(location, v0, v1, v2);\n  void gl.uniform3fv(location, value);\n  void gl.uniform3i(location, v0, v1, v2);\n  void gl.uniform3iv(location, value);\n\n  void gl.uniform4f(location, v0, v1, v2, v3);\n  void gl.uniform4fv(location, value);\n  void gl.uniform4i(location, v0, v1, v2, v3);\n  void gl.uniform4iv(location, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/uniform-111, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1410, :end-line 1410, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.uniform[1234][fi][v]() methods of the\n  API specify values of uniform variables.\n\n  `void gl.uniform1f(location, v0);\n  void gl.uniform1fv(location, value);\n  void gl.uniform1i(location, v0);\n  void gl.uniform1iv(location, value);\n\n  void gl.uniform2f(location, v0, v1);\n  void gl.uniform2fv(location, value);\n  void gl.uniform2i(location, v0, v1);\n  void gl.uniform2iv(location, value);\n\n  void gl.uniform3f(location, v0, v1, v2);\n  void gl.uniform3fv(location, value);\n  void gl.uniform3i(location, v0, v1, v2);\n  void gl.uniform3iv(location, value);\n\n  void gl.uniform4f(location, v0, v1, v2, v3);\n  void gl.uniform4fv(location, value);\n  void gl.uniform4i(location, v0, v1, v2, v3);\n  void gl.uniform4iv(location, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform`"}, uniform-222 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1440, :column 7, :end-line 1440, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.uniform[1234][fi][v]() methods of the\n  API specify values of uniform variables.\n\n  `void gl.uniform1f(location, v0);\n  void gl.uniform1fv(location, value);\n  void gl.uniform1i(location, v0);\n  void gl.uniform1iv(location, value);\n\n  void gl.uniform2f(location, v0, v1);\n  void gl.uniform2fv(location, value);\n  void gl.uniform2i(location, v0, v1);\n  void gl.uniform2iv(location, value);\n\n  void gl.uniform3f(location, v0, v1, v2);\n  void gl.uniform3fv(location, value);\n  void gl.uniform3i(location, v0, v1, v2);\n  void gl.uniform3iv(location, value);\n\n  void gl.uniform4f(location, v0, v1, v2, v3);\n  void gl.uniform4fv(location, value);\n  void gl.uniform4i(location, v0, v1, v2, v3);\n  void gl.uniform4iv(location, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/uniform-222, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1440, :end-line 1440, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.uniform[1234][fi][v]() methods of the\n  API specify values of uniform variables.\n\n  `void gl.uniform1f(location, v0);\n  void gl.uniform1fv(location, value);\n  void gl.uniform1i(location, v0);\n  void gl.uniform1iv(location, value);\n\n  void gl.uniform2f(location, v0, v1);\n  void gl.uniform2fv(location, value);\n  void gl.uniform2i(location, v0, v1);\n  void gl.uniform2iv(location, value);\n\n  void gl.uniform3f(location, v0, v1, v2);\n  void gl.uniform3fv(location, value);\n  void gl.uniform3i(location, v0, v1, v2);\n  void gl.uniform3iv(location, value);\n\n  void gl.uniform4f(location, v0, v1, v2, v3);\n  void gl.uniform4fv(location, value);\n  void gl.uniform4i(location, v0, v1, v2, v3);\n  void gl.uniform4iv(location, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniform`"}, vertex-attrib-2f-2 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1617, :column 7, :end-line 1617, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/vertex-attrib-2f-2, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1617, :end-line 1617, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`"}, vertex-attrib-1f-1 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1597, :column 7, :end-line 1597, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/vertex-attrib-1f-1, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1597, :end-line 1597, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.vertexAttrib[1234]f[v]() methods of\n  WebGL API specify constant values for generic vertex attributes.\n\n  `void gl.vertexAttrib1f(index, v0);\n  void gl.vertexAttrib2f(index, v0, v1);\n  void gl.vertexAttrib3f(index, v0, v1, v2);\n  void gl.vertexAttrib4f(index, v0, v1, v2, v3);\n\n  void gl.vertexAttrib1fv(index, value);\n  void gl.vertexAttrib2fv(index, value);\n  void gl.vertexAttrib3fv(index, value);\n  void gl.vertexAttrib4fv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/vertexAttrib`"}, stencil-func-separate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1267, :column 7, :end-line 1267, :end-column 28, :arglists (quote ([this face func ref mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilFuncSeparate() method of the\n  API sets the front and/or back function and reference value for\n  testing.\n\n  `void gl.stencilFuncSeparate(face, func, ref, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate`"}, :name gl.WebGLRenderingContext/stencil-func-separate, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 28, :method-params ([this face func ref mask]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1267, :end-line 1267, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this face func ref mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilFuncSeparate() method of the\n  API sets the front and/or back function and reference value for\n  testing.\n\n  `void gl.stencilFuncSeparate(face, func, ref, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate`"}, get-framebuffer-attachment-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 846, :column 7, :end-line 846, :end-column 43, :arglists (quote ([this target attachment pname])), :doc "Method.\n\n  The WebGLRenderingContext.getFramebufferAttachmentParameter()\n  of the WebGL API returns information about a framebuffer's attachment.\n\n  `any gl.getFramebufferAttachmentParameter(target, attachment, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter`"}, :name gl.WebGLRenderingContext/get-framebuffer-attachment-parameter, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 43, :method-params ([this target attachment pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 846, :end-line 846, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this target attachment pname])), :doc "Method.\n\n  The WebGLRenderingContext.getFramebufferAttachmentParameter()\n  of the WebGL API returns information about a framebuffer's attachment.\n\n  `any gl.getFramebufferAttachmentParameter(target, attachment, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter`"}, hint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1030, :column 7, :end-line 1030, :end-column 11, :arglists (quote ([this target mode])), :doc "Method.\n\n  The WebGLRenderingContext.hint() method of the WebGL API specifies\n  for certain behaviors. The interpretation of these hints depend\n  the implementation.\n\n  `void gl.hint(target, mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint`"}, :name gl.WebGLRenderingContext/hint, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 11, :method-params ([this target mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1030, :end-line 1030, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target mode])), :doc "Method.\n\n  The WebGLRenderingContext.hint() method of the WebGL API specifies\n  for certain behaviors. The interpretation of these hints depend\n  the implementation.\n\n  `void gl.hint(target, mode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/hint`"}, is-texture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1129, :column 7, :end-line 1129, :end-column 17, :arglists (quote ([this texture])), :doc "Method.\n\n  The WebGLRenderingContext.isTexture() method of the WebGL API\n  true if the passed `gl.WebGLTexture` is valid and false otherwise.\n\n  `GLboolean gl.isTexture(texture);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isTexture`"}, :name gl.WebGLRenderingContext/is-texture, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this texture]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1129, :end-line 1129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this texture])), :doc "Method.\n\n  The WebGLRenderingContext.isTexture() method of the WebGL API\n  true if the passed `gl.WebGLTexture` is valid and false otherwise.\n\n  `GLboolean gl.isTexture(texture);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/isTexture`"}, get-shader-precision-format {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 932, :column 7, :end-line 932, :end-column 34, :arglists (quote ([this shader-type precision-type])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderPrecisionFormat() method of\n  WebGL API returns a new `gl.WebGLShaderPrecisionFormat` object\n  the range and precision for the specified shader numeric format.\n\n  `WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat`"}, :name gl.WebGLRenderingContext/get-shader-precision-format, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 34, :method-params ([this shader-type precision-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 932, :end-line 932, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this shader-type precision-type])), :doc "Method.\n\n  The WebGLRenderingContext.getShaderPrecisionFormat() method of\n  WebGL API returns a new `gl.WebGLShaderPrecisionFormat` object\n  the range and precision for the specified shader numeric format.\n\n  `WebGLShaderPrecisionFormat gl.getShaderPrecisionFormat(shaderType, precisionType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat`"}, get-uniform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 981, :column 7, :end-line 981, :end-column 18, :arglists (quote ([this program location])), :doc "Method.\n\n  The WebGLRenderingContext.getUniform() method of the WebGL API\n  the value of a uniform variable at a given location.\n\n  `any gl.getUniform(program, location);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform`"}, :name gl.WebGLRenderingContext/get-uniform, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :method-params ([this program location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 981, :end-line 981, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program location])), :doc "Method.\n\n  The WebGLRenderingContext.getUniform() method of the WebGL API\n  the value of a uniform variable at a given location.\n\n  `any gl.getUniform(program, location);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getUniform`"}, framebuffer-renderbuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 698, :column 7, :end-line 698, :end-column 31, :arglists (quote ([this target attachment renderbuffertarget renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.framebufferRenderbuffer() method of\n  WebGL API attaches a `gl.WebGLRenderbuffer` object to a `gl.WebGLFramebuffer`\n\n  `void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer`"}, :name gl.WebGLRenderingContext/framebuffer-renderbuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 31, :method-params ([this target attachment renderbuffertarget renderbuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 698, :end-line 698, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this target attachment renderbuffertarget renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.framebufferRenderbuffer() method of\n  WebGL API attaches a `gl.WebGLRenderbuffer` object to a `gl.WebGLFramebuffer`\n\n  `void gl.framebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer`"}, read-pixels {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1189, :column 7, :end-line 1189, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.readPixels() method of the WebGL API\n  a block of pixels from a specified rectangle of the current color\n  into an `web.ArrayBufferView` object.\n\n  `// WebGL1:\n  void gl.readPixels(x, y, width, height, format, type, pixels);\n\n  // WebGL2:\n  void gl.readPixels(x, y, width, height, format, type, GLintptr offset);\n  void gl.readPixels(x, y, width, height, format, type, ArrayBufferView pixels, GLuint dstOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/read-pixels, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.readPixels() method of the WebGL API\n  a block of pixels from a specified rectangle of the current color\n  into an `web.ArrayBufferView` object.\n\n  `// WebGL1:\n  void gl.readPixels(x, y, width, height, format, type, pixels);\n\n  // WebGL2:\n  void gl.readPixels(x, y, width, height, format, type, GLintptr offset);\n  void gl.readPixels(x, y, width, height, format, type, ArrayBufferView pixels, GLuint dstOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/readPixels`"}, link-program {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1153, :column 7, :end-line 1153, :end-column 19, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.linkProgram() method of the WebGL API\n  a given `gl.WebGLProgram` to the attached vertex and fragment\n\n  `void gl.linkProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram`"}, :name gl.WebGLRenderingContext/link-program, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 19, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1153, :end-line 1153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.linkProgram() method of the WebGL API\n  a given `gl.WebGLProgram` to the attached vertex and fragment\n\n  `void gl.linkProgram(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/linkProgram`"}, depth-mask {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 562, :column 7, :end-line 562, :end-column 17, :arglists (quote ([this flag])), :doc "Method.\n\n  The WebGLRenderingContext.depthMask() method of the WebGL API\n  whether writing into the depth buffer is enabled or disabled.\n\n  `void gl.depthMask(flag);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthMask`"}, :name gl.WebGLRenderingContext/depth-mask, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 17, :method-params ([this flag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 562, :end-line 562, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this flag])), :doc "Method.\n\n  The WebGLRenderingContext.depthMask() method of the WebGL API\n  whether writing into the depth buffer is enabled or disabled.\n\n  `void gl.depthMask(flag);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/depthMask`"}, canvas {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1704, :column 7, :end-line 1704, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The WebGLRenderingContext.canvas property is a read-only reference\n  the `html.HTMLCanvasElement` or `web.OffscreenCanvas` object\n  is associated with the context. It might be `web.null` if it\n  not associated with a `web.<canvas>` element or an `web.OffscreenCanvas`\n\n  `gl.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas`"}, :name gl.WebGLRenderingContext/canvas, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1704, :end-line 1704, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebGLRenderingContext.canvas property is a read-only reference\n  the `html.HTMLCanvasElement` or `web.OffscreenCanvas` object\n  is associated with the context. It might be `web.null` if it\n  not associated with a `web.<canvas>` element or an `web.OffscreenCanvas`\n\n  `gl.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/canvas`"}, get-active-attrib {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 746, :column 7, :end-line 746, :end-column 24, :arglists (quote ([this program index])), :doc "Method.\n\n  The WebGLRenderingContext.getActiveAttrib() method of the WebGL\n  returns a `gl.WebGLActiveInfo` object containing size, type,\n  name of a vertex attribute. It is generally used when querying\n  uniforms either for debugging or generic library creation.\n\n  `WebGLActiveInfo gl.getActiveAttrib(program,index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveAttrib`"}, :name gl.WebGLRenderingContext/get-active-attrib, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 24, :method-params ([this program index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 746, :end-line 746, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program index])), :doc "Method.\n\n  The WebGLRenderingContext.getActiveAttrib() method of the WebGL\n  returns a `gl.WebGLActiveInfo` object containing size, type,\n  name of a vertex attribute. It is generally used when querying\n  uniforms either for debugging or generic library creation.\n\n  `WebGLActiveInfo gl.getActiveAttrib(program,index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getActiveAttrib`"}, stencil-func {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1255, :column 7, :end-line 1255, :end-column 19, :arglists (quote ([this func ref mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilFunc() method of the WebGL API\n  the front and back function and reference value for stencil testing.\n\n  `void gl.stencilFunc(func, ref, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc`"}, :name gl.WebGLRenderingContext/stencil-func, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 19, :method-params ([this func ref mask]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1255, :end-line 1255, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this func ref mask])), :doc "Method.\n\n  The WebGLRenderingContext.stencilFunc() method of the WebGL API\n  the front and back function and reference value for stencil testing.\n\n  `void gl.stencilFunc(func, ref, mask);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/stencilFunc`"}, get-attached-shaders {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 774, :column 7, :end-line 774, :end-column 27, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.getAttachedShaders() method of the\n  API returns a list of `gl.WebGLShader` objects attached to a\n\n  `sequence<WebGLShader> gl.getAttachedShaders(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttachedShaders`"}, :name gl.WebGLRenderingContext/get-attached-shaders, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 27, :method-params ([this program]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 774, :end-line 774, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this program])), :doc "Method.\n\n  The WebGLRenderingContext.getAttachedShaders() method of the\n  API returns a list of `gl.WebGLShader` objects attached to a\n\n  `sequence<WebGLShader> gl.getAttachedShaders(program);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/getAttachedShaders`"}, bind-renderbuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 67, :column 7, :end-line 67, :end-column 24, :arglists (quote ([this target renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.bindRenderbuffer() method of the WebGL\n  binds a given `gl.WebGLRenderbuffer` to a target, which must\n  gl.RENDERBUFFER.\n\n  `void gl.bindRenderbuffer(target, renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindRenderbuffer`"}, :name gl.WebGLRenderingContext/bind-renderbuffer, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 24, :method-params ([this target renderbuffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target renderbuffer])), :doc "Method.\n\n  The WebGLRenderingContext.bindRenderbuffer() method of the WebGL\n  binds a given `gl.WebGLRenderbuffer` to a target, which must\n  gl.RENDERBUFFER.\n\n  `void gl.bindRenderbuffer(target, renderbuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/bindRenderbuffer`"}, uniform-matrix-2fv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 1530, :column 7, :end-line 1530, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.uniformMatrix[234]fv() methods of the\n  API specify matrix values for uniform variables.\n\n  `WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix4fv(location, transpose, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/uniform-matrix-2fv, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1530, :end-line 1530, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.uniformMatrix[234]fv() methods of the\n  API specify matrix values for uniform variables.\n\n  `WebGLRenderingContext.uniformMatrix2fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix3fv(location, transpose, value);\n  WebGLRenderingContext.uniformMatrix4fv(location, transpose, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/uniformMatrix`"}, blend-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 92, :column 7, :end-line 92, :end-column 18, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendColor() method of the WebGL API\n  used to set the source and destination blending factors.\n\n  `void gl.blendColor(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendColor`"}, :name gl.WebGLRenderingContext/blend-color, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 18, :method-params ([this red green blue alpha]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this red green blue alpha])), :doc "Method.\n\n  The WebGLRenderingContext.blendColor() method of the WebGL API\n  used to set the source and destination blending factors.\n\n  `void gl.blendColor(red, green, blue, alpha);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/blendColor`"}, compressed-tex-sub-image-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 338, :column 7, :end-line 338, :end-column 34, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexSubImage2D() method of\n  WebGL API specifies a two-dimensional sub-rectangle for a texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, offset);\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGLRenderingContext/compressed-tex-sub-image-2d, :variadic true, :file "src/gl/WebGLRenderingContext.cljs", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.compressedTexSubImage2D() method of\n  WebGL API specifies a two-dimensional sub-rectangle for a texture\n  in a compressed format.\n\n  `// WebGL 1:\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView? pixels);\n\n  // Additionally available in WebGL 2:\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, offset);\n  void gl.compressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D`"}, finish {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGLRenderingContext.cljs", :line 673, :column 7, :end-line 673, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.finish() method of the WebGL API blocks\n  until all previously called commands are finished.\n\n  `void gl.finish();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish`"}, :name gl.WebGLRenderingContext/finish, :variadic false, :file "src/gl/WebGLRenderingContext.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGLRenderingContext.finish() method of the WebGL API blocks\n  until all previously called commands are finished.\n\n  `void gl.finish();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGLRenderingContext/finish`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WebGLRenderingContext interface provides an interface to\n  OpenGL ES 2.0 graphics rendering context for the drawing surface\n  an HTML `web.<canvas>` element."}