{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name gl.WebGL2RenderingContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {copy-tex-sub-image-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 211, :column 7, :end-line 211, :end-column 28, :arglists (quote ([this target level xoffset yoffset zoffset x y width height])), :doc "Method.\n\n  The WebGL2RenderingContext.copyTexSubImage3D() method of the\n  API copies pixels from the current `gl.WebGLFramebuffer` into\n  existing 3D texture sub-image.\n\n  `void gl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D`"}, :name gl.WebGL2RenderingContext/copy-tex-sub-image-3d, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this target level xoffset yoffset zoffset x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 10, :fn-var true, :arglists (quote ([this target level xoffset yoffset zoffset x y width height])), :doc "Method.\n\n  The WebGL2RenderingContext.copyTexSubImage3D() method of the\n  API copies pixels from the current `gl.WebGLFramebuffer` into\n  existing 3D texture sub-image.\n\n  `void gl.copyTexSubImage3D(target, level, xoffset, yoffset, zoffset, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D`"}, create-sampler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 237, :column 7, :end-line 237, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createSampler() method of the WebGL\n  API creates and initializes `gl.WebGLSampler` objects.\n\n  `WebGLSampler gl.createSampler();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createSampler`"}, :name gl.WebGL2RenderingContext/create-sampler, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createSampler() method of the WebGL\n  API creates and initializes `gl.WebGLSampler` objects.\n\n  `WebGLSampler gl.createSampler();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createSampler`"}, get-transform-feedback-varying {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 573, :column 7, :end-line 573, :end-column 37, :arglists (quote ([this program index])), :doc "Method.\n\n  The WebGL2RenderingContext.getTransformFeedbackVarying() method\n  the WebGL 2 API returns information about varying variables from\n  buffers.\n\n  `WebGLActiveInfo gl.getTransformFeedbackVarying(program, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying`"}, :name gl.WebGL2RenderingContext/get-transform-feedback-varying, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 37, :method-params ([this program index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 573, :end-line 573, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program index])), :doc "Method.\n\n  The WebGL2RenderingContext.getTransformFeedbackVarying() method\n  the WebGL 2 API returns information about varying variables from\n  buffers.\n\n  `WebGLActiveInfo gl.getTransformFeedbackVarying(program, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying`"}, get-query-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 537, :column 7, :end-line 537, :end-column 26, :arglists (quote ([this query pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getQueryParameter() method of the\n  2 API returns parameter information of a `gl.WebGLQuery` object.\n\n  `any gl.getQueryParameter(query, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQueryParameter`"}, :name gl.WebGL2RenderingContext/get-query-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this query pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 537, :end-line 537, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this query pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getQueryParameter() method of the\n  2 API returns parameter information of a `gl.WebGLQuery` object.\n\n  `any gl.getQueryParameter(query, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQueryParameter`"}, create-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 224, :column 7, :end-line 224, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createQuery() method of the WebGL\n  API creates and initializes `gl.WebGLQuery` objects, which provide\n  to asynchronously query for information.\n\n  `WebGLQuery gl.createQuery();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createQuery`"}, :name gl.WebGL2RenderingContext/create-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createQuery() method of the WebGL\n  API creates and initializes `gl.WebGLQuery` objects, which provide\n  to asynchronously query for information.\n\n  `WebGLQuery gl.createQuery();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createQuery`"}, delete-vertex-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 323, :column 7, :end-line 323, :end-column 26, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteVertexArray() method of the\n  2 API deletes a given `gl.WebGLVertexArrayObject` object.\n\n  `void gl.deleteVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteVertexArray`"}, :name gl.WebGL2RenderingContext/delete-vertex-array, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this vertex-array]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteVertexArray() method of the\n  2 API deletes a given `gl.WebGLVertexArrayObject` object.\n\n  `void gl.deleteVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteVertexArray`"}, invalidate-framebuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 610, :column 7, :end-line 610, :end-column 29, :arglists (quote ([this target attachments])), :doc "Method.\n\n  The WebGL2RenderingContext.invalidateFramebuffer() method of\n  WebGL 2 API invalidates the contents of attachments in a framebuffer.\n\n  `void gl.invalidateFramebuffer(target, attachments);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer`"}, :name gl.WebGL2RenderingContext/invalidate-framebuffer, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 29, :method-params ([this target attachments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 610, :end-line 610, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target attachments])), :doc "Method.\n\n  The WebGL2RenderingContext.invalidateFramebuffer() method of\n  WebGL 2 API invalidates the contents of attachments in a framebuffer.\n\n  `void gl.invalidateFramebuffer(target, attachments);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer`"}, tex-sub-image-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 817, :column 7, :end-line 817, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.texSubImage3D() method of the WebGL\n  specifies a sub-rectangle of the current texture.\n\n  `void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ArrayBufferView? srcData, optional srcOffset);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageBitmap? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageData? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLImageElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLCanvasElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLVideoElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, GLintptr offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage3D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/tex-sub-image-3d, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 817, :end-line 817, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.texSubImage3D() method of the WebGL\n  specifies a sub-rectangle of the current texture.\n\n  `void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ArrayBufferView? srcData, optional srcOffset);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageBitmap? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, ImageData? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLImageElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLCanvasElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, HTMLVideoElement? pixels);\n\n  void gl.texSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, GLintptr offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texSubImage3D`"}, delete-sampler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 287, :column 7, :end-line 287, :end-column 21, :arglists (quote ([this sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteSampler() method of the WebGL\n  API deletes a given `gl.WebGLSampler` object.\n\n  `void gl.deleteSampler(sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSampler`"}, :name gl.WebGL2RenderingContext/delete-sampler, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 21, :method-params ([this sampler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteSampler() method of the WebGL\n  API deletes a given `gl.WebGLSampler` object.\n\n  `void gl.deleteSampler(sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSampler`"}, end-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 399, :column 7, :end-line 399, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.endTransformFeedback() method of the\n  2 API ends a transform feedback operation.\n\n  `void gl.endTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endTransformFeedback`"}, :name gl.WebGL2RenderingContext/end-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.endTransformFeedback() method of the\n  2 API ends a transform feedback operation.\n\n  `void gl.endTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endTransformFeedback`"}, get-active-uniforms {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 462, :column 7, :end-line 462, :end-column 26, :arglists (quote ([this program uniform-indices pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniforms() method of the\n  2 API retrieves information about active uniforms within a `gl.WebGLProgram`.\n\n  `any gl.getActiveUniforms(program, uniformIndices, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms`"}, :name gl.WebGL2RenderingContext/get-active-uniforms, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this program uniform-indices pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 462, :end-line 462, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this program uniform-indices pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniforms() method of the\n  2 API retrieves information about active uniforms within a `gl.WebGLProgram`.\n\n  `any gl.getActiveUniforms(program, uniformIndices, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniforms`"}, delete-sync {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 299, :column 7, :end-line 299, :end-column 18, :arglists (quote ([this sync])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteSync() method of the WebGL 2\n  deletes a given `gl.WebGLSync` object.\n\n  `void gl.deleteSync(sync);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSync`"}, :name gl.WebGL2RenderingContext/delete-sync, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :method-params ([this sync]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sync])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteSync() method of the WebGL 2\n  deletes a given `gl.WebGLSync` object.\n\n  `void gl.deleteSync(sync);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteSync`"}, get-indexed-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 500, :column 7, :end-line 500, :end-column 28, :arglists (quote ([this target index])), :doc "Method.\n\n  The WebGL2RenderingContext.getIndexedParameter() method of the\n  2 API returns indexed information about a given target.\n\n  `any gl.getIndexedParameter(target, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getIndexedParameter`"}, :name gl.WebGL2RenderingContext/get-indexed-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this target index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 500, :end-line 500, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target index])), :doc "Method.\n\n  The WebGL2RenderingContext.getIndexedParameter() method of the\n  2 API returns indexed information about a given target.\n\n  `any gl.getIndexedParameter(target, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getIndexedParameter`"}, end-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 387, :column 7, :end-line 387, :end-column 16, :arglists (quote ([this target])), :doc "Method.\n\n  The WebGL2RenderingContext.endQuery() method of the WebGL 2 API\n  the end of a given query target.\n\n  `void gl.endQuery(target);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endQuery`"}, :name gl.WebGL2RenderingContext/end-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 16, :method-params ([this target]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this target])), :doc "Method.\n\n  The WebGL2RenderingContext.endQuery() method of the WebGL 2 API\n  the end of a given query target.\n\n  `void gl.endQuery(target);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/endQuery`"}, renderbuffer-storage-multisample {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 721, :column 7, :end-line 721, :end-column 39, :arglists (quote ([this target samples internal-format width height])), :doc "Method.\n\n  The WebGL2RenderingContext.renderbufferStorageMultisample() method\n  the WebGL 2 API returns creates and initializes a renderbuffer\n  data store and allows specifying a number of samples to be used.\n\n  `void gl.renderbufferStorageMultisample(target, samples, internalFormat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample`"}, :name gl.WebGL2RenderingContext/renderbuffer-storage-multisample, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 39, :method-params ([this target samples internal-format width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :end-line 721, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this target samples internal-format width height])), :doc "Method.\n\n  The WebGL2RenderingContext.renderbufferStorageMultisample() method\n  the WebGL 2 API returns creates and initializes a renderbuffer\n  data store and allows specifying a number of samples to be used.\n\n  `void gl.renderbufferStorageMultisample(target, samples, internalFormat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample`"}, is-sync {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 659, :column 7, :end-line 659, :end-column 14, :arglists (quote ([this sync])), :doc "Method.\n\n  The WebGL2RenderingContext.isSync() method of the WebGL 2 API\n  true if the passed object is a valid `gl.WebGLSync` object.\n\n  `GLboolean gl.isSync(sync);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSync`"}, :name gl.WebGL2RenderingContext/is-sync, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 14, :method-params ([this sync]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 659, :end-line 659, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sync])), :doc "Method.\n\n  The WebGL2RenderingContext.isSync() method of the WebGL 2 API\n  true if the passed object is a valid `gl.WebGLSync` object.\n\n  `GLboolean gl.isSync(sync);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSync`"}, uniform-matrix-3x-3fv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 993, :column 7, :end-line 993, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-matrix-3x-3fv, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`"}, draw-elements-instanced {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 362, :column 7, :end-line 362, :end-column 30, :arglists (quote ([this mode count type offset instance-count])), :doc "Method.\n\n  The WebGL2RenderingContext.drawElementsInstanced() method of\n  WebGL 2 API renders primitives from array data like the `web.gl.drawElements()`\n  In addition, it can execute multiple instances of a set of elements.\n\n  `void gl.drawElementsInstanced(mode, count, type, offset, instanceCount);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced`"}, :name gl.WebGL2RenderingContext/draw-elements-instanced, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 30, :method-params ([this mode count type offset instance-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 362, :end-line 362, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this mode count type offset instance-count])), :doc "Method.\n\n  The WebGL2RenderingContext.drawElementsInstanced() method of\n  WebGL 2 API renders primitives from array data like the `web.gl.drawElements()`\n  In addition, it can execute multiple instances of a set of elements.\n\n  `void gl.drawElementsInstanced(mode, count, type, offset, instanceCount);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced`"}, get-internalformat-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 512, :column 7, :end-line 512, :end-column 35, :arglists (quote ([this target internalformat pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getInternalformatParameter() method\n  the WebGL 2 API returns information about implementation-dependent\n  for internal formats.\n\n  `any gl.getInternalformatParameter(target, internalformat, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter`"}, :name gl.WebGL2RenderingContext/get-internalformat-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 35, :method-params ([this target internalformat pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 512, :end-line 512, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this target internalformat pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getInternalformatParameter() method\n  the WebGL 2 API returns information about implementation-dependent\n  for internal formats.\n\n  `any gl.getInternalformatParameter(target, internalformat, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter`"}, draw-arrays-instanced {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 335, :column 7, :end-line 335, :end-column 28, :arglists (quote ([this mode first count instance-count])), :doc "Method.\n\n  The WebGL2RenderingContext.drawArraysInstanced() method of the\n  2 API renders primitives from array data like the `web.gl.drawArrays()`\n  In addition, it can execute multiple instances of the range of\n\n  `void gl.drawArraysInstanced(mode, first, count, instanceCount);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced`"}, :name gl.WebGL2RenderingContext/draw-arrays-instanced, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this mode first count instance-count]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this mode first count instance-count])), :doc "Method.\n\n  The WebGL2RenderingContext.drawArraysInstanced() method of the\n  2 API renders primitives from array data like the `web.gl.drawArrays()`\n  In addition, it can execute multiple instances of the range of\n\n  `void gl.drawArraysInstanced(mode, first, count, instanceCount);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced`"}, draw-range-elements {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 375, :column 7, :end-line 375, :end-column 26, :arglists (quote ([this mode start end count type offset])), :doc "Method.\n\n  The WebGL2RenderingContext.drawRangeElements() method of the\n  API renders primitives from array data in a given range.\n\n  `void gl.drawRangeElements(mode, start, end, count, type, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawRangeElements`"}, :name gl.WebGL2RenderingContext/draw-range-elements, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this mode start end count type offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this mode start end count type offset])), :doc "Method.\n\n  The WebGL2RenderingContext.drawRangeElements() method of the\n  API renders primitives from array data in a given range.\n\n  `void gl.drawRangeElements(mode, start, end, count, type, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawRangeElements`"}, tex-storage-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 804, :column 7, :end-line 804, :end-column 21, :arglists (quote ([this target levels internalformat width height depth])), :doc "Method.\n\n  The WebGL2RenderingContext.texStorage3D() method of the WebGL\n  specifies all levels of a three-dimensional texture or two-dimensional\n  texture.\n\n  `void gl.texStorage3D(target, levels, internalformat, width, height, depth);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage3D`"}, :name gl.WebGL2RenderingContext/tex-storage-3d, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 21, :method-params ([this target levels internalformat width height depth]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 804, :end-line 804, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this target levels internalformat width height depth])), :doc "Method.\n\n  The WebGL2RenderingContext.texStorage3D() method of the WebGL\n  specifies all levels of a three-dimensional texture or two-dimensional\n  texture.\n\n  `void gl.texStorage3D(target, levels, internalformat, width, height, depth);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage3D`"}, get-frag-data-location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 487, :column 7, :end-line 487, :end-column 29, :arglists (quote ([this program name])), :doc "Method.\n\n  The WebGL2RenderingContext.getFragDataLocation() method of the\n  2 API returns the binding of color numbers to user-defined varying\n  variables.\n\n  `GLint gl.getFragDataLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getFragDataLocation`"}, :name gl.WebGL2RenderingContext/get-frag-data-location, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 29, :method-params ([this program name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 487, :end-line 487, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program name])), :doc "Method.\n\n  The WebGL2RenderingContext.getFragDataLocation() method of the\n  2 API returns the binding of color numbers to user-defined varying\n  variables.\n\n  `GLint gl.getFragDataLocation(program, name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getFragDataLocation`"}, get-sampler-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 549, :column 7, :end-line 549, :end-column 28, :arglists (quote ([this sampler pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getSamplerParameter() method of the\n  2 API returns parameter information of a `gl.WebGLSampler` object.\n\n  `any gl.getSamplerParameter(sampler, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSamplerParameter`"}, :name gl.WebGL2RenderingContext/get-sampler-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this sampler pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 549, :end-line 549, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this sampler pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getSamplerParameter() method of the\n  2 API returns parameter information of a `gl.WebGLSampler` object.\n\n  `any gl.getSamplerParameter(sampler, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSamplerParameter`"}, resume-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 734, :column 7, :end-line 734, :end-column 32, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.resumeTransformFeedback() method of\n  WebGL 2 API resumes a transform feedback operation.\n\n  `void gl.resumeTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback`"}, :name gl.WebGL2RenderingContext/resume-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 734, :end-line 734, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.resumeTransformFeedback() method of\n  WebGL 2 API resumes a transform feedback operation.\n\n  `void gl.resumeTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback`"}, transform-feedback-varyings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 841, :column 7, :end-line 841, :end-column 34, :arglists (quote ([this program varyings buffer-mode])), :doc "Method.\n\n  The WebGL2RenderingContext.transformFeedbackVaryings() method\n  the WebGL 2 API specifies values to record in `gl.WebGLTransformFeedback`\n\n  `void gl.transformFeedbackVaryings(program, varyings, bufferMode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings`"}, :name gl.WebGL2RenderingContext/transform-feedback-varyings, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 34, :method-params ([this program varyings buffer-mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 841, :end-line 841, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this program varyings buffer-mode])), :doc "Method.\n\n  The WebGL2RenderingContext.transformFeedbackVaryings() method\n  the WebGL 2 API specifies values to record in `gl.WebGLTransformFeedback`\n\n  `void gl.transformFeedbackVaryings(program, varyings, bufferMode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings`"}, draw-buffers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 348, :column 7, :end-line 348, :end-column 19, :arglists (quote ([this buffers])), :doc "Method.\n\n  The WebGL2RenderingContext.drawBuffers() method of the WebGL\n  API defines draw buffers to which fragment colors are written\n  The draw buffer settings are part of the state of the currently\n  framebuffer or the drawingbuffer if no framebuffer is bound.\n\n  `void gl.drawBuffers(buffers);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawBuffers`"}, :name gl.WebGL2RenderingContext/draw-buffers, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 19, :method-params ([this buffers]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this buffers])), :doc "Method.\n\n  The WebGL2RenderingContext.drawBuffers() method of the WebGL\n  API defines draw buffers to which fragment colors are written\n  The draw buffer settings are part of the state of the currently\n  framebuffer or the drawingbuffer if no framebuffer is bound.\n\n  `void gl.drawBuffers(buffers);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/drawBuffers`"}, wait-sync {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 1076, :column 7, :end-line 1076, :end-column 16, :arglists (quote ([this sync flags timeout])), :doc "Method.\n\n  The WebGL2RenderingContext.waitSync() method of the WebGL 2 API\n  immediately, but waits on the GL server until the given `gl.WebGLSync`\n  is signaled.\n\n  `void gl.waitSync(sync, flags, timeout);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/waitSync`"}, :name gl.WebGL2RenderingContext/wait-sync, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 16, :method-params ([this sync flags timeout]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1076, :end-line 1076, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this sync flags timeout])), :doc "Method.\n\n  The WebGL2RenderingContext.waitSync() method of the WebGL 2 API\n  immediately, but waits on the GL server until the given `gl.WebGLSync`\n  is signaled.\n\n  `void gl.waitSync(sync, flags, timeout);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/waitSync`"}, begin-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 19, :column 7, :end-line 19, :end-column 31, :arglists (quote ([this primitive-mode])), :doc "Method.\n\n  The WebGL2RenderingContext.beginTransformFeedback() method of\n  WebGL 2 API starts a transform feedback operation.\n\n  `void gl.beginTransformFeedback(primitiveMode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback`"}, :name gl.WebGL2RenderingContext/begin-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 31, :method-params ([this primitive-mode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this primitive-mode])), :doc "Method.\n\n  The WebGL2RenderingContext.beginTransformFeedback() method of\n  WebGL 2 API starts a transform feedback operation.\n\n  `void gl.beginTransformFeedback(primitiveMode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback`"}, sampler-parameterf {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 759, :column 7, :end-line 759, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.samplerParameter[if]() methods of\n  WebGL 2 API set `gl.WebGLSampler` parameters.\n\n  `void gl.samplerParameteri(sampler, pname, param);\n  void gl.samplerParameterf(sampler, pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/sampler-parameterf, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 759, :end-line 759, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.samplerParameter[if]() methods of\n  WebGL 2 API set `gl.WebGLSampler` parameters.\n\n  `void gl.samplerParameteri(sampler, pname, param);\n  void gl.samplerParameterf(sampler, pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter`"}, copy-buffer-sub-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 199, :column 7, :end-line 199, :end-column 27, :arglists (quote ([this read-target write-target read-offset write-offset size])), :doc "Method.\n\n  The WebGL2RenderingContext.copyBufferSubData() method of the\n  2 API copies part of the data of a buffer to another buffer.\n\n  `void gl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyBufferSubData`"}, :name gl.WebGL2RenderingContext/copy-buffer-sub-data, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 27, :method-params ([this read-target write-target read-offset write-offset size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this read-target write-target read-offset write-offset size])), :doc "Method.\n\n  The WebGL2RenderingContext.copyBufferSubData() method of the\n  2 API copies part of the data of a buffer to another buffer.\n\n  `void gl.copyBufferSubData(readTarget, writeTarget, readOffset, writeOffset, size);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/copyBufferSubData`"}, fence-sync {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 411, :column 7, :end-line 411, :end-column 17, :arglists (quote ([this condition flags])), :doc "Method.\n\n  The WebGL2RenderingContext.fenceSync() method of the WebGL 2\n  creates a new `gl.WebGLSync` object and inserts it into the GL\n  stream.\n\n  `WebGLSync gl.fenceSync(condition, flags);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/fenceSync`"}, :name gl.WebGL2RenderingContext/fence-sync, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 17, :method-params ([this condition flags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this condition flags])), :doc "Method.\n\n  The WebGL2RenderingContext.fenceSync() method of the WebGL 2\n  creates a new `gl.WebGLSync` object and inserts it into the GL\n  stream.\n\n  `WebGLSync gl.fenceSync(condition, flags);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/fenceSync`"}, compressed-tex-sub-image-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 183, :column 7, :end-line 183, :end-column 34, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.compressedTexSubImage3D() method of\n  WebGL API specifies a three-dimensional sub-rectangle for a texture\n  in a compressed format.\n\n  `// read from the buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset);\n\n  void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/compressed-tex-sub-image-3d, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.compressedTexSubImage3D() method of\n  WebGL API specifies a three-dimensional sub-rectangle for a texture\n  in a compressed format.\n\n  `// read from the buffer bound to gl.PIXEL_UNPACK_BUFFER\n  void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, offset);\n\n  void gl.compressedTexSubImage3D(target, level, xoffset, yoffset, zoffset, width, height, depth, format, ArrayBufferView srcData, optional srcOffset, optional srcLengthOverride);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D`"}, tex-storage-2d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 792, :column 7, :end-line 792, :end-column 21, :arglists (quote ([this target levels internalformat width height])), :doc "Method.\n\n  The WebGL2RenderingContext.texStorage2D() method of the WebGL\n  specifies all levels of two-dimensional texture storage.\n\n  `void gl.texStorage2D(target, levels, internalformat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage2D`"}, :name gl.WebGL2RenderingContext/tex-storage-2d, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 21, :method-params ([this target levels internalformat width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 792, :end-line 792, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this target levels internalformat width height])), :doc "Method.\n\n  The WebGL2RenderingContext.texStorage2D() method of the WebGL\n  specifies all levels of two-dimensional texture storage.\n\n  `void gl.texStorage2D(target, levels, internalformat, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texStorage2D`"}, uniform-block-binding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 961, :column 7, :end-line 961, :end-column 28, :arglists (quote ([this program uniform-block-index uniform-block-binding])), :doc "Method.\n\n  The WebGL2RenderingContext.uniformBlockBinding() method of the\n  2 API assigns binding points for active uniform blocks.\n\n  `void gl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding`"}, :name gl.WebGL2RenderingContext/uniform-block-binding, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this program uniform-block-index uniform-block-binding]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 961, :end-line 961, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this program uniform-block-index uniform-block-binding])), :doc "Method.\n\n  The WebGL2RenderingContext.uniformBlockBinding() method of the\n  2 API assigns binding points for active uniform blocks.\n\n  `void gl.uniformBlockBinding(program, uniformBlockIndex, uniformBlockBinding);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding`"}, bind-buffer-base {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 31, :column 7, :end-line 31, :end-column 23, :arglists (quote ([this target index buffer])), :doc "Method.\n\n  The WebGL2RenderingContext.bindBufferBase() method of the WebGL\n  API binds a given `gl.WebGLBuffer` to a given binding point (target)\n  a given index.\n\n  `void gl.bindBufferBase(target, index, buffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferBase`"}, :name gl.WebGL2RenderingContext/bind-buffer-base, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 23, :method-params ([this target index buffer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this target index buffer])), :doc "Method.\n\n  The WebGL2RenderingContext.bindBufferBase() method of the WebGL\n  API binds a given `gl.WebGLBuffer` to a given binding point (target)\n  a given index.\n\n  `void gl.bindBufferBase(target, index, buffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferBase`"}, pause-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 695, :column 7, :end-line 695, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.pauseTransformFeedback() method of\n  WebGL 2 API pauses a transform feedback operation.\n\n  `void gl.pauseTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback`"}, :name gl.WebGL2RenderingContext/pause-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 695, :end-line 695, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.pauseTransformFeedback() method of\n  WebGL 2 API pauses a transform feedback operation.\n\n  `void gl.pauseTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback`"}, bind-vertex-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 83, :column 7, :end-line 83, :end-column 24, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.bindVertexArray() method of the WebGL\n  API binds a passed `gl.WebGLVertexArrayObject` object to the\n\n  `void gl.bindVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindVertexArray`"}, :name gl.WebGL2RenderingContext/bind-vertex-array, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 24, :method-params ([this vertex-array]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.bindVertexArray() method of the WebGL\n  API binds a passed `gl.WebGLVertexArrayObject` object to the\n\n  `void gl.bindVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindVertexArray`"}, get-active-uniform-block-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 436, :column 7, :end-line 436, :end-column 36, :arglists (quote ([this program uniform-block-index])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniformBlockName() method\n  the WebGL 2 API retrieves the name of the active uniform block\n  a given index within a `gl.WebGLProgram`.\n\n  `DOMString gl.getActiveUniformBlockName(program, uniformBlockIndex);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName`"}, :name gl.WebGL2RenderingContext/get-active-uniform-block-name, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 36, :method-params ([this program uniform-block-index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program uniform-block-index])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniformBlockName() method\n  the WebGL 2 API retrieves the name of the active uniform block\n  a given index within a `gl.WebGLProgram`.\n\n  `DOMString gl.getActiveUniformBlockName(program, uniformBlockIndex);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName`"}, clear-bufferf {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 110, :column 7, :end-line 110, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/clear-bufferf, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`"}, get-sync-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 561, :column 7, :end-line 561, :end-column 25, :arglists (quote ([this sync pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getSyncParameter() method of the WebGL\n  API returns parameter information of a `gl.WebGLSync` object.\n\n  `any gl.getSyncParameter(sync, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSyncParameter`"}, :name gl.WebGL2RenderingContext/get-sync-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 25, :method-params ([this sync pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 561, :end-line 561, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this sync pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getSyncParameter() method of the WebGL\n  API returns parameter information of a `gl.WebGLSync` object.\n\n  `any gl.getSyncParameter(sync, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getSyncParameter`"}, delete-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 311, :column 7, :end-line 311, :end-column 32, :arglists (quote ([this transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteTransformFeedback() method of\n  WebGL 2 API deletes a given `gl.WebGLTransformFeedback` object.\n\n  `void gl.deleteTransformFeedback(transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback`"}, :name gl.WebGL2RenderingContext/delete-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 32, :method-params ([this transform-feedback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteTransformFeedback() method of\n  WebGL 2 API deletes a given `gl.WebGLTransformFeedback` object.\n\n  `void gl.deleteTransformFeedback(transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback`"}, invalidate-sub-framebuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 622, :column 7, :end-line 622, :end-column 33, :arglists (quote ([this target attachments x y width height])), :doc "Method.\n\n  The WebGL2RenderingContext.invalidateSubFramebuffer() method\n  the WebGL 2 API invalidates portions of the contents of attachments\n  a framebuffer.\n\n  `void gl.invalidateSubFramebuffer(target, attachments, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer`"}, :name gl.WebGL2RenderingContext/invalidate-sub-framebuffer, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 33, :method-params ([this target attachments x y width height]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this target attachments x y width height])), :doc "Method.\n\n  The WebGL2RenderingContext.invalidateSubFramebuffer() method\n  the WebGL 2 API invalidates portions of the contents of attachments\n  a framebuffer.\n\n  `void gl.invalidateSubFramebuffer(target, attachments, x, y, width, height);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer`"}, vertex-attrib-divisor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 1033, :column 7, :end-line 1033, :end-column 28, :arglists (quote ([this index divisor])), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribDivisor() method of the\n  2 API modifies the rate at which generic vertex attributes advance\n  rendering multiple instances of primitives with `web.gl.drawArraysInstanced()`\n  `web.gl.drawElementsInstanced()`.\n\n  `void gl.vertexAttribDivisor(index, divisor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor`"}, :name gl.WebGL2RenderingContext/vertex-attrib-divisor, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this index divisor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :end-line 1033, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this index divisor])), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribDivisor() method of the\n  2 API modifies the rate at which generic vertex attributes advance\n  rendering multiple instances of primitives with `web.gl.drawArraysInstanced()`\n  `web.gl.drawElementsInstanced()`.\n\n  `void gl.vertexAttribDivisor(index, divisor);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor`"}, uniform-matrix-4x-4fv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 1013, :column 7, :end-line 1013, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-matrix-4x-4fv, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1013, :end-line 1013, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`"}, create-vertex-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 261, :column 7, :end-line 261, :end-column 26, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createVertexArray() method of the\n  2 API creates and initializes a `gl.WebGLVertexArrayObject` object\n  represents a vertex array object (VAO) pointing to vertex array\n  and which provides names for different sets of vertex data.\n\n  `WebGLVertexArrayObject gl.createVertexArray();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createVertexArray`"}, :name gl.WebGL2RenderingContext/create-vertex-array, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createVertexArray() method of the\n  2 API creates and initializes a `gl.WebGLVertexArrayObject` object\n  represents a vertex array object (VAO) pointing to vertex array\n  and which provides names for different sets of vertex data.\n\n  `WebGLVertexArrayObject gl.createVertexArray();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createVertexArray`"}, uniform-matrix-2x-2fv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 973, :column 7, :end-line 973, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-matrix-2x-2fv, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 973, :end-line 973, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniformMatrix[234]x[234]fv() methods\n  the WebGL 2 API specify matrix values for uniform variables.\n\n  `void gl.uniformMatrix2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x2fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4x3fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix2x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix3x4fv(location, transpose, data, optional srcOffset, optional srcLength);\n  void gl.uniformMatrix4fv(location, transpose, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniformMatrix`"}, is-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 635, :column 7, :end-line 635, :end-column 15, :arglists (quote ([this query])), :doc "Method.\n\n  The WebGL2RenderingContext.isQuery() method of the WebGL 2 API\n  true if the passed object is a valid `gl.WebGLQuery` object.\n\n  `GLBoolean gl.isQuery(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isQuery`"}, :name gl.WebGL2RenderingContext/is-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 15, :method-params ([this query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this query])), :doc "Method.\n\n  The WebGL2RenderingContext.isQuery() method of the WebGL 2 API\n  true if the passed object is a valid `gl.WebGLQuery` object.\n\n  `GLBoolean gl.isQuery(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isQuery`"}, tex-image-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 772, :column 7, :end-line 772, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGLRenderingContext.texImage3D() method of the WebGL API\n  a three-dimensional texture image.\n\n  `void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, GLintptr offset);\n\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLCanvasElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLImageElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLVideoElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageBitmap source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageData source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView? srcData);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView srcData, srcOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage3D`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/tex-image-3d, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 772, :end-line 772, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGLRenderingContext.texImage3D() method of the WebGL API\n  a three-dimensional texture image.\n\n  `void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, GLintptr offset);\n\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLCanvasElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLImageElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, HTMLVideoElement source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageBitmap source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ImageData source);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView? srcData);\n  void gl.texImage3D(target, level, internalformat, width, height, depth, border, format, type, ArrayBufferView srcData, srcOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/texImage3D`"}, clear-bufferu {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 140, :column 7, :end-line 140, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/clear-bufferu, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`"}, uniform-111 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 853, :column 7, :end-line 853, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-111, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 853, :end-line 853, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`"}, uniform-222 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 880, :column 7, :end-line 880, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-222, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 880, :end-line 880, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`"}, is-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 671, :column 7, :end-line 671, :end-column 28, :arglists (quote ([this transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.isTransformFeedback() method of the\n  2 API returns true if the passed object is a valid `gl.WebGLTransformFeedback`\n\n  `GLboolean gl.isTransformFeedback(transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isTransformFeedback`"}, :name gl.WebGL2RenderingContext/is-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 28, :method-params ([this transform-feedback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 671, :end-line 671, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.isTransformFeedback() method of the\n  2 API returns true if the passed object is a valid `gl.WebGLTransformFeedback`\n\n  `GLboolean gl.isTransformFeedback(transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isTransformFeedback`"}, is-vertex-array {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 683, :column 7, :end-line 683, :end-column 22, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.isVertexArray() method of the WebGL\n  returns true if the passed object is a valid `gl.WebGLVertexArrayObject`\n\n  `GLBoolean gl.isVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isVertexArray`"}, :name gl.WebGL2RenderingContext/is-vertex-array, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 22, :method-params ([this vertex-array]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 683, :end-line 683, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this vertex-array])), :doc "Method.\n\n  The WebGL2RenderingContext.isVertexArray() method of the WebGL\n  returns true if the passed object is a valid `gl.WebGLVertexArrayObject`\n\n  `GLBoolean gl.isVertexArray(vertexArray);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isVertexArray`"}, bind-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 70, :column 7, :end-line 70, :end-column 30, :arglists (quote ([this target transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.bindTransformFeedback() method of\n  WebGL 2 API binds a passed `gl.WebGLTransformFeedback` object\n  the current GL state.\n\n  `void gl.bindTransformFeedback(target, transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback`"}, :name gl.WebGL2RenderingContext/bind-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 30, :method-params ([this target transform-feedback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target transform-feedback])), :doc "Method.\n\n  The WebGL2RenderingContext.bindTransformFeedback() method of\n  WebGL 2 API binds a passed `gl.WebGLTransformFeedback` object\n  the current GL state.\n\n  `void gl.bindTransformFeedback(target, transformFeedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback`"}, get-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 525, :column 7, :end-line 525, :end-column 16, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getQuery() method of the WebGL 2 API\n  the currently active `gl.WebGLQuery` for the target, or `web.null`.\n\n  `WebGLQuery gl.getQuery(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQuery`"}, :name gl.WebGL2RenderingContext/get-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 16, :method-params ([this target pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 525, :end-line 525, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getQuery() method of the WebGL 2 API\n  the currently active `gl.WebGLQuery` for the target, or `web.null`.\n\n  `WebGLQuery gl.getQuery(target, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getQuery`"}, client-wait-sync {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 170, :column 7, :end-line 170, :end-column 23, :arglists (quote ([this sync flags timeout])), :doc "Method.\n\n  The WebGL2RenderingContext.clientWaitSync() method of the WebGL\n  API blocks and waits for a `gl.WebGLSync` object to become signaled\n  a given timeout to be passed.\n\n  `GLenum gl.clientWaitSync(sync, flags, timeout);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clientWaitSync`"}, :name gl.WebGL2RenderingContext/client-wait-sync, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 23, :method-params ([this sync flags timeout]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this sync flags timeout])), :doc "Method.\n\n  The WebGL2RenderingContext.clientWaitSync() method of the WebGL\n  API blocks and waits for a `gl.WebGLSync` object to become signaled\n  a given timeout to be passed.\n\n  `GLenum gl.clientWaitSync(sync, flags, timeout);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clientWaitSync`"}, sampler-parameteri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 746, :column 7, :end-line 746, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.samplerParameter[if]() methods of\n  WebGL 2 API set `gl.WebGLSampler` parameters.\n\n  `void gl.samplerParameteri(sampler, pname, param);\n  void gl.samplerParameterf(sampler, pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/sampler-parameteri, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 746, :end-line 746, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.samplerParameter[if]() methods of\n  WebGL 2 API set `gl.WebGLSampler` parameters.\n\n  `void gl.samplerParameteri(sampler, pname, param);\n  void gl.samplerParameterf(sampler, pname, param);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/samplerParameter`"}, get-buffer-sub-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 474, :column 7, :end-line 474, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.getBufferSubData() method of the WebGL\n  API reads data from a buffer binding point and writes them to\n  `web.ArrayBuffer` or `web.SharedArrayBuffer`.\n\n  `void gl.getBufferSubData(target, srcByteOffset, ArrayBufferView dstData, optional dstOffset, optional length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/get-buffer-sub-data, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.getBufferSubData() method of the WebGL\n  API reads data from a buffer binding point and writes them to\n  `web.ArrayBuffer` or `web.SharedArrayBuffer`.\n\n  `void gl.getBufferSubData(target, srcByteOffset, ArrayBufferView dstData, optional dstOffset, optional length);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getBufferSubData`"}, create-transform-feedback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 249, :column 7, :end-line 249, :end-column 32, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createTransformFeedback() method of\n  WebGL 2 API creates and initializes `gl.WebGLTransformFeedback`\n\n  `WebGLTransformFeedback gl.createTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createTransformFeedback`"}, :name gl.WebGL2RenderingContext/create-transform-feedback, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 249, :end-line 249, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebGL2RenderingContext.createTransformFeedback() method of\n  WebGL 2 API creates and initializes `gl.WebGLTransformFeedback`\n\n  `WebGLTransformFeedback gl.createTransformFeedback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/createTransformFeedback`"}, delete-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 275, :column 7, :end-line 275, :end-column 19, :arglists (quote ([this query])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteQuery() method of the WebGL\n  API deletes a given `gl.WebGLQuery` object.\n\n  `void gl.deleteQuery(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteQuery`"}, :name gl.WebGL2RenderingContext/delete-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 19, :method-params ([this query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this query])), :doc "Method.\n\n  The WebGL2RenderingContext.deleteQuery() method of the WebGL\n  API deletes a given `gl.WebGLQuery` object.\n\n  `void gl.deleteQuery(query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/deleteQuery`"}, blit-framebuffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 95, :column 7, :end-line 95, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.blitFramebuffer() method of the WebGL\n  API transfers a block of pixels from the read framebuffer to\n  draw framebuffer.\n\n  `void gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1,\n  dstX0, dstY0, dstX1, dstY1,\n  mask, filter);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/blitFramebuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/blit-framebuffer, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.blitFramebuffer() method of the WebGL\n  API transfers a block of pixels from the read framebuffer to\n  draw framebuffer.\n\n  `void gl.blitFramebuffer(srcX0, srcY0, srcX1, srcY1,\n  dstX0, dstY0, dstX1, dstY1,\n  mask, filter);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/blitFramebuffer`"}, uniform-333 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 907, :column 7, :end-line 907, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-333, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 907, :end-line 907, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`"}, bind-buffer-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 44, :column 7, :end-line 44, :end-column 24, :arglists (quote ([this target index buffer offset size])), :doc "Method.\n\n  The WebGL2RenderingContext.bindBufferRange() method of the WebGL\n  API binds a range of a given `gl.WebGLBuffer` to a given binding\n  (target) at a given index.\n\n  `void gl.bindBufferRange(target, index, buffer, offset, size);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange`"}, :name gl.WebGL2RenderingContext/bind-buffer-range, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 24, :method-params ([this target index buffer offset size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this target index buffer offset size])), :doc "Method.\n\n  The WebGL2RenderingContext.bindBufferRange() method of the WebGL\n  API binds a range of a given `gl.WebGLBuffer` to a given binding\n  (target) at a given index.\n\n  `void gl.bindBufferRange(target, index, buffer, offset, size);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindBufferRange`"}, get-uniform-indices {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 598, :column 7, :end-line 598, :end-column 26, :arglists (quote ([this program uniform-names])), :doc "Method.\n\n  The WebGL2RenderingContext.getUniformIndices() method of the\n  2 API retrieves the indices of a number of uniforms within a\n\n  `sequence<GLuint> gl.getUniformIndices(program, uniformNames);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformIndices`"}, :name gl.WebGL2RenderingContext/get-uniform-indices, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 26, :method-params ([this program uniform-names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 598, :end-line 598, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program uniform-names])), :doc "Method.\n\n  The WebGL2RenderingContext.getUniformIndices() method of the\n  2 API retrieves the indices of a number of uniforms within a\n\n  `sequence<GLuint> gl.getUniformIndices(program, uniformNames);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformIndices`"}, read-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 707, :column 7, :end-line 707, :end-column 18, :arglists (quote ([this src])), :doc "Method.\n\n  The WebGL2RenderingContext.readBuffer() method of the WebGL 2\n  selects a color buffer as the source for pixels for subsequent\n  to `web.copyTexImage2D`, `web.copyTexSubImage2D`, `web.copyTexSubImage3D`\n  `web.readPixels`.\n\n  `void gl.readBuffer(src);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readBuffer`"}, :name gl.WebGL2RenderingContext/read-buffer, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :method-params ([this src]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 707, :end-line 707, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this src])), :doc "Method.\n\n  The WebGL2RenderingContext.readBuffer() method of the WebGL 2\n  selects a color buffer as the source for pixels for subsequent\n  to `web.copyTexImage2D`, `web.copyTexSubImage2D`, `web.copyTexSubImage3D`\n  `web.readPixels`.\n\n  `void gl.readBuffer(src);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/readBuffer`"}, clear-bufferv {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 155, :column 7, :end-line 155, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/clear-bufferv, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`"}, bind-sampler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 57, :column 7, :end-line 57, :end-column 19, :arglists (quote ([this unit sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.bindSampler() method of the WebGL\n  API binds a passed `gl.WebGLSampler` object to the texture unit\n  the passed index.\n\n  `void gl.bindSampler(unit, sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindSampler`"}, :name gl.WebGL2RenderingContext/bind-sampler, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 19, :method-params ([this unit sampler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this unit sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.bindSampler() method of the WebGL\n  API binds a passed `gl.WebGLSampler` object to the texture unit\n  the passed index.\n\n  `void gl.bindSampler(unit, sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/bindSampler`"}, vertex-attrib-i-pointer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 1063, :column 7, :end-line 1063, :end-column 30, :arglists (quote ([this index size type stride offset])), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribIPointer() method of the\n  2 API specifies integer data formats and locations of vertex\n  in a vertex attributes array.\n\n  `void gl.vertexAttribIPointer(index, size, type, stride, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer`"}, :name gl.WebGL2RenderingContext/vertex-attrib-i-pointer, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 30, :method-params ([this index size type stride offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1063, :end-line 1063, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this index size type stride offset])), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribIPointer() method of the\n  2 API specifies integer data formats and locations of vertex\n  in a vertex attributes array.\n\n  `void gl.vertexAttribIPointer(index, size, type, stride, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer`"}, get-uniform-block-index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 586, :column 7, :end-line 586, :end-column 30, :arglists (quote ([this program uniform-block-name])), :doc "Method.\n\n  The WebGL2RenderingContext.getUniformBlockIndex() method of the\n  2 API retrieves the index of a uniform block within a `gl.WebGLProgram`.\n\n  `GLuint gl.getUniformBlockIndex(program, uniformBlockName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex`"}, :name gl.WebGL2RenderingContext/get-uniform-block-index, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 30, :method-params ([this program uniform-block-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 586, :end-line 586, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this program uniform-block-name])), :doc "Method.\n\n  The WebGL2RenderingContext.getUniformBlockIndex() method of the\n  2 API retrieves the index of a uniform block within a `gl.WebGLProgram`.\n\n  `GLuint gl.getUniformBlockIndex(program, uniformBlockName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex`"}, clear-bufferi {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 125, :column 7, :end-line 125, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/clear-bufferi, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.clearBuffer[fiuv]() methods of the\n  2 API clear buffers from the currently bound framebuffer.\n\n  `void gl.clearBufferfv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferuiv(buffer, drawbuffer, values, optional srcOffset);\n  void gl.clearBufferfi(buffer, drawbuffer, depth, stencil);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/clearBuffer`"}, framebuffer-texture-layer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 424, :column 7, :end-line 424, :end-column 32, :arglists (quote ([this target attachment texture level layer])), :doc "Method.\n\n  The WebGL2RenderingContext.framebufferTextureLayer() method of\n  WebGL 2 API attaches a single layer of a texture to a framebuffer.\n\n  `void gl.framebufferTextureLayer(target, attachment, texture, level, layer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer`"}, :name gl.WebGL2RenderingContext/framebuffer-texture-layer, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 32, :method-params ([this target attachment texture level layer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this target attachment texture level layer])), :doc "Method.\n\n  The WebGL2RenderingContext.framebufferTextureLayer() method of\n  WebGL 2 API attaches a single layer of a texture to a framebuffer.\n\n  `void gl.framebufferTextureLayer(target, attachment, texture, level, layer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer`"}, uniform-444 {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 934, :column 7, :end-line 934, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/uniform-444, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 934, :end-line 934, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.uniform[1234][uif][v]() methods of\n  WebGL API specify values of uniform variables.\n\n  `void gl.uniform1ui(location, v0);\n  void gl.uniform2ui(location, v0, v1);\n  void gl.uniform3ui(location, v0, v1, v2);\n  void gl.uniform4ui(location, v0, v1, v2, v3);\n  void gl.uniform1fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4fv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4iv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform1uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform2uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform3uiv(location, data, optional srcOffset, optional srcLength);\n  void gl.uniform4uiv(location, data, optional srcOffset, optional srcLength);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/uniform`"}, get-active-uniform-block-parameter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 449, :column 7, :end-line 449, :end-column 41, :arglists (quote ([this program uniform-block-index pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniformBlockParameter() method\n  the WebGL 2 API retrieves information about an active uniform\n  within a `gl.WebGLProgram`.\n\n  `any gl.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter`"}, :name gl.WebGL2RenderingContext/get-active-uniform-block-parameter, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 41, :method-params ([this program uniform-block-index pname]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 449, :end-line 449, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this program uniform-block-index pname])), :doc "Method.\n\n  The WebGL2RenderingContext.getActiveUniformBlockParameter() method\n  the WebGL 2 API retrieves information about an active uniform\n  within a `gl.WebGLProgram`.\n\n  `any gl.getActiveUniformBlockParameter(program, uniformBlockIndex, pname);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter`"}, is-sampler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 647, :column 7, :end-line 647, :end-column 17, :arglists (quote ([this sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.isSampler() method of the WebGL 2\n  returns true if the passed object is a valid `gl.WebGLSampler`\n\n  `GLboolean gl.isSampler(sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSampler`"}, :name gl.WebGL2RenderingContext/is-sampler, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 17, :method-params ([this sampler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 647, :end-line 647, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sampler])), :doc "Method.\n\n  The WebGL2RenderingContext.isSampler() method of the WebGL 2\n  returns true if the passed object is a valid `gl.WebGLSampler`\n\n  `GLboolean gl.isSampler(sampler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/isSampler`"}, begin-query {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([this target query])), :doc "Method.\n\n  The WebGL2RenderingContext.beginQuery() method of the WebGL 2\n  starts an asynchronous query. The target parameter indicates\n  kind of query to begin.\n\n  `void gl.beginQuery(target, query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginQuery`"}, :name gl.WebGL2RenderingContext/begin-query, :variadic false, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 18, :method-params ([this target query]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this target query])), :doc "Method.\n\n  The WebGL2RenderingContext.beginQuery() method of the WebGL 2\n  starts an asynchronous query. The target parameter indicates\n  kind of query to begin.\n\n  `void gl.beginQuery(target, query);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/beginQuery`"}, vertex-attrib-i-4uiu {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/gl/WebGL2RenderingContext.cljs", :line 1047, :column 7, :end-line 1047, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribI4[u]i[v]() methods of\n  WebGL 2 API specify integer values for generic vertex attributes.\n\n  `void gl.vertexAttribI4i(index, v0, v1, v2, v3);\n  void gl.vertexAttribI4ui(index, v0, v1, v2, v3);\n\n  void gl.vertexAttribI4iv(index, value);\n  void gl.vertexAttribI4uiv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name gl.WebGL2RenderingContext/vertex-attrib-i-4uiu, :variadic true, :file "src/gl/WebGL2RenderingContext.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 1047, :end-line 1047, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebGL2RenderingContext.vertexAttribI4[u]i[v]() methods of\n  WebGL 2 API specify integer values for generic vertex attributes.\n\n  `void gl.vertexAttribI4i(index, v0, v1, v2, v3);\n  void gl.vertexAttribI4ui(index, v0, v1, v2, v3);\n\n  void gl.vertexAttribI4iv(index, value);\n  void gl.vertexAttribI4uiv(index, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebGL2RenderingContext/vertexAttribI`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WebGL2RenderingContext interface provides the OpenGL ES 3.0\n  context for the drawing surface of an HTML `web.<canvas>` element."}