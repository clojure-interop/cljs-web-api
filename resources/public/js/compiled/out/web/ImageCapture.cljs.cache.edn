{:rename-macros {}, :renames {}, :externs {ImageCapture {}}, :use-macros {}, :excludes #{}, :name web.ImageCapture, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ImageCapture/constructor, :file "src/web/ImageCapture.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The ImageCapture() constructor creates a new `web.ImageCapture` object which creates a new `web.ImageCapture` object.\n\n  videoTrack\n  A `media.MediaStreamTrack` from which the still images will be taken. This can be any source, such as an incoming stream of a video conference, a playing movie, or the stream from a webcam.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/ImageCapture`", :tag js}, get-photo-capabilities {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 19, :column 7, :end-line 19, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The getPhotoCapabilities() method of the `web.ImageCapture` interface\n  a `web.Promise` that resolves with a `web.PhotoCapabilities`\n  containing the ranges of available configuration options.\n\n  `var promise = ImageCapture.getPhotoCapabilities()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/getPhotoCapabilities`"}, :name web.ImageCapture/get-photo-capabilities, :variadic false, :file "src/web/ImageCapture.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getPhotoCapabilities() method of the `web.ImageCapture` interface\n  a `web.Promise` that resolves with a `web.PhotoCapabilities`\n  containing the ranges of available configuration options.\n\n  `var promise = ImageCapture.getPhotoCapabilities()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/getPhotoCapabilities`"}, get-photo-settings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 32, :column 7, :end-line 32, :end-column 25, :arglists (quote ([this])), :doc "Method.\n\n  The getPhotoSettings() property of the `web.ImageCapture` interface\n  a `web.Promise` that resolves with a `web.PhotoSettings` object\n  the current photo configuration settings.\n\n  `var promise = ImageCapture.getPhotoSettings()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/getPhotoSettings`"}, :name web.ImageCapture/get-photo-settings, :variadic false, :file "src/web/ImageCapture.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getPhotoSettings() property of the `web.ImageCapture` interface\n  a `web.Promise` that resolves with a `web.PhotoSettings` object\n  the current photo configuration settings.\n\n  `var promise = ImageCapture.getPhotoSettings()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/getPhotoSettings`"}, grab-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The grabFrame() property of the `web.ImageCapture` interface\n  a snapshot of the live video in a `media.MediaStreamTrack`, returning\n  ImageBitmap, if successful.\n\n  `ImageCapture.grabFrame().then(function(imageBitmap) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/grabFrame`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ImageCapture/grab-frame, :variadic true, :file "src/web/ImageCapture.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The grabFrame() property of the `web.ImageCapture` interface\n  a snapshot of the live video in a `media.MediaStreamTrack`, returning\n  ImageBitmap, if successful.\n\n  `ImageCapture.grabFrame().then(function(imageBitmap) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/grabFrame`"}, take-photo {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 58, :column 7, :end-line 58, :end-column 17, :arglists (quote ([this photo-settings])), :doc "Method.\n\n  The takePhoto() method of the `web.ImageCapture` interface takes\n  single exposure using the video capture device sourcing a `media.MediaStreamTrack`\n  returns a `web.Promise` that resolves with a `web.Blob` containing\n  data.\n\n  `var promise = ImageCapture.takePhoto(photoSettings)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/takePhoto`"}, :name web.ImageCapture/take-photo, :variadic false, :file "src/web/ImageCapture.cljs", :end-column 17, :method-params ([this photo-settings]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this photo-settings])), :doc "Method.\n\n  The takePhoto() method of the `web.ImageCapture` interface takes\n  single exposure using the video capture device sourcing a `media.MediaStreamTrack`\n  returns a `web.Promise` that resolves with a `web.Blob` containing\n  data.\n\n  `var promise = ImageCapture.takePhoto(photoSettings)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/takePhoto`"}, track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 72, :column 7, :end-line 72, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The track read-only property of the `web.ImageCapture` interface\n  a reference to the `media.MediaStreamTrack` passed to the `web.ImageCapture()`\n\n  `var mediaStreamTrack = ImageCapture.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/track`"}, :name web.ImageCapture/track, :variadic false, :file "src/web/ImageCapture.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The track read-only property of the `web.ImageCapture` interface\n  a reference to the `media.MediaStreamTrack` passed to the `web.ImageCapture()`\n\n  `var mediaStreamTrack = ImageCapture.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/track`"}, set-track! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageCapture.cljs", :line 84, :column 7, :end-line 84, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The track read-only property of the `web.ImageCapture` interface\n  a reference to the `media.MediaStreamTrack` passed to the `web.ImageCapture()`\n\n  `var mediaStreamTrack = ImageCapture.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/track`"}, :name web.ImageCapture/set-track!, :variadic false, :file "src/web/ImageCapture.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The track read-only property of the `web.ImageCapture` interface\n  a reference to the `media.MediaStreamTrack` passed to the `web.ImageCapture()`\n\n  `var mediaStreamTrack = ImageCapture.track`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageCapture/track`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ImageCapture interface of the MediaStream Image Capture API\n  methods to enable the capture of images or photos from a camera\n  other photographic device provides an interface for capturing\n  from a photographic device referenced through a valid `media.MediaStreamTrack`."}