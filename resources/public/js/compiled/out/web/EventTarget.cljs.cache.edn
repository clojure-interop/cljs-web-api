{:rename-macros {}, :renames {}, :externs {EventTarget {}}, :use-macros {}, :excludes #{}, :name web.EventTarget, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.EventTarget/constructor, :file "src/web/EventTarget.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventTarget.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The EventTarget() constructor creates a new `web.EventTarget` object instance.\n\n  None.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/EventTarget`", :tag js}, add-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventTarget.cljs", :line 16, :column 7, :end-line 16, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.EventTarget/add-event-listener, :variadic true, :file "src/web/EventTarget.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`"}, dispatch-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventTarget.cljs", :line 30, :column 7, :end-line 30, :end-column 21, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, :name web.EventTarget/dispatch-event, :variadic false, :file "src/web/EventTarget.cljs", :end-column 21, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, remove-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventTarget.cljs", :line 44, :column 7, :end-line 44, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.EventTarget/remove-event-listener, :variadic true, :file "src/web/EventTarget.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "EventTarget is a DOM interface implemented by objects that can\n  events and may have listeners for them."}