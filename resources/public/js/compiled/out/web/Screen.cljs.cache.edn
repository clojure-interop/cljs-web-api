{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Screen, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {moz-brightness {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 251, :column 7, :end-line 251, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  Indicates how bright the screen's backlight is, on a scale from\n  (very dim) to 1 (full brightness); this value is a double-precision\n\n  `let screenBrightness = window.screen.mozBrightness;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness`"}, :name web.Screen/moz-brightness, :variadic false, :file "src/web/Screen.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Indicates how bright the screen's backlight is, on a scale from\n  (very dim) to 1 (full brightness); this value is a double-precision\n\n  `let screenBrightness = window.screen.mozBrightness;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness`"}, set-avail-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 165, :column 7, :end-line 165, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.availWidth property returns the amount of horizontal\n  (in pixels) available to the window.\n\n  `var width = window.screen.availWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth`"}, :name web.Screen/set-avail-width!, :variadic false, :file "src/web/Screen.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.availWidth property returns the amount of horizontal\n  (in pixels) available to the window.\n\n  `var width = window.screen.availWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth`"}, avail-left {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 105, :column 7, :end-line 105, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  Returns the first available pixel available from the left side\n  the screen.\n\n  `let availLeft = window.screen.availLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft`"}, :name web.Screen/avail-left, :variadic false, :file "src/web/Screen.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the first available pixel available from the left side\n  the screen.\n\n  `let availLeft = window.screen.availLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft`"}, set-color-depth! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 190, :column 7, :end-line 190, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.colorDepth read-only property returns the color depth\n  the screen. Per the CSSOM, some implementations return 24 for\n  reasons. See the browser compatibility section for those that\n\n  `bitDepth = window.screen.colorDepth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth`"}, :name web.Screen/set-color-depth!, :variadic false, :file "src/web/Screen.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.colorDepth read-only property returns the color depth\n  the screen. Per the CSSOM, some implementations return 24 for\n  reasons. See the browser compatibility section for those that\n\n  `bitDepth = window.screen.colorDepth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 400, :column 7, :end-line 400, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the width of the screen.\n\n  `lWidth = window.screen.width`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/width`"}, :name web.Screen/set-width!, :variadic false, :file "src/web/Screen.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the width of the screen.\n\n  `lWidth = window.screen.width`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/width`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 203, :column 7, :end-line 203, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.height read-only property returns the height of the\n  in pixels.\n\n  `var height = window.screen.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/height`"}, :name web.Screen/height, :variadic false, :file "src/web/Screen.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.height read-only property returns the height of the\n  in pixels.\n\n  `var height = window.screen.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/height`"}, color-depth {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 177, :column 7, :end-line 177, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.colorDepth read-only property returns the color depth\n  the screen. Per the CSSOM, some implementations return 24 for\n  reasons. See the browser compatibility section for those that\n\n  `bitDepth = window.screen.colorDepth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth`"}, :name web.Screen/color-depth, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.colorDepth read-only property returns the color depth\n  the screen. Per the CSSOM, some implementations return 24 for\n  reasons. See the browser compatibility section for those that\n\n  `bitDepth = window.screen.colorDepth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/colorDepth`"}, unlock-orientation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 19, :column 7, :end-line 19, :end-column 25, :arglists (quote ([this])), :doc "Method.\n\n  The Screen.unlockOrientation() method removes all the previous\n  locks set by the page/app. The `web.ScreenOrientation.unlock()`\n  should be used instead.\n\n  `var unlocked = window.screen.unlockOrientation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/unlockOrientation`"}, :name web.Screen/unlock-orientation, :variadic false, :file "src/web/Screen.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Screen.unlockOrientation() method removes all the previous\n  locks set by the page/app. The `web.ScreenOrientation.unlock()`\n  should be used instead.\n\n  `var unlocked = window.screen.unlockOrientation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/unlockOrientation`"}, left {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 227, :column 7, :end-line 227, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  Returns the distance in pixels from the left side of the main\n  to the left side of the current screen.\n\n  `var left = window.screen.left;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/left`"}, :name web.Screen/left, :variadic false, :file "src/web/Screen.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the distance in pixels from the left side of the main\n  to the left side of the current screen.\n\n  `var left = window.screen.left;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/left`"}, set-top! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 378, :column 7, :end-line 378, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the distance in pixels from the top side of the current\n\n  `let top = window.screen.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/top`"}, :name web.Screen/set-top!, :variadic false, :file "src/web/Screen.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 378, :end-line 378, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the distance in pixels from the top side of the current\n\n  `let top = window.screen.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/top`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 215, :column 7, :end-line 215, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.height read-only property returns the height of the\n  in pixels.\n\n  `var height = window.screen.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/height`"}, :name web.Screen/set-height!, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Screen.height read-only property returns the height of the\n  in pixels.\n\n  `var height = window.screen.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/height`"}, remove-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 46, :column 7, :end-line 46, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Screen/remove-event-listener, :variadic true, :file "src/web/Screen.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`"}, pixel-depth {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 341, :column 7, :end-line 341, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  Returns the bit depth of the screen. Per the CSSOM, some implementations\n  24 for compatibility reasons. See the browser compatibility section\n  those that don't.\n\n  `let depth = window.screen.pixelDepth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth`"}, :name web.Screen/pixel-depth, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the bit depth of the screen. Per the CSSOM, some implementations\n  24 for compatibility reasons. See the browser compatibility section\n  those that don't.\n\n  `let depth = window.screen.pixelDepth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth`"}, set-avail-left! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 117, :column 7, :end-line 117, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the first available pixel available from the left side\n  the screen.\n\n  `let availLeft = window.screen.availLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft`"}, :name web.Screen/set-avail-left!, :variadic false, :file "src/web/Screen.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the first available pixel available from the left side\n  the screen.\n\n  `let availLeft = window.screen.availLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availLeft`"}, set-left! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 239, :column 7, :end-line 239, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the distance in pixels from the left side of the main\n  to the left side of the current screen.\n\n  `var left = window.screen.left;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/left`"}, :name web.Screen/set-left!, :variadic false, :file "src/web/Screen.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the distance in pixels from the left side of the main\n  to the left side of the current screen.\n\n  `var left = window.screen.left;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/left`"}, avail-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 153, :column 7, :end-line 153, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.availWidth property returns the amount of horizontal\n  (in pixels) available to the window.\n\n  `var width = window.screen.availWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth`"}, :name web.Screen/avail-width, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Screen.availWidth property returns the amount of horizontal\n  (in pixels) available to the window.\n\n  `var width = window.screen.availWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availWidth`"}, lock-orientation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 6, :column 7, :end-line 6, :end-column 23, :arglists (quote ([this orientation])), :doc "Method.\n\n  The lockOrientation() method of the `web.Screen` interface locks\n  screen into a specified orientation. The `web.ScreenOrientation.lock()`\n  should be used instead.\n\n  `lockAllowed = window.screen.lockOrientation(orientation);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation`"}, :name web.Screen/lock-orientation, :variadic false, :file "src/web/Screen.cljs", :end-column 23, :method-params ([this orientation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this orientation])), :doc "Method.\n\n  The lockOrientation() method of the `web.Screen` interface locks\n  screen into a specified orientation. The `web.ScreenOrientation.lock()`\n  should be used instead.\n\n  `lockAllowed = window.screen.lockOrientation(orientation);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/lockOrientation`"}, set-moz-brightness! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 263, :column 7, :end-line 263, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates how bright the screen's backlight is, on a scale from\n  (very dim) to 1 (full brightness); this value is a double-precision\n\n  `let screenBrightness = window.screen.mozBrightness;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness`"}, :name web.Screen/set-moz-brightness!, :variadic false, :file "src/web/Screen.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates how bright the screen's backlight is, on a scale from\n  (very dim) to 1 (full brightness); this value is a double-precision\n\n  `let screenBrightness = window.screen.mozBrightness;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozBrightness`"}, avail-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 77, :column 7, :end-line 77, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.Screen` interface's availHeight property returns\n  height, in CSS pixels, of the space available for Web content\n  the screen. Since `web.Screen` is exposed on the `web.Window`\n  `web.window.screen` property, you access availHeight using window.screen.availHeight.\n\n  `let availHeight = window.screen.availHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight`"}, :name web.Screen/avail-height, :variadic false, :file "src/web/Screen.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.Screen` interface's availHeight property returns\n  height, in CSS pixels, of the space available for Web content\n  the screen. Since `web.Screen` is exposed on the `web.Window`\n  `web.window.screen` property, you access availHeight using window.screen.availHeight.\n\n  `let availHeight = window.screen.availHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight`"}, set-onorientationchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 314, :column 7, :end-line 314, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the orientationchange events sent to the\n  object. The `web.ScreenOrientation.onchange` handler should be\n  instead.\n\n  `screen.onorientationchange = funcRef;\n\n  Where funcRef is a reference to a function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/onorientationchange`"}, :name web.Screen/set-onorientationchange!, :variadic false, :file "src/web/Screen.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the orientationchange events sent to the\n  object. The `web.ScreenOrientation.onchange` handler should be\n  instead.\n\n  `screen.onorientationchange = funcRef;\n\n  Where funcRef is a reference to a function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/onorientationchange`"}, top {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 367, :column 7, :end-line 367, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  Returns the distance in pixels from the top side of the current\n\n  `let top = window.screen.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/top`"}, :name web.Screen/top, :variadic false, :file "src/web/Screen.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the distance in pixels from the top side of the current\n\n  `let top = window.screen.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/top`"}, set-pixel-depth! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 354, :column 7, :end-line 354, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the bit depth of the screen. Per the CSSOM, some implementations\n  24 for compatibility reasons. See the browser compatibility section\n  those that don't.\n\n  `let depth = window.screen.pixelDepth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth`"}, :name web.Screen/set-pixel-depth!, :variadic false, :file "src/web/Screen.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 354, :end-line 354, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the bit depth of the screen. Per the CSSOM, some implementations\n  24 for compatibility reasons. See the browser compatibility section\n  those that don't.\n\n  `let depth = window.screen.pixelDepth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/pixelDepth`"}, set-avail-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 91, :column 7, :end-line 91, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `web.Screen` interface's availHeight property returns\n  height, in CSS pixels, of the space available for Web content\n  the screen. Since `web.Screen` is exposed on the `web.Window`\n  `web.window.screen` property, you access availHeight using window.screen.availHeight.\n\n  `let availHeight = window.screen.availHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight`"}, :name web.Screen/set-avail-height!, :variadic false, :file "src/web/Screen.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `web.Screen` interface's availHeight property returns\n  height, in CSS pixels, of the space available for Web content\n  the screen. Since `web.Screen` is exposed on the `web.Window`\n  `web.window.screen` property, you access availHeight using window.screen.availHeight.\n\n  `let availHeight = window.screen.availHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availHeight`"}, avail-top {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 129, :column 7, :end-line 129, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  Specifies the y-coordinate of the first pixel that is not allocated\n  permanent or semipermanent user interface features.\n\n  `let availTop = window.screen.availTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop`"}, :name web.Screen/avail-top, :variadic false, :file "src/web/Screen.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Specifies the y-coordinate of the first pixel that is not allocated\n  permanent or semipermanent user interface features.\n\n  `let availTop = window.screen.availTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop`"}, add-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 32, :column 7, :end-line 32, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Screen/add-event-listener, :variadic true, :file "src/web/Screen.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`"}, orientation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 329, :column 7, :end-line 329, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The orientation read-only property of the `web.Screen` interface\n  the current orientation of the screen.\n\n  `var orientation = window.screen.orientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation`"}, :name web.Screen/orientation, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The orientation read-only property of the `web.Screen` interface\n  the current orientation of the screen.\n\n  `var orientation = window.screen.orientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/orientation`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 389, :column 7, :end-line 389, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  Returns the width of the screen.\n\n  `lWidth = window.screen.width`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/width`"}, :name web.Screen/width, :variadic false, :file "src/web/Screen.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the width of the screen.\n\n  `lWidth = window.screen.width`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/width`"}, onorientationchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 299, :column 7, :end-line 299, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for the orientationchange events sent to the\n  object. The `web.ScreenOrientation.onchange` handler should be\n  instead.\n\n  `screen.onorientationchange = funcRef;\n\n  Where funcRef is a reference to a function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/onorientationchange`"}, :name web.Screen/onorientationchange, :variadic false, :file "src/web/Screen.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for the orientationchange events sent to the\n  object. The `web.ScreenOrientation.onchange` handler should be\n  instead.\n\n  `screen.onorientationchange = funcRef;\n\n  Where funcRef is a reference to a function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/onorientationchange`"}, set-moz-enabled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 287, :column 7, :end-line 287, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  This Boolean attribute controls the device's screen. Setting\n  to false will turn off the screen.\n\n  `let screenEnabled = window.screen.mozEnabled`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled`"}, :name web.Screen/set-moz-enabled!, :variadic false, :file "src/web/Screen.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  This Boolean attribute controls the device's screen. Setting\n  to false will turn off the screen.\n\n  `let screenEnabled = window.screen.mozEnabled`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled`"}, set-avail-top! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 141, :column 7, :end-line 141, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies the y-coordinate of the first pixel that is not allocated\n  permanent or semipermanent user interface features.\n\n  `let availTop = window.screen.availTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop`"}, :name web.Screen/set-avail-top!, :variadic false, :file "src/web/Screen.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies the y-coordinate of the first pixel that is not allocated\n  permanent or semipermanent user interface features.\n\n  `let availTop = window.screen.availTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/availTop`"}, moz-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 275, :column 7, :end-line 275, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  This Boolean attribute controls the device's screen. Setting\n  to false will turn off the screen.\n\n  `let screenEnabled = window.screen.mozEnabled`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled`"}, :name web.Screen/moz-enabled, :variadic false, :file "src/web/Screen.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  This Boolean attribute controls the device's screen. Setting\n  to false will turn off the screen.\n\n  `let screenEnabled = window.screen.mozEnabled`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Screen/mozEnabled`"}, dispatch-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Screen.cljs", :line 63, :column 7, :end-line 63, :end-column 21, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, :name web.Screen/dispatch-event, :variadic false, :file "src/web/Screen.cljs", :end-column 21, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Screen interface represents a screen, usually the one on\n  the current window is being rendered, and is obtained using `web.window.screen`."}