{:rename-macros {}, :renames {}, :externs {BroadcastChannel {}}, :use-macros {}, :excludes #{name}, :name web.BroadcastChannel, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.BroadcastChannel/constructor, :file "src/web/BroadcastChannel.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The BroadcastChannel() constructor creates a new `web.BroadcastChannel` and connects it to the underlying channel.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/BroadcastChannel`", :tag js}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The BroadcastChannel.close() terminates the connection to the\n  channel, allowing the object to be garbage collected. This is\n  necessary step to perform as there is no other way for a browser\n  know that this channel is not needed anymore.\n\n  `var str = channel.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close`"}, :name web.BroadcastChannel/close, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The BroadcastChannel.close() terminates the connection to the\n  channel, allowing the object to be garbage collected. This is\n  necessary step to perform as there is no other way for a browser\n  know that this channel is not needed anymore.\n\n  `var str = channel.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/close`"}, post-message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([this object])), :doc "Method.\n\n  The BroadcastChannel.postMessage() sends a message, which can\n  of any kind of `web.Object`, to each listener in any browsing\n  with the same origin. The message is transmitted as a message\n  targeted at each BroadcastChannel bound to the channel.\n\n  `var str = channel.postMessage(object);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage`"}, :name web.BroadcastChannel/post-message, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 19, :method-params ([this object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this object])), :doc "Method.\n\n  The BroadcastChannel.postMessage() sends a message, which can\n  of any kind of `web.Object`, to each listener in any browsing\n  with the same origin. The message is transmitted as a message\n  targeted at each BroadcastChannel bound to the channel.\n\n  `var str = channel.postMessage(object);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/postMessage`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 45, :column 7, :end-line 45, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only BroadcastChannel.name property returns a `dom.DOMString`,\n  uniquely identifies the given channel with its name. This name\n  passed to the `web.BroadcastChannel()` constructor at creation\n  and is therefore read-only.\n\n  `var str = channel.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name`"}, :name web.BroadcastChannel/name, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only BroadcastChannel.name property returns a `dom.DOMString`,\n  uniquely identifies the given channel with its name. This name\n  passed to the `web.BroadcastChannel()` constructor at creation\n  and is therefore read-only.\n\n  `var str = channel.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/name`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 59, :column 7, :end-line 59, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The BroadcastChannel.onmessage event handler is a property that\n  the function to execute when a message event, of type `web.MessageEvent`,\n  received by this `web.BroadcastChannel`. Such an event is sent\n  the browser with a message broadcasted to the channel.\n\n  `channel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage`"}, :name web.BroadcastChannel/onmessage, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The BroadcastChannel.onmessage event handler is a property that\n  the function to execute when a message event, of type `web.MessageEvent`,\n  received by this `web.BroadcastChannel`. Such an event is sent\n  the browser with a message broadcasted to the channel.\n\n  `channel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 73, :column 7, :end-line 73, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The BroadcastChannel.onmessage event handler is a property that\n  the function to execute when a message event, of type `web.MessageEvent`,\n  received by this `web.BroadcastChannel`. Such an event is sent\n  the browser with a message broadcasted to the channel.\n\n  `channel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage`"}, :name web.BroadcastChannel/set-onmessage!, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The BroadcastChannel.onmessage event handler is a property that\n  the function to execute when a message event, of type `web.MessageEvent`,\n  received by this `web.BroadcastChannel`. Such an event is sent\n  the browser with a message broadcasted to the channel.\n\n  `channel.onmessage = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessage`"}, onmessageerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 87, :column 7, :end-line 87, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.BroadcastChannel`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the BroadcastChannel instance 窶能n  is, when it receives a message that cannot be deserialized.\n\n  `bc.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror`"}, :name web.BroadcastChannel/onmessageerror, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.BroadcastChannel`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the BroadcastChannel instance 窶能n  is, when it receives a message that cannot be deserialized.\n\n  `bc.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror`"}, set-onmessageerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BroadcastChannel.cljs", :line 101, :column 7, :end-line 101, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.BroadcastChannel`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the BroadcastChannel instance 窶能n  is, when it receives a message that cannot be deserialized.\n\n  `bc.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror`"}, :name web.BroadcastChannel/set-onmessageerror!, :variadic false, :file "src/web/BroadcastChannel.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.BroadcastChannel`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the BroadcastChannel instance 窶能n  is, when it receives a message that cannot be deserialized.\n\n  `bc.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BroadcastChannel/onmessageerror`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The BroadcastChannel interface represents a named channel that\n  browsing context of a given origin can subscribe to. It allows\n  between different documents (in different windows, tabs, frames\n  iframes) of the same origin. Messages are broadcasted via a message\n  fired at all BroadcastChannel objects listening to the channel."}