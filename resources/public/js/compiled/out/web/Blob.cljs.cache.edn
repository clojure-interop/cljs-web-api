{:rename-macros {}, :renames {}, :externs {Blob {}}, :use-macros {}, :excludes #{type}, :name web.Blob, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.Blob/constructor, :file "src/web/Blob.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The Blob() constructor returns a new `web.Blob` object. The content of the blob consists of the concatenation of the values given in the parameter array.\n\n  array is an `web.Array` of `web.ArrayBuffer`, `web.ArrayBufferView`, `web.Blob`, `dom.DOMString` objects, or a mix of any of such objects, that will be put inside the `web.Blob`. DOMStrings are encoded as UTF-8.\n  options is an optional BlobPropertyBag dictionary which may specify the following two attributes:\n\n  type, with a default value of \\\"\\\", that represents the MIME type of the content of the array that will be put in the blob.\n  endings, with a default value of \\\"transparent\\\", that specifies how strings containing the line ending character \\\\n are to be written out. It is one of the two values: \\\"native\\\", meaning that line ending characters are changed to match host OS filesystem convention, or \\\"transparent\\\", meaning that endings are stored in the blob without change.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob`", :tag js}, slice {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The Blob.slice() method is used to create a new `web.Blob` object\n  the data in the specified range of bytes of the source `web.Blob`.\n\n  `var blob = instanceOfBlob.slice([start [, end [, contentType]]]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Blob/slice, :variadic true, :file "src/web/Blob.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Blob.slice() method is used to create a new `web.Blob` object\n  the data in the specified range of bytes of the source `web.Blob`.\n\n  `var blob = instanceOfBlob.slice([start [, end [, contentType]]]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice`"}, stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The stream() method of the `web.Blob` interface transforms a\n  into a `web.ReadableStream` of its data.\n\n  `var stream = blob.stream();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream`"}, :name web.Blob/stream, :variadic false, :file "src/web/Blob.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stream() method of the `web.Blob` interface transforms a\n  into a `web.ReadableStream` of its data.\n\n  `var stream = blob.stream();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream`"}, text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 46, :column 7, :end-line 46, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n\n\n  `blob.text().then(function (text) {\n  // do something with the text\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/text`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Blob/text, :variadic true, :file "src/web/Blob.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n\n\n  `blob.text().then(function (text) {\n  // do something with the text\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/text`"}, array-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 59, :column 7, :end-line 59, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The arrayBuffer() method of the `web.Blob` interface is used\n  read the contents of a Blob as binary data. It returns a promise\n  resolves with an `web.ArrayBuffer`.\n\n  `blob.arrayBuffer().then(function (buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Blob/array-buffer, :variadic true, :file "src/web/Blob.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The arrayBuffer() method of the `web.Blob` interface is used\n  read the contents of a Blob as binary data. It returns a promise\n  resolves with an `web.ArrayBuffer`.\n\n  `blob.arrayBuffer().then(function (buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/arrayBuffer`"}, size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 74, :column 7, :end-line 74, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The Blob.size property returns the size in bytes of the `web.Blob`\n  a `file.File`.\n\n  `var sizeInBytes = blob.size`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/size`"}, :name web.Blob/size, :variadic false, :file "src/web/Blob.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Blob.size property returns the size in bytes of the `web.Blob`\n  a `file.File`.\n\n  `var sizeInBytes = blob.size`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/size`"}, set-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The Blob.size property returns the size in bytes of the `web.Blob`\n  a `file.File`.\n\n  `var sizeInBytes = blob.size`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/size`"}, :name web.Blob/set-size!, :variadic false, :file "src/web/Blob.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Blob.size property returns the size in bytes of the `web.Blob`\n  a `file.File`.\n\n  `var sizeInBytes = blob.size`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/size`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 98, :column 7, :end-line 98, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type property of a `web.Blob` object provides the MIME type\n  the file. It returns an empty string if the type couldn't determined.\n\n  `var mimetype = instanceOfFile.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/type`"}, :name web.Blob/type, :variadic false, :file "src/web/Blob.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type property of a `web.Blob` object provides the MIME type\n  the file. It returns an empty string if the type couldn't determined.\n\n  `var mimetype = instanceOfFile.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/type`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Blob.cljs", :line 110, :column 7, :end-line 110, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type property of a `web.Blob` object provides the MIME type\n  the file. It returns an empty string if the type couldn't determined.\n\n  `var mimetype = instanceOfFile.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/type`"}, :name web.Blob/set-type!, :variadic false, :file "src/web/Blob.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type property of a `web.Blob` object provides the MIME type\n  the file. It returns an empty string if the type couldn't determined.\n\n  `var mimetype = instanceOfFile.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Blob/type`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A Blob object represents a file-like object of immutable, raw\n  Blobs represent data that isn't necessarily in a JavaScript-native\n  The `file.File` interface is based on Blob, inheriting blob functionality\n  expanding it to support files on the user's system."}