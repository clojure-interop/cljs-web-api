{:rename-macros {}, :renames {}, :externs {Animation {}}, :use-macros {}, :excludes #{reverse}, :name web.Animation, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {effect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 127, :column 7, :end-line 127, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.effect property of the Web Animations API gets\n  sets the target effect of an animation. The target effect may\n  either an effect object of a type based on `web.AnimationEffectReadOnly`,\n  as `web.KeyframeEffect`, or null.\n\n  `var effect = Animation.effect;\n\n  Animation.effect = AnimationEffectReadOnly`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect`"}, :name web.Animation/effect, :variadic false, :file "src/web/Animation.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.effect property of the Web Animations API gets\n  sets the target effect of an animation. The target effect may\n  either an effect object of a type based on `web.AnimationEffectReadOnly`,\n  as `web.KeyframeEffect`, or null.\n\n  `var effect = Animation.effect;\n\n  Animation.effect = AnimationEffectReadOnly`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect`"}, timeline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 413, :column 7, :end-line 413, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.timeline property of the `web.Animation` interface\n  or sets the `web.timeline` associated with this animation. A\n  is a source of time values for synchronization purposes, and\n  an `web.AnimationTimeline`-based object. By default, the animation's\n  and the `web.Document`'s timeline are the same.\n\n  `var animationsTimeline = Animation.timeline;\n\n  Animation.timeline = newTimeline;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline`"}, :name web.Animation/timeline, :variadic false, :file "src/web/Animation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.timeline property of the `web.Animation` interface\n  or sets the `web.timeline` associated with this animation. A\n  is a source of time values for synchronization purposes, and\n  an `web.AnimationTimeline`-based object. By default, the animation's\n  and the `web.Document`'s timeline are the same.\n\n  `var animationsTimeline = Animation.timeline;\n\n  Animation.timeline = newTimeline;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline`"}, play {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 58, :column 7, :end-line 58, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The play() method of the Web Animations API's `web.Animation`\n  starts or resumes playing of an animation. If the animation is\n  calling play() restarts the animation, playing it from the beginning.\n\n  `animation.play();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/play`"}, :name web.Animation/play, :variadic false, :file "src/web/Animation.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The play() method of the Web Animations API's `web.Animation`\n  starts or resumes playing of an animation. If the animation is\n  calling play() restarts the animation, playing it from the beginning.\n\n  `animation.play();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/play`"}, reverse {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 71, :column 7, :end-line 71, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The Animation.reverse() method of the `web.Animation` Interface\n  the playback direction, meaning the animation ends at its beginning.\n  called on an unplayed animation, the whole animation is played\n  If called on a paused animation, the animation will continue\n  reverse.\n\n  `animation.reverse();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/reverse`"}, :name web.Animation/reverse, :variadic false, :file "src/web/Animation.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Animation.reverse() method of the `web.Animation` Interface\n  the playback direction, meaning the animation ends at its beginning.\n  called on an unplayed animation, the whole animation is played\n  If called on a paused animation, the animation will continue\n  reverse.\n\n  `animation.reverse();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/reverse`"}, set-finished! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 172, :column 7, :end-line 172, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.finished read-only property of the Web Animations\n  returns a `web.Promise` which resolves once the animation has\n  playing.\n\n  `var animationsPromise = Animation.finished;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished`"}, :name web.Animation/set-finished!, :variadic false, :file "src/web/Animation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.finished read-only property of the Web Animations\n  returns a `web.Promise` which resolves once the animation has\n  playing.\n\n  `var animationsPromise = Animation.finished;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished`"}, update-playback-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 86, :column 7, :end-line 86, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  The updatePlaybackRate() method of the Web Animations API's `web.Animation`\n  sets the speed of an animation after first synchronizing its\n  position.\n\n  `Animation.updatePlaybackRate(2);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/updatePlaybackRate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Animation/update-playback-rate, :variadic true, :file "src/web/Animation.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The updatePlaybackRate() method of the Web Animations API's `web.Animation`\n  sets the speed of an animation after first synchronizing its\n  position.\n\n  `Animation.updatePlaybackRate(2);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/updatePlaybackRate`"}, set-playback-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 311, :column 7, :end-line 311, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.playbackRate property of the Web Animations API\n  or sets the playback rate of the animation.\n\n  `var currentPlaybackRate = Animation.playbackRate;\n\n  Animation.playbackRate = newRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate`"}, :name web.Animation/set-playback-rate!, :variadic false, :file "src/web/Animation.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.playbackRate property of the Web Animations API\n  or sets the playback rate of the animation.\n\n  `var currentPlaybackRate = Animation.playbackRate;\n\n  Animation.playbackRate = newRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate`"}, play-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 325, :column 7, :end-line 325, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.playState property of the Web Animations API returns\n  sets an enumerated value describing the playback state of an\n\n  `var currentPlayState = Animation.playState;\n\n  Animation.playState = newState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState`"}, :name web.Animation/play-state, :variadic false, :file "src/web/Animation.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.playState property of the Web Animations API returns\n  sets an enumerated value describing the playback state of an\n\n  `var currentPlayState = Animation.playState;\n\n  Animation.playState = newState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState`"}, current-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 99, :column 7, :end-line 99, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.currentTime property of the Web Animations API\n  and sets the current time value of the animation in milliseconds,\n  running or paused.\n\n  `var currentTime = Animation.currentTime;\n  Animation.currentTime = newTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime`"}, :name web.Animation/current-time, :variadic false, :file "src/web/Animation.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.currentTime property of the Web Animations API\n  and sets the current time value of the animation in milliseconds,\n  running or paused.\n\n  `var currentTime = Animation.currentTime;\n  Animation.currentTime = newTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime`"}, ready {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 353, :column 7, :end-line 353, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Animation.ready property of the Web Animations\n  returns a `web.Promise` which resolves when the animation is\n  to play. A new promise is created every time the animation enters\n  \\\"pending\\\" play state as well as when the animation is canceled,\n  in both of those scenarios, the animation is ready to be started\n\n  `var readyPromise = Animation.ready;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready`"}, :name web.Animation/ready, :variadic false, :file "src/web/Animation.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Animation.ready property of the Web Animations\n  returns a `web.Promise` which resolves when the animation is\n  to play. A new promise is created every time the animation enters\n  \\\"pending\\\" play state as well as when the animation is canceled,\n  in both of those scenarios, the animation is ready to be started\n\n  `var readyPromise = Animation.ready;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready`"}, set-play-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 339, :column 7, :end-line 339, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.playState property of the Web Animations API returns\n  sets an enumerated value describing the playback state of an\n\n  `var currentPlayState = Animation.playState;\n\n  Animation.playState = newState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState`"}, :name web.Animation/set-play-state!, :variadic false, :file "src/web/Animation.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.playState property of the Web Animations API returns\n  sets an enumerated value describing the playback state of an\n\n  `var currentPlayState = Animation.playState;\n\n  Animation.playState = newState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playState`"}, onfinish {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 241, :column 7, :end-line 241, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Animation` interface's onfinish property (from the Web\n  API) is the event handler for the finish event. This event is\n  when the animation finishes playing.\n\n  `var finishHandler = Animation.onfinish;\n\n  Animation.onfinish = finishHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish`"}, :name web.Animation/onfinish, :variadic false, :file "src/web/Animation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Animation` interface's onfinish property (from the Web\n  API) is the event handler for the finish event. This event is\n  when the animation finishes playing.\n\n  `var finishHandler = Animation.onfinish;\n\n  Animation.onfinish = finishHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish`"}, pending {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 271, :column 7, :end-line 271, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Animation.pending property of the Web Animations\n  indicates whether the animation is currently waiting for an asynchronous\n  such as initiating playback or pausing a running animation.\n\n  `var pending = Animation.pending;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending`"}, :name web.Animation/pending, :variadic false, :file "src/web/Animation.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Animation.pending property of the Web Animations\n  indicates whether the animation is currently waiting for an asynchronous\n  such as initiating playback or pausing a running animation.\n\n  `var pending = Animation.pending;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending`"}, set-pending! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 284, :column 7, :end-line 284, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Animation.pending property of the Web Animations\n  indicates whether the animation is currently waiting for an asynchronous\n  such as initiating playback or pausing a running animation.\n\n  `var pending = Animation.pending;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending`"}, :name web.Animation/set-pending!, :variadic false, :file "src/web/Animation.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Animation.pending property of the Web Animations\n  indicates whether the animation is currently waiting for an asynchronous\n  such as initiating playback or pausing a running animation.\n\n  `var pending = Animation.pending;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pending`"}, start-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 383, :column 7, :end-line 383, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.startTime property of the `web.Animation` interface\n  a double-precision floating-point value which indicates the scheduled\n  when an animation's playback should begin.\n\n  `var animationStartedWhen = Animation.startTime;\n\n  Animation.startTime = newStartTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime`"}, :name web.Animation/start-time, :variadic false, :file "src/web/Animation.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.startTime property of the `web.Animation` interface\n  a double-precision floating-point value which indicates the scheduled\n  when an animation's playback should begin.\n\n  `var animationStartedWhen = Animation.startTime;\n\n  Animation.startTime = newStartTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime`"}, oncancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 213, :column 7, :end-line 213, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the Web Animations API's `web.Animation`\n  is the event handler for the cancel event.\n\n  `var cancelHandler = Animation.oncancel;\n\n  Animation.oncancel = cancelHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel`"}, :name web.Animation/oncancel, :variadic false, :file "src/web/Animation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the Web Animations API's `web.Animation`\n  is the event handler for the cancel event.\n\n  `var cancelHandler = Animation.oncancel;\n\n  Animation.oncancel = cancelHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel`"}, set-start-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 398, :column 7, :end-line 398, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.startTime property of the `web.Animation` interface\n  a double-precision floating-point value which indicates the scheduled\n  when an animation's playback should begin.\n\n  `var animationStartedWhen = Animation.startTime;\n\n  Animation.startTime = newStartTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime`"}, :name web.Animation/set-start-time!, :variadic false, :file "src/web/Animation.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.startTime property of the `web.Animation` interface\n  a double-precision floating-point value which indicates the scheduled\n  when an animation's playback should begin.\n\n  `var animationStartedWhen = Animation.startTime;\n\n  Animation.startTime = newStartTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/startTime`"}, set-current-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 113, :column 7, :end-line 113, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.currentTime property of the Web Animations API\n  and sets the current time value of the animation in milliseconds,\n  running or paused.\n\n  `var currentTime = Animation.currentTime;\n  Animation.currentTime = newTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime`"}, :name web.Animation/set-current-time!, :variadic false, :file "src/web/Animation.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.currentTime property of the Web Animations API\n  and sets the current time value of the animation in milliseconds,\n  running or paused.\n\n  `var currentTime = Animation.currentTime;\n  Animation.currentTime = newTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/currentTime`"}, set-oncancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 227, :column 7, :end-line 227, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The oncancel property of the Web Animations API's `web.Animation`\n  is the event handler for the cancel event.\n\n  `var cancelHandler = Animation.oncancel;\n\n  Animation.oncancel = cancelHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel`"}, :name web.Animation/set-oncancel!, :variadic false, :file "src/web/Animation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncancel property of the Web Animations API's `web.Animation`\n  is the event handler for the cancel event.\n\n  `var cancelHandler = Animation.oncancel;\n\n  Animation.oncancel = cancelHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/oncancel`"}, finished {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 159, :column 7, :end-line 159, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.finished read-only property of the Web Animations\n  returns a `web.Promise` which resolves once the animation has\n  playing.\n\n  `var animationsPromise = Animation.finished;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished`"}, :name web.Animation/finished, :variadic false, :file "src/web/Animation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.finished read-only property of the Web Animations\n  returns a `web.Promise` which resolves once the animation has\n  playing.\n\n  `var animationsPromise = Animation.finished;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finished`"}, playback-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 297, :column 7, :end-line 297, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.playbackRate property of the Web Animations API\n  or sets the playback rate of the animation.\n\n  `var currentPlaybackRate = Animation.playbackRate;\n\n  Animation.playbackRate = newRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate`"}, :name web.Animation/playback-rate, :variadic false, :file "src/web/Animation.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.playbackRate property of the Web Animations API\n  or sets the playback rate of the animation.\n\n  `var currentPlaybackRate = Animation.playbackRate;\n\n  Animation.playbackRate = newRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/playbackRate`"}, set-ready! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 368, :column 7, :end-line 368, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Animation.ready property of the Web Animations\n  returns a `web.Promise` which resolves when the animation is\n  to play. A new promise is created every time the animation enters\n  \\\"pending\\\" play state as well as when the animation is canceled,\n  in both of those scenarios, the animation is ready to be started\n\n  `var readyPromise = Animation.ready;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready`"}, :name web.Animation/set-ready!, :variadic false, :file "src/web/Animation.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Animation.ready property of the Web Animations\n  returns a `web.Promise` which resolves when the animation is\n  to play. A new promise is created every time the animation enters\n  \\\"pending\\\" play state as well as when the animation is canceled,\n  in both of those scenarios, the animation is ready to be started\n\n  `var readyPromise = Animation.ready;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/ready`"}, finish {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 33, :column 7, :end-line 33, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The finish() method of the Web Animations API's `web.Animation`\n  sets the current playback time to the end of the animation corresponding\n  the current playback direction.\n\n  `Animation.finish();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish`"}, :name web.Animation/finish, :variadic false, :file "src/web/Animation.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The finish() method of the Web Animations API's `web.Animation`\n  sets the current playback time to the end of the animation corresponding\n  the current playback direction.\n\n  `Animation.finish();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/finish`"}, set-effect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 143, :column 7, :end-line 143, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.effect property of the Web Animations API gets\n  sets the target effect of an animation. The target effect may\n  either an effect object of a type based on `web.AnimationEffectReadOnly`,\n  as `web.KeyframeEffect`, or null.\n\n  `var effect = Animation.effect;\n\n  Animation.effect = AnimationEffectReadOnly`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect`"}, :name web.Animation/set-effect!, :variadic false, :file "src/web/Animation.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.effect property of the Web Animations API gets\n  sets the target effect of an animation. The target effect may\n  either an effect object of a type based on `web.AnimationEffectReadOnly`,\n  as `web.KeyframeEffect`, or null.\n\n  `var effect = Animation.effect;\n\n  Animation.effect = AnimationEffectReadOnly`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/effect`"}, id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 185, :column 7, :end-line 185, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.id property of the Web Animations API returns or\n  a string used to identify the animation.\n\n  `var animationsId = Animation.id;\n\n  Animation.id = newIdString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/id`"}, :name web.Animation/id, :variadic false, :file "src/web/Animation.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Animation.id property of the Web Animations API returns or\n  a string used to identify the animation.\n\n  `var animationsId = Animation.id;\n\n  Animation.id = newIdString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/id`"}, set-onfinish! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 256, :column 7, :end-line 256, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Animation` interface's onfinish property (from the Web\n  API) is the event handler for the finish event. This event is\n  when the animation finishes playing.\n\n  `var finishHandler = Animation.onfinish;\n\n  Animation.onfinish = finishHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish`"}, :name web.Animation/set-onfinish!, :variadic false, :file "src/web/Animation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Animation` interface's onfinish property (from the Web\n  API) is the event handler for the finish event. This event is\n  when the animation finishes playing.\n\n  `var finishHandler = Animation.onfinish;\n\n  Animation.onfinish = finishHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/onfinish`"}, set-timeline! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 430, :column 7, :end-line 430, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.timeline property of the `web.Animation` interface\n  or sets the `web.timeline` associated with this animation. A\n  is a source of time values for synchronization purposes, and\n  an `web.AnimationTimeline`-based object. By default, the animation's\n  and the `web.Document`'s timeline are the same.\n\n  `var animationsTimeline = Animation.timeline;\n\n  Animation.timeline = newTimeline;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline`"}, :name web.Animation/set-timeline!, :variadic false, :file "src/web/Animation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.timeline property of the `web.Animation` interface\n  or sets the `web.timeline` associated with this animation. A\n  is a source of time values for synchronization purposes, and\n  an `web.AnimationTimeline`-based object. By default, the animation's\n  and the `web.Document`'s timeline are the same.\n\n  `var animationsTimeline = Animation.timeline;\n\n  Animation.timeline = newTimeline;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/timeline`"}, constructor {:name web.Animation/constructor, :file "src/web/Animation.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The Animation() constructor of the Web Animations API returns a new Animation object instance.\n\n  effect Optional\n  The target effect, as an object based on the `web.AnimationEffectReadOnly` interface, to assign to the animation. Although in the future other effects such as SequenceEffects or GroupEffects might be possible, the only kind of effect currently available is `web.KeyframeEffect`. This can be null (which is the default) to indicate that there should be no effect applied.\n  timeline Optional\n  Specifies the timeline with which to associate the animation, as an object of a type based on the `web.AnimationTimeline` interface. Currently the only timeline type available is `web.DocumentTimeline`, but in the future there my be timelines associated with gestures or scrolling, for example. The default value is `web.Document.timeline`, but this can be set to null as well.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation`", :tag js}, pause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The pause() method of the Web Animations API's `web.Animation`\n  suspends playback of the animation.\n\n  `animation.pause();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pause`"}, :name web.Animation/pause, :variadic false, :file "src/web/Animation.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The pause() method of the Web Animations API's `web.Animation`\n  suspends playback of the animation.\n\n  `animation.pause();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/pause`"}, set-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 199, :column 7, :end-line 199, :end-column 14, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.id property of the Web Animations API returns or\n  a string used to identify the animation.\n\n  `var animationsId = Animation.id;\n\n  Animation.id = newIdString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/id`"}, :name web.Animation/set-id!, :variadic false, :file "src/web/Animation.cljs", :end-column 14, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Animation.id property of the Web Animations API returns or\n  a string used to identify the animation.\n\n  `var animationsId = Animation.id;\n\n  Animation.id = newIdString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/id`"}, cancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Animation.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The Web Animations API's cancel() method of the `web.Animation`\n  clears all `web.KeyframeEffect`s caused by this animation and\n  its playback.\n\n  `Animation.cancel();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/cancel`"}, :name web.Animation/cancel, :variadic false, :file "src/web/Animation.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Web Animations API's cancel() method of the `web.Animation`\n  clears all `web.KeyframeEffect`s caused by this animation and\n  its playback.\n\n  `Animation.cancel();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Animation/cancel`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Animation interface of the Web Animations API represents\n  single animation player and provides playback controls and a\n  for an animation node or source."}