{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.MessagePort, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.MessagePort` interface disconnects\n  port, so it is no longer active. This stops the flow of messages\n  that port.\n\n  `port.close()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close`"}, :name web.MessagePort/close, :variadic false, :file "src/web/MessagePort.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.MessagePort` interface disconnects\n  port, so it is no longer active. This stops the flow of messages\n  that port.\n\n  `port.close()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/close`"}, post-message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 21, :column 7, :end-line 21, :end-column 19, :arglists (quote ([this message transfer-list])), :doc "Method.\n\n  The postMessage() method of the `web.MessagePort` interface sends\n  message from the port, and optionally, transfers ownership of\n  to other browsing contexts.\n\n  `port.postMessage(message, transferList);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage`"}, :name web.MessagePort/post-message, :variadic false, :file "src/web/MessagePort.cljs", :end-column 19, :method-params ([this message transfer-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this message transfer-list])), :doc "Method.\n\n  The postMessage() method of the `web.MessagePort` interface sends\n  message from the port, and optionally, transfers ownership of\n  to other browsing contexts.\n\n  `port.postMessage(message, transferList);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/postMessage`"}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 34, :column 7, :end-line 34, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The start() method of the `web.MessagePort` interface starts\n  sending of messages queued on the port. This method is only needed\n  using `web.EventTarget.addEventListener`; it is implied when\n  `web.MessageChannel.onmessage`.\n\n  `port.start()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start`"}, :name web.MessagePort/start, :variadic false, :file "src/web/MessagePort.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The start() method of the `web.MessagePort` interface starts\n  sending of messages queued on the port. This method is only needed\n  using `web.EventTarget.addEventListener`; it is implied when\n  `web.MessageChannel.onmessage`.\n\n  `port.start()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/start`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type message is fired on the port — that is, when the port receives\n  message.\n\n  `channel.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage`"}, :name web.MessagePort/onmessage, :variadic false, :file "src/web/MessagePort.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type message is fired on the port — that is, when the port receives\n  message.\n\n  `channel.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 62, :column 7, :end-line 62, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type message is fired on the port — that is, when the port receives\n  message.\n\n  `channel.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage`"}, :name web.MessagePort/set-onmessage!, :variadic false, :file "src/web/MessagePort.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type message is fired on the port — that is, when the port receives\n  message.\n\n  `channel.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessage`"}, onmessageerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 76, :column 7, :end-line 76, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the port—that is, when it receives\n  message that cannot be deserialized.\n\n  `port.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror`"}, :name web.MessagePort/onmessageerror, :variadic false, :file "src/web/MessagePort.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the port—that is, when it receives\n  message that cannot be deserialized.\n\n  `port.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror`"}, set-onmessageerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/MessagePort.cljs", :line 90, :column 7, :end-line 90, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the port—that is, when it receives\n  message that cannot be deserialized.\n\n  `port.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror`"}, :name web.MessagePort/set-onmessageerror!, :variadic false, :file "src/web/MessagePort.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.MessagePort` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the port—that is, when it receives\n  message that cannot be deserialized.\n\n  `port.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/MessagePort/onmessageerror`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The MessagePort interface of the Channel Messaging API represents\n  of the two ports of a `web.MessageChannel`, allowing messages\n  be sent from one port and listening out for them arriving at\n  other."}