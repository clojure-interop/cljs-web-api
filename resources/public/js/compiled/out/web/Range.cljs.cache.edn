{:rename-macros {}, :renames {}, :externs {Range {}}, :use-macros {}, :excludes #{}, :name web.Range, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {compare-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 62, :column 7, :end-line 62, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The Range.compareNode() returns a constant indicating the position\n  the `web.Node`.\n\n  `returnValue = range.compareNode( referenceNode );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/compareNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Range/compare-node, :variadic true, :file "src/web/Range.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Range.compareNode() returns a constant indicating the position\n  the `web.Node`.\n\n  `returnValue = range.compareNode( referenceNode );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/compareNode`"}, start-container {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 435, :column 7, :end-line 435, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The Range.startContainer read-only property returns the `web.Node`\n  which the Range starts. To change the start position of a node,\n  one of the `web.Range.setStart()` methods.\n\n  `startRangeNode = range.startContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer`"}, :name web.Range/start-container, :variadic false, :file "src/web/Range.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 435, :end-line 435, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.startContainer read-only property returns the `web.Node`\n  which the Range starts. To change the start position of a node,\n  one of the `web.Range.setStart()` methods.\n\n  `startRangeNode = range.startContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer`"}, compare-boundary-points {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 50, :column 7, :end-line 50, :end-column 30, :arglists (quote ([this how source-range])), :doc "Method.\n\n  The Range.compareBoundaryPoints() method compares the boundary\n  of the `web.Range` with another one.\n\n  `compare = range.compareBoundaryPoints(how, sourceRange);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints`"}, :name web.Range/compare-boundary-points, :variadic false, :file "src/web/Range.cljs", :end-column 30, :method-params ([this how source-range]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this how source-range])), :doc "Method.\n\n  The Range.compareBoundaryPoints() method compares the boundary\n  of the `web.Range` with another one.\n\n  `compare = range.compareBoundaryPoints(how, sourceRange);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/compareBoundaryPoints`"}, set-end-container! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 398, :column 7, :end-line 398, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.endContainer read-only property returns the `web.Node`\n  which the `web.Range` ends. To change the end position of a node,\n  the `web.Range.setEnd()` method or a similar one.\n\n  `endRangeNode = range.endContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer`"}, :name web.Range/set-end-container!, :variadic false, :file "src/web/Range.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.endContainer read-only property returns the `web.Node`\n  which the `web.Range` ends. To change the end position of a node,\n  the `web.Range.setEnd()` method or a similar one.\n\n  `endRangeNode = range.endContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer`"}, select-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 204, :column 7, :end-line 204, :end-column 18, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.selectNode() method sets the `web.Range` to contain\n  `web.Node` and its contents. The parent `web.Node` of the start\n  end of the `web.Range` will be the same as the parent of the\n\n  `range.selectNode(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode`"}, :name web.Range/select-node, :variadic false, :file "src/web/Range.cljs", :end-column 18, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.selectNode() method sets the `web.Range` to contain\n  `web.Node` and its contents. The parent `web.Node` of the start\n  end of the `web.Range` will be the same as the parent of the\n\n  `range.selectNode(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNode`"}, set-start-offset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 473, :column 7, :end-line 473, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.startOffset read-only property returns a number representing\n  in the startContainer the Range starts.\n\n  `startRangeOffset = range.startOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset`"}, :name web.Range/set-start-offset!, :variadic false, :file "src/web/Range.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 473, :end-line 473, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.startOffset read-only property returns a number representing\n  in the startContainer the Range starts.\n\n  `startRangeOffset = range.startOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset`"}, set-common-ancestor-container! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 370, :column 7, :end-line 370, :end-column 37, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.commonAncestorContainer read-only property returns\n  deepest — or furthest down the document tree — `web.Node` that\n  both boundary points of the range. This means that if `web.Range.startContainer`\n  `web.Range.endContainer` both refer to the same node, this node\n  the commonAncestorContainer.\n\n  `rangeAncestor = range.commonAncestorContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer`"}, :name web.Range/set-common-ancestor-container!, :variadic false, :file "src/web/Range.cljs", :end-column 37, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.commonAncestorContainer read-only property returns\n  deepest — or furthest down the document tree — `web.Node` that\n  both boundary points of the range. This means that if `web.Range.startContainer`\n  `web.Range.endContainer` both refer to the same node, this node\n  the commonAncestorContainer.\n\n  `rangeAncestor = range.commonAncestorContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer`"}, set-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 266, :column 7, :end-line 266, :end-column 16, :arglists (quote ([this start-node start-offset])), :doc "Method.\n\n  The Range.setStart() method sets the start position of a `web.Range`.\n\n  `range.setStart(startNode, startOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart`"}, :name web.Range/set-start, :variadic false, :file "src/web/Range.cljs", :end-column 16, :method-params ([this start-node start-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this start-node start-offset])), :doc "Method.\n\n  The Range.setStart() method sets the start position of a `web.Range`.\n\n  `range.setStart(startNode, startOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStart`"}, set-start-container! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 448, :column 7, :end-line 448, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.startContainer read-only property returns the `web.Node`\n  which the Range starts. To change the start position of a node,\n  one of the `web.Range.setStart()` methods.\n\n  `startRangeNode = range.startContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer`"}, :name web.Range/set-start-container!, :variadic false, :file "src/web/Range.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 448, :end-line 448, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.startContainer read-only property returns the `web.Node`\n  which the Range starts. To change the start position of a node,\n  one of the `web.Range.setStart()` methods.\n\n  `startRangeNode = range.startContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startContainer`"}, set-end-offset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 423, :column 7, :end-line 423, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.endOffset read-only property returns a number representing\n  in the `web.Range.endContainer` the `web.Range` ends.\n\n  `endRangeOffset = range.endOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset`"}, :name web.Range/set-end-offset!, :variadic false, :file "src/web/Range.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.endOffset read-only property returns a number representing\n  in the `web.Range.endContainer` the `web.Range` ends.\n\n  `endRangeOffset = range.endOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset`"}, detach {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 115, :column 7, :end-line 115, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The Range.detach() method does nothing. It used to disable the\n  object and enable the browser to release associated resources.\n  method has been kept for compatibility.\n\n  `range.detach();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/detach`"}, :name web.Range/detach, :variadic false, :file "src/web/Range.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.detach() method does nothing. It used to disable the\n  object and enable the browser to release associated resources.\n  method has been kept for compatibility.\n\n  `range.detach();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/detach`"}, clone-contents {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 14, :column 7, :end-line 14, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The Range.cloneContents() returns a `web.DocumentFragment` copying\n  objects of type `web.Node` included in the `web.Range`.\n\n  `documentFragment = range.cloneContents();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents`"}, :name web.Range/clone-contents, :variadic false, :file "src/web/Range.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.cloneContents() returns a `web.DocumentFragment` copying\n  objects of type `web.Node` included in the `web.Range`.\n\n  `documentFragment = range.cloneContents();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneContents`"}, collapsed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 327, :column 7, :end-line 327, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The Range.collapsed read-only property returns a `web.Boolean`\n  indicating whether the start and end points of the `web.Range`\n  at the same position. It returns true if the start and end boundary\n  of the `web.Range` are the same point in the DOM, false if not.\n\n  `isCollapsed = range.collapsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed`"}, :name web.Range/collapsed, :variadic false, :file "src/web/Range.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.collapsed read-only property returns a `web.Boolean`\n  indicating whether the start and end points of the `web.Range`\n  at the same position. It returns true if the start and end boundary\n  of the `web.Range` are the same point in the DOM, false if not.\n\n  `isCollapsed = range.collapsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed`"}, to-string {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 315, :column 7, :end-line 315, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The Range.toString() method is a stringifier returning the text\n  the `web.Range`.\n\n  `text = range.toString();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/toString`"}, :name web.Range/to-string, :variadic false, :file "src/web/Range.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.toString() method is a stringifier returning the text\n  the `web.Range`.\n\n  `text = range.toString();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/toString`"}, get-client-rects {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 153, :column 7, :end-line 153, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The Range.getClientRects() method returns a list of `dom.DOMRect`\n  representing the area of the screen occupied by the range. This\n  created by aggregating the results of calls to `web.Element.getClientRects()`\n  all the elements in the range.\n\n  `rectList = range.getClientRects()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects`"}, :name web.Range/get-client-rects, :variadic false, :file "src/web/Range.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.getClientRects() method returns a list of `dom.DOMRect`\n  representing the area of the screen occupied by the range. This\n  created by aggregating the results of calls to `web.Element.getClientRects()`\n  all the elements in the range.\n\n  `rectList = range.getClientRects()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/getClientRects`"}, set-collapsed! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 341, :column 7, :end-line 341, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.collapsed read-only property returns a `web.Boolean`\n  indicating whether the start and end points of the `web.Range`\n  at the same position. It returns true if the start and end boundary\n  of the `web.Range` are the same point in the DOM, false if not.\n\n  `isCollapsed = range.collapsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed`"}, :name web.Range/set-collapsed!, :variadic false, :file "src/web/Range.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Range.collapsed read-only property returns a `web.Boolean`\n  indicating whether the start and end points of the `web.Range`\n  at the same position. It returns true if the start and end boundary\n  of the `web.Range` are the same point in the DOM, false if not.\n\n  `isCollapsed = range.collapsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapsed`"}, compare-point {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 74, :column 7, :end-line 74, :end-column 20, :arglists (quote ([this reference-node offset])), :doc "Method.\n\n  The Range.comparePoint() method returns -1, 0, or 1 depending\n  whether the referenceNode is before, the same as, or after the\n\n  `returnValue = range.comparePoint(referenceNode, offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint`"}, :name web.Range/compare-point, :variadic false, :file "src/web/Range.cljs", :end-column 20, :method-params ([this reference-node offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this reference-node offset])), :doc "Method.\n\n  The Range.comparePoint() method returns -1, 0, or 1 depending\n  whether the referenceNode is before, the same as, or after the\n\n  `returnValue = range.comparePoint(referenceNode, offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/comparePoint`"}, set-start-after {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 277, :column 7, :end-line 277, :end-column 22, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setStartAfter() method sets the start position of a\n  relative to a `web.Node`. The parent `web.Node` of the start\n  the `web.Range` will be the same as that for the referenceNode.\n\n  `range.setStartAfter(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter`"}, :name web.Range/set-start-after, :variadic false, :file "src/web/Range.cljs", :end-column 22, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 277, :end-line 277, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setStartAfter() method sets the start position of a\n  relative to a `web.Node`. The parent `web.Node` of the start\n  the `web.Range` will be the same as that for the referenceNode.\n\n  `range.setStartAfter(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartAfter`"}, set-end-before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 253, :column 7, :end-line 253, :end-column 21, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setEndBefore() method sets the end position of a Range\n  to another `web.Node`. The parent Node of end of the Range will\n  the same as that for the referenceNode.\n\n  `range.setEndBefore(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore`"}, :name web.Range/set-end-before, :variadic false, :file "src/web/Range.cljs", :end-column 21, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setEndBefore() method sets the end position of a Range\n  to another `web.Node`. The parent Node of end of the Range will\n  the same as that for the referenceNode.\n\n  `range.setEndBefore(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndBefore`"}, intersects-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 179, :column 7, :end-line 179, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The Range.intersectsNode() method returns a boolean indicating\n  the given `web.Node` intersects the `web.Range`.\n\n  `bool = range.intersectsNode( referenceNode )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Range/intersects-node, :variadic true, :file "src/web/Range.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Range.intersectsNode() method returns a boolean indicating\n  the given `web.Node` intersects the `web.Range`.\n\n  `bool = range.intersectsNode( referenceNode )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/intersectsNode`"}, set-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 229, :column 7, :end-line 229, :end-column 14, :arglists (quote ([this end-node end-offset])), :doc "Method.\n\n  The Range.setEnd() method sets the end position of a `web.Range`.\n\n  `range.setEnd(endNode, endOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd`"}, :name web.Range/set-end, :variadic false, :file "src/web/Range.cljs", :end-column 14, :method-params ([this end-node end-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this end-node end-offset])), :doc "Method.\n\n  The Range.setEnd() method sets the end position of a `web.Range`.\n\n  `range.setEnd(endNode, endOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEnd`"}, end-container {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 385, :column 7, :end-line 385, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Range.endContainer read-only property returns the `web.Node`\n  which the `web.Range` ends. To change the end position of a node,\n  the `web.Range.setEnd()` method or a similar one.\n\n  `endRangeNode = range.endContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer`"}, :name web.Range/end-container, :variadic false, :file "src/web/Range.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.endContainer read-only property returns the `web.Node`\n  which the `web.Range` ends. To change the end position of a node,\n  the `web.Range.setEnd()` method or a similar one.\n\n  `endRangeNode = range.endContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endContainer`"}, set-end-after {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 240, :column 7, :end-line 240, :end-column 20, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setEndAfter() method sets the end position of a `web.Range`\n  to another `web.Node`. The parent Node of end of the Range will\n  the same as that for the referenceNode.\n\n  `range.setEndAfter(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter`"}, :name web.Range/set-end-after, :variadic false, :file "src/web/Range.cljs", :end-column 20, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setEndAfter() method sets the end position of a `web.Range`\n  to another `web.Node`. The parent Node of end of the Range will\n  the same as that for the referenceNode.\n\n  `range.setEndAfter(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setEndAfter`"}, select-node-contents {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 217, :column 7, :end-line 217, :end-column 27, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.selectNodeContents() method sets the `web.Range` to\n  the contents of a `web.Node`.\n\n  `range.selectNodeContents(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents`"}, :name web.Range/select-node-contents, :variadic false, :file "src/web/Range.cljs", :end-column 27, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.selectNodeContents() method sets the `web.Range` to\n  the contents of a `web.Node`.\n\n  `range.selectNodeContents(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/selectNodeContents`"}, insert-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 167, :column 7, :end-line 167, :end-column 18, :arglists (quote ([this new-node])), :doc "Method.\n\n  The Range.insertNode() method inserts a node at the start of\n  `web.Range`.\n\n  `range.insertNode(newNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode`"}, :name web.Range/insert-node, :variadic false, :file "src/web/Range.cljs", :end-column 18, :method-params ([this new-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-node])), :doc "Method.\n\n  The Range.insertNode() method inserts a node at the start of\n  `web.Range`.\n\n  `range.insertNode(newNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/insertNode`"}, get-bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 140, :column 7, :end-line 140, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The Range.getBoundingClientRect() method returns a `dom.DOMRect`\n  that bounds the contents of the range; this is a rectangle enclosing\n  union of the bounding rectangles for all the elements in the\n\n  `boundingRect = range.getBoundingClientRect()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect`"}, :name web.Range/get-bounding-client-rect, :variadic false, :file "src/web/Range.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.getBoundingClientRect() method returns a `dom.DOMRect`\n  that bounds the contents of the range; this is a rectangle enclosing\n  union of the bounding rectangles for all the elements in the\n\n  `boundingRect = range.getBoundingClientRect()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/getBoundingClientRect`"}, create-contextual-fragment {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 86, :column 7, :end-line 86, :end-column 33, :arglists (quote ([this tag-string])), :doc "Method.\n\n  The Range.createContextualFragment() method returns a `web.DocumentFragment`\n  invoking the HTML fragment parsing algorithm or the XML fragment\n  algorithm with the start of the range (the parent of the selected\n  as the context node. The HTML fragment parsing algorithm is used\n  the range belongs to a Document whose HTMLness bit is set. In\n  HTML case, if the context node would be html, for historical\n  the fragment parsing algorithm is invoked with body as the context\n\n  `documentFragment = range.createContextualFragment(tagString)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment`"}, :name web.Range/create-contextual-fragment, :variadic false, :file "src/web/Range.cljs", :end-column 33, :method-params ([this tag-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this tag-string])), :doc "Method.\n\n  The Range.createContextualFragment() method returns a `web.DocumentFragment`\n  invoking the HTML fragment parsing algorithm or the XML fragment\n  algorithm with the start of the range (the parent of the selected\n  as the context node. The HTML fragment parsing algorithm is used\n  the range belongs to a Document whose HTMLness bit is set. In\n  HTML case, if the context node would be html, for historical\n  the fragment parsing algorithm is invoked with body as the context\n\n  `documentFragment = range.createContextualFragment(tagString)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/createContextualFragment`"}, common-ancestor-container {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 355, :column 7, :end-line 355, :end-column 32, :arglists (quote ([this])), :doc "Property.\n\n  The Range.commonAncestorContainer read-only property returns\n  deepest — or furthest down the document tree — `web.Node` that\n  both boundary points of the range. This means that if `web.Range.startContainer`\n  `web.Range.endContainer` both refer to the same node, this node\n  the commonAncestorContainer.\n\n  `rangeAncestor = range.commonAncestorContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer`"}, :name web.Range/common-ancestor-container, :variadic false, :file "src/web/Range.cljs", :end-column 32, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.commonAncestorContainer read-only property returns\n  deepest — or furthest down the document tree — `web.Node` that\n  both boundary points of the range. This means that if `web.Range.startContainer`\n  `web.Range.endContainer` both refer to the same node, this node\n  the commonAncestorContainer.\n\n  `rangeAncestor = range.commonAncestorContainer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/commonAncestorContainer`"}, set-start-before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 290, :column 7, :end-line 290, :end-column 23, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setStartBefore() method sets the start position of\n  `web.Range` relative to another `web.Node`. The parent `web.Node`\n  the start of the `web.Range` will be the same as that for the\n\n  `range.setStartBefore(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore`"}, :name web.Range/set-start-before, :variadic false, :file "src/web/Range.cljs", :end-column 23, :method-params ([this reference-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reference-node])), :doc "Method.\n\n  The Range.setStartBefore() method sets the start position of\n  `web.Range` relative to another `web.Node`. The parent `web.Node`\n  the start of the `web.Range` will be the same as that for the\n\n  `range.setStartBefore(referenceNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/setStartBefore`"}, constructor {:name web.Range/constructor, :file "src/web/Range.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The Range() constructor returns a newly created `web.Range` object whose start and end is the global `web.Document` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/Range`", :tag js}, start-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 461, :column 7, :end-line 461, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Range.startOffset read-only property returns a number representing\n  in the startContainer the Range starts.\n\n  `startRangeOffset = range.startOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset`"}, :name web.Range/start-offset, :variadic false, :file "src/web/Range.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 461, :end-line 461, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.startOffset read-only property returns a number representing\n  in the startContainer the Range starts.\n\n  `startRangeOffset = range.startOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/startOffset`"}, clone-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 26, :column 7, :end-line 26, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The Range.cloneRange() method returns a `web.Range` object with\n  points identical to the cloned `web.Range`.\n\n  `clone = range.cloneRange();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange`"}, :name web.Range/clone-range, :variadic false, :file "src/web/Range.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.cloneRange() method returns a `web.Range` object with\n  points identical to the cloned `web.Range`.\n\n  `clone = range.cloneRange();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/cloneRange`"}, extract-contents {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 128, :column 7, :end-line 128, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The Range.extractContents() method moves contents of the `web.Range`\n  the document tree into a `web.DocumentFragment`.\n\n  `documentFragment = range.extractContents();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents`"}, :name web.Range/extract-contents, :variadic false, :file "src/web/Range.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.extractContents() method moves contents of the `web.Range`\n  the document tree into a `web.DocumentFragment`.\n\n  `documentFragment = range.extractContents();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/extractContents`"}, end-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 411, :column 7, :end-line 411, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Range.endOffset read-only property returns a number representing\n  in the `web.Range.endContainer` the `web.Range` ends.\n\n  `endRangeOffset = range.endOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset`"}, :name web.Range/end-offset, :variadic false, :file "src/web/Range.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Range.endOffset read-only property returns a number representing\n  in the `web.Range.endContainer` the `web.Range` ends.\n\n  `endRangeOffset = range.endOffset;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/endOffset`"}, is-point-in-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 191, :column 7, :end-line 191, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The Range.isPointInRange() method returns a boolean indicating\n  the given point is in the `web.Range`. It returns true if the\n  (cursor position) at offset within ReferenceNode is within this\n\n  `bool = range.isPointInRange( referenceNode, offset )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Range/is-point-in-range, :variadic true, :file "src/web/Range.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Range.isPointInRange() method returns a boolean indicating\n  the given point is in the `web.Range`. It returns true if the\n  (cursor position) at offset within ReferenceNode is within this\n\n  `bool = range.isPointInRange( referenceNode, offset )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/isPointInRange`"}, surround-contents {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 303, :column 7, :end-line 303, :end-column 24, :arglists (quote ([this new-parent])), :doc "Method.\n\n  The Range.surroundContents() method moves content of the `web.Range`\n  a new node, placing the new node at the start of the specified\n\n  `range.surroundContents(newParent);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents`"}, :name web.Range/surround-contents, :variadic false, :file "src/web/Range.cljs", :end-column 24, :method-params ([this new-parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-parent])), :doc "Method.\n\n  The Range.surroundContents() method moves content of the `web.Range`\n  a new node, placing the new node at the start of the specified\n\n  `range.surroundContents(newParent);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/surroundContents`"}, collapse {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 38, :column 7, :end-line 38, :end-column 15, :arglists (quote ([this to-start])), :doc "Method.\n\n  The Range.collapse() method collapses the `web.Range` to one\n  its boundary points.\n\n  `range.collapse(toStart);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse`"}, :name web.Range/collapse, :variadic false, :file "src/web/Range.cljs", :end-column 15, :method-params ([this to-start]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this to-start])), :doc "Method.\n\n  The Range.collapse() method collapses the `web.Range` to one\n  its boundary points.\n\n  `range.collapse(toStart);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/collapse`"}, delete-contents {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Range.cljs", :line 103, :column 7, :end-line 103, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The Range.deleteContents() method removes the contents of the\n  from the `web.Document`.\n\n  `range.deleteContents()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents`"}, :name web.Range/delete-contents, :variadic false, :file "src/web/Range.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Range.deleteContents() method removes the contents of the\n  from the `web.Document`.\n\n  `range.deleteContents()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Range/deleteContents`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Range interface represents a fragment of a document that\n  contain nodes and parts of text nodes."}