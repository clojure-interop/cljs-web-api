{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{load}, :name web.Window.ev, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {pageshow {:name web.Window.ev/pageshow, :file "src/web/Window/ev.cljs", :line 192, :column 1, :end-line 192, :end-column 14, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 192, :column 6, :end-line 192, :end-column 14}, :doc "Event.\n\n  The pageshow event is sent to a `web.Window` when the browser\n  the window's document visible due to navigation tasks.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pageshow_event`", :tag string}, beforeunload {:name web.Window.ev/beforeunload, :file "src/web/Window/ev.cljs", :line 25, :column 1, :end-line 25, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 25, :column 6, :end-line 25, :end-column 18}, :doc "Event.\n\n  The beforeunload event is fired when the window, the document\n  its resources are about to be unloaded.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeunload_event`", :tag string}, message {:name web.Window.ev/message, :file "src/web/Window/ev.cljs", :line 128, :column 1, :end-line 128, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 128, :column 6, :end-line 128, :end-column 13}, :doc "Event.\n\n  The message event is fired on a `web.Window` object when the\n  receives a message, for example from a call to Window.postMessage()\n  another browsing context.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/message_event`", :tag string}, cut {:name web.Window.ev/cut, :file "src/web/Window/ev.cljs", :line 54, :column 1, :end-line 54, :end-column 9, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 54, :column 6, :end-line 54, :end-column 9}, :doc "Event.\n\n  The cut event is fired when the user has initiated a \\\"cut\\\"\n  through the browser's user interface.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/cut_event`", :tag string}, load {:name web.Window.ev/load, :file "src/web/Window/ev.cljs", :line 116, :column 1, :end-line 116, :end-column 10, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 116, :column 6, :end-line 116, :end-column 10}, :doc "Event.\n\n  The load event is fired when the whole page has loaded, including\n  dependent resources such as stylesheets images. This is in contrast\n  DOMContentLoaded, which is fired as soon as the page DOM has\n  loaded, without waiting for resources finish loading\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/load_event`", :tag string}, offline {:name web.Window.ev/offline, :file "src/web/Window/ev.cljs", :line 149, :column 1, :end-line 149, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 149, :column 6, :end-line 149, :end-column 13}, :doc "Event.\n\n  The offline event of the `web.Window` interface is fired when\n  browser has lost access to the network and the value of `web.Navigator.onLine`\n  to false.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/offline_event`", :tag string}, copy {:name web.Window.ev/copy, :file "src/web/Window/ev.cljs", :line 44, :column 1, :end-line 44, :end-column 10, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 44, :column 6, :end-line 44, :end-column 10}, :doc "Event.\n\n  The copy event fires when the user initiates a copy action through\n  browser's user interface.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/copy_event`", :tag string}, dom-content-loaded {:name web.Window.ev/dom-content-loaded, :file "src/web/Window/ev.cljs", :line 64, :column 1, :end-line 64, :end-column 24, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 64, :column 6, :end-line 64, :end-column 24}, :doc "Event.\n\n  The DOMContentLoaded event fires when the initial HTML document\n  been completely loaded and parsed, without waiting for stylesheets,\n  and subframes to finish loading.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/DOMContentLoaded_event`", :tag string}, messageerror {:name web.Window.ev/messageerror, :file "src/web/Window/ev.cljs", :line 139, :column 1, :end-line 139, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 139, :column 6, :end-line 139, :end-column 18}, :doc "Event.\n\n  The messageerror event is fired on a `web.Window` object when\n  receives a message that can't be deserialized.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/messageerror_event`", :tag string}, unhandledrejection {:name web.Window.ev/unhandledrejection, :file "src/web/Window/ev.cljs", :line 244, :column 1, :end-line 244, :end-column 24, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 244, :column 6, :end-line 244, :end-column 24}, :doc "Event.\n\n  The unhandledrejection event is sent to the global scope of a\n  when a JavaScript `web.Promise` that has no rejection handler\n  rejected; typically, this is the `web.window`, but may also be\n  `web.Worker`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/unhandledrejection_event`", :tag string}, unload {:name web.Window.ev/unload, :file "src/web/Window/ev.cljs", :line 256, :column 1, :end-line 256, :end-column 12, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 256, :column 6, :end-line 256, :end-column 12}, :doc "Event.\n\n  The unload event is fired when the document or a child resource\n  being unloaded.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/unload_event`", :tag string}, paste {:name web.Window.ev/paste, :file "src/web/Window/ev.cljs", :line 202, :column 1, :end-line 202, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 202, :column 6, :end-line 202, :end-column 11}, :doc "Event.\n\n  The paste event is fired when the user has initiated a \\\"paste\\\"\n  through the browser's user interface.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/paste_event`", :tag string}, pagehide {:name web.Window.ev/pagehide, :file "src/web/Window/ev.cljs", :line 181, :column 1, :end-line 181, :end-column 14, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 181, :column 6, :end-line 181, :end-column 14}, :doc "Event.\n\n  The pagehide event is sent to a `web.Window` when the browser\n  the current page in the process of presenting a different page\n  the session's history.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pagehide_event`", :tag string}, afterprint {:name web.Window.ev/afterprint, :file "src/web/Window/ev.cljs", :line 5, :column 1, :end-line 5, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 5, :column 6, :end-line 5, :end-column 16}, :doc "Event.\n\n  The afterprint event is fired after the associated document has\n  printing or the print preview has been closed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/afterprint_event`", :tag string}, popstate {:name web.Window.ev/popstate, :file "src/web/Window/ev.cljs", :line 212, :column 1, :end-line 212, :end-column 14, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 212, :column 6, :end-line 212, :end-column 14}, :doc "Event.\n\n  The popstate event of the `web.Window` interface is fired when\n  active history entry changes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/popstate_event`", :tag string}, rejectionhandled {:name web.Window.ev/rejectionhandled, :file "src/web/Window/ev.cljs", :line 222, :column 1, :end-line 222, :end-column 22, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 222, :column 6, :end-line 222, :end-column 22}, :doc "Event.\n\n  The rejectionhandled event is sent to the script's global scope\n  `web.window` but also `web.Worker`) whenever a JavaScript `web.Promise`\n  rejected but after the promise rejection has been handled.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/rejectionhandled_event`", :tag string}, online {:name web.Window.ev/online, :file "src/web/Window/ev.cljs", :line 160, :column 1, :end-line 160, :end-column 12, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 160, :column 6, :end-line 160, :end-column 12}, :doc "Event.\n\n  The online event of the `web.Window` interface is fired when\n  browser has gained access to the network and the value of `web.Navigator.onLine`\n  to true.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/online_event`", :tag string}, vrdisplaydisconnect {:name web.Window.ev/vrdisplaydisconnect, :file "src/web/Window/ev.cljs", :line 275, :column 1, :end-line 275, :end-column 25, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 275, :column 6, :end-line 275, :end-column 25}, :doc "Event.\n\n  You can use the vrdisplaydisconnect event in an addEventListener\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaydisconnect_event`", :tag string}, hashchange {:name web.Window.ev/hashchange, :file "src/web/Window/ev.cljs", :line 95, :column 1, :end-line 95, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 95, :column 6, :end-line 95, :end-column 16}, :doc "Event.\n\n  The hashchange event is fired when the fragment identifier of\n  URL has changed (the part of the URL beginning with and following\n  # symbol).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/hashchange_event`", :tag string}, blur {:name web.Window.ev/blur, :file "src/web/Window/ev.cljs", :line 35, :column 1, :end-line 35, :end-column 10, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 35, :column 6, :end-line 35, :end-column 10}, :doc "Event.\n\n  The blur event fires when an element has lost focus.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/blur_event`", :tag string}, vrdisplaypresentchange {:name web.Window.ev/vrdisplaypresentchange, :file "src/web/Window/ev.cljs", :line 284, :column 1, :end-line 284, :end-column 28, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 284, :column 6, :end-line 284, :end-column 28}, :doc "Event.\n\n  You can use the vrdisplaypresentchange event in an addEventListener\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplaypresentchange_event`", :tag string}, vrdisplayconnect {:name web.Window.ev/vrdisplayconnect, :file "src/web/Window/ev.cljs", :line 266, :column 1, :end-line 266, :end-column 22, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 266, :column 6, :end-line 266, :end-column 22}, :doc "Event.\n\n  You can use the vrdisplayconnect event in an addEventListener\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/vrdisplayconnect_event`", :tag string}, languagechange {:name web.Window.ev/languagechange, :file "src/web/Window/ev.cljs", :line 106, :column 1, :end-line 106, :end-column 20, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 106, :column 6, :end-line 106, :end-column 20}, :doc "Event.\n\n  The languagechange event is fired at the global scope object\n  the user's preferred language changes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/languagechange_event`", :tag string}, beforeprint {:name web.Window.ev/beforeprint, :file "src/web/Window/ev.cljs", :line 15, :column 1, :end-line 15, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 15, :column 6, :end-line 15, :end-column 17}, :doc "Event.\n\n  The beforeprint event is fired when the associated document is\n  to be printed or previewed for printing.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/beforeprint_event`", :tag string}, focus {:name web.Window.ev/focus, :file "src/web/Window/ev.cljs", :line 86, :column 1, :end-line 86, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 86, :column 6, :end-line 86, :end-column 11}, :doc "Event.\n\n  The focus event fires when an element has received focus.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/focus_event`", :tag string}, orientationchange {:name web.Window.ev/orientationchange, :file "src/web/Window/ev.cljs", :line 171, :column 1, :end-line 171, :end-column 23, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 171, :column 6, :end-line 171, :end-column 23}, :doc "Event.\n\n  The orientationchange event is fired when the orientation of\n  device has changed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/orientationchange_event`", :tag string}, storage {:name web.Window.ev/storage, :file "src/web/Window/ev.cljs", :line 233, :column 1, :end-line 233, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 233, :column 6, :end-line 233, :end-column 13}, :doc "Event.\n\n  The storage event of the `web.Window` interface fires when a\n  area (localStorage or sessionStorage) has been modified in the\n  of another document.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event`", :tag string}, error {:name web.Window.ev/error, :file "src/web/Window/ev.cljs", :line 75, :column 1, :end-line 75, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window/ev.cljs", :line 75, :column 6, :end-line 75, :end-column 11}, :doc "Event.\n\n  The error event is fired on a `web.Window` object when a resource\n  to load or couldn't be used — for example if a script has an\n  error.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/error_event`", :tag string}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Window Events."}