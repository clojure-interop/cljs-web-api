{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ScriptProcessorNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {buffer-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScriptProcessorNode.cljs", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize`"}, :name web.ScriptProcessorNode/buffer-size, :variadic false, :file "src/web/ScriptProcessorNode.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize`"}, set-buffer-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScriptProcessorNode.cljs", :line 23, :column 7, :end-line 23, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize`"}, :name web.ScriptProcessorNode/set-buffer-size!, :variadic false, :file "src/web/ScriptProcessorNode.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/bufferSize`"}, onaudioprocess {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScriptProcessorNode.cljs", :line 40, :column 7, :end-line 40, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess`"}, :name web.ScriptProcessorNode/onaudioprocess, :variadic false, :file "src/web/ScriptProcessorNode.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess`"}, set-onaudioprocess! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScriptProcessorNode.cljs", :line 57, :column 7, :end-line 57, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess`"}, :name web.ScriptProcessorNode/set-onaudioprocess!, :variadic false, :file "src/web/ScriptProcessorNode.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The following example shows basic usage of a ScriptProcessorNode\n  take a track loaded via `audio.AudioContext.decodeAudioData()`,\n  it, adding a bit of white noise to each audio sample of the input\n  (buffer) and play it through the `audio.AudioDestinationNode`.\n  each channel and each sample frame, the scriptNode.onaudioprocess\n  takes the associated audioProcessingEvent and uses it to loop\n  each channel of the input buffer, and each sample in each channel,\n  add a small amount of white noise, before setting that result\n  be the output sample in each case.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScriptProcessorNode/onaudioprocess`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ScriptProcessorNode interface allows the generation, processing,\n  analyzing of audio using JavaScript."}