{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.StorageManager, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {estimate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageManager.cljs", :line 8, :column 7, :end-line 8, :end-column 15, :arglists (quote ([this])), :doc "Method.\n\n  The estimate() method of the `web.StorageManager` interface asks\n  Storage Manager to obtain quota and usage information for the\n  origin. This method operates asynchronously, so it returns a\n  which resolves once the information is available. The promise's\n  handler receives as an input a `web.StorageEstimate` with the\n  and quota data.\n\n  `var estimatePromise = StorageManager.estimate();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate`"}, :name web.StorageManager/estimate, :variadic false, :file "src/web/StorageManager.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The estimate() method of the `web.StorageManager` interface asks\n  Storage Manager to obtain quota and usage information for the\n  origin. This method operates asynchronously, so it returns a\n  which resolves once the information is available. The promise's\n  handler receives as an input a `web.StorageEstimate` with the\n  and quota data.\n\n  `var estimatePromise = StorageManager.estimate();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/estimate`"}, persist {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageManager.cljs", :line 24, :column 7, :end-line 24, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The persist() method of the `web.StorageManager` interface requests\n  to use persistent storage, and returns a `web.Promise` that resolves\n  true if permission is granted and box mode is persistent, and\n  otherwise.\n\n  `navigator.storage.persist().then(function(persistent) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persist`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.StorageManager/persist, :variadic true, :file "src/web/StorageManager.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The persist() method of the `web.StorageManager` interface requests\n  to use persistent storage, and returns a `web.Promise` that resolves\n  true if permission is granted and box mode is persistent, and\n  otherwise.\n\n  `navigator.storage.persist().then(function(persistent) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persist`"}, persisted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageManager.cljs", :line 38, :column 7, :end-line 38, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The persisted() method of the `web.StorageManager` interface\n  a `web.Promise` that resolves to true if box mode is persistent\n  your site's storage.\n\n  `navigator.storage.persisted().then(function(persistent) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persisted`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.StorageManager/persisted, :variadic true, :file "src/web/StorageManager.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The persisted() method of the `web.StorageManager` interface\n  a `web.Promise` that resolves to true if box mode is persistent\n  your site's storage.\n\n  `navigator.storage.persisted().then(function(persistent) { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/persisted`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The StorageManager interface of the the Storage API provides\n  interface for managing persistance permissions and estimating\n  storage. You can get a reference to this interface using either\n  or `web.WorkerNavigator.storage`."}