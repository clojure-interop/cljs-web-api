{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ImageBitmapRenderingContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {transfer-from-image-bitmap {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ImageBitmapRenderingContext.cljs", :line 9, :column 7, :end-line 9, :end-column 33, :arglists (quote ([this bitmap])), :doc "Method.\n\n  The ImageBitmapRenderingContext.transferFromImageBitmap() method\n  the given `web.ImageBitmap` in the canvas associated with this\n  context. The ownership of the ImageBitmap is transferred to the\n  as well.\n\n  `void ImageBitmapRenderingContext.transferFromImageBitmap(bitmap)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap`"}, :name web.ImageBitmapRenderingContext/transfer-from-image-bitmap, :variadic false, :file "src/web/ImageBitmapRenderingContext.cljs", :end-column 33, :method-params ([this bitmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this bitmap])), :doc "Method.\n\n  The ImageBitmapRenderingContext.transferFromImageBitmap() method\n  the given `web.ImageBitmap` in the canvas associated with this\n  context. The ownership of the ImageBitmap is transferred to the\n  as well.\n\n  `void ImageBitmapRenderingContext.transferFromImageBitmap(bitmap)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ImageBitmapRenderingContext interface is a canvas rendering\n  that provides the functionality to replace the canvas's contents\n  the given `web.ImageBitmap`. Its context id (the first argument\n  `html.HTMLCanvasElement.getContext()` or `web.OffscreenCanvas.getContext()`)\n  \\\"bitmaprenderer\\\"."}