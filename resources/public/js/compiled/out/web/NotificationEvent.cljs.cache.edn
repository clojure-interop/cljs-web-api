{:rename-macros {}, :renames {}, :externs {NotificationEvent {}}, :use-macros {}, :excludes #{}, :name web.NotificationEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.NotificationEvent/constructor, :file "src/web/NotificationEvent.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The NotificationEvent() constructor creates a new `web.NotificationEvent` object.\n\n  type\n  TBD\n  NotificationEventInit Optional\n  A dictionary object containing a `web.Notification` object to be used as the notification the event is dispatched on. In later drafts of the specification, this parameter is not optional.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/NotificationEvent`", :tag js}, wait-until {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([this promise])), :doc "Method.\n\n  The extendableEvent.waitUntil() method tells the event dispatcher\n  work is ongoing. It can also be used to detect whether that work\n  successful. In service workers, waitUntil() tells the browser\n  work is ongoing until the promise settles, and it shouldn't terminate\n  service worker if it wants that work to complete.\n\n  `event.waitUntil(promise)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil`"}, :name web.NotificationEvent/wait-until, :variadic false, :file "src/web/NotificationEvent.cljs", :end-column 17, :method-params ([this promise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this promise])), :doc "Method.\n\n  The extendableEvent.waitUntil() method tells the event dispatcher\n  work is ongoing. It can also be used to detect whether that work\n  successful. In service workers, waitUntil() tells the browser\n  work is ongoing until the promise settles, and it shouldn't terminate\n  service worker if it wants that work to complete.\n\n  `event.waitUntil(promise)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil`"}, action {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  Returns the string ID of the notification button the user clicked.\n  value returns an empty string if the user clicked the notification\n  other than an action button, or the notification does not have\n  button. The notification id is set during the creation of the\n  via the actions array attribute and can't be modified unless\n  notification is replaced.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/action`"}, :name web.NotificationEvent/action, :variadic false, :file "src/web/NotificationEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the string ID of the notification button the user clicked.\n  value returns an empty string if the user clicked the notification\n  other than an action button, or the notification does not have\n  button. The notification id is set during the creation of the\n  via the actions array attribute and can't be modified unless\n  notification is replaced.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/action`"}, set-action! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 49, :column 7, :end-line 49, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the string ID of the notification button the user clicked.\n  value returns an empty string if the user clicked the notification\n  other than an action button, or the notification does not have\n  button. The notification id is set during the creation of the\n  via the actions array attribute and can't be modified unless\n  notification is replaced.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/action`"}, :name web.NotificationEvent/set-action!, :variadic false, :file "src/web/NotificationEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the string ID of the notification button the user clicked.\n  value returns an empty string if the user clicked the notification\n  other than an action button, or the notification does not have\n  button. The notification id is set during the creation of the\n  via the actions array attribute and can't be modified unless\n  notification is replaced.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/action`"}, notification {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The notification read-only property of the `web.NotificationEvent`\n  returns the instance of the `web.Notification` that was clicked\n  fire the event. The `web.Notification` provides read-only access\n  many properties that were set at the instantiation time of the\n  such as tag and data attributes that allow you to store information\n  defered use in the notificationclick event.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/notification`"}, :name web.NotificationEvent/notification, :variadic false, :file "src/web/NotificationEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The notification read-only property of the `web.NotificationEvent`\n  returns the instance of the `web.Notification` that was clicked\n  fire the event. The `web.Notification` provides read-only access\n  many properties that were set at the instantiation time of the\n  such as tag and data attributes that allow you to store information\n  defered use in the notificationclick event.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/notification`"}, set-notification! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NotificationEvent.cljs", :line 77, :column 7, :end-line 77, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The notification read-only property of the `web.NotificationEvent`\n  returns the instance of the `web.Notification` that was clicked\n  fire the event. The `web.Notification` provides read-only access\n  many properties that were set at the instantiation time of the\n  such as tag and data attributes that allow you to store information\n  defered use in the notificationclick event.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/notification`"}, :name web.NotificationEvent/set-notification!, :variadic false, :file "src/web/NotificationEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The notification read-only property of the `web.NotificationEvent`\n  returns the instance of the `web.Notification` that was clicked\n  fire the event. The `web.Notification` provides read-only access\n  many properties that were set at the instantiation time of the\n  such as tag and data attributes that allow you to store information\n  defered use in the notificationclick event.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NotificationEvent/notification`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The parameter passed into the `web.onnotificationclick` handler,\n  NotificationEvent interface represents a notification click event\n  is dispatched on the `web.ServiceWorkerGlobalScope` of a `web.ServiceWorker`."}