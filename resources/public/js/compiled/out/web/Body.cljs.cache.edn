{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Body, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {array-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 6, :column 7, :end-line 6, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Body/array-buffer, :variadic true, :file "src/web/Body.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`"}, blob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 21, :column 7, :end-line 21, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Body/blob, :variadic true, :file "src/web/Body.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`"}, form-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Body/form-data, :variadic true, :file "src/web/Body.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`"}, json {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 52, :column 7, :end-line 52, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Body/json, :variadic true, :file "src/web/Body.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`"}, text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 67, :column 7, :end-line 67, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Body/text, :variadic true, :file "src/web/Body.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`"}, body {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 83, :column 7, :end-line 83, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Body/body, :variadic false, :file "src/web/Body.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, set-body! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 95, :column 7, :end-line 95, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Body/set-body!, :variadic false, :file "src/web/Body.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, body-used {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 107, :column 7, :end-line 107, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Body/body-used, :variadic false, :file "src/web/Body.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, set-body-used! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Body.cljs", :line 119, :column 7, :end-line 119, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Body/set-body-used!, :variadic false, :file "src/web/Body.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Body mixin of the Fetch API represents the body of the response/request,\n  you to declare what its content type is and how it should be"}