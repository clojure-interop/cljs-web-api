{:rename-macros {}, :renames {}, :externs {FormData {}}, :use-macros {}, :excludes #{set get keys}, :name web.FormData, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 114, :column 7, :end-line 114, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The set() method of the `web.FormData` interface sets a new value\n  an existing key inside a FormData object, or adds the key/value\n  it does not already exist.\n\n  `There are two versions of this method: a two and a three parameter version:\n\n\n\n  formData.set(name, value);\n  formData.set(name, value, filename);\n\n  Parameters\n\n\n  name\n  The name of the field whose data is contained in value.\n  value\n  The field's value. In the two parameter version this is a `web.USVString`, or if it is not, it is converted to a string. In the three parameter version this can be a `web.Blob`, `file.File`, or a `web.USVString`. If none of these are specified the value is converted to a string.\n  filename Optional\n  The filename reported to the server (a `web.USVString`), when a `web.Blob` or `file.File` is passed as the second parameter. The default filename for `web.Blob` objects is \\\"blob\\\".\n\n\n\n  Note: If you specify a `web.Blob` as the data to append to the FormData object, the filename that will be reported to the server in the \\\"Content-Disposition\\\" header used to vary from browser to browser.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/set`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.FormData/set, :variadic true, :file "src/web/FormData.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The set() method of the `web.FormData` interface sets a new value\n  an existing key inside a FormData object, or adds the key/value\n  it does not already exist.\n\n  `There are two versions of this method: a two and a three parameter version:\n\n\n\n  formData.set(name, value);\n  formData.set(name, value, filename);\n\n  Parameters\n\n\n  name\n  The name of the field whose data is contained in value.\n  value\n  The field's value. In the two parameter version this is a `web.USVString`, or if it is not, it is converted to a string. In the three parameter version this can be a `web.Blob`, `file.File`, or a `web.USVString`. If none of these are specified the value is converted to a string.\n  filename Optional\n  The filename reported to the server (a `web.USVString`), when a `web.Blob` or `file.File` is passed as the second parameter. The default filename for `web.Blob` objects is \\\"blob\\\".\n\n\n\n  Note: If you specify a `web.Blob` as the data to append to the FormData object, the filename that will be reported to the server in the \\\"Content-Disposition\\\" header used to vary from browser to browser.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/set`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 64, :column 7, :end-line 64, :end-column 10, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.FormData` interface returns the\n  value associated with a given key from within a FormData object.\n  you expect multiple values and want all of them, use the `web.getAll()`\n  instead.\n\n  `formData.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/get`"}, :name web.FormData/get, :variadic false, :file "src/web/FormData.cljs", :end-column 10, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.FormData` interface returns the\n  value associated with a given key from within a FormData object.\n  you expect multiple values and want all of them, use the `web.getAll()`\n  instead.\n\n  `formData.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/get`"}, entries {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.entries() method returns an `web.iterator` allowing\n  go through all key/value pairs contained in this object. The\n  of each pair is a `web.USVString` object; the value either a\n  or a `web.Blob`.\n\n  `formData.entries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries`"}, :name web.FormData/entries, :variadic false, :file "src/web/FormData.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.entries() method returns an `web.iterator` allowing\n  go through all key/value pairs contained in this object. The\n  of each pair is a `web.USVString` object; the value either a\n  or a `web.Blob`.\n\n  `formData.entries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/entries`"}, append {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The append() method of the `web.FormData` interface appends a\n  value onto an existing key inside a FormData object, or adds\n  key if it does not already exist.\n\n  `There are two versions of this method: a two and a three parameter version:\n\n\n\n  formData.append(name, value);\n  formData.append(name, value, filename);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/append`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.FormData/append, :variadic true, :file "src/web/FormData.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The append() method of the `web.FormData` interface appends a\n  value onto an existing key inside a FormData object, or adds\n  key if it does not already exist.\n\n  `There are two versions of this method: a two and a three parameter version:\n\n\n\n  formData.append(name, value);\n  formData.append(name, value, filename);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/append`"}, delete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([this name])), :doc "Method.\n\n  The delete() method of the `web.FormData` interface deletes a\n  and its value(s) from a FormData object.\n\n  `formData.delete(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete`"}, :name web.FormData/delete, :variadic false, :file "src/web/FormData.cljs", :end-column 13, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The delete() method of the `web.FormData` interface deletes a\n  and its value(s) from a FormData object.\n\n  `formData.delete(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/delete`"}, keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 102, :column 7, :end-line 102, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.keys() method returns an `web.iterator` allowing\n  go through all keys contained in this object. The keys are `web.USVString`\n\n  `formData.keys();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/keys`"}, :name web.FormData/keys, :variadic false, :file "src/web/FormData.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.keys() method returns an `web.iterator` allowing\n  go through all keys contained in this object. The keys are `web.USVString`\n\n  `formData.keys();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/keys`"}, values {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 146, :column 7, :end-line 146, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.values() method returns an `web.iterator` allowing\n  go through all values contained in this object. The values are\n  or `web.Blob` objects.\n\n  `formData.values();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/values`"}, :name web.FormData/values, :variadic false, :file "src/web/FormData.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The FormData.values() method returns an `web.iterator` allowing\n  go through all values contained in this object. The values are\n  or `web.Blob` objects.\n\n  `formData.values();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/values`"}, get-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 78, :column 7, :end-line 78, :end-column 14, :arglists (quote ([this name])), :doc "Method.\n\n  The getAll() method of the `web.FormData` interface returns all\n  values associated with a given key from within a FormData object.\n\n  `formData.getAll(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll`"}, :name web.FormData/get-all, :variadic false, :file "src/web/FormData.cljs", :end-column 14, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The getAll() method of the `web.FormData` interface returns all\n  values associated with a given key from within a FormData object.\n\n  `formData.getAll(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll`"}, constructor {:name web.FormData/constructor, :file "src/web/FormData.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The FormData() constructor creates a new `web.FormData` object.\n\n  form Optional\n  An HTML `web.<form>` element — when specified, the `web.FormData` object will be populated with the form's current keys/values using the name property of each element for the keys and their submitted value for the values. It will also encode file input content.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/FormData`", :tag js}, has {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FormData.cljs", :line 90, :column 7, :end-line 90, :end-column 10, :arglists (quote ([this name])), :doc "Method.\n\n  The has() method of the `web.FormData` interface returns a boolean\n  whether a FormData object contains a certain key.\n\n  `formData.has(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/has`"}, :name web.FormData/has, :variadic false, :file "src/web/FormData.cljs", :end-column 10, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The has() method of the `web.FormData` interface returns a boolean\n  whether a FormData object contains a certain key.\n\n  `formData.has(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FormData/has`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The FormData interface provides a way to easily construct a set\n  key/value pairs representing form fields and their values, which\n  then be easily sent using the `xml.XMLHttpRequest.send()` method.\n  uses the same format a form would use if the encoding type were\n  to \\\"multipart/form-data\\\"."}