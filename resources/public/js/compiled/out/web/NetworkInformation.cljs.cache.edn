{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name web.NetworkInformation, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-downlink! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 26, :column 7, :end-line 26, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The downlink read-only property of the `web.NetworkInformation`\n  returns the effective bandwidth estimate in megabits per second,\n  to the nearest multiple of 25 kilobits per seconds. This value\n  based on recently observed application layer throughput across\n  active connections, excluding connections made to a private address\n  In the absence of recent bandwidth measurement data, the attribute\n  is determined by the properties of the underlying connection\n\n  `var downLink = NetworkInformation.downlink`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink`"}, :name web.NetworkInformation/set-downlink!, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The downlink read-only property of the `web.NetworkInformation`\n  returns the effective bandwidth estimate in megabits per second,\n  to the nearest multiple of 25 kilobits per seconds. This value\n  based on recently observed application layer throughput across\n  active connections, excluding connections made to a private address\n  In the absence of recent bandwidth measurement data, the attribute\n  is determined by the properties of the underlying connection\n\n  `var downLink = NetworkInformation.downlink`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink`"}, save-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 99, :column 7, :end-line 99, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.saveData read-only property of the `web.NetworkInformation`\n  returns true if the user has set a reduced data usage option\n  the user agent.\n\n  `var saveData = NetworkInformation.saveData;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData`"}, :name web.NetworkInformation/save-data, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.saveData read-only property of the `web.NetworkInformation`\n  returns true if the user has set a reduced data usage option\n  the user agent.\n\n  `var saveData = NetworkInformation.saveData;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/saveData`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 56, :column 7, :end-line 56, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.onchange event handler contains the code\n  is fired when connection information changes, and the change\n  received by the `web.NetworkInformation` object.\n\n  `netInfo.onchange = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/onchange`"}, :name web.NetworkInformation/onchange, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.onchange event handler contains the code\n  is fired when connection information changes, and the change\n  received by the `web.NetworkInformation` object.\n\n  `netInfo.onchange = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/onchange`"}, rtt {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 82, :column 7, :end-line 82, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.rtt read-only property returns the estimated\n  round-trip time of the current connection, rounded to the nearest\n  of 25 milliseconds. This value is based on recently observed\n  RTT measurements across recently active connections. It excludes\n  made to a private address space. If no recent measurement data\n  available, the value is based on the properties of the underlying\n  technology.\n\n  `rtt = NetworkInformation.rtt`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/rtt`"}, :name web.NetworkInformation/rtt, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.rtt read-only property returns the estimated\n  round-trip time of the current connection, rounded to the nearest\n  of 25 milliseconds. This value is based on recently observed\n  RTT measurements across recently active connections. It excludes\n  made to a private address space. If no recent measurement data\n  available, the value is based on the properties of the underlying\n  technology.\n\n  `rtt = NetworkInformation.rtt`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/rtt`"}, downlink {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 9, :column 7, :end-line 9, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The downlink read-only property of the `web.NetworkInformation`\n  returns the effective bandwidth estimate in megabits per second,\n  to the nearest multiple of 25 kilobits per seconds. This value\n  based on recently observed application layer throughput across\n  active connections, excluding connections made to a private address\n  In the absence of recent bandwidth measurement data, the attribute\n  is determined by the properties of the underlying connection\n\n  `var downLink = NetworkInformation.downlink`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink`"}, :name web.NetworkInformation/downlink, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The downlink read-only property of the `web.NetworkInformation`\n  returns the effective bandwidth estimate in megabits per second,\n  to the nearest multiple of 25 kilobits per seconds. This value\n  based on recently observed application layer throughput across\n  active connections, excluding connections made to a private address\n  In the absence of recent bandwidth measurement data, the attribute\n  is determined by the properties of the underlying connection\n\n  `var downLink = NetworkInformation.downlink`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlink`"}, set-onchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 69, :column 7, :end-line 69, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The NetworkInformation.onchange event handler contains the code\n  is fired when connection information changes, and the change\n  received by the `web.NetworkInformation` object.\n\n  `netInfo.onchange = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/onchange`"}, :name web.NetworkInformation/set-onchange!, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NetworkInformation.onchange event handler contains the code\n  is fired when connection information changes, and the change\n  received by the `web.NetworkInformation` object.\n\n  `netInfo.onchange = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/onchange`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 112, :column 7, :end-line 112, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.type read-only property returns the type\n  connection a device is using to communicate with the network.\n\n  `var type = netInfo.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/type`"}, :name web.NetworkInformation/type, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.type read-only property returns the type\n  connection a device is using to communicate with the network.\n\n  `var type = netInfo.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/type`"}, effective-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 124, :column 7, :end-line 124, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The effectiveType read-only property of the `web.NetworkInformation`\n  returns the effective type of the connection meaning one of 'slow-2g',\n  '3g', or '4g'. This value is determined using a combination of\n  observed, round-trip time and downlink values.\n\n  `var effectiveType = NetworkInformation.effectiveType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType`"}, :name web.NetworkInformation/effective-type, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The effectiveType read-only property of the `web.NetworkInformation`\n  returns the effective type of the connection meaning one of 'slow-2g',\n  '3g', or '4g'. This value is determined using a combination of\n  observed, round-trip time and downlink values.\n\n  `var effectiveType = NetworkInformation.effectiveType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType`"}, set-effective-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 138, :column 7, :end-line 138, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The effectiveType read-only property of the `web.NetworkInformation`\n  returns the effective type of the connection meaning one of 'slow-2g',\n  '3g', or '4g'. This value is determined using a combination of\n  observed, round-trip time and downlink values.\n\n  `var effectiveType = NetworkInformation.effectiveType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType`"}, :name web.NetworkInformation/set-effective-type!, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The effectiveType read-only property of the `web.NetworkInformation`\n  returns the effective type of the connection meaning one of 'slow-2g',\n  '3g', or '4g'. This value is determined using a combination of\n  observed, round-trip time and downlink values.\n\n  `var effectiveType = NetworkInformation.effectiveType`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/effectiveType`"}, downlink-max {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NetworkInformation.cljs", :line 43, :column 7, :end-line 43, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.downlinkMax read-only property returns\n  maximum downlink speed, in megabits per second (Mbps), for the\n  connection technology.\n\n  `var max = NetworkInformation.downlinkMax`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlinkMax`"}, :name web.NetworkInformation/downlink-max, :variadic false, :file "src/web/NetworkInformation.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NetworkInformation.downlinkMax read-only property returns\n  maximum downlink speed, in megabits per second (Mbps), for the\n  connection technology.\n\n  `var max = NetworkInformation.downlinkMax`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation/downlinkMax`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The NetworkInformation interface provides information about the\n  a device is using to communicate with the network and provides\n  means for scripts to be notified if the connection type changes.\n  NetworkInformation interfaces cannot be instantiated. It is instead\n  through the connection property of the `web.Navigator` interface."}