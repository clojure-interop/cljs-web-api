{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ValidityState, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {bad-input {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ValidityState.cljs", :line 8, :column 7, :end-line 8, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only badInput property of a ValidityState object indicates\n  the user has provided input that the browser is unable to convert.\n  example, if you have a number input element whose content is\n  string. Note: While this is unsupported in Internet Explorer,\n  non-numeric value will be dismissed from the field if it is a\n  input.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput`"}, :name web.ValidityState/bad-input, :variadic false, :file "src/web/ValidityState.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only badInput property of a ValidityState object indicates\n  the user has provided input that the browser is unable to convert.\n  example, if you have a number input element whose content is\n  string. Note: While this is unsupported in Internet Explorer,\n  non-numeric value will be dismissed from the field if it is a\n  input.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/badInput`"}, too-long {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ValidityState.cljs", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only tooLong property of a ValidityState object indicates\n  the value of an `web.<input>`, `web.<button>`, `web.<select>`,\n  `web.<fieldset>` or `web.<textarea>`, after having been edited\n  the user, exceeds the maximum code-unit length established by\n  element's maxlength attribute.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong`"}, :name web.ValidityState/too-long, :variadic false, :file "src/web/ValidityState.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only tooLong property of a ValidityState object indicates\n  the value of an `web.<input>`, `web.<button>`, `web.<select>`,\n  `web.<fieldset>` or `web.<textarea>`, after having been edited\n  the user, exceeds the maximum code-unit length established by\n  element's maxlength attribute.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong`"}, set-too-long! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ValidityState.cljs", :line 35, :column 7, :end-line 35, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only tooLong property of a ValidityState object indicates\n  the value of an `web.<input>`, `web.<button>`, `web.<select>`,\n  `web.<fieldset>` or `web.<textarea>`, after having been edited\n  the user, exceeds the maximum code-unit length established by\n  element's maxlength attribute.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong`"}, :name web.ValidityState/set-too-long!, :variadic false, :file "src/web/ValidityState.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only tooLong property of a ValidityState object indicates\n  the value of an `web.<input>`, `web.<button>`, `web.<select>`,\n  `web.<fieldset>` or `web.<textarea>`, after having been edited\n  the user, exceeds the maximum code-unit length established by\n  element's maxlength attribute.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooLong`"}, too-short {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ValidityState.cljs", :line 48, :column 7, :end-line 48, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort`"}, :name web.ValidityState/too-short, :variadic false, :file "src/web/ValidityState.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort`"}, set-too-short! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ValidityState.cljs", :line 57, :column 7, :end-line 57, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort`"}, :name web.ValidityState/set-too-short!, :variadic false, :file "src/web/ValidityState.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ValidityState/tooShort`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ValidityState interface represents the validity states that\n  element can be in, with respect to constraint validation. Together,\n  help explain why an element's value fails to validate, if it's\n  valid."}