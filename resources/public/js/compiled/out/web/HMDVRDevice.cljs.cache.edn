{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.HMDVRDevice, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-eye-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/HMDVRDevice.cljs", :line 7, :column 7, :end-line 7, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The getEyeParameters() method of the `web.HMDVRDevice` interface\n  current parameters for the eye specified as its argument (\\\"left\\\"\n  \\\"right\\\") — stored in a `vr.VREyeParameters` object.\n\n  `var myLeftEye = HMDVRDevice.getEyeParameters('left');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/getEyeParameters`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.HMDVRDevice/get-eye-parameters, :variadic true, :file "src/web/HMDVRDevice.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getEyeParameters() method of the `web.HMDVRDevice` interface\n  current parameters for the eye specified as its argument (\\\"left\\\"\n  \\\"right\\\") — stored in a `vr.VREyeParameters` object.\n\n  `var myLeftEye = HMDVRDevice.getEyeParameters('left');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/getEyeParameters`"}, set-field-of-view {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/HMDVRDevice.cljs", :line 20, :column 7, :end-line 20, :end-column 24, :arglists (quote ([this left-fov right-fov z-near z-far])), :doc "Method.\n\n  The setFieldOfView() method of the `web.HMDVRDevice` interface\n  be used to set the field of view for one eye, or both eyes simultaneously.\n\n  `HMDVRDevice.setFieldOfView(leftFOV,rightFOV,zNear,zFar);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/setFieldOfView`"}, :name web.HMDVRDevice/set-field-of-view, :variadic false, :file "src/web/HMDVRDevice.cljs", :end-column 24, :method-params ([this left-fov right-fov z-near z-far]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this left-fov right-fov z-near z-far])), :doc "Method.\n\n  The setFieldOfView() method of the `web.HMDVRDevice` interface\n  be used to set the field of view for one eye, or both eyes simultaneously.\n\n  `HMDVRDevice.setFieldOfView(leftFOV,rightFOV,zNear,zFar);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HMDVRDevice/setFieldOfView`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HMDVRDevice interface of the WebVR API represents a head\n  display, providing access to information about each eye, and\n  us to modify the current field of view."}