{:rename-macros {}, :renames {}, :externs {ReadableStreamDefaultController {}}, :use-macros {}, :excludes #{}, :name web.ReadableStreamDefaultController, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ReadableStreamDefaultController/constructor, :file "src/web/ReadableStreamDefaultController.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The ReadableStreamDefaultController() constructor creates and returns a ReadableStreamDefaultController() object instance.\n\n  stream\n  The `web.ReadableStream` to be controlled.\n  underlyingSource\n  An object containing methods and properties that define how the constructed stream instance will behave. See the ReadableStream() constructor's parameters definitions for more information.\n  size\n  A method containing a parameter chunk — this indicates the size to use for each chunk, in bytes.\n  highWaterMark\n  A non-negative integer — this defines the total number of chunks that can be contained in the internal queue before backpressure is applied.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/ReadableStreamDefaultController`", :tag js}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 25, :column 7, :end-line 25, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.ReadableStreamDefaultController`\n  closes the associated stream.\n\n  `readableStreamDefaultControllerInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/close`"}, :name web.ReadableStreamDefaultController/close, :variadic false, :file "src/web/ReadableStreamDefaultController.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.ReadableStreamDefaultController`\n  closes the associated stream.\n\n  `readableStreamDefaultControllerInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/close`"}, enqueue {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 37, :column 7, :end-line 37, :end-column 14, :arglists (quote ([this chunk])), :doc "Method.\n\n  The enqueue() method of the `web.ReadableStreamDefaultController`\n  enqueues a given chunk in the associated stream.\n\n  `readableStreamDefaultControllerInstance.enqueue(chunk);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/enqueue`"}, :name web.ReadableStreamDefaultController/enqueue, :variadic false, :file "src/web/ReadableStreamDefaultController.cljs", :end-column 14, :method-params ([this chunk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this chunk])), :doc "Method.\n\n  The enqueue() method of the `web.ReadableStreamDefaultController`\n  enqueues a given chunk in the associated stream.\n\n  `readableStreamDefaultControllerInstance.enqueue(chunk);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/enqueue`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 49, :column 7, :end-line 49, :end-column 12, :arglists (quote ([this e])), :doc "Method.\n\n  The error() method of the `web.ReadableStreamDefaultController`\n  causes any future interactions with the associated stream to\n\n  `readableStreamDefaultControllerInstance.error(e);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/error`"}, :name web.ReadableStreamDefaultController/error, :variadic false, :file "src/web/ReadableStreamDefaultController.cljs", :end-column 12, :method-params ([this e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this e])), :doc "Method.\n\n  The error() method of the `web.ReadableStreamDefaultController`\n  causes any future interactions with the associated stream to\n\n  `readableStreamDefaultControllerInstance.error(e);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/error`"}, desired-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 61, :column 7, :end-line 61, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableStreamDefaultController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableStreamDefaultControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/desiredSize`"}, :name web.ReadableStreamDefaultController/desired-size, :variadic false, :file "src/web/ReadableStreamDefaultController.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableStreamDefaultController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableStreamDefaultControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/desiredSize`"}, set-desired-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamDefaultController.cljs", :line 73, :column 7, :end-line 73, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableStreamDefaultController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableStreamDefaultControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/desiredSize`"}, :name web.ReadableStreamDefaultController/set-desired-size!, :variadic false, :file "src/web/ReadableStreamDefaultController.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableStreamDefaultController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableStreamDefaultControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamDefaultController/desiredSize`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ReadableStreamDefaultController interface of the Streams\n  represents a controller allowing control of a `web.ReadableStream`'s\n  and internal queue. Default controllers are for streams that\n  not byte streams."}