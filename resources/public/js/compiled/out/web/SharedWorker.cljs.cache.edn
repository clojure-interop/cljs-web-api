{:rename-macros {}, :renames {}, :externs {SharedWorker {}}, :use-macros {}, :excludes #{}, :name web.SharedWorker, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.SharedWorker/constructor, :file "src/web/SharedWorker.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SharedWorker.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The SharedWorker() constructor creates a `web.SharedWorker` object that executes the script at the specified URL. This script must obey the same-origin policy.\n\n  aURL\n  A `dom.DOMString` representing the URL of the script the worker will execute. It must obey the same-origin policy.\n  name Optional\n  A `dom.DOMString` specifying an identifying name for the `web.SharedWorkerGlobalScope` representing the scope of the worker, which is mainly useful for debugging purposes.\n  options Optional\n  An object containing option properties that can set when creating the object instance. Available properties are as follows:\n\n  type: A `dom.DOMString` specifying the type of worker to create. The value can be classic or module. If not specified, the default used is classic.\n  credentials: A `dom.DOMString` specifying the type of credentials to use for the worker. The value can be omit, same-origin, or include. If not specified, or if type is classic, the default used is omit (no credentials required).\n  name: A `dom.DOMString` specifying an identifying name for the `web.SharedWorkerGlobalScope` representing the scope of the worker, which is mainly useful for debugging purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker`", :tag js}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SharedWorker.cljs", :line 27, :column 7, :end-line 27, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.SharedWorker/onerror, :variadic false, :file "src/web/SharedWorker.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SharedWorker.cljs", :line 40, :column 7, :end-line 40, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.SharedWorker/set-onerror!, :variadic false, :file "src/web/SharedWorker.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, port {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SharedWorker.cljs", :line 53, :column 7, :end-line 53, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The port property of the `web.SharedWorker` interface returns\n  `web.MessagePort` object used to communicate and control the\n  worker.\n\n  `myWorker.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port`"}, :name web.SharedWorker/port, :variadic false, :file "src/web/SharedWorker.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The port property of the `web.SharedWorker` interface returns\n  `web.MessagePort` object used to communicate and control the\n  worker.\n\n  `myWorker.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port`"}, set-port! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SharedWorker.cljs", :line 66, :column 7, :end-line 66, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The port property of the `web.SharedWorker` interface returns\n  `web.MessagePort` object used to communicate and control the\n  worker.\n\n  `myWorker.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port`"}, :name web.SharedWorker/set-port!, :variadic false, :file "src/web/SharedWorker.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The port property of the `web.SharedWorker` interface returns\n  `web.MessagePort` object used to communicate and control the\n  worker.\n\n  `myWorker.port;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/port`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The SharedWorker interface represents a specific kind of worker\n  can be accessed from several browsing contexts, such as several\n  iframes or even workers. They implement an interface different\n  dedicated workers and have a different global scope, `web.SharedWorkerGlobalScope`."}