{:rename-macros {}, :renames {}, :externs {OfflineAudioContext {}}, :use-macros {}, :excludes #{}, :name web.OfflineAudioContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.OfflineAudioContext/constructor, :file "src/web/OfflineAudioContext.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The OfflineAudioContext() constructor—part of the Web Audio API—creates and returns a new `web.OfflineAudioContext` object instance, which can then be used to render audio to an `audio.AudioBuffer` rather than to an audio output device.\n\n  You can specify the parameters for the OfflineAudioContext() constructor as either the same set of parameters as are inputs into the `audio.AudioContext.createBuffer()` method, or by passing those parameters in an options object. Either way, the individual parameters are the same.\n\n\n  numberOfChannels\n  An integer specifying the number of channels the resulting `audio.AudioBuffer` should have.\n  length\n  An integer specifying the size of the buffer to create for the audio context, in sample-frames, where one sample-frame is a unit that can contain a single sample of audio data for every channel in the audio data. For example, a 5-second buffer with a sampleRate of 48000Hz would have a length of 5 * 48000 = 240000 sample-frames.\n  sampleRate\n  The sample-rate of the linear audio data in sample-frames per second. All user agents are required to support a range of 22050Hz to 96000Hz, and may support a wider range than that. The most commonly-used rate is 44100Hz, which is the sample rate used by CD audio.\n\n\n  It is important to note that, whereas you can create a new `audio.AudioContext` using the `web.new AudioContext()` constructor with no arguments, the OfflineAudioContext() constructor requires three arguments, since it needs to create an AudioBuffer. This works in exactly the same way as when you create a new `audio.AudioBuffer` with the `audio.AudioContext.createBuffer()` method. For more detail, read Audio buffers: frames, samples and channels from our Basic concepts guide.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/OfflineAudioContext`", :tag js}, resume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The resume() method of the `web.OfflineAudioContext` interface\n  the progression of time in an audio context that has been suspended.\n  promise resolves immediately because the OfflineAudioContext\n  not require the audio hardware. If the context is not currently\n  or the rendering has not started, the promise is rejected with\n\n  `OfflineAudioContext.resume().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/resume`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.OfflineAudioContext/resume, :variadic true, :file "src/web/OfflineAudioContext.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The resume() method of the `web.OfflineAudioContext` interface\n  the progression of time in an audio context that has been suspended.\n  promise resolves immediately because the OfflineAudioContext\n  not require the audio hardware. If the context is not currently\n  or the rendering has not started, the promise is rejected with\n\n  `OfflineAudioContext.resume().then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/resume`"}, start-rendering {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 45, :column 7, :end-line 45, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The startRendering() method of the `web.OfflineAudioContext`\n  starts rendering the audio graph, taking into account the current\n  and the current scheduled changes.\n\n  `Event-based version:\n\n\n\n  offlineAudioCtx.startRendering();\n  offlineAudioCtx.oncomplete = function(e) {\n  // e.renderedBuffer contains the output buffer\n  }\n\n  Promise-based version:\n\n\n\n  offlineAudioCtx.startRendering().then(function(buffer) {\n  // buffer contains the output buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.OfflineAudioContext/start-rendering, :variadic true, :file "src/web/OfflineAudioContext.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The startRendering() method of the `web.OfflineAudioContext`\n  starts rendering the audio graph, taking into account the current\n  and the current scheduled changes.\n\n  `Event-based version:\n\n\n\n  offlineAudioCtx.startRendering();\n  offlineAudioCtx.oncomplete = function(e) {\n  // e.renderedBuffer contains the output buffer\n  }\n\n  Promise-based version:\n\n\n\n  offlineAudioCtx.startRendering().then(function(buffer) {\n  // buffer contains the output buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/startRendering`"}, suspend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 73, :column 7, :end-line 73, :end-column 14, :arglists (quote ([this suspend-time])), :doc "Method.\n\n  The suspend() method of the `web.OfflineAudioContext` interface\n  a suspension of the time progression in the audio context at\n  specified time and returns a promise. This is generally useful\n  the time of manipulating the audio graph synchronously on OfflineAudioContext.\n\n  `OfflineAudioContext.suspend(suspendTime).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend`"}, :name web.OfflineAudioContext/suspend, :variadic false, :file "src/web/OfflineAudioContext.cljs", :end-column 14, :method-params ([this suspend-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this suspend-time])), :doc "Method.\n\n  The suspend() method of the `web.OfflineAudioContext` interface\n  a suspension of the time progression in the audio context at\n  specified time and returns a promise. This is generally useful\n  the time of manipulating the audio graph synchronously on OfflineAudioContext.\n\n  `OfflineAudioContext.suspend(suspendTime).then(function() { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/suspend`"}, length {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The length property of the `web.OfflineAudioContext` interface\n  an integer representing the size of the buffer in sample-frames.\n\n  `var length = OfflineAudioContext.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length`"}, :name web.OfflineAudioContext/length, :variadic false, :file "src/web/OfflineAudioContext.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The length property of the `web.OfflineAudioContext` interface\n  an integer representing the size of the buffer in sample-frames.\n\n  `var length = OfflineAudioContext.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length`"}, set-length! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 99, :column 7, :end-line 99, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The length property of the `web.OfflineAudioContext` interface\n  an integer representing the size of the buffer in sample-frames.\n\n  `var length = OfflineAudioContext.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length`"}, :name web.OfflineAudioContext/set-length!, :variadic false, :file "src/web/OfflineAudioContext.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The length property of the `web.OfflineAudioContext` interface\n  an integer representing the size of the buffer in sample-frames.\n\n  `var length = OfflineAudioContext.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/length`"}, oncomplete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 111, :column 7, :end-line 111, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  When processing is complete, you might want to use the oncomplete\n  the prompt the user that the audio can now be played, and enable\n  play button.\n\n  `var offlineAudioCtx = new OfflineAudioContext();\n  offlineAudioCtx.oncomplete = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete`"}, :name web.OfflineAudioContext/oncomplete, :variadic false, :file "src/web/OfflineAudioContext.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  When processing is complete, you might want to use the oncomplete\n  the prompt the user that the audio can now be played, and enable\n  play button.\n\n  `var offlineAudioCtx = new OfflineAudioContext();\n  offlineAudioCtx.oncomplete = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete`"}, set-oncomplete! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OfflineAudioContext.cljs", :line 125, :column 7, :end-line 125, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  When processing is complete, you might want to use the oncomplete\n  the prompt the user that the audio can now be played, and enable\n  play button.\n\n  `var offlineAudioCtx = new OfflineAudioContext();\n  offlineAudioCtx.oncomplete = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete`"}, :name web.OfflineAudioContext/set-oncomplete!, :variadic false, :file "src/web/OfflineAudioContext.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  When processing is complete, you might want to use the oncomplete\n  the prompt the user that the audio can now be played, and enable\n  play button.\n\n  `var offlineAudioCtx = new OfflineAudioContext();\n  offlineAudioCtx.oncomplete = function() { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OfflineAudioContext/oncomplete`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The OfflineAudioContext interface is an `audio.AudioContext`\n  representing an audio-processing graph built from linked together\n  In contrast with a standard `audio.AudioContext`, an OfflineAudioContext\n  render the audio to the device hardware; instead, it generates\n  as fast as it can, and outputs the result to an `audio.AudioBuffer`."}