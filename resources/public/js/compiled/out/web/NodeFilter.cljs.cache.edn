{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.NodeFilter, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {accept-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeFilter.cljs", :line 8, :column 7, :end-line 8, :end-column 18, :arglists (quote ([this node])), :doc "Method.\n\n  The NodeFilter.acceptNode() method returns an unsigned short\n  will be used to tell if a given `web.Node` must be accepted or\n  by the `web.NodeIterator` or `web.TreeWalker` iteration algorithm.\n  method is expected to be written by the user of a NodeFilter.\n  return values are:\n\n  `result = nodeFilter.acceptNode(node)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode`"}, :name web.NodeFilter/accept-node, :variadic false, :file "src/web/NodeFilter.cljs", :end-column 18, :method-params ([this node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this node])), :doc "Method.\n\n  The NodeFilter.acceptNode() method returns an unsigned short\n  will be used to tell if a given `web.Node` must be accepted or\n  by the `web.NodeIterator` or `web.TreeWalker` iteration algorithm.\n  method is expected to be written by the user of a NodeFilter.\n  return values are:\n\n  `result = nodeFilter.acceptNode(node)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeFilter/acceptNode`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A NodeFilter interface represents an object used to filter the\n  in a `web.NodeIterator` or `web.TreeWalker`. They don't know\n  about the DOM or how to traverse nodes; they just know how to\n  a single node against the provided filter."}