{:rename-macros {}, :renames {}, :externs {AnimationEvent {}}, :use-macros {}, :excludes #{}, :name web.AnimationEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.AnimationEvent/constructor, :file "src/web/AnimationEvent.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The AnimationEvent() constructor returns a newly created `web.AnimationEvent`, representing an event in relation with an animation.\n\n  The AnimationEvent() constructor also inherits arguments from `web.Event()`.\n\n\n  type\n  A `dom.DOMString` representing the name of the type of the AnimationEvent. It is case-sensitive and can be: 'animationstart', 'animationend', or 'animationiteration'.\n  animationName Optional\n  A `dom.DOMString` containing the value of the `web.animation-name` CSS property associated with the transition. It defaults to \\\"\\\".\n  elapsedTime Optional\n  A float giving the amount of time the animation has been running, in seconds, when this event fired, excluding any time the animation was paused. For an \\\"animationstart\\\" event, elapsedTime is 0.0 unless there was a negative value for `web.animation-delay`, in which case the event will be fired with elapsedTime containing (-1 * delay). It defaults to 0.0.\n  pseudoElement Optional\n  Is a `dom.DOMString`, starting with \\\"::\\\", containing the name of the pseudo-element the animation runs on. If the animation doesn't run on a pseudo-element but on the element itself, specify an empty string: \\\"\\\". It defaults to \\\"\\\".\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/AnimationEvent`", :tag js}, init-animation-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 26, :column 7, :end-line 26, :end-column 27, :arglists (quote ([this type-arg can-bubble-arg cancelable-arg animation-name-arg elapsed-time-arg])), :doc "Method.\n\n  The AnimationEvent.initAnimationEvent() method Initializes an\n  event created using the deprecated `web.Document.createEvent(\\\"AnimationEvent\\\")`\n\n  `animationEvent.initAnimationEvent(typeArg, canBubbleArg, cancelableArg, animationNameArg, elapsedTimeArg);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/initAnimationEvent`"}, :name web.AnimationEvent/init-animation-event, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 27, :method-params ([this type-arg can-bubble-arg cancelable-arg animation-name-arg elapsed-time-arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this type-arg can-bubble-arg cancelable-arg animation-name-arg elapsed-time-arg])), :doc "Method.\n\n  The AnimationEvent.initAnimationEvent() method Initializes an\n  event created using the deprecated `web.Document.createEvent(\\\"AnimationEvent\\\")`\n\n  `animationEvent.initAnimationEvent(typeArg, canBubbleArg, cancelableArg, animationNameArg, elapsedTimeArg);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/initAnimationEvent`"}, animation-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 38, :column 7, :end-line 38, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.animationName read-only property is a `dom.DOMString`\n  the value of the `web.animation-name` CSS property associated\n  the transition.\n\n  `name = AnimationEvent.animationName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName`"}, :name web.AnimationEvent/animation-name, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.animationName read-only property is a `dom.DOMString`\n  the value of the `web.animation-name` CSS property associated\n  the transition.\n\n  `name = AnimationEvent.animationName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName`"}, set-animation-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 51, :column 7, :end-line 51, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.animationName read-only property is a `dom.DOMString`\n  the value of the `web.animation-name` CSS property associated\n  the transition.\n\n  `name = AnimationEvent.animationName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName`"}, :name web.AnimationEvent/set-animation-name!, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.animationName read-only property is a `dom.DOMString`\n  the value of the `web.animation-name` CSS property associated\n  the transition.\n\n  `name = AnimationEvent.animationName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/animationName`"}, elapsed-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired, excluding any time the animation was paused.\n  an \\\"animationstart\\\" event, elapsedTime is 0.0 unless there\n  a negative value for `web.animation-delay`, in which case the\n  will be fired with elapsedTime containing (-1 * delay).\n\n  `time = AnimationEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime`"}, :name web.AnimationEvent/elapsed-time, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired, excluding any time the animation was paused.\n  an \\\"animationstart\\\" event, elapsedTime is 0.0 unless there\n  a negative value for `web.animation-delay`, in which case the\n  will be fired with elapsedTime containing (-1 * delay).\n\n  `time = AnimationEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime`"}, set-elapsed-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 80, :column 7, :end-line 80, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired, excluding any time the animation was paused.\n  an \\\"animationstart\\\" event, elapsedTime is 0.0 unless there\n  a negative value for `web.animation-delay`, in which case the\n  will be fired with elapsedTime containing (-1 * delay).\n\n  `time = AnimationEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime`"}, :name web.AnimationEvent/set-elapsed-time!, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired, excluding any time the animation was paused.\n  an \\\"animationstart\\\" event, elapsedTime is 0.0 unless there\n  a negative value for `web.animation-delay`, in which case the\n  will be fired with elapsedTime containing (-1 * delay).\n\n  `time = AnimationEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/elapsedTime`"}, pseudo-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 96, :column 7, :end-line 96, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the animation doesn't run on a pseudo-element but on the\n  an empty string: ''.\n\n  `name = AnimationEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement`"}, :name web.AnimationEvent/pseudo-element, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AnimationEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the animation doesn't run on a pseudo-element but on the\n  an empty string: ''.\n\n  `name = AnimationEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement`"}, set-pseudo-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnimationEvent.cljs", :line 110, :column 7, :end-line 110, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the animation doesn't run on a pseudo-element but on the\n  an empty string: ''.\n\n  `name = AnimationEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement`"}, :name web.AnimationEvent/set-pseudo-element!, :variadic false, :file "src/web/AnimationEvent.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AnimationEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the animation doesn't run on a pseudo-element but on the\n  an empty string: ''.\n\n  `name = AnimationEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent/pseudoElement`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AnimationEvent interface represents events providing information\n  to animations."}