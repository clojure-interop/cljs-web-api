{:rename-macros {}, :renames {}, :externs {Notification {}}, :use-macros {}, :excludes #{}, :name web.Notification, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {tag {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 510, :column 7, :end-line 510, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The tag read-only property of the `web.Notification` interface\n  an identifying tag for the notification, as specified in the\n  option of the `web.Notification()` constructor.\n\n  `var tag = Notification.tag;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/tag`"}, :name web.Notification/tag, :variadic false, :file "src/web/Notification.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tag read-only property of the `web.Notification` interface\n  an identifying tag for the notification, as specified in the\n  option of the `web.Notification()` constructor.\n\n  `var tag = Notification.tag;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/tag`"}, vibrate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 586, :column 7, :end-line 586, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The vibrate read-only property of the `web.Notification` interface\n  a a vibration pattern for the device's vibration hardware to\n  when the notification fires. This is specified in the vibrate\n  of the `web.Notification()` constructor.\n\n  `var vibrate = Notification.vibrate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/vibrate`"}, :name web.Notification/vibrate, :variadic false, :file "src/web/Notification.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 586, :end-line 586, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The vibrate read-only property of the `web.Notification` interface\n  a a vibration pattern for the device's vibration hardware to\n  when the notification fires. This is specified in the vibrate\n  of the `web.Notification()` constructor.\n\n  `var vibrate = Notification.vibrate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/vibrate`"}, set-lang! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 269, :column 7, :end-line 269, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The lang read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the lang\n  of the `web.Notification()` constructor.\n\n  `var language = Notification.lang;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/lang`"}, :name web.Notification/set-lang!, :variadic false, :file "src/web/Notification.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The lang read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the lang\n  of the `web.Notification()` constructor.\n\n  `var language = Notification.lang;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/lang`"}, set-actions! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 89, :column 7, :end-line 89, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The actions read-only property of the `web.Notification` interface\n  the list of `web.NotificationAction` objects set using the actions\n  when creating the notification using the `web.Notification()`\n\n  `var actions[] = Notification.actions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/actions`"}, :name web.Notification/set-actions!, :variadic false, :file "src/web/Notification.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The actions read-only property of the `web.Notification` interface\n  the list of `web.NotificationAction` objects set using the actions\n  when creating the notification using the `web.Notification()`\n\n  `var actions[] = Notification.actions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/actions`"}, timestamp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 536, :column 7, :end-line 536, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The timestamp read-only property of the `web.Notification` interface\n  a DOMTimeStamp, as specified in the timestamp option of the `web.Notification()`\n\n  `var timestamp = Notification.timestamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/timestamp`"}, :name web.Notification/timestamp, :variadic false, :file "src/web/Notification.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 536, :end-line 536, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timestamp read-only property of the `web.Notification` interface\n  a DOMTimeStamp, as specified in the timestamp option of the `web.Notification()`\n\n  `var timestamp = Notification.timestamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/timestamp`"}, body {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Notification` interface\n  the body string of the notification, as specified in the body\n  of the `web.Notification()` constructor.\n\n  `var body = Notification.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/body`"}, :name web.Notification/body, :variadic false, :file "src/web/Notification.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Notification` interface\n  the body string of the notification, as specified in the body\n  of the `web.Notification()` constructor.\n\n  `var body = Notification.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/body`"}, badge {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 102, :column 7, :end-line 102, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The badge property of the `web.Notification` interface returns\n  URL of the image used to represent the notification when there\n  not enough space to display the notification itself.\n\n  `var url = Notification.badge`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/badge`"}, :name web.Notification/badge, :variadic false, :file "src/web/Notification.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The badge property of the `web.Notification` interface returns\n  URL of the image used to represent the notification when there\n  not enough space to display the notification itself.\n\n  `var url = Notification.badge`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/badge`"}, set-permission! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 405, :column 7, :end-line 405, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The permission read-only property of the `web.Notification` interface\n  the current permission granted by the user for the current origin\n  display web notifications.\n\n  `var permission = Notification.permission;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission`"}, :name web.Notification/set-permission!, :variadic false, :file "src/web/Notification.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The permission read-only property of the `web.Notification` interface\n  the current permission granted by the user for the current origin\n  display web notifications.\n\n  `var permission = Notification.permission;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission`"}, data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 154, :column 7, :end-line 154, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The data read-only property of the `web.Notification` interface\n  a structured clone of the notification's data, as specified in\n  data option of the `web.Notification()` constructor.\n\n  `var data = Notification.data;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/data`"}, :name web.Notification/data, :variadic false, :file "src/web/Notification.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The data read-only property of the `web.Notification` interface\n  a structured clone of the notification's data, as specified in\n  data option of the `web.Notification()` constructor.\n\n  `var data = Notification.data;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/data`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 325, :column 7, :end-line 325, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.Notification` interface specifies\n  event listener to receive close events. These events occur when\n  `web.Notification` is closed.\n\n  `Notification.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose`"}, :name web.Notification/set-onclose!, :variadic false, :file "src/web/Notification.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 325, :end-line 325, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.Notification` interface specifies\n  event listener to receive close events. These events occur when\n  `web.Notification` is closed.\n\n  `Notification.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose`"}, onshow {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 366, :column 7, :end-line 366, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onshow property of the `web.Notification` interface specifies\n  event listener to receive show events. These events occur when\n  `web.Notification` is displayed.\n\n  `Notification.onshow = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow`"}, :name web.Notification/onshow, :variadic false, :file "src/web/Notification.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onshow property of the `web.Notification` interface specifies\n  event listener to receive show events. These events occur when\n  `web.Notification` is displayed.\n\n  `Notification.onshow = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow`"}, set-require-interaction! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 463, :column 7, :end-line 463, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The requireInteraction read-only property of the `web.Notification`\n  returns a `web.Boolean` indicating that a notification should\n  active until the user clicks or dismisses it, rather than closing\n\n  `function spawnNotification(theTitle,theBody,shouldRequireInteraction) {\n  var options = {\n  body: theBody,\n  requireInteraction: shouldRequireInteraction\n  }\n  var n = new Notification(theTitle,options);\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/requireInteraction`"}, :name web.Notification/set-require-interaction!, :variadic false, :file "src/web/Notification.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The requireInteraction read-only property of the `web.Notification`\n  returns a `web.Boolean` indicating that a notification should\n  active until the user clicks or dismisses it, rather than closing\n\n  `function spawnNotification(theTitle,theBody,shouldRequireInteraction) {\n  var options = {\n  body: theBody,\n  requireInteraction: shouldRequireInteraction\n  }\n  var n = new Notification(theTitle,options);\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/requireInteraction`"}, set-onshow! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 379, :column 7, :end-line 379, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onshow property of the `web.Notification` interface specifies\n  event listener to receive show events. These events occur when\n  `web.Notification` is displayed.\n\n  `Notification.onshow = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow`"}, :name web.Notification/set-onshow!, :variadic false, :file "src/web/Notification.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onshow property of the `web.Notification` interface specifies\n  event listener to receive show events. These events occur when\n  `web.Notification` is displayed.\n\n  `Notification.onshow = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onshow`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 352, :column 7, :end-line 352, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.Notification` interface specifies\n  event listener to receive error events. These events occur when\n  goes wrong with a `web.Notification` (in many cases an error\n  the notification from being displayed.)\n\n  `Notification.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror`"}, :name web.Notification/set-onerror!, :variadic false, :file "src/web/Notification.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.Notification` interface specifies\n  event listener to receive error events. These events occur when\n  goes wrong with a `web.Notification` (in many cases an error\n  the notification from being displayed.)\n\n  `Notification.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror`"}, permission {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 392, :column 7, :end-line 392, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The permission read-only property of the `web.Notification` interface\n  the current permission granted by the user for the current origin\n  display web notifications.\n\n  `var permission = Notification.permission;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission`"}, :name web.Notification/permission, :variadic false, :file "src/web/Notification.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The permission read-only property of the `web.Notification` interface\n  the current permission granted by the user for the current origin\n  display web notifications.\n\n  `var permission = Notification.permission;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/permission`"}, dir {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 180, :column 7, :end-line 180, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The dir read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the dir\n  of the `web.Notification()` constructor.\n\n  `var direction = Notification.dir;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/dir`"}, :name web.Notification/dir, :variadic false, :file "src/web/Notification.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The dir read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the dir\n  of the `web.Notification()` constructor.\n\n  `var direction = Notification.dir;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/dir`"}, renotify {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 418, :column 7, :end-line 418, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The renotify read-only property of the `web.Notification` interface\n  whether the user should be notified after a new notification\n  an old one, as specified in the renotify option of the `web.Notification()`\n\n  `var renotify = Notification.renotify;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/renotify`"}, :name web.Notification/renotify, :variadic false, :file "src/web/Notification.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 418, :end-line 418, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The renotify read-only property of the `web.Notification` interface\n  whether the user should be notified after a new notification\n  an old one, as specified in the renotify option of the `web.Notification()`\n\n  `var renotify = Notification.renotify;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/renotify`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 338, :column 7, :end-line 338, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.Notification` interface specifies\n  event listener to receive error events. These events occur when\n  goes wrong with a `web.Notification` (in many cases an error\n  the notification from being displayed.)\n\n  `Notification.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror`"}, :name web.Notification/onerror, :variadic false, :file "src/web/Notification.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.Notification` interface specifies\n  event listener to receive error events. These events occur when\n  goes wrong with a `web.Notification` (in many cases an error\n  the notification from being displayed.)\n\n  `Notification.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onerror`"}, silent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 482, :column 7, :end-line 482, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The silent read-only property of the `web.Notification` interface\n  whether the notification should be silent, i.e., no sounds or\n  should be issued, regardless of the device settings. This is\n  in the renotify option of the `web.Notification()` constructor.\n\n  `var silent = Notification.silent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/silent`"}, :name web.Notification/silent, :variadic false, :file "src/web/Notification.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 482, :end-line 482, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The silent read-only property of the `web.Notification` interface\n  whether the notification should be silent, i.e., no sounds or\n  should be issued, regardless of the device settings. This is\n  in the renotify option of the `web.Notification()` constructor.\n\n  `var silent = Notification.silent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/silent`"}, set-silent! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 496, :column 7, :end-line 496, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The silent read-only property of the `web.Notification` interface\n  whether the notification should be silent, i.e., no sounds or\n  should be issued, regardless of the device settings. This is\n  in the renotify option of the `web.Notification()` constructor.\n\n  `var silent = Notification.silent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/silent`"}, :name web.Notification/set-silent!, :variadic false, :file "src/web/Notification.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 496, :end-line 496, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The silent read-only property of the `web.Notification` interface\n  whether the notification should be silent, i.e., no sounds or\n  should be issued, regardless of the device settings. This is\n  in the renotify option of the `web.Notification()` constructor.\n\n  `var silent = Notification.silent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/silent`"}, set-tag! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 523, :column 7, :end-line 523, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The tag read-only property of the `web.Notification` interface\n  an identifying tag for the notification, as specified in the\n  option of the `web.Notification()` constructor.\n\n  `var tag = Notification.tag;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/tag`"}, :name web.Notification/set-tag!, :variadic false, :file "src/web/Notification.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 523, :end-line 523, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The tag read-only property of the `web.Notification` interface\n  an identifying tag for the notification, as specified in the\n  option of the `web.Notification()` constructor.\n\n  `var tag = Notification.tag;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/tag`"}, request-permission {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 52, :column 7, :end-line 52, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The requestPermission() method of the `web.Notification` interface\n  permission from the user for the current origin to display notifications.\n\n  `The latest spec has updated this method to a promise-based syntax that works like this:\n\n\n\n  Notification.requestPermission().then(function(permission) { ... });\n\n  Previously, the syntax was based on a simple callback; this version is now deprecated:\n\n\n\n  Notification.requestPermission(callback);\n\n  Safari Version 12.0.3 still uses callback to get the permission.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Notification/request-permission, :variadic true, :file "src/web/Notification.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The requestPermission() method of the `web.Notification` interface\n  permission from the user for the current origin to display notifications.\n\n  `The latest spec has updated this method to a promise-based syntax that works like this:\n\n\n\n  Notification.requestPermission().then(function(permission) { ... });\n\n  Previously, the syntax was based on a simple callback; this version is now deprecated:\n\n\n\n  Notification.requestPermission(callback);\n\n  Safari Version 12.0.3 still uses callback to get the permission.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission`"}, set-title! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 573, :column 7, :end-line 573, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The title read-only property of the `web.Notification` interface\n  the title of the notification, as specified in the title parameter\n  the `web.Notification()` constructor.\n\n  `var title = Notification.title;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/title`"}, :name web.Notification/set-title!, :variadic false, :file "src/web/Notification.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 573, :end-line 573, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The title read-only property of the `web.Notification` interface\n  the title of the notification, as specified in the title parameter\n  the `web.Notification()` constructor.\n\n  `var title = Notification.title;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/title`"}, onclick {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 282, :column 7, :end-line 282, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.Notification` interface specifies\n  event listener to receive click events. These events occur when\n  user clicks on a displayed `web.Notification`.\n\n  `Notification.onclick = function(event) { ... };\n\n  The default behavior is to move the focus to the viewport of the notification's related browsing context. If you don't want that behaviour, call preventDefault() on the event object.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick`"}, :name web.Notification/onclick, :variadic false, :file "src/web/Notification.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.Notification` interface specifies\n  event listener to receive click events. These events occur when\n  user clicks on a displayed `web.Notification`.\n\n  `Notification.onclick = function(event) { ... };\n\n  The default behavior is to move the focus to the viewport of the notification's related browsing context. If you don't want that behaviour, call preventDefault() on the event object.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick`"}, set-image! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 244, :column 7, :end-line 244, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The image read-only property of the `web.Notification` interface\n  the URL of an image to be displayed as part of the notification\n\n  `var image = Notification.image;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/image`"}, :name web.Notification/set-image!, :variadic false, :file "src/web/Notification.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The image read-only property of the `web.Notification` interface\n  the URL of an image to be displayed as part of the notification\n\n  `var image = Notification.image;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/image`"}, icon {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 206, :column 7, :end-line 206, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The icon read-only property of the `web.Notification` interface\n  the URL of an icon to be displayed as part of the notification,\n  specified in the icon option of the `web.Notification()` constructor.\n\n  `var icon = Notification.icon;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/icon`"}, :name web.Notification/icon, :variadic false, :file "src/web/Notification.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The icon read-only property of the `web.Notification` interface\n  the URL of an icon to be displayed as part of the notification,\n  specified in the icon option of the `web.Notification()` constructor.\n\n  `var icon = Notification.icon;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/icon`"}, set-onclick! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 297, :column 7, :end-line 297, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclick property of the `web.Notification` interface specifies\n  event listener to receive click events. These events occur when\n  user clicks on a displayed `web.Notification`.\n\n  `Notification.onclick = function(event) { ... };\n\n  The default behavior is to move the focus to the viewport of the notification's related browsing context. If you don't want that behaviour, call preventDefault() on the event object.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick`"}, :name web.Notification/set-onclick!, :variadic false, :file "src/web/Notification.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclick property of the `web.Notification` interface specifies\n  event listener to receive click events. These events occur when\n  user clicks on a displayed `web.Notification`.\n\n  `Notification.onclick = function(event) { ... };\n\n  The default behavior is to move the focus to the viewport of the notification's related browsing context. If you don't want that behaviour, call preventDefault() on the event object.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclick`"}, set-badge! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 115, :column 7, :end-line 115, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The badge property of the `web.Notification` interface returns\n  URL of the image used to represent the notification when there\n  not enough space to display the notification itself.\n\n  `var url = Notification.badge`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/badge`"}, :name web.Notification/set-badge!, :variadic false, :file "src/web/Notification.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The badge property of the `web.Notification` interface returns\n  URL of the image used to represent the notification when there\n  not enough space to display the notification itself.\n\n  `var url = Notification.badge`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/badge`"}, require-interaction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 444, :column 7, :end-line 444, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The requireInteraction read-only property of the `web.Notification`\n  returns a `web.Boolean` indicating that a notification should\n  active until the user clicks or dismisses it, rather than closing\n\n  `function spawnNotification(theTitle,theBody,shouldRequireInteraction) {\n  var options = {\n  body: theBody,\n  requireInteraction: shouldRequireInteraction\n  }\n  var n = new Notification(theTitle,options);\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/requireInteraction`"}, :name web.Notification/require-interaction, :variadic false, :file "src/web/Notification.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The requireInteraction read-only property of the `web.Notification`\n  returns a `web.Boolean` indicating that a notification should\n  active until the user clicks or dismisses it, rather than closing\n\n  `function spawnNotification(theTitle,theBody,shouldRequireInteraction) {\n  var options = {\n  body: theBody,\n  requireInteraction: shouldRequireInteraction\n  }\n  var n = new Notification(theTitle,options);\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/requireInteraction`"}, set-dir! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 193, :column 7, :end-line 193, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The dir read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the dir\n  of the `web.Notification()` constructor.\n\n  `var direction = Notification.dir;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/dir`"}, :name web.Notification/set-dir!, :variadic false, :file "src/web/Notification.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The dir read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the dir\n  of the `web.Notification()` constructor.\n\n  `var direction = Notification.dir;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/dir`"}, actions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 76, :column 7, :end-line 76, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The actions read-only property of the `web.Notification` interface\n  the list of `web.NotificationAction` objects set using the actions\n  when creating the notification using the `web.Notification()`\n\n  `var actions[] = Notification.actions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/actions`"}, :name web.Notification/actions, :variadic false, :file "src/web/Notification.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The actions read-only property of the `web.Notification` interface\n  the list of `web.NotificationAction` objects set using the actions\n  when creating the notification using the `web.Notification()`\n\n  `var actions[] = Notification.actions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/actions`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 40, :column 7, :end-line 40, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.Notification` interface is used\n  close a previously displayed notification.\n\n  `Notification.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/close`"}, :name web.Notification/close, :variadic false, :file "src/web/Notification.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.Notification` interface is used\n  close a previously displayed notification.\n\n  `Notification.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/close`"}, title {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 560, :column 7, :end-line 560, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The title read-only property of the `web.Notification` interface\n  the title of the notification, as specified in the title parameter\n  the `web.Notification()` constructor.\n\n  `var title = Notification.title;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/title`"}, :name web.Notification/title, :variadic false, :file "src/web/Notification.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The title read-only property of the `web.Notification` interface\n  the title of the notification, as specified in the title parameter\n  the `web.Notification()` constructor.\n\n  `var title = Notification.title;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/title`"}, set-renotify! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 431, :column 7, :end-line 431, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The renotify read-only property of the `web.Notification` interface\n  whether the user should be notified after a new notification\n  an old one, as specified in the renotify option of the `web.Notification()`\n\n  `var renotify = Notification.renotify;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/renotify`"}, :name web.Notification/set-renotify!, :variadic false, :file "src/web/Notification.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 431, :end-line 431, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The renotify read-only property of the `web.Notification` interface\n  whether the user should be notified after a new notification\n  an old one, as specified in the renotify option of the `web.Notification()`\n\n  `var renotify = Notification.renotify;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/renotify`"}, set-data! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 167, :column 7, :end-line 167, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The data read-only property of the `web.Notification` interface\n  a structured clone of the notification's data, as specified in\n  data option of the `web.Notification()` constructor.\n\n  `var data = Notification.data;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/data`"}, :name web.Notification/set-data!, :variadic false, :file "src/web/Notification.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The data read-only property of the `web.Notification` interface\n  a structured clone of the notification's data, as specified in\n  data option of the `web.Notification()` constructor.\n\n  `var data = Notification.data;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/data`"}, set-body! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 141, :column 7, :end-line 141, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Notification` interface\n  the body string of the notification, as specified in the body\n  of the `web.Notification()` constructor.\n\n  `var body = Notification.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/body`"}, :name web.Notification/set-body!, :variadic false, :file "src/web/Notification.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Notification` interface\n  the body string of the notification, as specified in the body\n  of the `web.Notification()` constructor.\n\n  `var body = Notification.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/body`"}, lang {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 256, :column 7, :end-line 256, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The lang read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the lang\n  of the `web.Notification()` constructor.\n\n  `var language = Notification.lang;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/lang`"}, :name web.Notification/lang, :variadic false, :file "src/web/Notification.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The lang read-only property of the `web.Notification` interface\n  the text direction of the notification, as specified in the lang\n  of the `web.Notification()` constructor.\n\n  `var language = Notification.lang;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/lang`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 312, :column 7, :end-line 312, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.Notification` interface specifies\n  event listener to receive close events. These events occur when\n  `web.Notification` is closed.\n\n  `Notification.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose`"}, :name web.Notification/onclose, :variadic false, :file "src/web/Notification.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 312, :end-line 312, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.Notification` interface specifies\n  event listener to receive close events. These events occur when\n  `web.Notification` is closed.\n\n  `Notification.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/onclose`"}, set-vibrate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 600, :column 7, :end-line 600, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The vibrate read-only property of the `web.Notification` interface\n  a a vibration pattern for the device's vibration hardware to\n  when the notification fires. This is specified in the vibrate\n  of the `web.Notification()` constructor.\n\n  `var vibrate = Notification.vibrate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/vibrate`"}, :name web.Notification/set-vibrate!, :variadic false, :file "src/web/Notification.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 600, :end-line 600, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The vibrate read-only property of the `web.Notification` interface\n  a a vibration pattern for the device's vibration hardware to\n  when the notification fires. This is specified in the vibrate\n  of the `web.Notification()` constructor.\n\n  `var vibrate = Notification.vibrate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/vibrate`"}, constructor {:name web.Notification/constructor, :file "src/web/Notification.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The Notification() constructor creates a new `web.Notification` object instance, which represents a user notification.\n\n  title\n  Defines a title for the notification, which is shown at the top of the notification window.\n  options Optional\n  An options object containing any custom settings that you want to apply to the notification. The possible options are:\n\n  dir: The direction in which to display the notification. It defaults to auto, which just adopts the browser's language setting behavior, but you can override that behaviour by setting values of ltr and rtl (although most browsers seem to ignore these settings.)\n  lang: The notification's language, as specified using a `dom.DOMString` representing a BCP 47 language tag. See the Sitepoint ISO 2 letter language codes page for a simple reference.\n  badge: A `web.USVString` containing the URL of the image used to represent the notification when there isn't enough space to display the notification itself.\n  body: A `dom.DOMString` representing the body text of the notification, which is displayed below the title.\n  tag: A `dom.DOMString` representing an identifying tag for the notification.\n  icon: A `web.USVString` containing the URL of an icon to be displayed in the notification.\n  image: a `web.USVString` containing the URL of an image to be displayed in the notification.\n  data: Arbitrary data that you want associated with the notification. This can be of any data type.\n  vibrate: A vibration pattern for the device's vibration hardware to emit with the notification.\n  renotify: A `web.Boolean` specifying whether the user should be notified after a new notification replaces an old one. The default is false, which means they won't be notified.\n  requireInteraction: Indicates that a notification should remain active until the user clicks or dismisses it, rather than closing automatically. The default value is false.\n  actions: An array of `web.NotificationAction`s representing the actions available to the user when the notification is presented. These are options the user can choose among in order to act on the action within the context of the notification itself. The action's name is sent to the service worker notification handler to let it know the action was selected by the user.\n\n\n  The following options are listed in the most up-to-date specification, but aren 't supported in any browsers yet. It's advisable to keep checking back regularly to see if the status of these has updated, and let us know if you find any out-of-date information.\n\n\n  silent: A `web.Boolean` specifying whether the notification is silent  (no sounds or vibrations  issued), regardless of the device settings. The default is false, which means it won't be silent.\n  noscreen: A `web.Boolean` specifying whether the notification firing enable the device's screen or not. The default is false, which means it enables the screen.\n  sticky: A `web.Boolean` specifying whether the notification is \\\"sticky\\\", i.e. not easily clearable by the user. The default is false, which means it won't be sticky.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/Notification`", :tag js}, set-timestamp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 548, :column 7, :end-line 548, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The timestamp read-only property of the `web.Notification` interface\n  a DOMTimeStamp, as specified in the timestamp option of the `web.Notification()`\n\n  `var timestamp = Notification.timestamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/timestamp`"}, :name web.Notification/set-timestamp!, :variadic false, :file "src/web/Notification.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 548, :end-line 548, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timestamp read-only property of the `web.Notification` interface\n  a DOMTimeStamp, as specified in the timestamp option of the `web.Notification()`\n\n  `var timestamp = Notification.timestamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/timestamp`"}, set-icon! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 219, :column 7, :end-line 219, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The icon read-only property of the `web.Notification` interface\n  the URL of an icon to be displayed as part of the notification,\n  specified in the icon option of the `web.Notification()` constructor.\n\n  `var icon = Notification.icon;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/icon`"}, :name web.Notification/set-icon!, :variadic false, :file "src/web/Notification.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The icon read-only property of the `web.Notification` interface\n  the URL of an icon to be displayed as part of the notification,\n  specified in the icon option of the `web.Notification()` constructor.\n\n  `var icon = Notification.icon;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Notification/icon`"}, image {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Notification.cljs", :line 232, :column 7, :end-line 232, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The image read-only property of the `web.Notification` interface\n  the URL of an image to be displayed as part of the notification\n\n  `var image = Notification.image;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/image`"}, :name web.Notification/image, :variadic false, :file "src/web/Notification.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The image read-only property of the `web.Notification` interface\n  the URL of an image to be displayed as part of the notification\n\n  `var image = Notification.image;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/notification/image`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Notification interface of the Notifications API is used to\n  and display desktop notifications to the user."}