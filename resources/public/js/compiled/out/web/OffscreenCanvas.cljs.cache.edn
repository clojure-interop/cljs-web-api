{:rename-macros {}, :renames {}, :externs {OffscreenCanvas {}}, :use-macros {}, :excludes #{}, :name web.OffscreenCanvas, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.OffscreenCanvas/constructor, :file "src/web/OffscreenCanvas.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The OffscreenCanvas() constructor returns a newly instantiated `web.OffscreenCanvas` object.\n\n  width\n  The width of the offscreen canvas.\n  height\n  The height of the offscreen canvas.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/OffscreenCanvas`", :tag js}, convert-to-blob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 19, :column 7, :end-line 19, :end-column 22, :arglists (quote ([this options])), :doc "Method.\n\n  The OffscreenCanvas.convertToBlob() method creates a `web.Blob`\n  representing the image contained in the canvas.\n\n  `Promise<Blob> OffscreenCanvas.convertToBlob(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/toBlob`"}, :name web.OffscreenCanvas/convert-to-blob, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 22, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The OffscreenCanvas.convertToBlob() method creates a `web.Blob`\n  representing the image contained in the canvas.\n\n  `Promise<Blob> OffscreenCanvas.convertToBlob(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/toBlob`"}, get-context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 31, :column 7, :end-line 31, :end-column 18, :arglists (quote ([this context-type context-attributes])), :doc "Method.\n\n  The OffscreenCanvas.getContext() method returns a drawing context\n  an offscreen canvas, or `web.null` if the context identifier\n  not supported.\n\n  `offscreen.getContext(contextType, contextAttributes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext`"}, :name web.OffscreenCanvas/get-context, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 18, :method-params ([this context-type context-attributes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this context-type context-attributes])), :doc "Method.\n\n  The OffscreenCanvas.getContext() method returns a drawing context\n  an offscreen canvas, or `web.null` if the context identifier\n  not supported.\n\n  `offscreen.getContext(contextType, contextAttributes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/getContext`"}, transfer-to-image-bitmap {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 44, :column 7, :end-line 44, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The OffscreenCanvas.transferToImageBitmap() method creates an\n  object from the most recently rendered image of the OffscreenCanvas.\n\n  `ImageBitmap OffscreenCanvas.transferToImageBitmap()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap`"}, :name web.OffscreenCanvas/transfer-to-image-bitmap, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The OffscreenCanvas.transferToImageBitmap() method creates an\n  object from the most recently rendered image of the OffscreenCanvas.\n\n  `ImageBitmap OffscreenCanvas.transferToImageBitmap()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/transferToImageBitmap`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The height property returns and sets the height of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.height;\n  offscreen.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height`"}, :name web.OffscreenCanvas/height, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The height property returns and sets the height of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.height;\n  offscreen.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 68, :column 7, :end-line 68, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The height property returns and sets the height of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.height;\n  offscreen.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height`"}, :name web.OffscreenCanvas/set-height!, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The height property returns and sets the height of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.height;\n  offscreen.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/height`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 80, :column 7, :end-line 80, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The width property returns and sets the width of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.width;\n  offscreen.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width`"}, :name web.OffscreenCanvas/width, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The width property returns and sets the width of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.width;\n  offscreen.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OffscreenCanvas.cljs", :line 92, :column 7, :end-line 92, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The width property returns and sets the width of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.width;\n  offscreen.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width`"}, :name web.OffscreenCanvas/set-width!, :variadic false, :file "src/web/OffscreenCanvas.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The width property returns and sets the width of an `web.OffscreenCanvas`\n\n  `var pxl = offscreen.width;\n  offscreen.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas/width`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The OffscreenCanvas interface provides a canvas that can be rendered\n  screen. It is available in both the window and worker contexts."}