{:rename-macros {}, :renames {}, :externs {DocumentFragment {}}, :use-macros {}, :excludes #{}, :name web.DocumentFragment, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-last-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 172, :column 7, :end-line 172, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.DocumentFragment/set-last-element-child!, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, first-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 136, :column 7, :end-line 136, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.DocumentFragment/first-element-child, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, children {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 110, :column 7, :end-line 110, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.DocumentFragment/children, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, child-element-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 74, :column 7, :end-line 74, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.DocumentFragment/child-element-count, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, query-selector {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([this selectors])), :doc "Method.\n\n  The DocumentFragment.querySelector() method returns the first\n  or null if no matches are found, within the `web.DocumentFragment`\n  depth-first pre-order traversal of the document's nodes) that\n  the specified group of selectors.\n\n  `element = documentfragment.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector`"}, :name web.DocumentFragment/query-selector, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 21, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The DocumentFragment.querySelector() method returns the first\n  or null if no matches are found, within the `web.DocumentFragment`\n  depth-first pre-order traversal of the document's nodes) that\n  the specified group of selectors.\n\n  `element = documentfragment.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelector`"}, set-children! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 123, :column 7, :end-line 123, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.DocumentFragment/set-children!, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, set-child-element-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 92, :column 7, :end-line 92, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.DocumentFragment/set-child-element-count!, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, prepend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DocumentFragment/prepend, :variadic true, :file "src/web/DocumentFragment.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`"}, append {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DocumentFragment/append, :variadic true, :file "src/web/DocumentFragment.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`"}, query-selector-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 60, :column 7, :end-line 60, :end-column 25, :arglists (quote ([this selectors])), :doc "Method.\n\n  The DocumentFragment.querySelectorAll() method returns a `web.NodeList`\n  elements within the `web.DocumentFragment` (using depth-first\n  traversal of the document's nodes) that matches the specified\n  of selectors.\n\n  `elementList = documentframgment.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll`"}, :name web.DocumentFragment/query-selector-all, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 25, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The DocumentFragment.querySelectorAll() method returns a `web.NodeList`\n  elements within the `web.DocumentFragment` (using depth-first\n  traversal of the document's nodes) that matches the specified\n  of selectors.\n\n  `elementList = documentframgment.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/querySelectorAll`"}, set-first-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 148, :column 7, :end-line 148, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.DocumentFragment/set-first-element-child!, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, last-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 160, :column 7, :end-line 160, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.DocumentFragment/last-element-child, :variadic false, :file "src/web/DocumentFragment.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, constructor {:name web.DocumentFragment/constructor, :file "src/web/DocumentFragment.cljs", :line 11, :column 1, :end-line 11, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DocumentFragment.cljs", :line 11, :column 6, :end-line 11, :end-column 17}, :doc "Constructor.\n\n  The DocumentFragment() constructor returns a new, empty `web.DocumentFragment` object .\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment/DocumentFragment`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The DocumentFragment interface represents a minimal document\n  that has no parent. It is used as a lightweight version of `web.Document`\n  stores a segment of a document structure comprised of nodes just\n  a standard document. The key difference is that because the document\n  isn't part of the active document tree structure, changes made\n  the fragment don't affect the document, cause reflow, or incur\n  performance impact that can occur when changes are made."}