{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Worklet, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {add-module {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worklet.cljs", :line 6, :column 7, :end-line 6, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The addModule() method of the `web.Worklet` interface loads the\n  in the given JavaScript file and adds it to the current Worklet.\n\n  `addPromise = worklet.addModule(moduleURL);\n  addPromise = worklet.addModule(moduleURL, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Worklet/add-module, :variadic true, :file "src/web/Worklet.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The addModule() method of the `web.Worklet` interface loads the\n  in the given JavaScript file and adds it to the current Worklet.\n\n  `addPromise = worklet.addModule(moduleURL);\n  addPromise = worklet.addModule(moduleURL, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Worklet interface is a lightweight version of `web.Web Workers`\n  gives developers access to low-level parts of the rendering pipeline."}