{:rename-macros {}, :renames {}, :externs {FederatedCredential {}}, :use-macros {}, :excludes #{}, :name web.FederatedCredential, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.FederatedCredential/constructor, :file "src/web/FederatedCredential.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FederatedCredential.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The FederatedCredential constructor creates a new `web.FederatedCredential` object.\n\n  init\n  Options are:\n\n  provider: A `web.USVString`; identifying the credential provider.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/FederatedCredential`", :tag js}, protocol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FederatedCredential.cljs", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The protocol property of the `web.FederatedCredential` interface\n  a read-only `dom.DOMString` containing a credential's federated\n  protocol. If this property is `web.null`, the protocol may be\n  from the `web.FederatedCredential.provider` property.\n\n  `var protocol = FederatedCredential.protocol`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol`"}, :name web.FederatedCredential/protocol, :variadic false, :file "src/web/FederatedCredential.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The protocol property of the `web.FederatedCredential` interface\n  a read-only `dom.DOMString` containing a credential's federated\n  protocol. If this property is `web.null`, the protocol may be\n  from the `web.FederatedCredential.provider` property.\n\n  `var protocol = FederatedCredential.protocol`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol`"}, set-protocol! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FederatedCredential.cljs", :line 36, :column 7, :end-line 36, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The protocol property of the `web.FederatedCredential` interface\n  a read-only `dom.DOMString` containing a credential's federated\n  protocol. If this property is `web.null`, the protocol may be\n  from the `web.FederatedCredential.provider` property.\n\n  `var protocol = FederatedCredential.protocol`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol`"}, :name web.FederatedCredential/set-protocol!, :variadic false, :file "src/web/FederatedCredential.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The protocol property of the `web.FederatedCredential` interface\n  a read-only `dom.DOMString` containing a credential's federated\n  protocol. If this property is `web.null`, the protocol may be\n  from the `web.FederatedCredential.provider` property.\n\n  `var protocol = FederatedCredential.protocol`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/protocol`"}, provider {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FederatedCredential.cljs", :line 50, :column 7, :end-line 50, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The provider property of the `web.FederatedCredential` interface\n  a `web.USVString` containing a credential's federated identity\n\n  `var provider = FederatedCredential.provider`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider`"}, :name web.FederatedCredential/provider, :variadic false, :file "src/web/FederatedCredential.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The provider property of the `web.FederatedCredential` interface\n  a `web.USVString` containing a credential's federated identity\n\n  `var provider = FederatedCredential.provider`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider`"}, set-provider! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FederatedCredential.cljs", :line 62, :column 7, :end-line 62, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The provider property of the `web.FederatedCredential` interface\n  a `web.USVString` containing a credential's federated identity\n\n  `var provider = FederatedCredential.provider`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider`"}, :name web.FederatedCredential/set-provider!, :variadic false, :file "src/web/FederatedCredential.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The provider property of the `web.FederatedCredential` interface\n  a `web.USVString` containing a credential's federated identity\n\n  `var provider = FederatedCredential.provider`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FederatedCredential/provider`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The FederatedCredential interface of the the Credential Management\n  provides information about credentials from a federated identity\n  A federated identity provider is an entity that a website trusts\n  correctly authenticate a user, and that provides an API for that\n  OpenID Connect is an example of a federated identity provider"}