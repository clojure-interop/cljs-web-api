{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove}, :name web.ChildNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {after {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ChildNode.cljs", :line 6, :column 7, :end-line 6, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ChildNode/after, :variadic true, :file "src/web/ChildNode.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`"}, before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ChildNode.cljs", :line 20, :column 7, :end-line 20, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ChildNode/before, :variadic true, :file "src/web/ChildNode.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ChildNode.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, :name web.ChildNode/remove, :variadic false, :file "src/web/ChildNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, replace-with {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ChildNode.cljs", :line 47, :column 7, :end-line 47, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ChildNode/replace-with, :variadic true, :file "src/web/ChildNode.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ChildNode interface contains methods that are particular\n  `web.Node` objects that can have a parent."}