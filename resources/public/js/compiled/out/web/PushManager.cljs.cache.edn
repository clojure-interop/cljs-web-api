{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.PushManager, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-subscription {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 6, :column 7, :end-line 6, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The PushManager.getSubscription() method of the `web.PushManager`\n  retrieves an existing push subscription.\n\n  `​PushManager.getSubscription().then(function(pushSubscription) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/getSubscription`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PushManager/get-subscription, :variadic true, :file "src/web/PushManager.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The PushManager.getSubscription() method of the `web.PushManager`\n  retrieves an existing push subscription.\n\n  `​PushManager.getSubscription().then(function(pushSubscription) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/getSubscription`"}, has-permission {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 18, :column 7, :end-line 18, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The PushManager.hasPermission() method of the `web.PushManager`\n  returns a `web.Promise` that resolves to the PushPermissionStatus\n  the requesting webapp, which will be one of granted, denied,\n  default.\n\n  `​PushManager.hasPermission().then(function(pushPermissionStatus) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/hasPermission`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PushManager/has-permission, :variadic true, :file "src/web/PushManager.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The PushManager.hasPermission() method of the `web.PushManager`\n  returns a `web.Promise` that resolves to the PushPermissionStatus\n  the requesting webapp, which will be one of granted, denied,\n  default.\n\n  `​PushManager.hasPermission().then(function(pushPermissionStatus) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/hasPermission`"}, permission-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 32, :column 7, :end-line 32, :end-column 23, :arglists (quote ([this options])), :doc "Method.\n\n  The permissionState() method of the `web.PushManager` interface\n  a `web.Promise` that resolves to a `dom.DOMString` indicating\n  permission state of the push manager. Possible values are 'prompt',\n  or 'granted'.\n\n  `PushManager.permissionState(options).then(function(PushMessagingState) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/permissionState`"}, :name web.PushManager/permission-state, :variadic false, :file "src/web/PushManager.cljs", :end-column 23, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The permissionState() method of the `web.PushManager` interface\n  a `web.Promise` that resolves to a `dom.DOMString` indicating\n  permission state of the push manager. Possible values are 'prompt',\n  or 'granted'.\n\n  `PushManager.permissionState(options).then(function(PushMessagingState) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/permissionState`"}, register {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 46, :column 7, :end-line 46, :end-column 15, :arglists (quote ([this])), :doc "Method.\n\n  The register method is used to ask the system to request a new\n  for notifications. This method has been superceded by `web.PushManager.subscribe()`.\n\n  `var request = navigator.push.register();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/register`"}, :name web.PushManager/register, :variadic false, :file "src/web/PushManager.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The register method is used to ask the system to request a new\n  for notifications. This method has been superceded by `web.PushManager.subscribe()`.\n\n  `var request = navigator.push.register();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/register`"}, registrations {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 58, :column 7, :end-line 58, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The registrations method is used to ask the system about existing\n  endpoint registrations.\n\n  `var request = navigator.push.registrations();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/registrations`"}, :name web.PushManager/registrations, :variadic false, :file "src/web/PushManager.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The registrations method is used to ask the system about existing\n  endpoint registrations.\n\n  `var request = navigator.push.registrations();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/registrations`"}, subscribe {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 70, :column 7, :end-line 70, :end-column 16, :arglists (quote ([this options])), :doc "Method.\n\n  The subscribe() method of the `web.PushManager` interface subscribes\n  a push service.\n\n  `​PushManager.subscribe(options).then(function(pushSubscription) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribe`"}, :name web.PushManager/subscribe, :variadic false, :file "src/web/PushManager.cljs", :end-column 16, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The subscribe() method of the `web.PushManager` interface subscribes\n  a push service.\n\n  `​PushManager.subscribe(options).then(function(pushSubscription) { ... } );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/subscribe`"}, unregister {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 82, :column 7, :end-line 82, :end-column 17, :arglists (quote ([this push-endpoint])), :doc "Method.\n\n  The unregister() method was used to ask the system to unregister\n  delete the specified endpoint. In the updated API, a subscription\n  can be unregistered via the `web.PushSubscription.unsubscribe()`\n\n  `var request = navigator.push.unregister(pushEndpoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/unregister`"}, :name web.PushManager/unregister, :variadic false, :file "src/web/PushManager.cljs", :end-column 17, :method-params ([this push-endpoint]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this push-endpoint])), :doc "Method.\n\n  The unregister() method was used to ask the system to unregister\n  delete the specified endpoint. In the updated API, a subscription\n  can be unregistered via the `web.PushSubscription.unsubscribe()`\n\n  `var request = navigator.push.unregister(pushEndpoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/unregister`"}, supported-content-encodings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 95, :column 7, :end-line 95, :end-column 34, :arglists (quote ([this])), :doc "Property.\n\n  The supportedContentEncodings read-only property of the `web.PushManager`\n  returns an array of supported content codings that can be used\n  encrypt the payload of a push message.\n\n  `var encodings[] = PushManager.supportedContentEncodings`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/supportedContentEncodings`"}, :name web.PushManager/supported-content-encodings, :variadic false, :file "src/web/PushManager.cljs", :end-column 34, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The supportedContentEncodings read-only property of the `web.PushManager`\n  returns an array of supported content codings that can be used\n  encrypt the payload of a push message.\n\n  `var encodings[] = PushManager.supportedContentEncodings`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/supportedContentEncodings`"}, set-supported-content-encodings! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PushManager.cljs", :line 108, :column 7, :end-line 108, :end-column 39, :arglists (quote ([this val])), :doc "Property.\n\n  The supportedContentEncodings read-only property of the `web.PushManager`\n  returns an array of supported content codings that can be used\n  encrypt the payload of a push message.\n\n  `var encodings[] = PushManager.supportedContentEncodings`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/supportedContentEncodings`"}, :name web.PushManager/set-supported-content-encodings!, :variadic false, :file "src/web/PushManager.cljs", :end-column 39, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The supportedContentEncodings read-only property of the `web.PushManager`\n  returns an array of supported content codings that can be used\n  encrypt the payload of a push message.\n\n  `var encodings[] = PushManager.supportedContentEncodings`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PushManager/supportedContentEncodings`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PushManager interface of the Push API provides a way to receive\n  from third-party servers as well as request URLs for push notifications."}