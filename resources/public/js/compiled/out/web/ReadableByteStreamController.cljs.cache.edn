{:rename-macros {}, :renames {}, :externs {ReadableByteStreamController {}}, :use-macros {}, :excludes #{}, :name web.ReadableByteStreamController, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ReadableByteStreamController/constructor, :file "src/web/ReadableByteStreamController.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The ReadableByteStreamController() constructor creates and returns a ReadableByteStreamController() object instance.\n\n  stream\n  The `web.ReadableStream` to be controlled.\n  underlyingSource\n  An object containing methods and properties that define how the constructed stream instance will behave. See the ReadableStream() constructor's parameters definitions for more information.\n  highWaterMark\n  A non-negative integer â€” this defines the total number of chunks that can be contained in the internal queue before backpressure is applied.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/ReadableByteStreamController`", :tag js}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.ReadableByteStreamController`\n  closes the associated stream.\n\n  `readableByteStreamControllerInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/close`"}, :name web.ReadableByteStreamController/close, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.ReadableByteStreamController`\n  closes the associated stream.\n\n  `readableByteStreamControllerInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/close`"}, enqueue {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 34, :column 7, :end-line 34, :end-column 14, :arglists (quote ([this chunk])), :doc "Method.\n\n  The enqueue() method of the `web.ReadableByteStreamController`\n  enqueues a given chunk in the associated stream.\n\n  `readableByteStreamControllerInstance.enqueue(chunk);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/enqueue`"}, :name web.ReadableByteStreamController/enqueue, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 14, :method-params ([this chunk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this chunk])), :doc "Method.\n\n  The enqueue() method of the `web.ReadableByteStreamController`\n  enqueues a given chunk in the associated stream.\n\n  `readableByteStreamControllerInstance.enqueue(chunk);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/enqueue`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([this e])), :doc "Method.\n\n  The error() method of the `web.ReadableByteStreamController`\n  causes any future interactions with the associated stream to\n\n  `readableByteStreamControllerInstance.error(e);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/error`"}, :name web.ReadableByteStreamController/error, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 12, :method-params ([this e]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this e])), :doc "Method.\n\n  The error() method of the `web.ReadableByteStreamController`\n  causes any future interactions with the associated stream to\n\n  `readableByteStreamControllerInstance.error(e);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/error`"}, byob-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 58, :column 7, :end-line 58, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The byobRequest getter property of the `web.ReadableByteStreamController`\n  returns the current BYOB pull request.\n\n  `var request = readableByteStreamControllerInstance.byobRequest;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/byobRequest`"}, :name web.ReadableByteStreamController/byob-request, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The byobRequest getter property of the `web.ReadableByteStreamController`\n  returns the current BYOB pull request.\n\n  `var request = readableByteStreamControllerInstance.byobRequest;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/byobRequest`"}, set-byob-request! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 70, :column 7, :end-line 70, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The byobRequest getter property of the `web.ReadableByteStreamController`\n  returns the current BYOB pull request.\n\n  `var request = readableByteStreamControllerInstance.byobRequest;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/byobRequest`"}, :name web.ReadableByteStreamController/set-byob-request!, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The byobRequest getter property of the `web.ReadableByteStreamController`\n  returns the current BYOB pull request.\n\n  `var request = readableByteStreamControllerInstance.byobRequest;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/byobRequest`"}, desired-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 82, :column 7, :end-line 82, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableByteStreamController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableByteStreamControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/desiredSize`"}, :name web.ReadableByteStreamController/desired-size, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableByteStreamController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableByteStreamControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/desiredSize`"}, set-desired-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableByteStreamController.cljs", :line 94, :column 7, :end-line 94, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableByteStreamController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableByteStreamControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/desiredSize`"}, :name web.ReadableByteStreamController/set-desired-size!, :variadic false, :file "src/web/ReadableByteStreamController.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.ReadableByteStreamController`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = readableByteStreamControllerInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableByteStreamController/desiredSize`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ReadableByteStreamController interface of the Streams API\n  a controller allowing control of a `web.ReadableStream`'s state\n  internal queue. Byte stream controllers are for byte streams."}