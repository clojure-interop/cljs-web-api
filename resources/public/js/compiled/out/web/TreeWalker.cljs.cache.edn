{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{filter}, :name web.TreeWalker, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {next-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.nextNode() method moves the current `web.Node`\n  the next visible node in the document order, and returns the\n  node. It also moves the current node to this one. If no such\n  exists, returns null and the current node is not changed.\n\n  `node = treeWalker.nextNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode`"}, :name web.TreeWalker/next-node, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.nextNode() method moves the current `web.Node`\n  the next visible node in the document order, and returns the\n  node. It also moves the current node to this one. If no such\n  exists, returns null and the current node is not changed.\n\n  `node = treeWalker.nextNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextNode`"}, expand-entity-references {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 129, :column 7, :end-line 129, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.TreeWalker`.\n\n  `expand = treeWalker.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/expandEntityReferences`"}, :name web.TreeWalker/expand-entity-references, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.TreeWalker`.\n\n  `expand = treeWalker.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/expandEntityReferences`"}, set-current-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 116, :column 7, :end-line 116, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.currentNode property represents the `web.Node`\n  which the `web.TreeWalker` is currently pointing at.\n\n  `node = treeWalker.currentNode;\n  treeWalker.currentNode = node;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode`"}, :name web.TreeWalker/set-current-node!, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.currentNode property represents the `web.Node`\n  which the `web.TreeWalker` is currently pointing at.\n\n  `node = treeWalker.currentNode;\n  treeWalker.currentNode = node;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode`"}, set-what-to-show! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 217, :column 7, :end-line 217, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.whatToShow read-only property returns an unsigned\n  being a bitmask made of constants describing the types of `web.Node`\n  must to be presented. Non-matching nodes are skipped, but their\n  may be included, if relevant. The possible values are:\n\n  `nodeTypes = treeWalker.whatToShow;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow`"}, :name web.TreeWalker/set-what-to-show!, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.whatToShow read-only property returns an unsigned\n  being a bitmask made of constants describing the types of `web.Node`\n  must to be presented. Non-matching nodes are skipped, but their\n  may be included, if relevant. The possible values are:\n\n  `nodeTypes = treeWalker.whatToShow;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow`"}, set-root! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 191, :column 7, :end-line 191, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.root read-only property returns the node that\n  the root of what the TreeWalker traverses.\n\n  `root = TreeWalker.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root`"}, :name web.TreeWalker/set-root!, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.root read-only property returns the node that\n  the root of what the TreeWalker traverses.\n\n  `root = TreeWalker.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root`"}, first-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 6, :column 7, :end-line 6, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.firstChild() method moves the current `web.Node`\n  the first visible child of the current node, and returns the\n  child. It also moves the current node to this child. If no such\n  exists, returns null and the current node is not changed.\n\n  `node = treeWalker.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild`"}, :name web.TreeWalker/first-child, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.firstChild() method moves the current `web.Node`\n  the first visible child of the current node, and returns the\n  child. It also moves the current node to this child. If no such\n  exists, returns null and the current node is not changed.\n\n  `node = treeWalker.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/firstChild`"}, previous-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 90, :column 7, :end-line 90, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.previousSibling() method moves the current `web.Node`\n  its previous sibling, if any, and returns the found sibling.\n  there is no such node, return null and the current node is not\n\n  `node = treeWalker.previousSibling();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling`"}, :name web.TreeWalker/previous-sibling, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.previousSibling() method moves the current `web.Node`\n  its previous sibling, if any, and returns the found sibling.\n  there is no such node, return null and the current node is not\n\n  `node = treeWalker.previousSibling();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousSibling`"}, previous-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 75, :column 7, :end-line 75, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.previousNode() method moves the current `web.Node`\n  the previous visible node in the document order, and returns\n  found node. It also moves the current node to this one. If no\n  node exists,or if it is before that the root node defined at\n  object construction, returns null and the current node is not\n\n  `node = treeWalker.previousNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode`"}, :name web.TreeWalker/previous-node, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.previousNode() method moves the current `web.Node`\n  the previous visible node in the document order, and returns\n  found node. It also moves the current node to this one. If no\n  node exists,or if it is before that the root node defined at\n  object construction, returns null and the current node is not\n\n  `node = treeWalker.previousNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/previousNode`"}, next-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.nextSibling() method moves the current `web.Node`\n  its next sibling, if any, and returns the found sibling. I there\n  no such node, return null and the current node is not changed.\n\n  `node = treeWalker.nextSibling();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling`"}, :name web.TreeWalker/next-sibling, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.nextSibling() method moves the current `web.Node`\n  its next sibling, if any, and returns the found sibling. I there\n  no such node, return null and the current node is not changed.\n\n  `node = treeWalker.nextSibling();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/nextSibling`"}, set-filter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 167, :column 7, :end-line 167, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.filter read-only property returns a `web.NodeFilter`\n  is the filtering object associated with the `web.TreeWalker`.\n\n  `nodeFilter = treeWalker.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter`"}, :name web.TreeWalker/set-filter!, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.filter read-only property returns a `web.NodeFilter`\n  is the filtering object associated with the `web.TreeWalker`.\n\n  `nodeFilter = treeWalker.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter`"}, parent-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 61, :column 7, :end-line 61, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.parentNode() method moves the current `web.Node`\n  the first visible ancestor node in the document order, and returns\n  found node. If no such node exists, or if it is above the TreeWalker's\n  node, returns null and the current node is not changed.\n\n  `node = treeWalker.parentNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode`"}, :name web.TreeWalker/parent-node, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.parentNode() method moves the current `web.Node`\n  the first visible ancestor node in the document order, and returns\n  found node. If no such node exists, or if it is above the TreeWalker's\n  node, returns null and the current node is not changed.\n\n  `node = treeWalker.parentNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/parentNode`"}, what-to-show {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 203, :column 7, :end-line 203, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.whatToShow read-only property returns an unsigned\n  being a bitmask made of constants describing the types of `web.Node`\n  must to be presented. Non-matching nodes are skipped, but their\n  may be included, if relevant. The possible values are:\n\n  `nodeTypes = treeWalker.whatToShow;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow`"}, :name web.TreeWalker/what-to-show, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.whatToShow read-only property returns an unsigned\n  being a bitmask made of constants describing the types of `web.Node`\n  must to be presented. Non-matching nodes are skipped, but their\n  may be included, if relevant. The possible values are:\n\n  `nodeTypes = treeWalker.whatToShow;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/whatToShow`"}, set-expand-entity-references! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 142, :column 7, :end-line 142, :end-column 36, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.TreeWalker`.\n\n  `expand = treeWalker.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/expandEntityReferences`"}, :name web.TreeWalker/set-expand-entity-references!, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 36, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TreeWalker.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.TreeWalker`.\n\n  `expand = treeWalker.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/expandEntityReferences`"}, filter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 155, :column 7, :end-line 155, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.filter read-only property returns a `web.NodeFilter`\n  is the filtering object associated with the `web.TreeWalker`.\n\n  `nodeFilter = treeWalker.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter`"}, :name web.TreeWalker/filter, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.filter read-only property returns a `web.NodeFilter`\n  is the filtering object associated with the `web.TreeWalker`.\n\n  `nodeFilter = treeWalker.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/filter`"}, root {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 179, :column 7, :end-line 179, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.root read-only property returns the node that\n  the root of what the TreeWalker traverses.\n\n  `root = TreeWalker.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root`"}, :name web.TreeWalker/root, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.root read-only property returns the node that\n  the root of what the TreeWalker traverses.\n\n  `root = TreeWalker.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/root`"}, last-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.lastChild() method moves the current `web.Node`\n  the last visible child of the current node, and returns the found\n  It also moves the current node to this child. If no such child\n  returns null and the current node is not changed.\n\n  `node = treeWalker.lastChild();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild`"}, :name web.TreeWalker/last-child, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The TreeWalker.lastChild() method moves the current `web.Node`\n  the last visible child of the current node, and returns the found\n  It also moves the current node to this child. If no such child\n  returns null and the current node is not changed.\n\n  `node = treeWalker.lastChild();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/lastChild`"}, current-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TreeWalker.cljs", :line 103, :column 7, :end-line 103, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.currentNode property represents the `web.Node`\n  which the `web.TreeWalker` is currently pointing at.\n\n  `node = treeWalker.currentNode;\n  treeWalker.currentNode = node;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode`"}, :name web.TreeWalker/current-node, :variadic false, :file "src/web/TreeWalker.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TreeWalker.currentNode property represents the `web.Node`\n  which the `web.TreeWalker` is currently pointing at.\n\n  `node = treeWalker.currentNode;\n  treeWalker.currentNode = node;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TreeWalker/currentNode`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The TreeWalker object represents the nodes of a document subtree\n  a position within them."}