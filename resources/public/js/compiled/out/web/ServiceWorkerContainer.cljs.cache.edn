{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ServiceWorkerContainer, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-controller! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 80, :column 7, :end-line 80, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The controller read-only property of the `web.ServiceWorkerContainer`\n  returns a `web.ServiceWorker` object if its state is activated\n  same object returned by `web.ServiceWorkerRegistration.active`).\n  property returns null if the request is a force refresh (Shift\n  or if there is no active worker.\n\n  `var myController = navigator.serviceWorker.controller;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller`"}, :name web.ServiceWorkerContainer/set-controller!, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The controller read-only property of the `web.ServiceWorkerContainer`\n  returns a `web.ServiceWorker` object if its state is activated\n  same object returned by `web.ServiceWorkerRegistration.active`).\n  property returns null if the request is a force refresh (Shift\n  or if there is no active worker.\n\n  `var myController = navigator.serviceWorker.controller;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller`"}, get-registrations {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 23, :column 7, :end-line 23, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The getRegistrations() method of the `web.ServiceWorkerContainer`\n  returns all `web.ServiceWorkerRegistration`s associated with\n  ServiceWorkerContainer in an array. If the method can't return\n  it returns a `web.Promise`.\n\n  `ServiceWorkerContainer.getRegistrations().then(function(ServiceWorkerRegistrations) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ServiceWorkerContainer/get-registrations, :variadic true, :file "src/web/ServiceWorkerContainer.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getRegistrations() method of the `web.ServiceWorkerContainer`\n  returns all `web.ServiceWorkerRegistration`s associated with\n  ServiceWorkerContainer in an array. If the method can't return\n  it returns a `web.Promise`.\n\n  `ServiceWorkerContainer.getRegistrations().then(function(ServiceWorkerRegistrations) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistrations`"}, controller {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 65, :column 7, :end-line 65, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The controller read-only property of the `web.ServiceWorkerContainer`\n  returns a `web.ServiceWorker` object if its state is activated\n  same object returned by `web.ServiceWorkerRegistration.active`).\n  property returns null if the request is a force refresh (Shift\n  or if there is no active worker.\n\n  `var myController = navigator.serviceWorker.controller;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller`"}, :name web.ServiceWorkerContainer/controller, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The controller read-only property of the `web.ServiceWorkerContainer`\n  returns a `web.ServiceWorker` object if its state is activated\n  same object returned by `web.ServiceWorkerRegistration.active`).\n  property returns null if the request is a force refresh (Shift\n  or if there is no active worker.\n\n  `var myController = navigator.serviceWorker.controller;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/controller`"}, ready {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 177, :column 7, :end-line 177, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The ready read-only property of the `web.ServiceWorkerContainer`\n  provides a way of delaying code execution until a service worker\n  active. It returns a `web.Promise` that will never reject, and\n  waits indefinitely until the `web.ServiceWorkerRegistration`\n  with the current page has an `web.active` worker. Once that condition\n  met, it resolves with the `web.ServiceWorkerRegistration`.\n\n  `navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready`"}, :name web.ServiceWorkerContainer/ready, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ready read-only property of the `web.ServiceWorkerContainer`\n  provides a way of delaying code execution until a service worker\n  active. It returns a `web.Promise` that will never reject, and\n  waits indefinitely until the `web.ServiceWorkerRegistration`\n  with the current page has an `web.active` worker. Once that condition\n  met, it resolves with the `web.ServiceWorkerRegistration`.\n\n  `navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready`"}, start-messages {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 50, :column 7, :end-line 50, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The startMessages() method of the `web.ServiceWorkerContainer`\n  explicitly starts the flow of messages being dispatched from\n  service worker to pages under its control (e.g. sent via `web.Client.postMessage()`).\n  can be used to react to sent messages earlier, even before that\n  content has finished loading.\n\n  `ServiceWorkerContainer.startMessages();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/startMessages`"}, :name web.ServiceWorkerContainer/start-messages, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The startMessages() method of the `web.ServiceWorkerContainer`\n  explicitly starts the flow of messages being dispatched from\n  service worker to pages under its control (e.g. sent via `web.Client.postMessage()`).\n  can be used to react to sent messages earlier, even before that\n  content has finished loading.\n\n  `ServiceWorkerContainer.startMessages();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/startMessages`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 136, :column 7, :end-line 136, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever an error event occurs in the\n  service workers.\n\n  `ServiceWorkerContainer.onerror = function(errorevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror`"}, :name web.ServiceWorkerContainer/set-onerror!, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 136, :end-line 136, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever an error event occurs in the\n  service workers.\n\n  `ServiceWorkerContainer.onerror = function(errorevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 123, :column 7, :end-line 123, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever an error event occurs in the\n  service workers.\n\n  `ServiceWorkerContainer.onerror = function(errorevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror`"}, :name web.ServiceWorkerContainer/onerror, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever an error event occurs in the\n  service workers.\n\n  `ServiceWorkerContainer.onerror = function(errorevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 149, :column 7, :end-line 149, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever a message event occurs — when\n  messages are received to the `web.ServiceWorkerContainer` object\n  via a `web.MessagePort.postMessage()` call).\n\n  `ServiceWorkerContainer.onmessage = function(messageevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage`"}, :name web.ServiceWorkerContainer/onmessage, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever a message event occurs — when\n  messages are received to the `web.ServiceWorkerContainer` object\n  via a `web.MessagePort.postMessage()` call).\n\n  `ServiceWorkerContainer.onmessage = function(messageevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 163, :column 7, :end-line 163, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever a message event occurs — when\n  messages are received to the `web.ServiceWorkerContainer` object\n  via a `web.MessagePort.postMessage()` call).\n\n  `ServiceWorkerContainer.onmessage = function(messageevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage`"}, :name web.ServiceWorkerContainer/set-onmessage!, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.ServiceWorkerContainer` interface\n  an event handler fired whenever a message event occurs — when\n  messages are received to the `web.ServiceWorkerContainer` object\n  via a `web.MessagePort.postMessage()` call).\n\n  `ServiceWorkerContainer.onmessage = function(messageevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/onmessage`"}, set-oncontrollerchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 109, :column 7, :end-line 109, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontrollerchange property of the `web.ServiceWorkerContainer`\n  is an event handler fired whenever a controllerchange event occurs\n  when the document's associated `web.ServiceWorkerRegistration`\n  a new `web.ServiceWorkerRegistration.active` worker.\n\n  `ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange`"}, :name web.ServiceWorkerContainer/set-oncontrollerchange!, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontrollerchange property of the `web.ServiceWorkerContainer`\n  is an event handler fired whenever a controllerchange event occurs\n  when the document's associated `web.ServiceWorkerRegistration`\n  a new `web.ServiceWorkerRegistration.active` worker.\n\n  `ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange`"}, get-registration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 9, :column 7, :end-line 9, :end-column 23, :arglists (quote ([this scope])), :doc "Method.\n\n  The getRegistration() method of the `web.ServiceWorkerContainer`\n  gets a `web.ServiceWorkerRegistration` object whose scope URL\n  the provided document URL. The method returns a Promise that\n  to a `web.ServiceWorkerRegistration` or undefined.\n\n  `ServiceWorkerContainer.getRegistration(scope).then(function(ServiceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration`"}, :name web.ServiceWorkerContainer/get-registration, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 23, :method-params ([this scope]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this scope])), :doc "Method.\n\n  The getRegistration() method of the `web.ServiceWorkerContainer`\n  gets a `web.ServiceWorkerRegistration` object whose scope URL\n  the provided document URL. The method returns a Promise that\n  to a `web.ServiceWorkerRegistration` or undefined.\n\n  `ServiceWorkerContainer.getRegistration(scope).then(function(ServiceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/getRegistration`"}, set-ready! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 193, :column 7, :end-line 193, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The ready read-only property of the `web.ServiceWorkerContainer`\n  provides a way of delaying code execution until a service worker\n  active. It returns a `web.Promise` that will never reject, and\n  waits indefinitely until the `web.ServiceWorkerRegistration`\n  with the current page has an `web.active` worker. Once that condition\n  met, it resolves with the `web.ServiceWorkerRegistration`.\n\n  `navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready`"}, :name web.ServiceWorkerContainer/set-ready!, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ready read-only property of the `web.ServiceWorkerContainer`\n  provides a way of delaying code execution until a service worker\n  active. It returns a `web.Promise` that will never reject, and\n  waits indefinitely until the `web.ServiceWorkerRegistration`\n  with the current page has an `web.active` worker. Once that condition\n  met, it resolves with the `web.ServiceWorkerRegistration`.\n\n  `navigator.serviceWorker.ready.then(function(serviceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready`"}, oncontrollerchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 95, :column 7, :end-line 95, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The oncontrollerchange property of the `web.ServiceWorkerContainer`\n  is an event handler fired whenever a controllerchange event occurs\n  when the document's associated `web.ServiceWorkerRegistration`\n  a new `web.ServiceWorkerRegistration.active` worker.\n\n  `ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange`"}, :name web.ServiceWorkerContainer/oncontrollerchange, :variadic false, :file "src/web/ServiceWorkerContainer.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncontrollerchange property of the `web.ServiceWorkerContainer`\n  is an event handler fired whenever a controllerchange event occurs\n  when the document's associated `web.ServiceWorkerRegistration`\n  a new `web.ServiceWorkerRegistration.active` worker.\n\n  `ServiceWorkerContainer.oncontrollerchange = function(controllerchangeevent) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/oncontrollerchange`"}, register {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorkerContainer.cljs", :line 37, :column 7, :end-line 37, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The register() method of the `web.ServiceWorkerContainer` interface\n  or updates a `web.ServiceWorkerRegistration` for the given scriptURL.\n\n  `ServiceWorkerContainer.register(scriptURL, options)\n  .then(function(ServiceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ServiceWorkerContainer/register, :variadic true, :file "src/web/ServiceWorkerContainer.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The register() method of the `web.ServiceWorkerContainer` interface\n  or updates a `web.ServiceWorkerRegistration` for the given scriptURL.\n\n  `ServiceWorkerContainer.register(scriptURL, options)\n  .then(function(ServiceWorkerRegistration) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ServiceWorkerContainer interface of the ServiceWorker API\n  an object representing the service worker as an overall unit\n  the network ecosystem, including facilities to register, unregister\n  update service workers, and access the state of service workers\n  their registrations."}