{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{keys}, :name web.Cache, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {add {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 10, :column 7, :end-line 10, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The add() method of the `web.Cache` interface takes a URL, retrieves\n  and adds the resulting response object to the given cache.\n\n  `cache.add(request).then(function() {\n  // request has been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/add`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/add, :variadic true, :file "src/web/Cache.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The add() method of the `web.Cache` interface takes a URL, retrieves\n  and adds the resulting response object to the given cache.\n\n  `cache.add(request).then(function() {\n  // request has been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/add`"}, add-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 24, :column 7, :end-line 24, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The addAll() method of the `web.Cache` interface takes an array\n  URLs, retrieves them, and adds the resulting response objects\n  the given cache. The request objects created during retrieval\n  keys to the stored response operations.\n\n  `cache.addAll(requests[]).then(function() {\n  // requests have been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/add-all, :variadic true, :file "src/web/Cache.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The addAll() method of the `web.Cache` interface takes an array\n  URLs, retrieves them, and adds the resulting response objects\n  the given cache. The request objects created during retrieval\n  keys to the stored response operations.\n\n  `cache.addAll(requests[]).then(function() {\n  // requests have been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/addAll`"}, delete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 40, :column 7, :end-line 40, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The delete() method of the `web.Cache` interface finds the `web.Cache`\n  whose key is the request, and if found, deletes the `web.Cache`\n  and returns a `web.Promise` that resolves to true. If no `web.Cache`\n  is found, it resolves to false.\n\n  `cache.delete(request,{options}).then(function(true) {\n  //your cache entry has been deleted\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/delete, :variadic true, :file "src/web/Cache.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The delete() method of the `web.Cache` interface finds the `web.Cache`\n  whose key is the request, and if found, deletes the `web.Cache`\n  and returns a `web.Promise` that resolves to true. If no `web.Cache`\n  is found, it resolves to false.\n\n  `cache.delete(request,{options}).then(function(true) {\n  //your cache entry has been deleted\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete`"}, keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 56, :column 7, :end-line 56, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The keys() method of the `web.Cache` interface returns a `web.Promise`\n  resolves to an array of `web.Cache` keys.\n\n  `cache.keys(request,{options}).then(function(keys) {\n  //do something with your array of requests\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/keys`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/keys, :variadic true, :file "src/web/Cache.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The keys() method of the `web.Cache` interface returns a `web.Promise`\n  resolves to an array of `web.Cache` keys.\n\n  `cache.keys(request,{options}).then(function(keys) {\n  //do something with your array of requests\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/keys`"}, match {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 70, :column 7, :end-line 70, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The match() method of the `web.Cache` interface returns a `web.Promise`\n  resolves to the `web.Response` associated with the first matching\n  in the `web.Cache` object. If no match is found, the `web.Promise`\n  to `web.undefined`.\n\n  `cache.match(request, {options}).then(function(response) {\n  // Do something with the response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/match`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/match, :variadic true, :file "src/web/Cache.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The match() method of the `web.Cache` interface returns a `web.Promise`\n  resolves to the `web.Response` associated with the first matching\n  in the `web.Cache` object. If no match is found, the `web.Promise`\n  to `web.undefined`.\n\n  `cache.match(request, {options}).then(function(response) {\n  // Do something with the response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/match`"}, match-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 86, :column 7, :end-line 86, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The matchAll() method of the `web.Cache` interface returns a\n  that resolves to an array of all matching responses in the `web.Cache`\n\n  `cache.matchAll(request,{options}).then(function(response) {\n  //do something with the response array\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/match-all, :variadic true, :file "src/web/Cache.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The matchAll() method of the `web.Cache` interface returns a\n  that resolves to an array of all matching responses in the `web.Cache`\n\n  `cache.matchAll(request,{options}).then(function(response) {\n  //do something with the response array\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/matchAll`"}, put {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Cache.cljs", :line 100, :column 7, :end-line 100, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The put() method of the `web.Cache` interface allows key/value\n  to be added to the current `web.Cache` object.\n\n  `cache.put(request, response).then(function() {\n  // request/response pair has been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/put`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Cache/put, :variadic true, :file "src/web/Cache.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The put() method of the `web.Cache` interface allows key/value\n  to be added to the current `web.Cache` object.\n\n  `cache.put(request, response).then(function() {\n  // request/response pair has been added to the cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Cache/put`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Cache interface provides a storage mechanism for Request\n  Response object pairs that are cached, for example as part of\n  `web.ServiceWorker` life cycle. Note that the Cache interface\n  exposed to windowed scopes as well as workers. You don't have\n  use it in conjunction with service workers, even though it is\n  in the service worker spec."}