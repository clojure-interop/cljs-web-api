{:rename-macros {}, :renames {}, :externs {DataTransfer {}}, :use-macros {}, :excludes #{}, :name web.DataTransfer, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 45, :column 7, :end-line 45, :end-column 15, :arglists (quote ([this format])), :doc "Method.\n\n  The DataTransfer.getData() method retrieves drag data (as a `dom.DOMString`)\n  the specified type. If the drag operation does not include data,\n  method returns an empty string.\n\n  `dataTransfer.getData(format);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData`"}, :name web.DataTransfer/get-data, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 15, :method-params ([this format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this format])), :doc "Method.\n\n  The DataTransfer.getData() method retrieves drag data (as a `dom.DOMString`)\n  the specified type. If the drag operation does not include data,\n  method returns an empty string.\n\n  `dataTransfer.getData(format);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/getData`"}, items {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 236, :column 7, :end-line 236, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.DataTransfer` property items property is a\n  of the `web.data transfer items` in a drag operation. The list\n  one item for each item in the operation and if the operation\n  no items, the list is empty.\n\n  `itemList = dataTransfer.items;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items`"}, :name web.DataTransfer/items, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.DataTransfer` property items property is a\n  of the `web.data transfer items` in a drag operation. The list\n  one item for each item in the operation and if the operation\n  no items, the list is empty.\n\n  `itemList = dataTransfer.items;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items`"}, set-effect-allowed! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 193, :column 7, :end-line 193, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.effectAllowed property specifies the effect\n  is allowed for a drag operation. The copy operation is used to\n  that the data being dragged will be copied from its present location\n  the drop location. The move operation is used to indicate that\n  data being dragged will be moved, and the link operation is used\n  indicate that some form of relationship or connection will be\n  between the source and drop locations.\n\n  `dataTransfer.effectAllowed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed`"}, :name web.DataTransfer/set-effect-allowed!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.effectAllowed property specifies the effect\n  is allowed for a drag operation. The copy operation is used to\n  that the data being dragged will be copied from its present location\n  the drop location. The move operation is used to indicate that\n  data being dragged will be moved, and the link operation is used\n  indicate that some form of relationship or connection will be\n  between the source and drop locations.\n\n  `dataTransfer.effectAllowed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed`"}, set-files! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 223, :column 7, :end-line 223, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.files property is a `web.list of the files`\n  the drag operation. If the operation includes no files, the list\n  empty.\n\n  `dataTransfer.files;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files`"}, :name web.DataTransfer/set-files!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.files property is a `web.list of the files`\n  the drag operation. If the operation includes no files, the list\n  empty.\n\n  `dataTransfer.files;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files`"}, set-moz-source-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 329, :column 7, :end-line 329, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozSourceNode property is used to determine\n  `web.Node` over which the mouse cursor was located when the the\n  operation was initiated (for example, when a `web.<button>` was\n  For external drags or if the calling function cannot reach the\n  null is returned.\n\n  `dataTransfer.mozSourceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSourceNode`"}, :name web.DataTransfer/set-moz-source-node!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozSourceNode property is used to determine\n  `web.Node` over which the mouse cursor was located when the the\n  operation was initiated (for example, when a `web.<button>` was\n  For external drags or if the calling function cannot reach the\n  null is returned.\n\n  `dataTransfer.mozSourceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSourceNode`"}, set-moz-item-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 301, :column 7, :end-line 301, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozItemCount property returns the number of\n  being dragged. This can be used, for example, to get the number\n  files being dragged.\n\n  `dataTransfer.mozItemCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozItemCount`"}, :name web.DataTransfer/set-moz-item-count!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozItemCount property returns the number of\n  being dragged. This can be used, for example, to get the number\n  files being dragged.\n\n  `dataTransfer.mozItemCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozItemCount`"}, moz-set-data-at {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 86, :column 7, :end-line 86, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The DataTransfer.mozSetDataAt() method is used to add data to\n  specific index in the drag event's `web.data transfer` object.\n\n  `void dataTransfer.mozSetDataAt([type], data, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSetDataAt`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DataTransfer/moz-set-data-at, :variadic true, :file "src/web/DataTransfer.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The DataTransfer.mozSetDataAt() method is used to add data to\n  specific index in the drag event's `web.data transfer` object.\n\n  `void dataTransfer.mozSetDataAt([type], data, index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSetDataAt`"}, moz-user-cancelled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 344, :column 7, :end-line 344, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozUserCancelled property is used in the dragend\n  handler to determine if the user canceled the drag or not. If\n  user canceled the event, the property returns true and returns\n  otherwise. This property only applies to the dragend event.\n\n  `dataTransfer.mozUserCancelled;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled`"}, :name web.DataTransfer/moz-user-cancelled, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozUserCancelled property is used in the dragend\n  handler to determine if the user canceled the drag or not. If\n  user canceled the event, the property returns true and returns\n  otherwise. This property only applies to the dragend event.\n\n  `dataTransfer.mozUserCancelled;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled`"}, set-moz-user-cancelled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 358, :column 7, :end-line 358, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozUserCancelled property is used in the dragend\n  handler to determine if the user canceled the drag or not. If\n  user canceled the event, the property returns true and returns\n  otherwise. This property only applies to the dragend event.\n\n  `dataTransfer.mozUserCancelled;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled`"}, :name web.DataTransfer/set-moz-user-cancelled!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozUserCancelled property is used in the dragend\n  handler to determine if the user canceled the drag or not. If\n  user canceled the event, the property returns true and returns\n  otherwise. This property only applies to the dragend event.\n\n  `dataTransfer.mozUserCancelled;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozUserCancelled`"}, moz-types-at {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 98, :column 7, :end-line 98, :end-column 19, :arglists (quote ([this index])), :doc "Method.\n\n  The DataTransfer.mozTypesAt() method returns a list of the format\n  that are stored for an item at the specified index. If the index\n  not in the range from 0 to the number of items minus one, an\n  string list is returned.\n\n  `nsIVariant dataTransfer.mozTypesAt(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozTypesAt`"}, :name web.DataTransfer/moz-types-at, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 19, :method-params ([this index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index])), :doc "Method.\n\n  The DataTransfer.mozTypesAt() method returns a list of the format\n  that are stored for an item at the specified index. If the index\n  not in the range from 0 to the number of items minus one, an\n  string list is returned.\n\n  `nsIVariant dataTransfer.mozTypesAt(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozTypesAt`"}, set-drag-image {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 129, :column 7, :end-line 129, :end-column 21, :arglists (quote ([this img x-offset y-offset])), :doc "Method.\n\n  When a drag occurs, a translucent image is generated from the\n  target (the element the dragstart event is fired at), and follows\n  mouse pointer during the drag. This image is created automatically,\n  you do not need to create it yourself. However, if a custom image\n  desired, the DataTransfer.setDragImage() method can be used to\n  the custom image to be used. The image will typically be an `web.<image>`\n  but it can also be a `web.<canvas>` or any other image element.\n\n  `void dataTransfer.setDragImage(img, xOffset, yOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage`"}, :name web.DataTransfer/set-drag-image, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 21, :method-params ([this img x-offset y-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this img x-offset y-offset])), :doc "Method.\n\n  When a drag occurs, a translucent image is generated from the\n  target (the element the dragstart event is fired at), and follows\n  mouse pointer during the drag. This image is created automatically,\n  you do not need to create it yourself. However, if a custom image\n  desired, the DataTransfer.setDragImage() method can be used to\n  the custom image to be used. The image will typically be an `web.<image>`\n  but it can also be a `web.<canvas>` or any other image element.\n\n  `void dataTransfer.setDragImage(img, xOffset, yOffset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage`"}, set-types! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 386, :column 7, :end-line 386, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.types read-only property returns an array of\n  drag data formats (as `web.strings`) that were set in the dragstart\n  The order of the formats is the same order as the data included\n  the drag operation.\n\n  `dataTransfer.types;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types`"}, :name web.DataTransfer/set-types!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.types read-only property returns an array of\n  drag data formats (as `web.strings`) that were set in the dragstart\n  The order of the formats is the same order as the data included\n  the drag operation.\n\n  `dataTransfer.types;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types`"}, drop-effect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 146, :column 7, :end-line 146, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.dropEffect property controls the feedback (typically\n  the user is given during a drag and drop operation. It will affect\n  cursor is displayed while dragging. For example, when the user\n  over a target drop element, the browser's cursor may indicate\n  type of operation will occur.\n\n  `dataTransfer.dropEffect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect`"}, :name web.DataTransfer/drop-effect, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.dropEffect property controls the feedback (typically\n  the user is given during a drag and drop operation. It will affect\n  cursor is displayed while dragging. For example, when the user\n  over a target drop element, the browser's cursor may indicate\n  type of operation will occur.\n\n  `dataTransfer.dropEffect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect`"}, effect-allowed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 176, :column 7, :end-line 176, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.effectAllowed property specifies the effect\n  is allowed for a drag operation. The copy operation is used to\n  that the data being dragged will be copied from its present location\n  the drop location. The move operation is used to indicate that\n  data being dragged will be moved, and the link operation is used\n  indicate that some form of relationship or connection will be\n  between the source and drop locations.\n\n  `dataTransfer.effectAllowed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed`"}, :name web.DataTransfer/effect-allowed, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.effectAllowed property specifies the effect\n  is allowed for a drag operation. The copy operation is used to\n  that the data being dragged will be copied from its present location\n  the drop location. The move operation is used to indicate that\n  data being dragged will be moved, and the link operation is used\n  indicate that some form of relationship or connection will be\n  between the source and drop locations.\n\n  `dataTransfer.effectAllowed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/effectAllowed`"}, clear-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 32, :column 7, :end-line 32, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The DataTransfer.clearData() method removes the drag operation's\n  data` for the given type. If data for the given type does not\n  this method does nothing.\n\n  `DataTransfer.clearData([format]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DataTransfer/clear-data, :variadic true, :file "src/web/DataTransfer.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The DataTransfer.clearData() method removes the drag operation's\n  data` for the given type. If data for the given type does not\n  this method does nothing.\n\n  `DataTransfer.clearData([format]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/clearData`"}, moz-get-data-at {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 71, :column 7, :end-line 71, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The DataTransfer.mozGetDataAt() method is used to retrieve an\n  in the drag event's `web.data transfer` object, based on a given\n  and index. This method returns null if the specified item does\n  exist or if the index is not in the range from zero to the number\n  items minus one.\n\n  `nsIVariant dataTransfer.mozGetDataAt([type], index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DataTransfer/moz-get-data-at, :variadic true, :file "src/web/DataTransfer.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The DataTransfer.mozGetDataAt() method is used to retrieve an\n  in the drag event's `web.data transfer` object, based on a given\n  and index. This method returns null if the specified item does\n  exist or if the index is not in the range from zero to the number\n  items minus one.\n\n  `nsIVariant dataTransfer.mozGetDataAt([type], index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt`"}, moz-item-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 288, :column 7, :end-line 288, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozItemCount property returns the number of\n  being dragged. This can be used, for example, to get the number\n  files being dragged.\n\n  `dataTransfer.mozItemCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozItemCount`"}, :name web.DataTransfer/moz-item-count, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozItemCount property returns the number of\n  being dragged. This can be used, for example, to get the number\n  files being dragged.\n\n  `dataTransfer.mozItemCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozItemCount`"}, types {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 372, :column 7, :end-line 372, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.types read-only property returns an array of\n  drag data formats (as `web.strings`) that were set in the dragstart\n  The order of the formats is the same order as the data included\n  the drag operation.\n\n  `dataTransfer.types;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types`"}, :name web.DataTransfer/types, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.types read-only property returns an array of\n  drag data formats (as `web.strings`) that were set in the dragstart\n  The order of the formats is the same order as the data included\n  the drag operation.\n\n  `dataTransfer.types;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/types`"}, set-drop-effect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 161, :column 7, :end-line 161, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.dropEffect property controls the feedback (typically\n  the user is given during a drag and drop operation. It will affect\n  cursor is displayed while dragging. For example, when the user\n  over a target drop element, the browser's cursor may indicate\n  type of operation will occur.\n\n  `dataTransfer.dropEffect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect`"}, :name web.DataTransfer/set-drop-effect!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.dropEffect property controls the feedback (typically\n  the user is given during a drag and drop operation. It will affect\n  cursor is displayed while dragging. For example, when the user\n  over a target drop element, the browser's cursor may indicate\n  type of operation will occur.\n\n  `dataTransfer.dropEffect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/dropEffect`"}, moz-source-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 314, :column 7, :end-line 314, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozSourceNode property is used to determine\n  `web.Node` over which the mouse cursor was located when the the\n  operation was initiated (for example, when a `web.<button>` was\n  For external drags or if the calling function cannot reach the\n  null is returned.\n\n  `dataTransfer.mozSourceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSourceNode`"}, :name web.DataTransfer/moz-source-node, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozSourceNode property is used to determine\n  `web.Node` over which the mouse cursor was located when the the\n  operation was initiated (for example, when a `web.<button>` was\n  For external drags or if the calling function cannot reach the\n  null is returned.\n\n  `dataTransfer.mozSourceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozSourceNode`"}, set-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 112, :column 7, :end-line 112, :end-column 15, :arglists (quote ([this format data])), :doc "Method.\n\n  The DataTransfer.setData() method sets the drag operation's `web.drag\n  to the specified data and type. If data for the given type does\n  exist, it is added at the end of the drag data store, such that\n  last item in the `web.types` list will be the new type. If data\n  the given type already exists, the existing data is replaced\n  the same position. That is, the order of the `web.types` list\n  not changed when replacing data of the same type.\n\n  `void dataTransfer.setData(format, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData`"}, :name web.DataTransfer/set-data, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 15, :method-params ([this format data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this format data])), :doc "Method.\n\n  The DataTransfer.setData() method sets the drag operation's `web.drag\n  to the specified data and type. If data for the given type does\n  exist, it is added at the end of the drag data store, such that\n  last item in the `web.types` list will be the new type. If data\n  the given type already exists, the existing data is replaced\n  the same position. That is, the order of the `web.types` list\n  not changed when replacing data of the same type.\n\n  `void dataTransfer.setData(format, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setData`"}, set-moz-cursor! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 276, :column 7, :end-line 276, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozCursor property returns or sets the drag\n  state. This is primarily used to control the cursor during tab\n\n  `dataTransfer.mozCursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozCursor`"}, :name web.DataTransfer/set-moz-cursor!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The DataTransfer.mozCursor property returns or sets the drag\n  state. This is primarily used to control the cursor during tab\n\n  `dataTransfer.mozCursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozCursor`"}, moz-clear-data-at {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 58, :column 7, :end-line 58, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The DataTransfer.mozClearDataAt() method removes the data associated\n  the given format for an item at the specified index. The index\n  be in the range from zero to the number of items minus one.\n\n  `void dataTransfer.mozClearDataAt([type], index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozClearDataAt`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DataTransfer/moz-clear-data-at, :variadic true, :file "src/web/DataTransfer.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The DataTransfer.mozClearDataAt() method removes the data associated\n  the given format for an item at the specified index. The index\n  be in the range from zero to the number of items minus one.\n\n  `void dataTransfer.mozClearDataAt([type], index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozClearDataAt`"}, moz-cursor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 264, :column 7, :end-line 264, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozCursor property returns or sets the drag\n  state. This is primarily used to control the cursor during tab\n\n  `dataTransfer.mozCursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozCursor`"}, :name web.DataTransfer/moz-cursor, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.mozCursor property returns or sets the drag\n  state. This is primarily used to control the cursor during tab\n\n  `dataTransfer.mozCursor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozCursor`"}, constructor {:name web.DataTransfer/constructor, :file "src/web/DataTransfer.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The DataTransfer constructor creates a new `web.DataTransfer` object instance.\n\n  None.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/DataTransfer`", :tag js}, files {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 210, :column 7, :end-line 210, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.files property is a `web.list of the files`\n  the drag operation. If the operation includes no files, the list\n  empty.\n\n  `dataTransfer.files;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files`"}, :name web.DataTransfer/files, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The DataTransfer.files property is a `web.list of the files`\n  the drag operation. If the operation includes no files, the list\n  empty.\n\n  `dataTransfer.files;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/files`"}, add-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([this el])), :doc "Method.\n\n  The DataTransfer.addElement() method sets the drag source to\n  given element. This element will be the element to which drag\n  dragend events are fired, and not the defaut target (the node\n  was dragged).\n\n  `void dataTransfer.addElement(el);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/addElement`"}, :name web.DataTransfer/add-element, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 18, :method-params ([this el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this el])), :doc "Method.\n\n  The DataTransfer.addElement() method sets the drag source to\n  given element. This element will be the element to which drag\n  dragend events are fired, and not the defaut target (the node\n  was dragged).\n\n  `void dataTransfer.addElement(el);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/addElement`"}, set-items! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DataTransfer.cljs", :line 250, :column 7, :end-line 250, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `web.DataTransfer` property items property is a\n  of the `web.data transfer items` in a drag operation. The list\n  one item for each item in the operation and if the operation\n  no items, the list is empty.\n\n  `itemList = dataTransfer.items;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items`"}, :name web.DataTransfer/set-items!, :variadic false, :file "src/web/DataTransfer.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 250, :end-line 250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only `web.DataTransfer` property items property is a\n  of the `web.data transfer items` in a drag operation. The list\n  one item for each item in the operation and if the operation\n  no items, the list is empty.\n\n  `itemList = dataTransfer.items;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/items`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The DataTransfer object is used to hold the data that is being\n  during a drag and drop operation. It may hold one or more data\n  each of one or more data types. For more information about drag\n  drop, see HTML Drag and Drop API."}