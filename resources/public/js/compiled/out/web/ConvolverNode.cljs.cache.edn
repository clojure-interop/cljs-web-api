{:rename-macros {}, :renames {}, :externs {ConvolverNode {}}, :use-macros {}, :excludes #{}, :name web.ConvolverNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ConvolverNode/constructor, :file "src/web/ConvolverNode.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ConvolverNode.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The ConvolverNode() constructor of the Web Audio API creates a new `web.ConvolverNode` object instance.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  context\n  A reference to an `audio.AudioContext`.\n  options Optional\n  Options are as follows:\n\n  audioBuffer: A mono, stereo, or 4-channel `audio.AudioBuffer` containing the (possibly multichannel) impulse response used by the ConvolverNode to create the reverb effect.\n  disableNormalization: A `web.Boolean` controlling whether the impulse response from the buffer will be scaled by an equal-power normalization, or not. The default is 'false'.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/ConvolverNode`", :tag js}, buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ConvolverNode.cljs", :line 27, :column 7, :end-line 27, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioBuffer`.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.buffer = myAudioBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer`"}, :name web.ConvolverNode/buffer, :variadic false, :file "src/web/ConvolverNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioBuffer`.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.buffer = myAudioBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer`"}, set-buffer! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ConvolverNode.cljs", :line 40, :column 7, :end-line 40, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioBuffer`.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.buffer = myAudioBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer`"}, :name web.ConvolverNode/set-buffer!, :variadic false, :file "src/web/ConvolverNode.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioBuffer`.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.buffer = myAudioBuffer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/buffer`"}, normalize {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ConvolverNode.cljs", :line 53, :column 7, :end-line 53, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The normalize property of the `web.ConvolverNode` interface is\n  boolean that controls whether the impulse response from the buffer\n  be scaled by an equal-power normalization when the buffer attribute\n  set, or not.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.normalize = false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize`"}, :name web.ConvolverNode/normalize, :variadic false, :file "src/web/ConvolverNode.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The normalize property of the `web.ConvolverNode` interface is\n  boolean that controls whether the impulse response from the buffer\n  be scaled by an equal-power normalization when the buffer attribute\n  set, or not.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.normalize = false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize`"}, set-normalize! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ConvolverNode.cljs", :line 69, :column 7, :end-line 69, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The normalize property of the `web.ConvolverNode` interface is\n  boolean that controls whether the impulse response from the buffer\n  be scaled by an equal-power normalization when the buffer attribute\n  set, or not.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.normalize = false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize`"}, :name web.ConvolverNode/set-normalize!, :variadic false, :file "src/web/ConvolverNode.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The normalize property of the `web.ConvolverNode` interface is\n  boolean that controls whether the impulse response from the buffer\n  be scaled by an equal-power normalization when the buffer attribute\n  set, or not.\n\n  `var audioCtx = new AudioContext();\n  var convolver = audioCtx.createConvolver();\n  convolver.normalize = false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ConvolverNode/normalize`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ConvolverNode interface is an `audio.AudioNode` that performs\n  Linear Convolution on a given `audio.AudioBuffer`, often used\n  achieve a reverb effect. A ConvolverNode always has exactly one\n  and one output."}