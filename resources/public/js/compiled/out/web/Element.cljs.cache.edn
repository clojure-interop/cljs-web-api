{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove name}, :name web.Element, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-attribute-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 197, :column 7, :end-line 197, :end-column 23, :arglists (quote ([this namespace name])), :doc "Method.\n\n  The getAttributeNS() method of the `web.Element` interface returns\n  string value of the attribute with the specified namespace and\n  If the named attribute does not exist, the value returned will\n  be null or \\\"\\\" (the empty string); see Notes for details.\n\n  `attrVal = element.getAttributeNS(namespace, name)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS`"}, :name web.Element/get-attribute-ns, :variadic false, :file "src/web/Element.cljs", :end-column 23, :method-params ([this namespace name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this namespace name])), :doc "Method.\n\n  The getAttributeNS() method of the `web.Element` interface returns\n  string value of the attribute with the specified namespace and\n  If the named attribute does not exist, the value returned will\n  be null or \\\"\\\" (the empty string); see Notes for details.\n\n  `attrVal = element.getAttributeNS(namespace, name)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNS`"}, scroll-into-view {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 579, :column 7, :end-line 579, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.Element` interface's scrollIntoView() method scrolls\n  element's parent container such that the element on which scrollIntoView()\n  called is visible to the user\n\n  `element.scrollIntoView();\n  element.scrollIntoView(alignToTop); // Boolean parameter\n  element.scrollIntoView(scrollIntoViewOptions); // Object parameter`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/scroll-into-view, :variadic true, :file "src/web/Element.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 579, :end-line 579, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.Element` interface's scrollIntoView() method scrolls\n  element's parent container such that the element on which scrollIntoView()\n  called is visible to the user\n\n  `element.scrollIntoView();\n  element.scrollIntoView(alignToTop); // Boolean parameter\n  element.scrollIntoView(scrollIntoViewOptions); // Object parameter`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView`"}, client-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1017, :column 7, :end-line 1017, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Element.clientWidth property is zero for inline elements\n  elements with no CSS; otherwise, it's the inner width of an element\n  pixels. It includes padding but excludes borders, margins, and\n  scrollbars (if present).\n\n  `var intElemClientWidth = element.clientWidth;\n\n  intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. The clientWidth property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth`"}, :name web.Element/client-width, :variadic false, :file "src/web/Element.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1017, :end-line 1017, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.clientWidth property is zero for inline elements\n  elements with no CSS; otherwise, it's the inner width of an element\n  pixels. It includes padding but excludes borders, margins, and\n  scrollbars (if present).\n\n  `var intElemClientWidth = element.clientWidth;\n\n  intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. The clientWidth property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth`"}, class-list {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 885, :column 7, :end-line 885, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Element.classList is a read-only property that returns a\n  `dom.DOMTokenList` collection of the class attributes of the\n\n  `const elementClasses = elementNodeReference.classList;\n\n  elementClasses is a `dom.DOMTokenList` representing the class attribute of elementNodeReference. If the class attribute was not set or is empty elementClasses.length returns 0. element.classList itself is read-only, although you can modify it using the add() and remove() methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/classList`"}, :name web.Element/class-list, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 885, :end-line 885, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.classList is a read-only property that returns a\n  `dom.DOMTokenList` collection of the class attributes of the\n\n  `const elementClasses = elementNodeReference.classList;\n\n  elementClasses is a `dom.DOMTokenList` representing the class attribute of elementNodeReference. If the class attribute was not set or is empty elementClasses.length returns 0. element.classList itself is read-only, although you can modify it using the add() and remove() methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/classList`"}, runtime-style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1439, :column 7, :end-line 1439, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  Element.runtimeStyle is a proprietary property similar to `html.HTMLElement.style`,\n  its styles, that have higher precedence and modification.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/runtimeStyle`"}, :name web.Element/runtime-style, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1439, :end-line 1439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Element.runtimeStyle is a proprietary property similar to `html.HTMLElement.style`,\n  its styles, that have higher precedence and modification.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/runtimeStyle`"}, remove-attribute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 475, :column 7, :end-line 475, :end-column 23, :arglists (quote ([this attr-name])), :doc "Method.\n\n  The `web.Element` method removeAttribute() removes the attribute\n  the specified name from the element.\n\n  `element.removeAttribute(attrName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute`"}, :name web.Element/remove-attribute, :variadic false, :file "src/web/Element.cljs", :end-column 23, :method-params ([this attr-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this attr-name])), :doc "Method.\n\n  The `web.Element` method removeAttribute() removes the attribute\n  the specified name from the element.\n\n  `element.removeAttribute(attrName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttribute`"}, set-class-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 915, :column 7, :end-line 915, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The className property of the `web.Element` interface gets and\n  the value of the `web.class` of the specified element.\n\n  `var cName = elementNodeReference.className;\n  elementNodeReference.className = cName;\n\n\n  cName is a string variable representing the class or space-separated classes of the current element.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/className`"}, :name web.Element/set-class-name!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 915, :end-line 915, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The className property of the `web.Element` interface gets and\n  the value of the `web.class` of the specified element.\n\n  `var cName = elementNodeReference.className;\n  elementNodeReference.className = cName;\n\n\n  cName is a string variable representing the class or space-separated classes of the current element.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/className`"}, set-attributes! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 807, :column 7, :end-line 807, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.attributes property returns a live collection of\n  attribute nodes registered to the specified node. It is a `web.NamedNodeMap`,\n  an Array, so it has no `web.Array` methods and the `web.Attr`\n  indexes may differ among browsers. To be more specific, attributes\n  a key/value pair of strings that represents any information regarding\n  attribute.\n\n  `var attr = element.attributes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes`"}, :name web.Element/set-attributes!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 807, :end-line 807, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.attributes property returns a live collection of\n  attribute nodes registered to the specified node. It is a `web.NamedNodeMap`,\n  an Array, so it has no `web.Array` methods and the `web.Attr`\n  indexes may differ among browsers. To be more specific, attributes\n  a key/value pair of strings that represents any information regarding\n  attribute.\n\n  `var attr = element.attributes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes`"}, shadow-root {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1621, :column 7, :end-line 1621, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, :name web.Element/shadow-root, :variadic false, :file "src/web/Element.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1621, :end-line 1621, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, set-onfullscreenchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1302, :column 7, :end-line 1302, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired when\n  element has transitioned into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange`"}, :name web.Element/set-onfullscreenchange!, :variadic false, :file "src/web/Element.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1302, :end-line 1302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired when\n  element has transitioned into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange`"}, local-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1177, :column 7, :end-line 1177, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Element.localName read-only property returns the local part\n  the qualified name of an element.\n\n  `name = element.localName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/localName`"}, :name web.Element/local-name, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1177, :end-line 1177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.localName read-only property returns the local part\n  the qualified name of an element.\n\n  `name = element.localName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/localName`"}, attach-shadow {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 48, :column 7, :end-line 48, :end-column 20, :arglists (quote ([this shadow-root-init])), :doc "Method.\n\n  The Element.attachShadow() method attaches a shadow DOM tree\n  the specified element and returns a reference to its `web.ShadowRoot`.\n\n  `var shadowroot = element.attachShadow(shadowRootInit);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow`"}, :name web.Element/attach-shadow, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this shadow-root-init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this shadow-root-init])), :doc "Method.\n\n  The Element.attachShadow() method attaches a shadow DOM tree\n  the specified element and returns a reference to its `web.ShadowRoot`.\n\n  `var shadowroot = element.attachShadow(shadowRootInit);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow`"}, onfullscreenerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1315, :column 7, :end-line 1315, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenerror property is an\n  handler for the fullscreenerror event which is sent to the element\n  an error occurs while attempting to transition into or out of\n  mode.\n\n  `targetElement.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror`"}, :name web.Element/onfullscreenerror, :variadic false, :file "src/web/Element.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1315, :end-line 1315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenerror property is an\n  handler for the fullscreenerror event which is sent to the element\n  an error occurs while attempting to transition into or out of\n  mode.\n\n  `targetElement.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror`"}, has-attributes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 321, :column 7, :end-line 321, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The hasAttributes() method of the `web.Element` interface returns\n  `web.Boolean` indicating whether the current element has any\n  or not.\n\n  `var result = element.hasAttributes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes`"}, :name web.Element/has-attributes, :variadic false, :file "src/web/Element.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The hasAttributes() method of the `web.Element` interface returns\n  `web.Boolean` indicating whether the current element has any\n  or not.\n\n  `var result = element.hasAttributes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributes`"}, get-attribute-node-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 177, :column 7, :end-line 177, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  Returns the Attr node for the attribute with the given namespace\n  name.\n\n  `attributeNode = element.getAttributeNodeNS(namespace, nodeName)\n\n\n  attributeNode is the node for specified attribute.\n  namespace is a string specifying the namespace of the attribute.\n  nodeName is a string specifying the name of the attribute.\n\n\n  == Example == TBD The example needs to be fixed pre> // html: <div id=\\\"top\\\" /> t = document.getElementById(\\\"top\\\"); specialNode = t.getAttributeNodeNS( \\\"http://www.mozilla.org/ns/specialspace\\\", \\\"id\\\"); // iNode.value = \\\"full-top\\\" </pre`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/get-attribute-node-ns, :variadic true, :file "src/web/Element.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Returns the Attr node for the attribute with the given namespace\n  name.\n\n  `attributeNode = element.getAttributeNodeNS(namespace, nodeName)\n\n\n  attributeNode is the node for specified attribute.\n  namespace is a string specifying the namespace of the attribute.\n  nodeName is a string specifying the name of the attribute.\n\n\n  == Example == TBD The example needs to be fixed pre> // html: <div id=\\\"top\\\" /> t = document.getElementById(\\\"top\\\"); specialNode = t.getAttributeNodeNS( \\\"http://www.mozilla.org/ns/specialspace\\\", \\\"id\\\"); // iNode.value = \\\"full-top\\\" </pre`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNodeNS`"}, set-tab-stop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1686, :column 7, :end-line 1686, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The tabStop property of the `web.Element` interface returns a\n  indicating if the element can receive input focus via the tab\n  If the specified element is a shadow host tab navigation is delegated\n  its children.\n\n  `var isTabStop = element.tabStop;\n  element.tabStop = (true|false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop`"}, :name web.Element/set-tab-stop!, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1686, :end-line 1686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The tabStop property of the `web.Element` interface returns a\n  indicating if the element can receive input focus via the tab\n  If the specified element is a shadow host tab navigation is delegated\n  its children.\n\n  `var isTabStop = element.tabStop;\n  element.tabStop = (true|false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop`"}, set-client-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 947, :column 7, :end-line 947, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.clientHeight read-only property is zero for elements\n  no CSS or inline layout boxes; otherwise, it's the inner height\n  an element in pixels. It includes padding but excludes borders,\n  and horizontal scrollbars (if present).\n\n  `var intElemClientHeight = element.clientHeight;\n\n  intElemClientHeight is an integer corresponding to the clientHeight of element in pixels. The clientHeight property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight`"}, :name web.Element/set-client-height!, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 947, :end-line 947, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.clientHeight read-only property is zero for elements\n  no CSS or inline layout boxes; otherwise, it's the inner height\n  an element in pixels. It includes padding but excludes borders,\n  and horizontal scrollbars (if present).\n\n  `var intElemClientHeight = element.clientHeight;\n\n  intElemClientHeight is an integer corresponding to the clientHeight of element in pixels. The clientHeight property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight`"}, replace-with {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 515, :column 7, :end-line 515, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/replace-with, :variadic true, :file "src/web/Element.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`"}, attributes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 791, :column 7, :end-line 791, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Element.attributes property returns a live collection of\n  attribute nodes registered to the specified node. It is a `web.NamedNodeMap`,\n  an Array, so it has no `web.Array` methods and the `web.Attr`\n  indexes may differ among browsers. To be more specific, attributes\n  a key/value pair of strings that represents any information regarding\n  attribute.\n\n  `var attr = element.attributes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes`"}, :name web.Element/attributes, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 791, :end-line 791, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.attributes property returns a live collection of\n  attribute nodes registered to the specified node. It is a `web.NamedNodeMap`,\n  an Array, so it has no `web.Array` methods and the `web.Attr`\n  indexes may differ among browsers. To be more specific, attributes\n  a key/value pair of strings that represents any information regarding\n  attribute.\n\n  `var attr = element.attributes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes`"}, before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 60, :column 7, :end-line 60, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/before, :variadic true, :file "src/web/Element.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`"}, set-last-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1165, :column 7, :end-line 1165, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.Element/set-last-element-child!, :variadic false, :file "src/web/Element.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1165, :end-line 1165, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, remove-attribute-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 503, :column 7, :end-line 503, :end-column 26, :arglists (quote ([this namespace attr-name])), :doc "Method.\n\n  The removeAttributeNS() method of the `web.Element` interface\n  the specified attribute from an element.\n\n  `element.removeAttributeNS(namespace, attrName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS`"}, :name web.Element/remove-attribute-ns, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this namespace attr-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 503, :end-line 503, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this namespace attr-name])), :doc "Method.\n\n  The removeAttributeNS() method of the `web.Element` interface\n  the specified attribute from an element.\n\n  `element.removeAttributeNS(namespace, attrName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNS`"}, remove-attribute-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 487, :column 7, :end-line 487, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The removeAttributeNode() method of the `web.Element` object\n  the specified attribute from the current element.\n\n  `removedAttr = element.removeAttributeNode(attributeNode)\n\n\n  attributeNode is the Attr node that needs to be removed.\n  removedAttr is the removed Attr node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/remove-attribute-node, :variadic true, :file "src/web/Element.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 487, :end-line 487, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The removeAttributeNode() method of the `web.Element` object\n  the specified attribute from the current element.\n\n  `removedAttr = element.removeAttributeNode(attributeNode)\n\n\n  attributeNode is the Attr node that needs to be removed.\n  removedAttr is the removed Attr node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/removeAttributeNode`"}, scroll-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 609, :column 7, :end-line 609, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The scrollTo() method of the `web.Element` interface scrolls\n  a particular set of coordinates inside a given element.\n\n  `element.scrollTo(x-coord, y-coord)\n  element.scrollTo(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/scroll-to, :variadic true, :file "src/web/Element.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 609, :end-line 609, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The scrollTo() method of the `web.Element` interface scrolls\n  a particular set of coordinates inside a given element.\n\n  `element.scrollTo(x-coord, y-coord)\n  element.scrollTo(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTo`"}, scroll-into-view-if-needed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 594, :column 7, :end-line 594, :end-column 33, :arglists (quote ([this])), :doc "Method.\n\n  The Element.scrollIntoViewIfNeeded() method scrolls the current\n  into the visible area of the browser window if it's not already\n  the visible area of the browser window. If the element is already\n  the visible area of the browser window, then no scrolling takes\n  This method is a proprietary variation of the standard `web.Element.scrollIntoView()`\n\n  `TODO`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded`"}, :name web.Element/scroll-into-view-if-needed, :variadic false, :file "src/web/Element.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 594, :end-line 594, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Element.scrollIntoViewIfNeeded() method scrolls the current\n  into the visible area of the browser window if it's not already\n  the visible area of the browser window. If the element is already\n  the visible area of the browser window, then no scrolling takes\n  This method is a proprietary variation of the standard `web.Element.scrollIntoView()`\n\n  `TODO`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoViewIfNeeded`"}, scroll-top-max {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1579, :column 7, :end-line 1579, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollTopMax read-only property returns a `web.Number`\n  the maximum top scroll offset possible for the element.\n\n  `var pxl = elt.scrollTopMax;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax`"}, :name web.Element/scroll-top-max, :variadic false, :file "src/web/Element.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1579, :end-line 1579, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollTopMax read-only property returns a `web.Number`\n  the maximum top scroll offset possible for the element.\n\n  `var pxl = elt.scrollTopMax;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTopMax`"}, first-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1069, :column 7, :end-line 1069, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.Element/first-element-child, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1069, :end-line 1069, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, outer-html {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1369, :column 7, :end-line 1369, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The outerHTML attribute of the `web.Element` DOM interface gets\n  serialized HTML fragment describing the element including its\n  It can also be set to replace the element with nodes parsed from\n  given string.\n\n  `var content = element.outerHTML;\n\n  element.outerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML`"}, :name web.Element/outer-html, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1369, :end-line 1369, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The outerHTML attribute of the `web.Element` DOM interface gets\n  serialized HTML fragment describing the element including its\n  It can also be set to replace the element with nodes parsed from\n  given string.\n\n  `var content = element.outerHTML;\n\n  element.outerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML`"}, open-or-closed-shadow-root {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1343, :column 7, :end-line 1343, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The Element.openOrCloseShadowRoot read-only property represents\n  shadow root hosted by the element, regardless if its `web.mode`\n  open or closed.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/openOrClosedShadowRoot`"}, :name web.Element/open-or-closed-shadow-root, :variadic false, :file "src/web/Element.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1343, :end-line 1343, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.openOrCloseShadowRoot read-only property represents\n  shadow root hosted by the element, regardless if its `web.mode`\n  open or closed.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/openOrClosedShadowRoot`"}, children {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 859, :column 7, :end-line 859, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.Element/children, :variadic false, :file "src/web/Element.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 859, :end-line 859, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, remove-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 754, :column 7, :end-line 754, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/remove-event-listener, :variadic true, :file "src/web/Element.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 754, :end-line 754, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 463, :column 7, :end-line 463, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, :name web.Element/remove, :variadic false, :file "src/web/Element.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, set-attribute-node-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 650, :column 7, :end-line 650, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  setAttributeNodeNS adds a new namespaced attribute node to an\n\n  `replacedAttr = element.setAttributeNodeNS(attributeNode)\n\n\n  replacedAttr is the replaced attribute node, if any, returned by this function.\n  attributeNode is an Attr node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/set-attribute-node-ns, :variadic true, :file "src/web/Element.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 650, :end-line 650, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  setAttributeNodeNS adds a new namespaced attribute node to an\n\n  `replacedAttr = element.setAttributeNodeNS(attributeNode)\n\n\n  replacedAttr is the replaced attribute node, if any, returned by this function.\n  attributeNode is an Attr node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNodeNS`"}, previous-element-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1425, :column 7, :end-line 1425, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.previousElementSibling read-only\n  returns the `web.Element` immediately prior to the specified\n  in its parent's children list, or null if the specified element\n  the first one in the list.\n\n  `prevNode = elementNodeReference.previousElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling`"}, :name web.Element/previous-element-sibling, :variadic false, :file "src/web/Element.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1425, :end-line 1425, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.previousElementSibling read-only\n  returns the `web.Element` immediately prior to the specified\n  in its parent's children list, or null if the specified element\n  the first one in the list.\n\n  `prevNode = elementNodeReference.previousElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling`"}, set-attribute-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 665, :column 7, :end-line 665, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  setAttributeNS adds a new attribute or changes the value of an\n  with the given namespace and name.\n\n  `element.setAttributeNS(namespace, name, value)\n\n\n  namespace is a string specifying the namespace of the attribute.\n  name is a string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.\n  value is the desired string value of the new attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/set-attribute-ns, :variadic true, :file "src/web/Element.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  setAttributeNS adds a new attribute or changes the value of an\n  with the given namespace and name.\n\n  `element.setAttributeNS(namespace, name, value)\n\n\n  namespace is a string specifying the namespace of the attribute.\n  name is a string identifying the attribute by its qualified name; that is, a namespace prefix followed by a colon followed by a local name.\n  value is the desired string value of the new attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNS`"}, inner-html {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1125, :column 7, :end-line 1125, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` property innerHTML gets or sets the HTML or\n  markup contained within the element.\n\n  `const content = element.innerHTML;\n\n  element.innerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML`"}, :name web.Element/inner-html, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1125, :end-line 1125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` property innerHTML gets or sets the HTML or\n  markup contained within the element.\n\n  `const content = element.innerHTML;\n\n  element.innerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML`"}, insert-adjacent-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 376, :column 7, :end-line 376, :end-column 27, :arglists (quote ([this position element])), :doc "Method.\n\n  The insertAdjacentText() method of the `web.Element` interface\n  a given text node at a given position relative to the element\n  is invoked upon.\n\n  `element.insertAdjacentText(position, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText`"}, :name web.Element/insert-adjacent-text, :variadic false, :file "src/web/Element.cljs", :end-column 27, :method-params ([this position element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 376, :end-line 376, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this position element])), :doc "Method.\n\n  The insertAdjacentText() method of the `web.Element` interface\n  a given text node at a given position relative to the element\n  is invoked upon.\n\n  `element.insertAdjacentText(position, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentText`"}, next-element-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1263, :column 7, :end-line 1263, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, :name web.Element/next-element-sibling, :variadic false, :file "src/web/Element.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1263, :end-line 1263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, tag-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1701, :column 7, :end-line 1701, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The tagName read-only property of the `web.Element` interface\n  the tag name of the element on which it's called.\n\n  `elementName = Element.tagName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName`"}, :name web.Element/tag-name, :variadic false, :file "src/web/Element.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1701, :end-line 1701, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tagName read-only property of the `web.Element` interface\n  the tag name of the element on which it's called.\n\n  `elementName = Element.tagName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName`"}, set-access-key! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 781, :column 7, :end-line 781, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.accessKey property sets the keystroke which a user\n  press to jump to a given element.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey`"}, :name web.Element/set-access-key!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.accessKey property sets the keystroke which a user\n  press to jump to a given element.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey`"}, slot {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1645, :column 7, :end-line 1645, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, :name web.Element/slot, :variadic false, :file "src/web/Element.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1645, :end-line 1645, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, get-elements-by-class-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 236, :column 7, :end-line 236, :end-column 33, :arglists (quote ([this names])), :doc "Method.\n\n  The `web.Element` method getElementsByClassName() returns a live\n  which contains every descendant element which has the specified\n  name or names.\n\n  `var elements = element.getElementsByClassName(names);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName`"}, :name web.Element/get-elements-by-class-name, :variadic false, :file "src/web/Element.cljs", :end-column 33, :method-params ([this names]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 236, :end-line 236, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this names])), :doc "Method.\n\n  The `web.Element` method getElementsByClassName() returns a live\n  which contains every descendant element which has the specified\n  name or names.\n\n  `var elements = element.getElementsByClassName(names);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName`"}, has-pointer-capture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 334, :column 7, :end-line 334, :end-column 26, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The hasPointerCapture() method of the `web.Element` interface\n  whether the element on which it is invoked has pointer capture\n  the pointer identified by the given pointer ID.\n\n  `targetElement.hasPointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture`"}, :name web.Element/has-pointer-capture, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this pointer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 334, :end-line 334, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The hasPointerCapture() method of the `web.Element` interface\n  whether the element on which it is invoked has pointer capture\n  the pointer identified by the given pointer ID.\n\n  `targetElement.hasPointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasPointerCapture`"}, scroll-top {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1525, :column 7, :end-line 1525, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollTop property gets or sets the number of pixels\n  an element's content is scrolled vertically.\n\n  `// Get the number of pixels scrolled.\n  var intElemScrollTop = someElement.scrollTop;\n\n  After running this code, intElemScrollTop is an integer corresponding to the number of pixels that the `web.element`'s content has been scrolled upwards.\n\n\n\n  // Set the number of pixels scrolled.\n  element.scrollTop = intValue;\n\n  scrollTop can be set to any integer value, with certain caveats:\n\n\n  If the element can't be scrolled (e.g. it has no overflow or if the element has a property of \\\"non-scrollable\\\"), scrollTop is 0.\n  scrollTop doesn't respond to negative values; instead, it sets itself back to 0.\n  If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop`"}, :name web.Element/scroll-top, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1525, :end-line 1525, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollTop property gets or sets the number of pixels\n  an element's content is scrolled vertically.\n\n  `// Get the number of pixels scrolled.\n  var intElemScrollTop = someElement.scrollTop;\n\n  After running this code, intElemScrollTop is an integer corresponding to the number of pixels that the `web.element`'s content has been scrolled upwards.\n\n\n\n  // Set the number of pixels scrolled.\n  element.scrollTop = intValue;\n\n  scrollTop can be set to any integer value, with certain caveats:\n\n\n  If the element can't be scrolled (e.g. it has no overflow or if the element has a property of \\\"non-scrollable\\\"), scrollTop is 0.\n  scrollTop doesn't respond to negative values; instead, it sets itself back to 0.\n  If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop`"}, set-open-or-closed-shadow-root! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1356, :column 7, :end-line 1356, :end-column 38, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.openOrCloseShadowRoot read-only property represents\n  shadow root hosted by the element, regardless if its `web.mode`\n  open or closed.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/openOrClosedShadowRoot`"}, :name web.Element/set-open-or-closed-shadow-root!, :variadic false, :file "src/web/Element.cljs", :end-column 38, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1356, :end-line 1356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.openOrCloseShadowRoot read-only property represents\n  shadow root hosted by the element, regardless if its `web.mode`\n  open or closed.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/openOrClosedShadowRoot`"}, child-element-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 823, :column 7, :end-line 823, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.Element/child-element-count, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 823, :end-line 823, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1220, :column 7, :end-line 1220, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  name gets or sets the name property of an element in the DOM.\n  only applies to the following elements: `web.<a>`, `web.<applet>`,\n  `web.<form>`, `web.<frame>`, `web.<iframe>`, `web.<img>`, `web.<input>`,\n  `web.<meta>`, `web.<object>`, `web.<param>`, `web.<select>`,\n  `web.<textarea>`.\n\n  `HTMLElement.name = string;\n  var elName = HTMLElement.name;\n\n  var fControl = HTMLFormElement.elementName;\n  var controlCollection = HTMLFormElement.elements.elementName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/name`"}, :name web.Element/set-name!, :variadic false, :file "src/web/Element.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1220, :end-line 1220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  name gets or sets the name property of an element in the DOM.\n  only applies to the following elements: `web.<a>`, `web.<applet>`,\n  `web.<form>`, `web.<frame>`, `web.<iframe>`, `web.<img>`, `web.<input>`,\n  `web.<meta>`, `web.<object>`, `web.<param>`, `web.<select>`,\n  `web.<textarea>`.\n\n  `HTMLElement.name = string;\n  var elName = HTMLElement.name;\n\n  var fControl = HTMLFormElement.elementName;\n  var controlCollection = HTMLFormElement.elements.elementName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/name`"}, set-next-element-sibling! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1276, :column 7, :end-line 1276, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, :name web.Element/set-next-element-sibling!, :variadic false, :file "src/web/Element.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1276, :end-line 1276, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, query-selector {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 423, :column 7, :end-line 423, :end-column 21, :arglists (quote ([this selectors])), :doc "Method.\n\n  The querySelector() method of the `web.Element` interface returns\n  first element that is a descendant of the element on which it\n  invoked that matches the specified group of selectors.\n\n  `element = baseElement.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector`"}, :name web.Element/query-selector, :variadic false, :file "src/web/Element.cljs", :end-column 21, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The querySelector() method of the `web.Element` interface returns\n  first element that is a descendant of the element on which it\n  invoked that matches the specified group of selectors.\n\n  `element = baseElement.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelector`"}, client-left {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 963, :column 7, :end-line 963, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The width of the left border of an element in pixels. It includes\n  width of the vertical scrollbar if the text direction of the\n  is right–to–left and if there is an overflow causing a left vertical\n  to be rendered. clientLeft does not include the left margin or\n  left padding. clientLeft is read-only.\n\n  `var left = element.clientLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft`"}, :name web.Element/client-left, :variadic false, :file "src/web/Element.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 963, :end-line 963, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The width of the left border of an element in pixels. It includes\n  width of the vertical scrollbar if the text direction of the\n  is right–to–left and if there is an overflow causing a left vertical\n  to be rendered. clientLeft does not include the left margin or\n  left padding. clientLeft is read-only.\n\n  `var left = element.clientLeft;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientLeft`"}, scroll-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1591, :column 7, :end-line 1591, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollWidth read-only property is a measurement of\n  width of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var xScrollWidth = element.scrollWidth;\n\n  xScrollWidth is the width of the content of element in pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth`"}, :name web.Element/scroll-width, :variadic false, :file "src/web/Element.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1591, :end-line 1591, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollWidth read-only property is a measurement of\n  width of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var xScrollWidth = element.scrollWidth;\n\n  xScrollWidth is the width of the content of element in pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth`"}, current-style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1049, :column 7, :end-line 1049, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  Element.currentStyle is a proprietary property which is similar\n  the standardized `web.window.getComputedStyle()` method.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/currentStyle`"}, :name web.Element/current-style, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1049, :end-line 1049, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Element.currentStyle is a proprietary property which is similar\n  the standardized `web.window.getComputedStyle()` method.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/currentStyle`"}, set-children! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 872, :column 7, :end-line 872, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.Element/set-children!, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 872, :end-line 872, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, set-attribute-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 635, :column 7, :end-line 635, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The setAttributeNode() method adds a new Attr node to the specified\n\n  `var replacedAttr = element.setAttributeNode(attribute);\n\n\n  attribute is the Attr node to set on the element.\n  replacedAttr is the replaced attribute node, if any, returned by this function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/set-attribute-node, :variadic true, :file "src/web/Element.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setAttributeNode() method adds a new Attr node to the specified\n\n  `var replacedAttr = element.setAttributeNode(attribute);\n\n\n  attribute is the Attr node to set on the element.\n  replacedAttr is the replaced attribute node, if any, returned by this function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttributeNode`"}, set-child-element-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 841, :column 7, :end-line 841, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.Element/set-child-element-count!, :variadic false, :file "src/web/Element.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 841, :end-line 841, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, access-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 771, :column 7, :end-line 771, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Element.accessKey property sets the keystroke which a user\n  press to jump to a given element.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey`"}, :name web.Element/access-key, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 771, :end-line 771, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.accessKey property sets the keystroke which a user\n  press to jump to a given element.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/accessKey`"}, get-client-rects {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 223, :column 7, :end-line 223, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The getClientRects() method of the `web.Element` interface returns\n  collection of `dom.DOMRect` objects that indicate the bounding\n  for each CSS border box in a client.\n\n  `let rectCollection = object.getClientRects();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects`"}, :name web.Element/get-client-rects, :variadic false, :file "src/web/Element.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getClientRects() method of the `web.Element` interface returns\n  collection of `dom.DOMRect` objects that indicate the bounding\n  for each CSS border box in a client.\n\n  `let rectCollection = object.getClientRects();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getClientRects`"}, prepend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 410, :column 7, :end-line 410, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/prepend, :variadic true, :file "src/web/Element.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 410, :end-line 410, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`"}, set-runtime-style! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1449, :column 7, :end-line 1449, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  Element.runtimeStyle is a proprietary property similar to `html.HTMLElement.style`,\n  its styles, that have higher precedence and modification.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/runtimeStyle`"}, :name web.Element/set-runtime-style!, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1449, :end-line 1449, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Element.runtimeStyle is a proprietary property similar to `html.HTMLElement.style`,\n  its styles, that have higher precedence and modification.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/runtimeStyle`"}, tab-stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1671, :column 7, :end-line 1671, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The tabStop property of the `web.Element` interface returns a\n  indicating if the element can receive input focus via the tab\n  If the specified element is a shadow host tab navigation is delegated\n  its children.\n\n  `var isTabStop = element.tabStop;\n  element.tabStop = (true|false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop`"}, :name web.Element/tab-stop, :variadic false, :file "src/web/Element.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1671, :end-line 1671, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tabStop property of the `web.Element` interface returns a\n  indicating if the element can receive input focus via the tab\n  If the specified element is a shadow host tab navigation is delegated\n  its children.\n\n  `var isTabStop = element.tabStop;\n  element.tabStop = (true|false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/tabStop`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1201, :column 7, :end-line 1201, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  name gets or sets the name property of an element in the DOM.\n  only applies to the following elements: `web.<a>`, `web.<applet>`,\n  `web.<form>`, `web.<frame>`, `web.<iframe>`, `web.<img>`, `web.<input>`,\n  `web.<meta>`, `web.<object>`, `web.<param>`, `web.<select>`,\n  `web.<textarea>`.\n\n  `HTMLElement.name = string;\n  var elName = HTMLElement.name;\n\n  var fControl = HTMLFormElement.elementName;\n  var controlCollection = HTMLFormElement.elements.elementName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/name`"}, :name web.Element/name, :variadic false, :file "src/web/Element.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1201, :end-line 1201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  name gets or sets the name property of an element in the DOM.\n  only applies to the following elements: `web.<a>`, `web.<applet>`,\n  `web.<form>`, `web.<frame>`, `web.<iframe>`, `web.<img>`, `web.<input>`,\n  `web.<meta>`, `web.<object>`, `web.<param>`, `web.<select>`,\n  `web.<textarea>`.\n\n  `HTMLElement.name = string;\n  var elName = HTMLElement.name;\n\n  var fControl = HTMLFormElement.elementName;\n  var controlCollection = HTMLFormElement.elements.elementName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/name`"}, get-attribute-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 161, :column 7, :end-line 161, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  Returns the specified attribute of the specified element, as\n  Attr node.\n\n  `var attrNode = element.getAttributeNode(attrName);\n\n\n  attrNode is an Attr node for the attribute.\n  attrName is a string containing the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/get-attribute-node, :variadic true, :file "src/web/Element.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Returns the specified attribute of the specified element, as\n  Attr node.\n\n  `var attrNode = element.getAttributeNode(attrName);\n\n\n  attrNode is an Attr node for the attribute.\n  attrName is a string containing the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNode`"}, has-attribute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 286, :column 7, :end-line 286, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The Element.hasAttribute() method returns a Boolean value indicating\n  the specified element has the specified attribute or not.\n\n  `var result = element.hasAttribute(name);\n\n\n  result\n  holds the return value true or false.\n  name\n  is a string representing the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/has-attribute, :variadic true, :file "src/web/Element.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Element.hasAttribute() method returns a Boolean value indicating\n  the specified element has the specified attribute or not.\n\n  `var result = element.hasAttribute(name);\n\n\n  result\n  holds the return value true or false.\n  name\n  is a string representing the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttribute`"}, set-inner-html! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1139, :column 7, :end-line 1139, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` property innerHTML gets or sets the HTML or\n  markup contained within the element.\n\n  `const content = element.innerHTML;\n\n  element.innerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML`"}, :name web.Element/set-inner-html!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1139, :end-line 1139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` property innerHTML gets or sets the HTML or\n  markup contained within the element.\n\n  `const content = element.innerHTML;\n\n  element.innerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML`"}, has-attribute-ns {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 304, :column 7, :end-line 304, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  hasAttributeNS returns a boolean value indicating whether the\n  element has the specified attribute.\n\n  `result = element.hasAttributeNS(namespace,localName)\n\n\n  result is the boolean value true or false.\n  namespace is a string specifying the namespace of the attribute.\n  localName is the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/has-attribute-ns, :variadic true, :file "src/web/Element.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  hasAttributeNS returns a boolean value indicating whether the\n  element has the specified attribute.\n\n  `result = element.hasAttributeNS(namespace,localName)\n\n\n  result is the boolean value true or false.\n  namespace is a string specifying the namespace of the attribute.\n  localName is the name of the attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/hasAttributeNS`"}, get-attribute-names {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 148, :column 7, :end-line 148, :end-column 26, :arglists (quote ([this])), :doc "Method.\n\n  The getAttributeNames() method of the `web.Element` interface\n  the attribute names of the element as an `web.Array` of strings.\n  the element has no attributes it returns an empty array.\n\n  `let attributeNames = element.getAttributeNames();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames`"}, :name web.Element/get-attribute-names, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getAttributeNames() method of the `web.Element` interface\n  the attribute names of the element as an `web.Array` of strings.\n  the element has no attributes it returns an empty array.\n\n  `let attributeNames = element.getAttributeNames();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAttributeNames`"}, add-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 726, :column 7, :end-line 726, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/add-event-listener, :variadic true, :file "src/web/Element.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 726, :end-line 726, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`"}, set-local-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1189, :column 7, :end-line 1189, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.localName read-only property returns the local part\n  the qualified name of an element.\n\n  `name = element.localName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/localName`"}, :name web.Element/set-local-name!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1189, :end-line 1189, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.localName read-only property returns the local part\n  the qualified name of an element.\n\n  `name = element.localName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/localName`"}, set-slot! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1658, :column 7, :end-line 1658, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, :name web.Element/set-slot!, :variadic false, :file "src/web/Element.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1658, :end-line 1658, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, append {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/append, :variadic true, :file "src/web/Element.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`"}, set-attribute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 622, :column 7, :end-line 622, :end-column 20, :arglists (quote ([this name value])), :doc "Method.\n\n  Sets the value of an attribute on the specified element. If the\n  already exists, the value is updated; otherwise a new attribute\n  added with the specified name and value.\n\n  `Element.setAttribute(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute`"}, :name web.Element/set-attribute, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 622, :end-line 622, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name value])), :doc "Method.\n\n  Sets the value of an attribute on the specified element. If the\n  already exists, the value is updated; otherwise a new attribute\n  added with the specified name and value.\n\n  `Element.setAttribute(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setAttribute`"}, set-scroll-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1606, :column 7, :end-line 1606, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollWidth read-only property is a measurement of\n  width of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var xScrollWidth = element.scrollWidth;\n\n  xScrollWidth is the width of the content of element in pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth`"}, :name web.Element/set-scroll-width!, :variadic false, :file "src/web/Element.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1606, :end-line 1606, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollWidth read-only property is a measurement of\n  width of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var xScrollWidth = element.scrollWidth;\n\n  xScrollWidth is the width of the content of element in pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollWidth`"}, set-prefix! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1413, :column 7, :end-line 1413, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.prefix read-only property returns the namespace prefix\n  the specified element, or null if no prefix is specified.\n\n  `string = element.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix`"}, :name web.Element/set-prefix!, :variadic false, :file "src/web/Element.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1413, :end-line 1413, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.prefix read-only property returns the namespace prefix\n  the specified element, or null if no prefix is specified.\n\n  `string = element.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix`"}, query-selector-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 436, :column 7, :end-line 436, :end-column 25, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelectorAll() method\n  returning a `web.NodeList` representing a list of elements matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `elementList = parentNode.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll`"}, :name web.Element/query-selector-all, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelectorAll() method\n  returning a `web.NodeList` representing a list of elements matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `elementList = parentNode.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll`"}, animate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 21, :column 7, :end-line 21, :end-column 14, :arglists (quote ([this keyframes options])), :doc "Method.\n\n  The `web.Element` interface's animate() method is a shortcut\n  which creates a new `web.Animation`, applies it to the element,\n  plays the animation. It returns the created `web.Animation` object\n\n  `var animation = element.animate(keyframes, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/animate`"}, :name web.Element/animate, :variadic false, :file "src/web/Element.cljs", :end-column 14, :method-params ([this keyframes options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this keyframes options])), :doc "Method.\n\n  The `web.Element` interface's animate() method is a shortcut\n  which creates a new `web.Animation`, applies it to the element,\n  plays the animation. It returns the created `web.Animation` object\n\n  `var animation = element.animate(keyframes, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/animate`"}, ms-zoom-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 400, :column 7, :end-line 400, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The msZoomTo method scrolls and/or zooms an element to its specified\n  with animation.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/msZoomTo`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/ms-zoom-to, :variadic true, :file "src/web/Element.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The msZoomTo method scrolls and/or zooms an element to its specified\n  with animation.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/msZoomTo`"}, set-shadow-root! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1633, :column 7, :end-line 1633, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, :name web.Element/set-shadow-root!, :variadic false, :file "src/web/Element.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1633, :end-line 1633, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, set-scroll-top! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1552, :column 7, :end-line 1552, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollTop property gets or sets the number of pixels\n  an element's content is scrolled vertically.\n\n  `// Get the number of pixels scrolled.\n  var intElemScrollTop = someElement.scrollTop;\n\n  After running this code, intElemScrollTop is an integer corresponding to the number of pixels that the `web.element`'s content has been scrolled upwards.\n\n\n\n  // Set the number of pixels scrolled.\n  element.scrollTop = intValue;\n\n  scrollTop can be set to any integer value, with certain caveats:\n\n\n  If the element can't be scrolled (e.g. it has no overflow or if the element has a property of \\\"non-scrollable\\\"), scrollTop is 0.\n  scrollTop doesn't respond to negative values; instead, it sets itself back to 0.\n  If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop`"}, :name web.Element/set-scroll-top!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1552, :end-line 1552, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollTop property gets or sets the number of pixels\n  an element's content is scrolled vertically.\n\n  `// Get the number of pixels scrolled.\n  var intElemScrollTop = someElement.scrollTop;\n\n  After running this code, intElemScrollTop is an integer corresponding to the number of pixels that the `web.element`'s content has been scrolled upwards.\n\n\n\n  // Set the number of pixels scrolled.\n  element.scrollTop = intValue;\n\n  scrollTop can be set to any integer value, with certain caveats:\n\n\n  If the element can't be scrolled (e.g. it has no overflow or if the element has a property of \\\"non-scrollable\\\"), scrollTop is 0.\n  scrollTop doesn't respond to negative values; instead, it sets itself back to 0.\n  If set to a value greater than the maximum available for the element, scrollTop settles itself to the maximum value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollTop`"}, onfullscreenchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1289, :column 7, :end-line 1289, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired when\n  element has transitioned into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange`"}, :name web.Element/onfullscreenchange, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1289, :end-line 1289, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired when\n  element has transitioned into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange`"}, matches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 389, :column 7, :end-line 389, :end-column 14, :arglists (quote ([this selector-string])), :doc "Method.\n\n  selectorString is a string representing the selector to test.\n\n  `var result = element.matches(selectorString);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/matches`"}, :name web.Element/matches, :variadic false, :file "src/web/Element.cljs", :end-column 14, :method-params ([this selector-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 389, :end-line 389, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selector-string])), :doc "Method.\n\n  selectorString is a string representing the selector to test.\n\n  `var result = element.matches(selectorString);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/matches`"}, set-first-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1081, :column 7, :end-line 1081, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.Element/set-first-element-child!, :variadic false, :file "src/web/Element.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1081, :end-line 1081, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, set-client-top! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1005, :column 7, :end-line 1005, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The width of the top border of an element in pixels. It is a\n  integer property of element.\n\n  `var top = element.clientTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop`"}, :name web.Element/set-client-top!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1005, :end-line 1005, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The width of the top border of an element in pixels. It is a\n  integer property of element.\n\n  `var top = element.clientTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop`"}, request-fullscreen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 529, :column 7, :end-line 529, :end-column 25, :arglists (quote ([this options])), :doc "Method.\n\n  The Element.requestFullscreen() method issues an asynchronous\n  to make the element be displayed in full-screen mode.\n\n  `var Promise = Element.requestFullscreen(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen`"}, :name web.Element/request-fullscreen, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The Element.requestFullscreen() method issues an asynchronous\n  to make the element be displayed in full-screen mode.\n\n  `var Promise = Element.requestFullscreen(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/requestFullScreen`"}, set-namespace-uri! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1251, :column 7, :end-line 1251, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.namespaceURI read-only property returns the namespace\n  of the element, or null if the element is not in a namespace.\n\n  `namespace = element.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI`"}, :name web.Element/set-namespace-uri!, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1251, :end-line 1251, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.namespaceURI read-only property returns the namespace\n  of the element, or null if the element is not in a namespace.\n\n  `namespace = element.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI`"}, prefix {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1401, :column 7, :end-line 1401, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Element.prefix read-only property returns the namespace prefix\n  the specified element, or null if no prefix is specified.\n\n  `string = element.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix`"}, :name web.Element/prefix, :variadic false, :file "src/web/Element.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1401, :end-line 1401, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.prefix read-only property returns the namespace prefix\n  the specified element, or null if no prefix is specified.\n\n  `string = element.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/prefix`"}, get-animations {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 115, :column 7, :end-line 115, :end-column 21, :arglists (quote ([this options])), :doc "Method.\n\n  The getAnimations() method of the `web.Element` interface (specified\n  the Animatable mixin) returns an array of all `web.Animation`\n  affecting this element or which are scheduled to do so in future.\n  can optionally return `web.Animation` objects for descendant\n  too.\n\n  `const animations = Element.getAnimations(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations`"}, :name web.Element/get-animations, :variadic false, :file "src/web/Element.cljs", :end-column 21, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The getAnimations() method of the `web.Element` interface (specified\n  the Animatable mixin) returns an array of all `web.Animation`\n  affecting this element or which are scheduled to do so in future.\n  can optionally return `web.Animation` objects for descendant\n  too.\n\n  `const animations = Element.getAnimations(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getAnimations`"}, set-pointer-capture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 699, :column 7, :end-line 699, :end-column 26, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The setPointerCapture() method of the `web.Element` interface\n  used to designate a specific element as the capture target of\n  pointer events. Subsequent events for the pointer will be targeted\n  the capture element until capture is released (via `web.Element.releasePointerCapture()`).\n\n  `targetElement.setPointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture`"}, :name web.Element/set-pointer-capture, :variadic false, :file "src/web/Element.cljs", :end-column 26, :method-params ([this pointer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The setPointerCapture() method of the `web.Element` interface\n  used to designate a specific element as the capture target of\n  pointer events. Subsequent events for the pointer will be targeted\n  the capture element until capture is released (via `web.Element.releasePointerCapture()`).\n\n  `targetElement.setPointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/setPointerCapture`"}, client-top {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 993, :column 7, :end-line 993, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The width of the top border of an element in pixels. It is a\n  integer property of element.\n\n  `var top = element.clientTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop`"}, :name web.Element/client-top, :variadic false, :file "src/web/Element.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 993, :end-line 993, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The width of the top border of an element in pixels. It is a\n  integer property of element.\n\n  `var top = element.clientTop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientTop`"}, set-onfullscreenerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1329, :column 7, :end-line 1329, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenerror property is an\n  handler for the fullscreenerror event which is sent to the element\n  an error occurs while attempting to transition into or out of\n  mode.\n\n  `targetElement.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror`"}, :name web.Element/set-onfullscreenerror!, :variadic false, :file "src/web/Element.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1329, :end-line 1329, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Element` interface's onfullscreenerror property is an\n  handler for the fullscreenerror event which is sent to the element\n  an error occurs while attempting to transition into or out of\n  mode.\n\n  `targetElement.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror`"}, get-bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 211, :column 7, :end-line 211, :end-column 31, :arglists (quote ([this])), :doc "Method.\n\n  The Element.getBoundingClientRect() method returns the size of\n  element and its position relative to the viewport.\n\n  `domRect = element.getBoundingClientRect();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect`"}, :name web.Element/get-bounding-client-rect, :variadic false, :file "src/web/Element.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Element.getBoundingClientRect() method returns the size of\n  element and its position relative to the viewport.\n\n  `domRect = element.getBoundingClientRect();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect`"}, insert-adjacent-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 347, :column 7, :end-line 347, :end-column 30, :arglists (quote ([this position element])), :doc "Method.\n\n  The insertAdjacentElement() method of the `web.Element` interface\n  a given element node at a given position relative to the element\n  is invoked upon.\n\n  `targetElement.insertAdjacentElement(position, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement`"}, :name web.Element/insert-adjacent-element, :variadic false, :file "src/web/Element.cljs", :end-column 30, :method-params ([this position element]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this position element])), :doc "Method.\n\n  The insertAdjacentElement() method of the `web.Element` interface\n  a given element node at a given position relative to the element\n  is invoked upon.\n\n  `targetElement.insertAdjacentElement(position, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement`"}, namespace-uri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1239, :column 7, :end-line 1239, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Element.namespaceURI read-only property returns the namespace\n  of the element, or null if the element is not in a namespace.\n\n  `namespace = element.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI`"}, :name web.Element/namespace-uri, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1239, :end-line 1239, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.namespaceURI read-only property returns the namespace\n  of the element, or null if the element is not in a namespace.\n\n  `namespace = element.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/namespaceURI`"}, scroll-left {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1489, :column 7, :end-line 1489, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollLeft property gets or sets the number of pixels\n  an element's content is scrolled from its left edge.\n\n  ``\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft`"}, :name web.Element/scroll-left, :variadic false, :file "src/web/Element.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1489, :end-line 1489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.scrollLeft property gets or sets the number of pixels\n  an element's content is scrolled from its left edge.\n\n  ``\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft`"}, client-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 931, :column 7, :end-line 931, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Element.clientHeight read-only property is zero for elements\n  no CSS or inline layout boxes; otherwise, it's the inner height\n  an element in pixels. It includes padding but excludes borders,\n  and horizontal scrollbars (if present).\n\n  `var intElemClientHeight = element.clientHeight;\n\n  intElemClientHeight is an integer corresponding to the clientHeight of element in pixels. The clientHeight property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight`"}, :name web.Element/client-height, :variadic false, :file "src/web/Element.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 931, :end-line 931, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.clientHeight read-only property is zero for elements\n  no CSS or inline layout boxes; otherwise, it's the inner height\n  an element in pixels. It includes padding but excludes borders,\n  and horizontal scrollbars (if present).\n\n  `var intElemClientHeight = element.clientHeight;\n\n  intElemClientHeight is an integer corresponding to the clientHeight of element in pixels. The clientHeight property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientHeight`"}, release-pointer-capture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 450, :column 7, :end-line 450, :end-column 30, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The releasePointerCapture() method of the `web.Element` interface\n  (stops) pointer capture that was previously set for a specific\n  pointer.\n\n  `targetElement.releasePointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture`"}, :name web.Element/release-pointer-capture, :variadic false, :file "src/web/Element.cljs", :end-column 30, :method-params ([this pointer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this pointer-id])), :doc "Method.\n\n  The releasePointerCapture() method of the `web.Element` interface\n  (stops) pointer capture that was previously set for a specific\n  pointer.\n\n  `targetElement.releasePointerCapture(pointerId);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/releasePointerCapture`"}, after {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Element/after, :variadic true, :file "src/web/Element.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`"}, set-outer-html! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1385, :column 7, :end-line 1385, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The outerHTML attribute of the `web.Element` DOM interface gets\n  serialized HTML fragment describing the element including its\n  It can also be set to replace the element with nodes parsed from\n  given string.\n\n  `var content = element.outerHTML;\n\n  element.outerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML`"}, :name web.Element/set-outer-html!, :variadic false, :file "src/web/Element.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1385, :end-line 1385, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The outerHTML attribute of the `web.Element` DOM interface gets\n  serialized HTML fragment describing the element including its\n  It can also be set to replace the element with nodes parsed from\n  given string.\n\n  `var content = element.outerHTML;\n\n  element.outerHTML = htmlString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML`"}, set-client-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1033, :column 7, :end-line 1033, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.clientWidth property is zero for inline elements\n  elements with no CSS; otherwise, it's the inner width of an element\n  pixels. It includes padding but excludes borders, margins, and\n  scrollbars (if present).\n\n  `var intElemClientWidth = element.clientWidth;\n\n  intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. The clientWidth property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth`"}, :name web.Element/set-client-width!, :variadic false, :file "src/web/Element.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1033, :end-line 1033, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.clientWidth property is zero for inline elements\n  elements with no CSS; otherwise, it's the inner width of an element\n  pixels. It includes padding but excludes borders, margins, and\n  scrollbars (if present).\n\n  `var intElemClientWidth = element.clientWidth;\n\n  intElemClientWidth is an integer corresponding to the clientWidth of element in pixels. The clientWidth property is read–only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/clientWidth`"}, set-scroll-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1474, :column 7, :end-line 1474, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollHeight read-only property is a measurement\n  the height of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var intElemScrollHeight = element.scrollHeight;\n\n  intElemScrollHeight is a variable storing an integer corresponding to the scrollHeight pixel value of the element. The scrollHeight property is read-only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight`"}, :name web.Element/set-scroll-height!, :variadic false, :file "src/web/Element.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1474, :end-line 1474, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollHeight read-only property is a measurement\n  the height of an element's content, including content not visible\n  the screen due to overflow.\n\n  `var intElemScrollHeight = element.scrollHeight;\n\n  intElemScrollHeight is a variable storing an integer corresponding to the scrollHeight pixel value of the element. The scrollHeight property is read-only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollHeight`"}, set-scroll-left! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Element.cljs", :line 1501, :column 7, :end-line 1501, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollLeft property gets or sets the number of pixels\n  an element's content is scrolled from its left edge.\n\n  ``\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft`"}, :name web.Element/set-scroll-left!, :variadic false, :file "src/web/Element.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1501, :end-line 1501, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.scrollLeft property gets or sets the number of pixels\n  an element's content is scrolled from its left edge.\n\n  ``\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollLeft`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Element is the most general base class from which all objects\n  a `web.Document` inherit. It only has methods and properties\n  to all kinds of elements. More specific classes inherit from"}