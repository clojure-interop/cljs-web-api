{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.WorkerGlobalScope, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-origin! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 436, :column 7, :end-line 436, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, :name web.WorkerGlobalScope/set-origin!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 436, :end-line 436, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, console {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 186, :column 7, :end-line 186, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The console read-only property of the `web.WorkerGlobalScope`\n  returns a `web.Console` object providing access to the browser\n  for the worker.\n\n  `var consoleObj = self.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console`"}, :name web.WorkerGlobalScope/console, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The console read-only property of the `web.WorkerGlobalScope`\n  returns a `web.Console` object providing access to the browser\n  for the worker.\n\n  `var consoleObj = self.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console`"}, dump {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 92, :column 7, :end-line 92, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The dump() method of the `web.WorkerGlobalScope` interface allows\n  to write a message to stdout — i.e. in your terminal, in Firefox\n  This is the same as Firefox's `web.window.dump`, but for workers.\n\n  `dump('My message\\\\n');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WorkerGlobalScope/dump, :variadic true, :file "src/web/WorkerGlobalScope.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The dump() method of the `web.WorkerGlobalScope` interface allows\n  to write a message to stdout — i.e. in your terminal, in Firefox\n  This is the same as Firefox's `web.window.dump`, but for workers.\n\n  `dump('My message\\\\n');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump`"}, set-onoffline! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 385, :column 7, :end-line 385, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onoffline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the offline event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onoffline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline`"}, :name web.WorkerGlobalScope/set-onoffline!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onoffline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the offline event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onoffline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline`"}, fetch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 105, :column 7, :end-line 105, :end-column 12, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, :name web.WorkerGlobalScope/fetch, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 12, :method-params ([this resource init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 238, :column 7, :end-line 238, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, :name web.WorkerGlobalScope/location, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, is-secure-context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 212, :column 7, :end-line 212, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, :name web.WorkerGlobalScope/is-secure-context, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, self {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 460, :column 7, :end-line 460, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, :name web.WorkerGlobalScope/self, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 460, :end-line 460, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, import-scripts {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 118, :column 7, :end-line 118, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The importScripts() method of the `web.WorkerGlobalScope` interface\n  imports one or more scripts into the worker's scope.\n\n  `self.importScripts('foo.js');\n  self.importScripts('foo.js', 'bar.js', ...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WorkerGlobalScope/import-scripts, :variadic true, :file "src/web/WorkerGlobalScope.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The importScripts() method of the `web.WorkerGlobalScope` interface\n  imports one or more scripts into the worker's scope.\n\n  `self.importScripts('foo.js');\n  self.importScripts('foo.js', 'bar.js', ...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 307, :column 7, :end-line 307, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the close event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose`"}, :name web.WorkerGlobalScope/set-onclose!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the close event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose`"}, caches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 172, :column 7, :end-line 172, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The caches read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the `web.CacheStorage` object associated with the current\n  This object enables functionality such as storing assets for\n  use, and generating custom responses to requests.\n\n  `var myCacheStorage = self.caches; // or just caches`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches`"}, :name web.WorkerGlobalScope/caches, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The caches read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the `web.CacheStorage` object associated with the current\n  This object enables functionality such as storing assets for\n  use, and generating custom responses to requests.\n\n  `var myCacheStorage = self.caches; // or just caches`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 333, :column 7, :end-line 333, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the error event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror`"}, :name web.WorkerGlobalScope/set-onerror!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the error event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror`"}, ononline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 398, :column 7, :end-line 398, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The ononline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the online event occurs\n  bubbles through the `web.Worker`.\n\n  `self.ononline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline`"}, :name web.WorkerGlobalScope/ononline, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ononline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the online event occurs\n  bubbles through the `web.Worker`.\n\n  `self.ononline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline`"}, set-ononline! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 411, :column 7, :end-line 411, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The ononline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the online event occurs\n  bubbles through the `web.Worker`.\n\n  `self.ononline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline`"}, :name web.WorkerGlobalScope/set-ononline!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 411, :end-line 411, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ononline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the online event occurs\n  bubbles through the `web.Worker`.\n\n  `self.ononline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/ononline`"}, clear-interval {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 38, :column 7, :end-line 38, :end-column 21, :arglists (quote ([this interval-id])), :doc "Method.\n\n  The clearInterval() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timed, repeating action which was previously established\n  a call to `web.setInterval()`.\n\n  `scope.clearInterval(intervalID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval`"}, :name web.WorkerGlobalScope/clear-interval, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 21, :method-params ([this interval-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this interval-id])), :doc "Method.\n\n  The clearInterval() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timed, repeating action which was previously established\n  a call to `web.setInterval()`.\n\n  `scope.clearInterval(intervalID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 320, :column 7, :end-line 320, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the error event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror`"}, :name web.WorkerGlobalScope/onerror, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the error event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onerror`"}, performance {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 448, :column 7, :end-line 448, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The performance read-only property of the `web.WorkerGlobalScope`\n  returns a `performance.Performance` object to be used on the\n\n  `var perfObj = self.performance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance`"}, :name web.WorkerGlobalScope/performance, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 448, :end-line 448, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The performance read-only property of the `web.WorkerGlobalScope`\n  returns a `performance.Performance` object to be used on the\n\n  `var perfObj = self.performance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance`"}, btoa {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 25, :column 7, :end-line 25, :end-column 11, :arglists (quote ([this string-to-encode])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.btoa() method creates a base-64\n  ASCII string from a binary string (i.e., a `web.String` object\n  which each character in the string is treated as a byte of binary\n\n  `var encodedData = scope.btoa(stringToEncode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa`"}, :name web.WorkerGlobalScope/btoa, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 11, :method-params ([this string-to-encode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this string-to-encode])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.btoa() method creates a base-64\n  ASCII string from a binary string (i.e., a `web.String` object\n  which each character in the string is treated as a byte of binary\n\n  `var encodedData = scope.btoa(stringToEncode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa`"}, set-self! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 474, :column 7, :end-line 474, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, :name web.WorkerGlobalScope/set-self!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 474, :end-line 474, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, set-navigator! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 280, :column 7, :end-line 280, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, :name web.WorkerGlobalScope/set-navigator!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, clear-timeout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 51, :column 7, :end-line 51, :end-column 20, :arglists (quote ([this timeout-id])), :doc "Method.\n\n  The clearTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timeout previously established by calling `web.setTimeout()`.\n\n  `scope.clearTimeout(timeoutID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout`"}, :name web.WorkerGlobalScope/clear-timeout, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 20, :method-params ([this timeout-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this timeout-id])), :doc "Method.\n\n  The clearTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timeout previously established by calling `web.setTimeout()`.\n\n  `scope.clearTimeout(timeoutID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout`"}, atob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 9, :column 7, :end-line 9, :end-column 11, :arglists (quote ([this encoded-data])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.atob() function decodes a string\n  data which has been encoded using base-64 encoding. You can use\n  `web.btoa()` method to encode and transmit data which may otherwise\n  communication problems, then transmit it and use the atob() method\n  decode the data again. For example, you can encode, transmit,\n  decode control characters such as ASCII values 0 through 31.\n\n  `var decodedData = scope.atob(encodedData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob`"}, :name web.WorkerGlobalScope/atob, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 11, :method-params ([this encoded-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this encoded-data])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.atob() function decodes a string\n  data which has been encoded using base-64 encoding. You can use\n  `web.btoa()` method to encode and transmit data which may otherwise\n  communication problems, then transmit it and use the atob() method\n  decode the data again. For example, you can encode, transmit,\n  decode control characters such as ASCII values 0 through 31.\n\n  `var decodedData = scope.atob(encodedData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.WorkerGlobalScope` interface discards\n  tasks queued in the WorkerGlobalScope's event loop, effectively\n  this particular scope.\n\n  `self.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/close`"}, :name web.WorkerGlobalScope/close, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.WorkerGlobalScope` interface discards\n  tasks queued in the WorkerGlobalScope's event loop, effectively\n  this particular scope.\n\n  `self.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/close`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 294, :column 7, :end-line 294, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the close event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose`"}, :name web.WorkerGlobalScope/onclose, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclose property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the close event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onclose = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onclose`"}, create-image-bitmap {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 76, :column 7, :end-line 76, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The createImageBitmap() method creates a bitmap from a given\n  optionally cropped to contain only a portion of that source.\n  method exists on the global scope in both windows and workers.\n  accepts a variety of different image sources, and returns a `web.Promise`\n  resolves to an `web.ImageBitmap`.\n\n  `createImageBitmap(image[, options]).then(function(response) { ... });\n  createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WorkerGlobalScope/create-image-bitmap, :variadic true, :file "src/web/WorkerGlobalScope.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createImageBitmap() method creates a bitmap from a given\n  optionally cropped to contain only a portion of that source.\n  method exists on the global scope in both windows and workers.\n  accepts a variety of different image sources, and returns a `web.Promise`\n  resolves to an `web.ImageBitmap`.\n\n  `createImageBitmap(image[, options]).then(function(response) { ... });\n  createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap`"}, set-location! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 252, :column 7, :end-line 252, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, :name web.WorkerGlobalScope/set-location!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, set-onlanguagechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 359, :column 7, :end-line 359, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The onlanguagechange property of the `web.WorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the languagechange\n  occurs and bubbles through the `web.Worker`.\n\n  `self.onlanguagechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onlanguagechange`"}, :name web.WorkerGlobalScope/set-onlanguagechange!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 359, :end-line 359, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onlanguagechange property of the `web.WorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the languagechange\n  occurs and bubbles through the `web.Worker`.\n\n  `self.onlanguagechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onlanguagechange`"}, set-interval {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 143, :column 7, :end-line 143, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The setInterval() method, offered on the `web.Window` and `web.Worker`\n  repeatedly calls a function or executes a code snippet, with\n  fixed time delay between each call.\n\n  `var intervalID = scope.setInterval(func, delay[, param1, param2, ...]);\n  var intervalID = scope.setInterval(code, delay);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WorkerGlobalScope/set-interval, :variadic true, :file "src/web/WorkerGlobalScope.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setInterval() method, offered on the `web.Window` and `web.Worker`\n  repeatedly calls a function or executes a code snippet, with\n  fixed time delay between each call.\n\n  `var intervalID = scope.setInterval(func, delay[, param1, param2, ...]);\n  var intervalID = scope.setInterval(code, delay);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval`"}, onlanguagechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 346, :column 7, :end-line 346, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onlanguagechange property of the `web.WorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the languagechange\n  occurs and bubbles through the `web.Worker`.\n\n  `self.onlanguagechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onlanguagechange`"}, :name web.WorkerGlobalScope/onlanguagechange, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onlanguagechange property of the `web.WorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the languagechange\n  occurs and bubbles through the `web.Worker`.\n\n  `self.onlanguagechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onlanguagechange`"}, navigator {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 266, :column 7, :end-line 266, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, :name web.WorkerGlobalScope/navigator, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, queue-microtask {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 131, :column 7, :end-line 131, :end-column 22, :arglists (quote ([this function])), :doc "Method.\n\n  The queueMicrotask() method of the `web.WindowOrWorkerGlobalScope`\n  queues a microtask.\n\n  `scope.queueMicrotask(function);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask`"}, :name web.WorkerGlobalScope/queue-microtask, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 22, :method-params ([this function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this function])), :doc "Method.\n\n  The queueMicrotask() method of the `web.WindowOrWorkerGlobalScope`\n  queues a microtask.\n\n  `scope.queueMicrotask(function);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask`"}, set-timeout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 157, :column 7, :end-line 157, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The setTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  (and successor to Window.setTimeout()) sets a timer which executes\n  function or specified piece of code once the timer expires.\n\n  `var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);\n  var timeoutID = scope.setTimeout(function[, delay]);\n  var timeoutID = scope.setTimeout(code[, delay]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WorkerGlobalScope/set-timeout, :variadic true, :file "src/web/WorkerGlobalScope.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  (and successor to Window.setTimeout()) sets a timer which executes\n  function or specified piece of code once the timer expires.\n\n  `var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);\n  var timeoutID = scope.setTimeout(function[, delay]);\n  var timeoutID = scope.setTimeout(code[, delay]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout`"}, origin {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 424, :column 7, :end-line 424, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, :name web.WorkerGlobalScope/origin, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 424, :end-line 424, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, set-is-secure-context! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 225, :column 7, :end-line 225, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, :name web.WorkerGlobalScope/set-is-secure-context!, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, onoffline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 372, :column 7, :end-line 372, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onoffline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the offline event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onoffline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline`"}, :name web.WorkerGlobalScope/onoffline, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 372, :end-line 372, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onoffline property of the `web.WorkerGlobalScope` interface\n  an `web.EventHandler` to be called when the offline event occurs\n  bubbles through the `web.Worker`.\n\n  `self.onoffline = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/onoffline`"}, indexed-db {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerGlobalScope.cljs", :line 199, :column 7, :end-line 199, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The indexedDB read-only property of the `web.WindowOrWorkerGlobalScope`\n  provides a mechanism for applications to asynchronously access\n  capabilities of indexed databases.\n\n  `var IDBFactory = self.indexedDB;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB`"}, :name web.WorkerGlobalScope/indexed-db, :variadic false, :file "src/web/WorkerGlobalScope.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The indexedDB read-only property of the `web.WindowOrWorkerGlobalScope`\n  provides a mechanism for applications to asynchronously access\n  capabilities of indexed databases.\n\n  `var IDBFactory = self.indexedDB;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WorkerGlobalScope interface of the Web Workers API is an\n  representing the scope of any worker. Workers have no browsing\n  this scope contains the information usually conveyed by `web.Window`\n  — in this case event handlers, the console or the associated\n  object. Each WorkerGlobalScope has its own event loop."}