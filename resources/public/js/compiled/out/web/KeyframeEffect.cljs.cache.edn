{:rename-macros {}, :renames {}, :externs {KeyframeEffect {}}, :use-macros {}, :excludes #{}, :name web.KeyframeEffect, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 188, :column 7, :end-line 188, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The target property of a `web.KeyframeEffect` interface represents\n  element or pseudo-element being animated. It may be null for\n  that do not target a specific element. It performs as both a\n  and a setter, except with animations and transitions generated\n  CSS.\n\n  `var targetElement = document.getElementById(\\\"elementToAnimate\\\");\n\n  var keyframes = new KeyframeEffect( targetElement, keyframeBlock, timingOptions );\n\n  // returns #elementToAnimate\n  keyframes.target;\n\n  // assigns keyframes a new target\n  keyframes.target = newTargetElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/target`"}, :name web.KeyframeEffect/target, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The target property of a `web.KeyframeEffect` interface represents\n  element or pseudo-element being animated. It may be null for\n  that do not target a specific element. It performs as both a\n  and a setter, except with animations and transitions generated\n  CSS.\n\n  `var targetElement = document.getElementById(\\\"elementToAnimate\\\");\n\n  var keyframes = new KeyframeEffect( targetElement, keyframeBlock, timingOptions );\n\n  // returns #elementToAnimate\n  keyframes.target;\n\n  // assigns keyframes a new target\n  keyframes.target = newTargetElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/target`"}, update-timing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 110, :column 7, :end-line 110, :end-column 20, :arglists (quote ([this timing])), :doc "Method.\n\n  The updateTiming() method of the `web.AnimationEffect` interface\n  the specified timing properties for an animation effect.\n\n  `animation.updateTiming(timing);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/updateTiming`"}, :name web.KeyframeEffect/update-timing, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 20, :method-params ([this timing]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this timing])), :doc "Method.\n\n  The updateTiming() method of the `web.AnimationEffect` interface\n  the specified timing properties for an animation effect.\n\n  `animation.updateTiming(timing);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/updateTiming`"}, set-keyframes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 72, :column 7, :end-line 72, :end-column 20, :arglists (quote ([this keyframes])), :doc "Method.\n\n  The setKeyframes() method of the `web.KeyframeEffect` interface\n  the keyframes that make up the affected KeyframeEffect with a\n  set of keyframes.\n\n  `existingKeyframeEffect.setKeyframes(keyframes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/setKeyframes`"}, :name web.KeyframeEffect/set-keyframes, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 20, :method-params ([this keyframes]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this keyframes])), :doc "Method.\n\n  The setKeyframes() method of the `web.KeyframeEffect` interface\n  the keyframes that make up the affected KeyframeEffect with a\n  set of keyframes.\n\n  `existingKeyframeEffect.setKeyframes(keyframes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/setKeyframes`"}, set-iteration-composite! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 171, :column 7, :end-line 171, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The iterationComposite property of a `web.KeyframeEffect` resolves\n  the the animation's property value changes accumulate or override\n  other upon each of the animation's iterations.\n\n  `// getting\n  var iterationCompositeEnumeration = keyframeEffect.iterationComposite;\n\n  // setting\n  keyframeEffect.iterationComposite = 'replace';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/iterationComposite`"}, :name web.KeyframeEffect/set-iteration-composite!, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The iterationComposite property of a `web.KeyframeEffect` resolves\n  the the animation's property value changes accumulate or override\n  other upon each of the animation's iterations.\n\n  `// getting\n  var iterationCompositeEnumeration = keyframeEffect.iterationComposite;\n\n  // setting\n  keyframeEffect.iterationComposite = 'replace';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/iterationComposite`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 211, :column 7, :end-line 211, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of a `web.KeyframeEffect` interface represents\n  element or pseudo-element being animated. It may be null for\n  that do not target a specific element. It performs as both a\n  and a setter, except with animations and transitions generated\n  CSS.\n\n  `var targetElement = document.getElementById(\\\"elementToAnimate\\\");\n\n  var keyframes = new KeyframeEffect( targetElement, keyframeBlock, timingOptions );\n\n  // returns #elementToAnimate\n  keyframes.target;\n\n  // assigns keyframes a new target\n  keyframes.target = newTargetElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/target`"}, :name web.KeyframeEffect/set-target!, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of a `web.KeyframeEffect` interface represents\n  element or pseudo-element being animated. It may be null for\n  that do not target a specific element. It performs as both a\n  and a setter, except with animations and transitions generated\n  CSS.\n\n  `var targetElement = document.getElementById(\\\"elementToAnimate\\\");\n\n  var keyframes = new KeyframeEffect( targetElement, keyframeBlock, timingOptions );\n\n  // returns #elementToAnimate\n  keyframes.target;\n\n  // assigns keyframes a new target\n  keyframes.target = newTargetElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/target`"}, get-computed-timing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 85, :column 7, :end-line 85, :end-column 26, :arglists (quote ([this])), :doc "Method.\n\n  The getComputedTiming() method of the `web.AnimationEffect` interface\n  the calculated timing properties for this animation effect.\n\n  `var currentTimeValues = animation.getComputedTiming();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getComputedTiming`"}, :name web.KeyframeEffect/get-computed-timing, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getComputedTiming() method of the `web.AnimationEffect` interface\n  the calculated timing properties for this animation effect.\n\n  `var currentTimeValues = animation.getComputedTiming();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getComputedTiming`"}, composite {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 122, :column 7, :end-line 122, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The composite property of a `web.KeyframeEffect` resolves how\n  element's animation impacts its underlying property values.\n\n  `// getting\n  var compositeEnumeration = keyframeEffect.composite;\n\n  // setting\n  keyframeEffect.composite = 'accumulate';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite`"}, :name web.KeyframeEffect/composite, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The composite property of a `web.KeyframeEffect` resolves how\n  element's animation impacts its underlying property values.\n\n  `// getting\n  var compositeEnumeration = keyframeEffect.composite;\n\n  // setting\n  keyframeEffect.composite = 'accumulate';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite`"}, get-keyframes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 59, :column 7, :end-line 59, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The getKeyframes() method of a `web.KeyframeEffect` returns an\n  of the computed keyframes that make up this animation along with\n  computed offsets.\n\n  `var keyframes = keyframeEffect.getKeyframes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/getKeyframes`"}, :name web.KeyframeEffect/get-keyframes, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getKeyframes() method of a `web.KeyframeEffect` returns an\n  of the computed keyframes that make up this animation along with\n  computed offsets.\n\n  `var keyframes = keyframeEffect.getKeyframes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/getKeyframes`"}, get-timing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The AnimationEffect.getTiming() method of the `web.AnimationEffect`\n  returns an `web.EffectTiming` object containing the timing properties\n  the Animation Effect.\n\n  `animationTiming = animation.getTiming();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getTiming`"}, :name web.KeyframeEffect/get-timing, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The AnimationEffect.getTiming() method of the `web.AnimationEffect`\n  returns an `web.EffectTiming` object containing the timing properties\n  the Animation Effect.\n\n  `animationTiming = animation.getTiming();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnimationEffect/getTiming`"}, set-composite! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 138, :column 7, :end-line 138, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The composite property of a `web.KeyframeEffect` resolves how\n  element's animation impacts its underlying property values.\n\n  `// getting\n  var compositeEnumeration = keyframeEffect.composite;\n\n  // setting\n  keyframeEffect.composite = 'accumulate';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite`"}, :name web.KeyframeEffect/set-composite!, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The composite property of a `web.KeyframeEffect` resolves how\n  element's animation impacts its underlying property values.\n\n  `// getting\n  var compositeEnumeration = keyframeEffect.composite;\n\n  // setting\n  keyframeEffect.composite = 'accumulate';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/composite`"}, constructor {:name web.KeyframeEffect/constructor, :file "src/web/KeyframeEffect.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The KeyframeEffect() constructor of the Web Animations API returns a new `web.KeyframeEffect` object instance, and also allows you to clone an existing keyframe effect object instance.\n\n  The first type of constructor (see above) creates a completely new `web.KeyframeEffect` object instance. Its parameters are:\n\n\n  element\n  The DOM element to be animated, or null.\n  keyframeSet\n  An keyframe object or null.\n  keyframeOptions Optional\n\n  Either an integer representing the animation's duration (in milliseconds), or an `web.Object` containing one or more of the following:\n\n  `web.delay` Optional\n  The number of milliseconds to delay the start of the animation. Defaults to 0.\n  `web.direction` Optional\n  Whether the animation runs forwards (normal), backwards (reverse), switches direction after each iteration (alternate), or runs backwards and switches direction after each iteration (alternate-reverse). Defaults to \\\"normal\\\".\n  `web.duration` Optional\n  The number of milliseconds each iteration of the animation takes to complete. Defaults to 0. Although this is technically optional, keep in mind that your animation will not run if this value is 0.\n  `web.easing` Optional\n  The rate of the animation's change over time. Accepts the pre-defined values \\\"linear\\\", \\\"ease\\\", \\\"ease-in\\\", \\\"ease-out\\\", and \\\"ease-in-out\\\", or a custom \\\"cubic-bezier\\\" value like \\\"cubic-bezier(0.42, 0, 0.58, 1)\\\". Defaults to \\\"linear\\\".\n  `web.endDelay` Optional\n  The number of milliseconds to delay after the end of an animation. This is primarily of use when sequencing animations based on the end time of another animation. Defaults to 0.\n  `web.fill` Optional\n  Dictates whether the animation's effects should be reflected by the element(s) prior to playing (\\\"backwards\\\"), retained after the animation has completed playing (\\\"forwards\\\"), or both. Defaults to \\\"none\\\".\n  `web.iterationStart` Optional\n  Describes at what point in the iteration the animation should start. 0.5 would indicate starting halfway through the first iteration for example, and with this value set, an animation with 2 iterations would end halfway through a third iteration. Defaults to 0.0.\n  `web.iterations` Optional\n  The number of times the animation should repeat. Defaults to 1, and can also take a value of `web.Infinity` to make it repeat for as long as the element exists.\n\n\n\n  `web.composite`\n  Determines how values are combined between this animation and the element's underlying values.\n  `web.iterationComposite`\n  Determines how values build from iteration to iteration in the current animation.\n\n\n\n\n  The second type of constructor (see above) creates a clone of an existing  `web.KeyframeEffect` object instance. Its parameter is as follows:\n\n\n  sourceKeyFrames\n  A `web.KeyframeEffect` object that you want to clone.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/KeyframeEffect`", :tag js}, iteration-composite {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/KeyframeEffect.cljs", :line 154, :column 7, :end-line 154, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The iterationComposite property of a `web.KeyframeEffect` resolves\n  the the animation's property value changes accumulate or override\n  other upon each of the animation's iterations.\n\n  `// getting\n  var iterationCompositeEnumeration = keyframeEffect.iterationComposite;\n\n  // setting\n  keyframeEffect.iterationComposite = 'replace';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/iterationComposite`"}, :name web.KeyframeEffect/iteration-composite, :variadic false, :file "src/web/KeyframeEffect.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The iterationComposite property of a `web.KeyframeEffect` resolves\n  the the animation's property value changes accumulate or override\n  other upon each of the animation's iterations.\n\n  `// getting\n  var iterationCompositeEnumeration = keyframeEffect.iterationComposite;\n\n  // setting\n  keyframeEffect.iterationComposite = 'replace';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect/iterationComposite`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The KeyframeEffect interface of the Web Animations API lets us\n  sets of animatable properties and values, called keyframes. These\n  then be played using the `web.Animation()` constructor."}