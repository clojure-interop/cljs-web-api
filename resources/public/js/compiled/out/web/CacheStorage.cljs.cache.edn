{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{keys}, :name web.CacheStorage, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {delete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CacheStorage.cljs", :line 5, :column 7, :end-line 5, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The delete() method of the `web.CacheStorage` interface finds\n  `web.Cache` object matching the cacheName, and if found, deletes\n  `web.Cache` object and returns a `web.Promise` that resolves\n  true. If no `web.Cache` object is found, it returns false.\n\n  `caches.delete(cacheName).then(function(boolean) {\n  // your cache is now deleted\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CacheStorage/delete, :variadic true, :file "src/web/CacheStorage.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The delete() method of the `web.CacheStorage` interface finds\n  `web.Cache` object matching the cacheName, and if found, deletes\n  `web.Cache` object and returns a `web.Promise` that resolves\n  true. If no `web.Cache` object is found, it returns false.\n\n  `caches.delete(cacheName).then(function(boolean) {\n  // your cache is now deleted\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/delete`"}, has {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CacheStorage.cljs", :line 21, :column 7, :end-line 21, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The has() method of the `web.CacheStorage` interface returns\n  `web.Promise` that resolves to true if a `web.Cache` object matches\n  cacheName.\n\n  `caches.has(cacheName).then(function(boolean) {\n  // true: your cache exists!\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/has`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CacheStorage/has, :variadic true, :file "src/web/CacheStorage.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The has() method of the `web.CacheStorage` interface returns\n  `web.Promise` that resolves to true if a `web.Cache` object matches\n  cacheName.\n\n  `caches.has(cacheName).then(function(boolean) {\n  // true: your cache exists!\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/has`"}, keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CacheStorage.cljs", :line 36, :column 7, :end-line 36, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The keys() method of the `web.CacheStorage` interface returns\n  `web.Promise` that will resolve with an array containing strings\n  to all of the named `web.Cache` objects tracked by the `web.CacheStorage`\n  in the order they were created. Use this method to iterate over\n  list of all `web.Cache` objects.\n\n  `caches.keys().then(function(keyList) {\n  //do something with your keyList\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/keys`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CacheStorage/keys, :variadic true, :file "src/web/CacheStorage.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The keys() method of the `web.CacheStorage` interface returns\n  `web.Promise` that will resolve with an array containing strings\n  to all of the named `web.Cache` objects tracked by the `web.CacheStorage`\n  in the order they were created. Use this method to iterate over\n  list of all `web.Cache` objects.\n\n  `caches.keys().then(function(keyList) {\n  //do something with your keyList\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/keys`"}, match {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CacheStorage.cljs", :line 53, :column 7, :end-line 53, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The match() method of the `web.CacheStorage` interface (available\n  as caches) checks if a given `web.Request` or url string is a\n  for a stored `web.Response`. This method returns a `web.Promise`\n  a `web.Response`, or undefined if no match is found.\n\n  `caches.match(request, options).then(function(response) {\n  // Do something with the response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/match`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CacheStorage/match, :variadic true, :file "src/web/CacheStorage.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The match() method of the `web.CacheStorage` interface (available\n  as caches) checks if a given `web.Request` or url string is a\n  for a stored `web.Response`. This method returns a `web.Promise`\n  a `web.Response`, or undefined if no match is found.\n\n  `caches.match(request, options).then(function(response) {\n  // Do something with the response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/match`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CacheStorage.cljs", :line 69, :column 7, :end-line 69, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The open() method of the `web.CacheStorage` interface returns\n  `web.Promise` that resolves to the `web.Cache` object matching\n  cacheName.\n\n  `// \\\"caches\\\" is a global read-only variable, which is an instance of CacheStorage,\n  // For more info, refer to: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches\n\n  caches.open(cacheName).then(function(cache) {\n  // Do something with your cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CacheStorage/open, :variadic true, :file "src/web/CacheStorage.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The open() method of the `web.CacheStorage` interface returns\n  `web.Promise` that resolves to the `web.Cache` object matching\n  cacheName.\n\n  `// \\\"caches\\\" is a global read-only variable, which is an instance of CacheStorage,\n  // For more info, refer to: https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches\n\n  caches.open(cacheName).then(function(cache) {\n  // Do something with your cache\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CacheStorage/open`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CacheStorage interface represents the storage for `web.Cache`"}