{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.StorageEstimate, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {quota {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageEstimate.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's quota property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. This value is an estimate to help prevent\n  use for fingerprinting—that is, identifying a device using an\n  of the values of seemingly innocuous properties.\n\n  `quota = StorageEstimate.quota;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota`"}, :name web.StorageEstimate/quota, :variadic false, :file "src/web/StorageEstimate.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's quota property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. This value is an estimate to help prevent\n  use for fingerprinting—that is, identifying a device using an\n  of the values of seemingly innocuous properties.\n\n  `quota = StorageEstimate.quota;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota`"}, set-quota! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageEstimate.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's quota property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. This value is an estimate to help prevent\n  use for fingerprinting—that is, identifying a device using an\n  of the values of seemingly innocuous properties.\n\n  `quota = StorageEstimate.quota;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota`"}, :name web.StorageEstimate/set-quota!, :variadic false, :file "src/web/StorageEstimate.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's quota property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. This value is an estimate to help prevent\n  use for fingerprinting—that is, identifying a device using an\n  of the values of seemingly innocuous properties.\n\n  `quota = StorageEstimate.quota;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/quota`"}, usage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageEstimate.cljs", :line 40, :column 7, :end-line 40, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's usage property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. The value is an estimate because the\n  agent may use compression, duplication prevention techniques,\n  other methods to improve storage efficiency.\n\n  `usage = StorageEstimate.usage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage`"}, :name web.StorageEstimate/usage, :variadic false, :file "src/web/StorageEstimate.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's usage property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. The value is an estimate because the\n  agent may use compression, duplication prevention techniques,\n  other methods to improve storage efficiency.\n\n  `usage = StorageEstimate.usage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage`"}, set-usage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/StorageEstimate.cljs", :line 56, :column 7, :end-line 56, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's usage property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. The value is an estimate because the\n  agent may use compression, duplication prevention techniques,\n  other methods to improve storage efficiency.\n\n  `usage = StorageEstimate.usage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage`"}, :name web.StorageEstimate/set-usage!, :variadic false, :file "src/web/StorageEstimate.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.StorageEstimate` dictionary's usage property is a conservative\n  of how much storage is allotted to the origin or Web app that\n  `web.StorageManager.estimate()`; there may be more space available,\n  there will not be less. The value is an estimate because the\n  agent may use compression, duplication prevention techniques,\n  other methods to improve storage efficiency.\n\n  `usage = StorageEstimate.usage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/StorageEstimate/usage`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The StorageEstimate dictionary is used by the `web.StorageManager`\n  provide estimates of the size of a site's or application's data\n  and how much of it is in use. The `web.estimate()` method returns\n  object that conforms to this dictionary when its `web.Promise`"}