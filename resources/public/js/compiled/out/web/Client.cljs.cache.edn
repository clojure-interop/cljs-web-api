{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name web.Client, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {post-message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The postMessage() method of `web.Client` allows a service worker\n  send a message to a client (a `web.Window`, `web.Worker`, or\n  The message is received in the \\\"message\\\" event on `web.navigator.serviceWorker`.\n\n  `Client.postMessage(message[, transfer]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Client/post-message, :variadic true, :file "src/web/Client.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The postMessage() method of `web.Client` allows a service worker\n  send a message to a client (a `web.Window`, `web.Worker`, or\n  The message is received in the \\\"message\\\" event on `web.navigator.serviceWorker`.\n\n  `Client.postMessage(message[, transfer]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage`"}, frame-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The frameType read-only property of the `web.Client` interface\n  the type of browsing context of the current `web.Client`. This\n  can be one of auxiliary, top-level, nested, or none.\n\n  `var myFrameType = Client.frameType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType`"}, :name web.Client/frame-type, :variadic false, :file "src/web/Client.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The frameType read-only property of the `web.Client` interface\n  the type of browsing context of the current `web.Client`. This\n  can be one of auxiliary, top-level, nested, or none.\n\n  `var myFrameType = Client.frameType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType`"}, set-frame-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 34, :column 7, :end-line 34, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The frameType read-only property of the `web.Client` interface\n  the type of browsing context of the current `web.Client`. This\n  can be one of auxiliary, top-level, nested, or none.\n\n  `var myFrameType = Client.frameType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType`"}, :name web.Client/set-frame-type!, :variadic false, :file "src/web/Client.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The frameType read-only property of the `web.Client` interface\n  the type of browsing context of the current `web.Client`. This\n  can be one of auxiliary, top-level, nested, or none.\n\n  `var myFrameType = Client.frameType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/frameType`"}, id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 47, :column 7, :end-line 47, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The id read-only property of the `web.Client` interface returns\n  universally unique identifier of the `web.Client` object.\n\n  `var clientId = Client.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/id`"}, :name web.Client/id, :variadic false, :file "src/web/Client.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The id read-only property of the `web.Client` interface returns\n  universally unique identifier of the `web.Client` object.\n\n  `var clientId = Client.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/id`"}, set-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 59, :column 7, :end-line 59, :end-column 14, :arglists (quote ([this val])), :doc "Property.\n\n  The id read-only property of the `web.Client` interface returns\n  universally unique identifier of the `web.Client` object.\n\n  `var clientId = Client.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/id`"}, :name web.Client/set-id!, :variadic false, :file "src/web/Client.cljs", :end-column 14, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The id read-only property of the `web.Client` interface returns\n  universally unique identifier of the `web.Client` object.\n\n  `var clientId = Client.id;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/id`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 71, :column 7, :end-line 71, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Client` interface indicates\n  type of client the service worker is controlling.\n\n  `var myClientType = Client.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/type`"}, :name web.Client/type, :variadic false, :file "src/web/Client.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Client` interface indicates\n  type of client the service worker is controlling.\n\n  `var myClientType = Client.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/type`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 83, :column 7, :end-line 83, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Client` interface indicates\n  type of client the service worker is controlling.\n\n  `var myClientType = Client.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/type`"}, :name web.Client/set-type!, :variadic false, :file "src/web/Client.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Client` interface indicates\n  type of client the service worker is controlling.\n\n  `var myClientType = Client.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/type`"}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 95, :column 7, :end-line 95, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Client` interface returns\n  URL of the current service worker client.\n\n  `var clientUrl = Client.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/url`"}, :name web.Client/url, :variadic false, :file "src/web/Client.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Client` interface returns\n  URL of the current service worker client.\n\n  `var clientUrl = Client.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/url`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Client.cljs", :line 107, :column 7, :end-line 107, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Client` interface returns\n  URL of the current service worker client.\n\n  `var clientUrl = Client.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/url`"}, :name web.Client/set-url!, :variadic false, :file "src/web/Client.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Client` interface returns\n  URL of the current service worker client.\n\n  `var clientUrl = Client.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Client/url`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Client interface represents an executable context such as\n  `web.Worker`, or a `web.SharedWorker`. `web.Window` clients are\n  by the more-specific `web.WindowClient`. You can get Client/WindowClient\n  from methods such as `web.Clients.matchAll()` and `web.Clients.get()`."}