{:rename-macros {}, :renames {}, :externs {Touch {}}, :use-macros {}, :excludes #{force}, :name web.Touch, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 224, :column 7, :end-line 224, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  Returns the `web.Element` (`web.EventTarget`) on which the touch\n  started when it was first placed on the surface, even if the\n  point has since moved outside the interactive area of that element\n  even been removed from the document. Note that if the target\n  is removed from the document, events will still be targeted at\n  and hence won't necessarily bubble up to the window or document\n  If there is any risk of an element being removed while it is\n  touched, the best practice is to attach the touch listeners directly\n  the target.\n\n  `var el = touchPoint.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/target`"}, :name web.Touch/target, :variadic false, :file "src/web/Touch.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the `web.Element` (`web.EventTarget`) on which the touch\n  started when it was first placed on the surface, even if the\n  point has since moved outside the interactive area of that element\n  even been removed from the document. Note that if the target\n  is removed from the document, events will still be targeted at\n  and hence won't necessarily bubble up to the window or document\n  If there is any risk of an element being removed while it is\n  touched, the best practice is to attach the touch listeners directly\n  the target.\n\n  `var el = touchPoint.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/target`"}, set-radius-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 103, :column 7, :end-line 103, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the X radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var xRadius = touchItem.radiusX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX`"}, :name web.Touch/set-radius-x!, :variadic false, :file "src/web/Touch.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the X radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var xRadius = touchItem.radiusX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX`"}, screen-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 200, :column 7, :end-line 200, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Y coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var y = touchItem.screenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY`"}, :name web.Touch/screen-y, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Y coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var y = touchItem.screenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 243, :column 7, :end-line 243, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the `web.Element` (`web.EventTarget`) on which the touch\n  started when it was first placed on the surface, even if the\n  point has since moved outside the interactive area of that element\n  even been removed from the document. Note that if the target\n  is removed from the document, events will still be targeted at\n  and hence won't necessarily bubble up to the window or document\n  If there is any risk of an element being removed while it is\n  touched, the best practice is to attach the touch listeners directly\n  the target.\n\n  `var el = touchPoint.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/target`"}, :name web.Touch/set-target!, :variadic false, :file "src/web/Touch.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the `web.Element` (`web.EventTarget`) on which the touch\n  started when it was first placed on the surface, even if the\n  point has since moved outside the interactive area of that element\n  even been removed from the document. Note that if the target\n  is removed from the document, events will still be targeted at\n  and hence won't necessarily bubble up to the window or document\n  If there is any risk of an element being removed while it is\n  touched, the best practice is to attach the touch listeners directly\n  the target.\n\n  `var el = touchPoint.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/target`"}, client-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 27, :column 7, :end-line 27, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.clientY read-only property returns the Y coordinate\n  the touch point relative to the browser's viewport, not including\n  scroll offset.\n\n  `touchItem.clientY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY`"}, :name web.Touch/client-y, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.clientY read-only property returns the Y coordinate\n  the touch point relative to the browser's viewport, not including\n  scroll offset.\n\n  `touchItem.clientY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientY`"}, set-screen-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 212, :column 7, :end-line 212, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the Y coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var y = touchItem.screenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY`"}, :name web.Touch/set-screen-y!, :variadic false, :file "src/web/Touch.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the Y coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var y = touchItem.screenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenY`"}, client-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 15, :column 7, :end-line 15, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.clientX read-only property returns the X coordinate\n  the touch point relative to the viewport, not including any scroll\n\n  `touchItem.clientX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX`"}, :name web.Touch/client-x, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.clientX read-only property returns the X coordinate\n  the touch point relative to the viewport, not including any scroll\n\n  `touchItem.clientX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/clientX`"}, set-screen-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 188, :column 7, :end-line 188, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the X coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var x = touchItem.screenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX`"}, :name web.Touch/set-screen-x!, :variadic false, :file "src/web/Touch.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the X coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var x = touchItem.screenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX`"}, force {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 40, :column 7, :end-line 40, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.force read-only property returns the amount of pressure\n  user is applying to the touch surface for a `web.Touch` point.\n\n  `touchItem.force;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/force`"}, :name web.Touch/force, :variadic false, :file "src/web/Touch.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.force read-only property returns the amount of pressure\n  user is applying to the touch surface for a `web.Touch` point.\n\n  `touchItem.force;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/force`"}, page-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 66, :column 7, :end-line 66, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.pageX read-only property returns the X coordinate of\n  touch point relative to the viewport, including any scroll offset.\n\n  `touchItem.pageX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageX`"}, :name web.Touch/page-x, :variadic false, :file "src/web/Touch.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.pageX read-only property returns the X coordinate of\n  touch point relative to the viewport, including any scroll offset.\n\n  `touchItem.pageX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageX`"}, rotation-angle {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 142, :column 7, :end-line 142, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  Returns the rotation angle, in degrees, of the contact area ellipse\n  by `web.Touch.radiusX` and `web.Touch.radiusY`. The value may\n  between 0 and 90. Together, these three values describe an ellipse\n  approximates the size and shape of the area of contact between\n  user and the screen. This may be a relatively large ellipse representing\n  contact between a fingertip and the screen or a small area representing\n  tip of a stylus, for example.\n\n  `var angle = touchItem.rotationAngle;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle`"}, :name web.Touch/rotation-angle, :variadic false, :file "src/web/Touch.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the rotation angle, in degrees, of the contact area ellipse\n  by `web.Touch.radiusX` and `web.Touch.radiusY`. The value may\n  between 0 and 90. Together, these three values describe an ellipse\n  approximates the size and shape of the area of contact between\n  user and the screen. This may be a relatively large ellipse representing\n  contact between a fingertip and the screen or a small area representing\n  tip of a stylus, for example.\n\n  `var angle = touchItem.rotationAngle;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle`"}, radius-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 116, :column 7, :end-line 116, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Y radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var yRadius = touchItem.radiusY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY`"}, :name web.Touch/radius-y, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Y radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var yRadius = touchItem.radiusY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY`"}, set-rotation-angle! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 159, :column 7, :end-line 159, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the rotation angle, in degrees, of the contact area ellipse\n  by `web.Touch.radiusX` and `web.Touch.radiusY`. The value may\n  between 0 and 90. Together, these three values describe an ellipse\n  approximates the size and shape of the area of contact between\n  user and the screen. This may be a relatively large ellipse representing\n  contact between a fingertip and the screen or a small area representing\n  tip of a stylus, for example.\n\n  `var angle = touchItem.rotationAngle;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle`"}, :name web.Touch/set-rotation-angle!, :variadic false, :file "src/web/Touch.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the rotation angle, in degrees, of the contact area ellipse\n  by `web.Touch.radiusX` and `web.Touch.radiusY`. The value may\n  between 0 and 90. Together, these three values describe an ellipse\n  approximates the size and shape of the area of contact between\n  user and the screen. This may be a relatively large ellipse representing\n  contact between a fingertip and the screen or a small area representing\n  tip of a stylus, for example.\n\n  `var angle = touchItem.rotationAngle;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle`"}, page-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.pageY read-only property returns the Y coordinate of\n  touch point relative to the viewport, including any scroll offset.\n\n  `touchItem.pageY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageY`"}, :name web.Touch/page-y, :variadic false, :file "src/web/Touch.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.pageY read-only property returns the Y coordinate of\n  touch point relative to the viewport, including any scroll offset.\n\n  `touchItem.pageY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/pageY`"}, radius-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 90, :column 7, :end-line 90, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns the X radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var xRadius = touchItem.radiusX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX`"}, :name web.Touch/radius-x, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the X radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var xRadius = touchItem.radiusX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusX`"}, screen-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 176, :column 7, :end-line 176, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns the X coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var x = touchItem.screenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX`"}, :name web.Touch/screen-x, :variadic false, :file "src/web/Touch.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the X coordinate of the touch point relative to the screen,\n  including any scroll offset.\n\n  `var x = touchItem.screenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/screenX`"}, constructor {:name web.Touch/constructor, :file "src/web/Touch.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The Touch() constructor creates a new `web.Touch` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/Touch`", :tag js}, identifier {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.identifier returns a value uniquely identifying this\n  of contact with the touch surface. This value remains consistent\n  every event involving this finger's (or stylus's) movement on\n  surface until it is lifted off the surface.\n\n  `touchItem.identifier;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier`"}, :name web.Touch/identifier, :variadic false, :file "src/web/Touch.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Touch.identifier returns a value uniquely identifying this\n  of contact with the touch surface. This value remains consistent\n  every event involving this finger's (or stylus's) movement on\n  surface until it is lifted off the surface.\n\n  `touchItem.identifier;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/identifier`"}, set-radius-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Touch.cljs", :line 129, :column 7, :end-line 129, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the Y radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var yRadius = touchItem.radiusY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY`"}, :name web.Touch/set-radius-y!, :variadic false, :file "src/web/Touch.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the Y radius of the ellipse that most closely circumscribes\n  area of contact with the touch surface. The value is in CSS pixels\n  the same scale as `web.Touch.screenX`.\n\n  `var yRadius = touchItem.radiusY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Touch/radiusY`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Touch interface represents a single contact point on a touch-sensitive\n  The contact point is commonly a finger or stylus and the device\n  be a touchscreen or trackpad."}