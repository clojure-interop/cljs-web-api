{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove}, :name web.SourceBuffer, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {change-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 57, :column 7, :end-line 57, :end-column 18, :arglists (quote ([this type])), :doc "Method.\n\n  The `web.SourceBuffer` method changeType() sets the MIME type\n  future calls to `web.appendBuffer()` should expect the new media\n  to conform to.\n\n  `sourceBuffer.changeType(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/changeType`"}, :name web.SourceBuffer/change-type, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 18, :method-params ([this type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this type])), :doc "Method.\n\n  The `web.SourceBuffer` method changeType() sets the MIME type\n  future calls to `web.appendBuffer()` should expect the new media\n  to conform to.\n\n  `sourceBuffer.changeType(type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/changeType`"}, set-audio-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 178, :column 7, :end-line 178, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The audioTracks read-only property of the `web.SourceBuffer`\n  returns a list of the audio tracks currently contained inside\n  SourceBuffer.\n\n  `var myAudioTracks = sourceBuffer.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks`"}, :name web.SourceBuffer/set-audio-tracks!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The audioTracks read-only property of the `web.SourceBuffer`\n  returns a list of the audio tracks currently contained inside\n  SourceBuffer.\n\n  `var myAudioTracks = sourceBuffer.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks`"}, text-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 247, :column 7, :end-line 247, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The textTracks read-only property of the `web.SourceBuffer` interface\n  a list of the text tracks currently contained inside the SourceBuffer.\n\n  `var myTextTracks = sourceBuffer.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks`"}, :name web.SourceBuffer/text-tracks, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The textTracks read-only property of the `web.SourceBuffer` interface\n  a list of the text tracks currently contained inside the SourceBuffer.\n\n  `var myTextTracks = sourceBuffer.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks`"}, set-updating! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 347, :column 7, :end-line 347, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The updating read-only property of the `web.SourceBuffer` interface\n  whether the SourceBuffer is currently being updated — i.e. whether\n  `web.SourceBuffer.appendBuffer()`, `web.SourceBuffer.appendStream()`,\n  `web.SourceBuffer.remove()` operation is currently in progress.\n\n  `var isUpdating = sourceBuffer.updating;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating`"}, :name web.SourceBuffer/set-updating!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 347, :end-line 347, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The updating read-only property of the `web.SourceBuffer` interface\n  whether the SourceBuffer is currently being updated — i.e. whether\n  `web.SourceBuffer.appendBuffer()`, `web.SourceBuffer.appendStream()`,\n  `web.SourceBuffer.remove()` operation is currently in progress.\n\n  `var isUpdating = sourceBuffer.updating;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating`"}, set-append-window-end! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 114, :column 7, :end-line 114, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The appendWindowEnd property of the `web.SourceBuffer` interface\n  the timestamp for the end of the append window, a timestamp range\n  can be used to filter what media data is appended to the SourceBuffer.\n  media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowEnd = sourceBuffer.appendWindowEnd;\n\n  sourceBuffer.appendWindowEnd = 120.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd`"}, :name web.SourceBuffer/set-append-window-end!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The appendWindowEnd property of the `web.SourceBuffer` interface\n  the timestamp for the end of the append window, a timestamp range\n  can be used to filter what media data is appended to the SourceBuffer.\n  media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowEnd = sourceBuffer.appendWindowEnd;\n\n  sourceBuffer.appendWindowEnd = 120.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 70, :column 7, :end-line 70, :end-column 13, :arglists (quote ([this start end])), :doc "Method.\n\n  The remove() method of the `web.SourceBuffer` interface removes\n  segments within a specific time range from the SourceBuffer.\n  method can only be called when `web.SourceBuffer.updating` equals\n  If SourceBuffer.updating is not equal to false, call `web.SourceBuffer.abort()`.\n\n  `sourceBuffer.remove(start, end);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove`"}, :name web.SourceBuffer/remove, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 13, :method-params ([this start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this start end])), :doc "Method.\n\n  The remove() method of the `web.SourceBuffer` interface removes\n  segments within a specific time range from the SourceBuffer.\n  method can only be called when `web.SourceBuffer.updating` equals\n  If SourceBuffer.updating is not equal to false, call `web.SourceBuffer.abort()`.\n\n  `sourceBuffer.remove(start, end);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/remove`"}, buffered {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 191, :column 7, :end-line 191, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The buffered read-only property of the `web.SourceBuffer` interface\n  the time ranges that are currently buffered in the SourceBuffer\n  a normalized `web.TimeRanges` object.\n\n  `var myBufferedRange = sourceBuffer.buffered;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered`"}, :name web.SourceBuffer/buffered, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The buffered read-only property of the `web.SourceBuffer` interface\n  the time ranges that are currently buffered in the SourceBuffer\n  a normalized `web.TimeRanges` object.\n\n  `var myBufferedRange = sourceBuffer.buffered;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered`"}, set-track-defaults! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 317, :column 7, :end-line 317, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The trackDefaults property of the `web.SourceBuffer` interface\n  the default values to use if kind, label, and/or language information\n  not available in the initialization segment of the media to be\n  to the SourceBuffer.\n\n  `var myTrackDefaults = sourceBuffer.trackDefaults;\n\n  sourceBuffer.trackDefaults = myTrackDefaultList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/trackDefaults`"}, :name web.SourceBuffer/set-track-defaults!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The trackDefaults property of the `web.SourceBuffer` interface\n  the default values to use if kind, label, and/or language information\n  not available in the initialization segment of the media to be\n  to the SourceBuffer.\n\n  `var myTrackDefaults = sourceBuffer.trackDefaults;\n\n  sourceBuffer.trackDefaults = myTrackDefaultList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/trackDefaults`"}, set-append-window-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 148, :column 7, :end-line 148, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The appendWindowStart property of the `web.SourceBuffer` interface\n  the timestamp for the start of the append window, a timestamp\n  that can be used to filter what media data is appended to the\n  Coded media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowStart = sourceBuffer.appendWindowStart;\n\n  sourceBuffer.appendWindowStart = 2.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart`"}, :name web.SourceBuffer/set-append-window-start!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The appendWindowStart property of the `web.SourceBuffer` interface\n  the timestamp for the start of the append window, a timestamp\n  that can be used to filter what media data is appended to the\n  Coded media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowStart = sourceBuffer.appendWindowStart;\n\n  sourceBuffer.appendWindowStart = 2.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart`"}, audio-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 165, :column 7, :end-line 165, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The audioTracks read-only property of the `web.SourceBuffer`\n  returns a list of the audio tracks currently contained inside\n  SourceBuffer.\n\n  `var myAudioTracks = sourceBuffer.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks`"}, :name web.SourceBuffer/audio-tracks, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The audioTracks read-only property of the `web.SourceBuffer`\n  returns a list of the audio tracks currently contained inside\n  SourceBuffer.\n\n  `var myAudioTracks = sourceBuffer.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/audioTracks`"}, track-defaults {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 301, :column 7, :end-line 301, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The trackDefaults property of the `web.SourceBuffer` interface\n  the default values to use if kind, label, and/or language information\n  not available in the initialization segment of the media to be\n  to the SourceBuffer.\n\n  `var myTrackDefaults = sourceBuffer.trackDefaults;\n\n  sourceBuffer.trackDefaults = myTrackDefaultList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/trackDefaults`"}, :name web.SourceBuffer/track-defaults, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 301, :end-line 301, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The trackDefaults property of the `web.SourceBuffer` interface\n  the default values to use if kind, label, and/or language information\n  not available in the initialization segment of the media to be\n  to the SourceBuffer.\n\n  `var myTrackDefaults = sourceBuffer.trackDefaults;\n\n  sourceBuffer.trackDefaults = myTrackDefaultList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/trackDefaults`"}, append-window-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 131, :column 7, :end-line 131, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The appendWindowStart property of the `web.SourceBuffer` interface\n  the timestamp for the start of the append window, a timestamp\n  that can be used to filter what media data is appended to the\n  Coded media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowStart = sourceBuffer.appendWindowStart;\n\n  sourceBuffer.appendWindowStart = 2.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart`"}, :name web.SourceBuffer/append-window-start, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The appendWindowStart property of the `web.SourceBuffer` interface\n  the timestamp for the start of the append window, a timestamp\n  that can be used to filter what media data is appended to the\n  Coded media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowStart = sourceBuffer.appendWindowStart;\n\n  sourceBuffer.appendWindowStart = 2.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowStart`"}, video-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 361, :column 7, :end-line 361, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The videoTracks read-only property of the `web.SourceBuffer`\n  returns a list of the video tracks currently contained inside\n  SourceBuffer.\n\n  `var myVideoTracks = sourceBuffer.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks`"}, :name web.SourceBuffer/video-tracks, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 361, :end-line 361, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The videoTracks read-only property of the `web.SourceBuffer`\n  returns a list of the video tracks currently contained inside\n  SourceBuffer.\n\n  `var myVideoTracks = sourceBuffer.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks`"}, mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 217, :column 7, :end-line 217, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The mode property of the `web.SourceBuffer` interface controls\n  media segments can be appended to the SourceBuffer in any order,\n  in a strict sequence.\n\n  `var myMode = sourceBuffer.mode;\n\n  sourceBuffer.mode = 'sequence';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode`"}, :name web.SourceBuffer/mode, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The mode property of the `web.SourceBuffer` interface controls\n  media segments can be appended to the SourceBuffer in any order,\n  in a strict sequence.\n\n  `var myMode = sourceBuffer.mode;\n\n  sourceBuffer.mode = 'sequence';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode`"}, append-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([this stream max-size])), :doc "Method.\n\n  The appendStream() method of the `web.SourceBuffer` interface\n  media segment data from a ReadableStream object to the SourceBuffer.\n\n  `sourceBuffer.appendStream(stream, maxSize);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendStream`"}, :name web.SourceBuffer/append-stream, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 20, :method-params ([this stream max-size]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this stream max-size])), :doc "Method.\n\n  The appendStream() method of the `web.SourceBuffer` interface\n  media segment data from a ReadableStream object to the SourceBuffer.\n\n  `sourceBuffer.appendStream(stream, maxSize);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendStream`"}, append-window-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 97, :column 7, :end-line 97, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The appendWindowEnd property of the `web.SourceBuffer` interface\n  the timestamp for the end of the append window, a timestamp range\n  can be used to filter what media data is appended to the SourceBuffer.\n  media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowEnd = sourceBuffer.appendWindowEnd;\n\n  sourceBuffer.appendWindowEnd = 120.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd`"}, :name web.SourceBuffer/append-window-end, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The appendWindowEnd property of the `web.SourceBuffer` interface\n  the timestamp for the end of the append window, a timestamp range\n  can be used to filter what media data is appended to the SourceBuffer.\n  media frames with timestamps wthin this range will be appended,\n  those outside the range will be filtered out.\n\n  `var myAppendWindowEnd = sourceBuffer.appendWindowEnd;\n\n  sourceBuffer.appendWindowEnd = 120.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendWindowEnd`"}, abort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `web.SourceBuffer` interface aborts\n  current segment and resets the segment parser.\n\n  `sourceBuffer.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort`"}, :name web.SourceBuffer/abort, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `web.SourceBuffer` interface aborts\n  current segment and resets the segment parser.\n\n  `sourceBuffer.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/abort`"}, append-buffer-async {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 32, :column 7, :end-line 32, :end-column 26, :arglists (quote ([this source])), :doc "Method.\n\n  The `web.SourceBuffer` method appendBufferAsync() begins the\n  of asynchronously appending media segment data from an `web.ArrayBuffer`\n  `web.ArrayBufferView` object to the SourceBuffer.\n\n  `appendPromise = sourceBuffer.appendBufferAsync(source);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBufferAsync`"}, :name web.SourceBuffer/append-buffer-async, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 26, :method-params ([this source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this source])), :doc "Method.\n\n  The `web.SourceBuffer` method appendBufferAsync() begins the\n  of asynchronously appending media segment data from an `web.ArrayBuffer`\n  `web.ArrayBufferView` object to the SourceBuffer.\n\n  `appendPromise = sourceBuffer.appendBufferAsync(source);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBufferAsync`"}, set-text-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 259, :column 7, :end-line 259, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The textTracks read-only property of the `web.SourceBuffer` interface\n  a list of the text tracks currently contained inside the SourceBuffer.\n\n  `var myTextTracks = sourceBuffer.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks`"}, :name web.SourceBuffer/set-text-tracks!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The textTracks read-only property of the `web.SourceBuffer` interface\n  a list of the text tracks currently contained inside the SourceBuffer.\n\n  `var myTextTracks = sourceBuffer.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/textTracks`"}, set-video-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 374, :column 7, :end-line 374, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The videoTracks read-only property of the `web.SourceBuffer`\n  returns a list of the video tracks currently contained inside\n  SourceBuffer.\n\n  `var myVideoTracks = sourceBuffer.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks`"}, :name web.SourceBuffer/set-video-tracks!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The videoTracks read-only property of the `web.SourceBuffer`\n  returns a list of the video tracks currently contained inside\n  SourceBuffer.\n\n  `var myVideoTracks = sourceBuffer.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/videoTracks`"}, set-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 232, :column 7, :end-line 232, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The mode property of the `web.SourceBuffer` interface controls\n  media segments can be appended to the SourceBuffer in any order,\n  in a strict sequence.\n\n  `var myMode = sourceBuffer.mode;\n\n  sourceBuffer.mode = 'sequence';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode`"}, :name web.SourceBuffer/set-mode!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The mode property of the `web.SourceBuffer` interface controls\n  media segments can be appended to the SourceBuffer in any order,\n  in a strict sequence.\n\n  `var myMode = sourceBuffer.mode;\n\n  sourceBuffer.mode = 'sequence';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/mode`"}, timestamp-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 271, :column 7, :end-line 271, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The timestampOffset property of the `web.SourceBuffer` interface\n  the offset applied to timestamps inside media segments that are\n  to the SourceBuffer.\n\n  `var myOffset = sourceBuffer.timestampOffset;\n\n  sourceBuffer.timestampOffset = 2.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset`"}, :name web.SourceBuffer/timestamp-offset, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 271, :end-line 271, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timestampOffset property of the `web.SourceBuffer` interface\n  the offset applied to timestamps inside media segments that are\n  to the SourceBuffer.\n\n  `var myOffset = sourceBuffer.timestampOffset;\n\n  sourceBuffer.timestampOffset = 2.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset`"}, set-timestamp-offset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 286, :column 7, :end-line 286, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The timestampOffset property of the `web.SourceBuffer` interface\n  the offset applied to timestamps inside media segments that are\n  to the SourceBuffer.\n\n  `var myOffset = sourceBuffer.timestampOffset;\n\n  sourceBuffer.timestampOffset = 2.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset`"}, :name web.SourceBuffer/set-timestamp-offset!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timestampOffset property of the `web.SourceBuffer` interface\n  the offset applied to timestamps inside media segments that are\n  to the SourceBuffer.\n\n  `var myOffset = sourceBuffer.timestampOffset;\n\n  sourceBuffer.timestampOffset = 2.5;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/timestampOffset`"}, remove-async {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 84, :column 7, :end-line 84, :end-column 19, :arglists (quote ([this start end])), :doc "Method.\n\n  The removeAsync() method of the `web.SourceBuffer` interface\n  the process of asynchronously removing from the SourceBuffer\n  segments found within a specific time range.\n\n  `removePromise = sourceBuffer.removeAsync(start, end);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/removeAsync`"}, :name web.SourceBuffer/remove-async, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 19, :method-params ([this start end]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this start end])), :doc "Method.\n\n  The removeAsync() method of the `web.SourceBuffer` interface\n  the process of asynchronously removing from the SourceBuffer\n  segments found within a specific time range.\n\n  `removePromise = sourceBuffer.removeAsync(start, end);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/removeAsync`"}, updating {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 333, :column 7, :end-line 333, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The updating read-only property of the `web.SourceBuffer` interface\n  whether the SourceBuffer is currently being updated — i.e. whether\n  `web.SourceBuffer.appendBuffer()`, `web.SourceBuffer.appendStream()`,\n  `web.SourceBuffer.remove()` operation is currently in progress.\n\n  `var isUpdating = sourceBuffer.updating;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating`"}, :name web.SourceBuffer/updating, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 333, :end-line 333, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The updating read-only property of the `web.SourceBuffer` interface\n  whether the SourceBuffer is currently being updated — i.e. whether\n  `web.SourceBuffer.appendBuffer()`, `web.SourceBuffer.appendStream()`,\n  `web.SourceBuffer.remove()` operation is currently in progress.\n\n  `var isUpdating = sourceBuffer.updating;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/updating`"}, append-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([this source])), :doc "Method.\n\n  The appendBuffer() method of the `web.SourceBuffer` interface\n  media segment data from an `web.ArrayBuffer` or ArrayBufferView\n  to the SourceBuffer.\n\n  `sourceBuffer.appendBuffer(source);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer`"}, :name web.SourceBuffer/append-buffer, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 20, :method-params ([this source]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this source])), :doc "Method.\n\n  The appendBuffer() method of the `web.SourceBuffer` interface\n  media segment data from an `web.ArrayBuffer` or ArrayBufferView\n  to the SourceBuffer.\n\n  `sourceBuffer.appendBuffer(source);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/appendBuffer`"}, set-buffered! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SourceBuffer.cljs", :line 204, :column 7, :end-line 204, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The buffered read-only property of the `web.SourceBuffer` interface\n  the time ranges that are currently buffered in the SourceBuffer\n  a normalized `web.TimeRanges` object.\n\n  `var myBufferedRange = sourceBuffer.buffered;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered`"}, :name web.SourceBuffer/set-buffered!, :variadic false, :file "src/web/SourceBuffer.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The buffered read-only property of the `web.SourceBuffer` interface\n  the time ranges that are currently buffered in the SourceBuffer\n  a normalized `web.TimeRanges` object.\n\n  `var myBufferedRange = sourceBuffer.buffered;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SourceBuffer/buffered`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The SourceBuffer interface represents a chunk of media to be\n  into an `html.HTMLMediaElement` and played, via a `media.MediaSource`\n  This can be made up of one or several media segments."}