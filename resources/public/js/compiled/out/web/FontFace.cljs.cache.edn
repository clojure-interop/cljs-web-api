{:rename-macros {}, :renames {}, :externs {FontFace {}}, :use-macros {}, :excludes #{load}, :name web.FontFace, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {stretch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 188, :column 7, :end-line 188, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The stretch property of the `web.FontFace` interface retrieves\n  sets how the font stretches. It is equivalent to the `web.font-stretch`\n\n  `var stretchDescriptor = FontFace.stretch;\n  FontFace.stretch = stretchDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/stretch`"}, :name web.FontFace/stretch, :variadic false, :file "src/web/FontFace.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The stretch property of the `web.FontFace` interface retrieves\n  sets how the font stretches. It is equivalent to the `web.font-stretch`\n\n  `var stretchDescriptor = FontFace.stretch;\n  FontFace.stretch = stretchDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/stretch`"}, set-style! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 227, :column 7, :end-line 227, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The style property of the `web.FontFace` interface retrieves\n  sets the font's style. It is equivalent to the `web.font-style`\n\n  `var style = FontFace.style;\n  FontFace.style = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/style`"}, :name web.FontFace/set-style!, :variadic false, :file "src/web/FontFace.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The style property of the `web.FontFace` interface retrieves\n  sets the font's style. It is equivalent to the `web.font-style`\n\n  `var style = FontFace.style;\n  FontFace.style = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/style`"}, set-loaded! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 148, :column 7, :end-line 148, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The loaded read-only property of the `web.FontFace` interface\n  a `web.Promise` that resolves with the current FontFace object\n  the font specified in the object's constructor is done loading\n  rejects with a SyntaxError.\n\n  `var aPromise = FontFace.loaded;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/loaded`"}, :name web.FontFace/set-loaded!, :variadic false, :file "src/web/FontFace.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The loaded read-only property of the `web.FontFace` interface\n  a `web.Promise` that resolves with the current FontFace object\n  the font specified in the object's constructor is done loading\n  rejects with a SyntaxError.\n\n  `var aPromise = FontFace.loaded;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/loaded`"}, load {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 36, :column 7, :end-line 36, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The load() method of the `web.FontFace` interface loads a font\n  on current object's constructor-passed requirements, including\n  location or source buffer, and returns a `web.Promise` that resolves\n  the current FontFace object.\n\n  `var promise = FontFace.load();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/load`"}, :name web.FontFace/load, :variadic false, :file "src/web/FontFace.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The load() method of the `web.FontFace` interface loads a font\n  on current object's constructor-passed requirements, including\n  location or source buffer, and returns a `web.Promise` that resolves\n  the current FontFace object.\n\n  `var promise = FontFace.load();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/load`"}, set-display! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The display property of the `web.FontFace` interface determines\n  a font face is displayed based on whether and when it is downloaded\n  ready to use. This property is equivalent to the CSS font-display\n\n  `var display = FontFace.display\n  FontFace.display = display`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/display`"}, :name web.FontFace/set-display!, :variadic false, :file "src/web/FontFace.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The display property of the `web.FontFace` interface determines\n  a font face is displayed based on whether and when it is downloaded\n  ready to use. This property is equivalent to the CSS font-display\n\n  `var display = FontFace.display\n  FontFace.display = display`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/display`"}, set-variant! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 281, :column 7, :end-line 281, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The variant property of the `web.FontFace` interface programatically\n  or sets font variant values. It is equivalent to the `web.font-variant`\n\n  `var variantSubProperty = FontFace.variant;\n  FontFace.variant = variantSubProperty;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/variant`"}, :name web.FontFace/set-variant!, :variadic false, :file "src/web/FontFace.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The variant property of the `web.FontFace` interface programatically\n  or sets font variant values. It is equivalent to the `web.font-variant`\n\n  `var variantSubProperty = FontFace.variant;\n  FontFace.variant = variantSubProperty;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/variant`"}, feature-settings {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 106, :column 7, :end-line 106, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The featureSettings property of the `web.FontFace` interface\n  or sets infrequently used font features that are not available\n  a font's variant properties. It is equivalent to the `web.font-feature-settings`\n\n  `var featureSettingDescriptor = FontFace.featureSettings;\n  FontFace.featureSettings = featureSettingDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/featureSettings`"}, :name web.FontFace/feature-settings, :variadic false, :file "src/web/FontFace.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The featureSettings property of the `web.FontFace` interface\n  or sets infrequently used font features that are not available\n  a font's variant properties. It is equivalent to the `web.font-feature-settings`\n\n  `var featureSettingDescriptor = FontFace.featureSettings;\n  FontFace.featureSettings = featureSettingDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/featureSettings`"}, family {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The FontFace.family property allows the author to get or set\n  font family of a `web.FontFace` object. This is equivalent to\n  `web.font-family` descriptor of `web.@font-face`.\n\n  `instanceOfFontFace.family = 'font family name';\n  var fontFace = instanceOfFontFace.family; // \\\"font family name\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/family`"}, :name web.FontFace/family, :variadic false, :file "src/web/FontFace.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The FontFace.family property allows the author to get or set\n  font family of a `web.FontFace` object. This is equivalent to\n  `web.font-family` descriptor of `web.@font-face`.\n\n  `instanceOfFontFace.family = 'font family name';\n  var fontFace = instanceOfFontFace.family; // \\\"font family name\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/family`"}, set-family! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 92, :column 7, :end-line 92, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The FontFace.family property allows the author to get or set\n  font family of a `web.FontFace` object. This is equivalent to\n  `web.font-family` descriptor of `web.@font-face`.\n\n  `instanceOfFontFace.family = 'font family name';\n  var fontFace = instanceOfFontFace.family; // \\\"font family name\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/family`"}, :name web.FontFace/set-family!, :variadic false, :file "src/web/FontFace.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The FontFace.family property allows the author to get or set\n  font family of a `web.FontFace` object. This is equivalent to\n  `web.font-family` descriptor of `web.@font-face`.\n\n  `instanceOfFontFace.family = 'font family name';\n  var fontFace = instanceOfFontFace.family; // \\\"font family name\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/family`"}, set-weight! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 307, :column 7, :end-line 307, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The weight property of the `web.FontFace` interface retrieves\n  sets the weight of the font. It is equivalent to the `web.font-weight`\n\n  `var weightDescriptor = FontFace.weight;\n  FontFace.weight = weightDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/weight`"}, :name web.FontFace/set-weight!, :variadic false, :file "src/web/FontFace.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The weight property of the `web.FontFace` interface retrieves\n  sets the weight of the font. It is equivalent to the `web.font-weight`\n\n  `var weightDescriptor = FontFace.weight;\n  FontFace.weight = weightDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/weight`"}, variant {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 268, :column 7, :end-line 268, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The variant property of the `web.FontFace` interface programatically\n  or sets font variant values. It is equivalent to the `web.font-variant`\n\n  `var variantSubProperty = FontFace.variant;\n  FontFace.variant = variantSubProperty;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/variant`"}, :name web.FontFace/variant, :variadic false, :file "src/web/FontFace.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The variant property of the `web.FontFace` interface programatically\n  or sets font variant values. It is equivalent to the `web.font-variant`\n\n  `var variantSubProperty = FontFace.variant;\n  FontFace.variant = variantSubProperty;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/variant`"}, loaded {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 134, :column 7, :end-line 134, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The loaded read-only property of the `web.FontFace` interface\n  a `web.Promise` that resolves with the current FontFace object\n  the font specified in the object's constructor is done loading\n  rejects with a SyntaxError.\n\n  `var aPromise = FontFace.loaded;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/loaded`"}, :name web.FontFace/loaded, :variadic false, :file "src/web/FontFace.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The loaded read-only property of the `web.FontFace` interface\n  a `web.Promise` that resolves with the current FontFace object\n  the font specified in the object's constructor is done loading\n  rejects with a SyntaxError.\n\n  `var aPromise = FontFace.loaded;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/loaded`"}, set-status! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 175, :column 7, :end-line 175, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The status read-only property of the `web.FontFace` interface\n  an enumerated value indicating the status of the font, one of\n  \\\"loading\\\", \\\"loaded\\\", or \\\"error\\\".\n\n  `var status = FontFace.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/status`"}, :name web.FontFace/set-status!, :variadic false, :file "src/web/FontFace.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The status read-only property of the `web.FontFace` interface\n  an enumerated value indicating the status of the font, one of\n  \\\"loading\\\", \\\"loaded\\\", or \\\"error\\\".\n\n  `var status = FontFace.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/status`"}, set-unicode-range! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 254, :column 7, :end-line 254, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The unicodeRange property of the `web.FontFace` interface retrieves\n  sets the range of unicode codepoints encompassing the font. It\n  equivalent to the `web.unicode-range` descriptor.\n\n  `var unicodeRangeDescriptor = FontFace.unicodeRange;\n  FontFace.unicodeRange = unicodeRangeDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange`"}, :name web.FontFace/set-unicode-range!, :variadic false, :file "src/web/FontFace.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The unicodeRange property of the `web.FontFace` interface retrieves\n  sets the range of unicode codepoints encompassing the font. It\n  equivalent to the `web.unicode-range` descriptor.\n\n  `var unicodeRangeDescriptor = FontFace.unicodeRange;\n  FontFace.unicodeRange = unicodeRangeDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange`"}, style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 214, :column 7, :end-line 214, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The style property of the `web.FontFace` interface retrieves\n  sets the font's style. It is equivalent to the `web.font-style`\n\n  `var style = FontFace.style;\n  FontFace.style = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/style`"}, :name web.FontFace/style, :variadic false, :file "src/web/FontFace.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The style property of the `web.FontFace` interface retrieves\n  sets the font's style. It is equivalent to the `web.font-style`\n\n  `var style = FontFace.style;\n  FontFace.style = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/style`"}, unicode-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 240, :column 7, :end-line 240, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The unicodeRange property of the `web.FontFace` interface retrieves\n  sets the range of unicode codepoints encompassing the font. It\n  equivalent to the `web.unicode-range` descriptor.\n\n  `var unicodeRangeDescriptor = FontFace.unicodeRange;\n  FontFace.unicodeRange = unicodeRangeDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange`"}, :name web.FontFace/unicode-range, :variadic false, :file "src/web/FontFace.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The unicodeRange property of the `web.FontFace` interface retrieves\n  sets the range of unicode codepoints encompassing the font. It\n  equivalent to the `web.unicode-range` descriptor.\n\n  `var unicodeRangeDescriptor = FontFace.unicodeRange;\n  FontFace.unicodeRange = unicodeRangeDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange`"}, set-stretch! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 201, :column 7, :end-line 201, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The stretch property of the `web.FontFace` interface retrieves\n  sets how the font stretches. It is equivalent to the `web.font-stretch`\n\n  `var stretchDescriptor = FontFace.stretch;\n  FontFace.stretch = stretchDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/stretch`"}, :name web.FontFace/set-stretch!, :variadic false, :file "src/web/FontFace.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The stretch property of the `web.FontFace` interface retrieves\n  sets how the font stretches. It is equivalent to the `web.font-stretch`\n\n  `var stretchDescriptor = FontFace.stretch;\n  FontFace.stretch = stretchDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/stretch`"}, set-feature-settings! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 120, :column 7, :end-line 120, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The featureSettings property of the `web.FontFace` interface\n  or sets infrequently used font features that are not available\n  a font's variant properties. It is equivalent to the `web.font-feature-settings`\n\n  `var featureSettingDescriptor = FontFace.featureSettings;\n  FontFace.featureSettings = featureSettingDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/featureSettings`"}, :name web.FontFace/set-feature-settings!, :variadic false, :file "src/web/FontFace.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The featureSettings property of the `web.FontFace` interface\n  or sets infrequently used font features that are not available\n  a font's variant properties. It is equivalent to the `web.font-feature-settings`\n\n  `var featureSettingDescriptor = FontFace.featureSettings;\n  FontFace.featureSettings = featureSettingDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/featureSettings`"}, weight {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 294, :column 7, :end-line 294, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The weight property of the `web.FontFace` interface retrieves\n  sets the weight of the font. It is equivalent to the `web.font-weight`\n\n  `var weightDescriptor = FontFace.weight;\n  FontFace.weight = weightDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/weight`"}, :name web.FontFace/weight, :variadic false, :file "src/web/FontFace.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The weight property of the `web.FontFace` interface retrieves\n  sets the weight of the font. It is equivalent to the `web.font-weight`\n\n  `var weightDescriptor = FontFace.weight;\n  FontFace.weight = weightDescriptor;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/weight`"}, status {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 162, :column 7, :end-line 162, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The status read-only property of the `web.FontFace` interface\n  an enumerated value indicating the status of the font, one of\n  \\\"loading\\\", \\\"loaded\\\", or \\\"error\\\".\n\n  `var status = FontFace.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/status`"}, :name web.FontFace/status, :variadic false, :file "src/web/FontFace.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The status read-only property of the `web.FontFace` interface\n  an enumerated value indicating the status of the font, one of\n  \\\"loading\\\", \\\"loaded\\\", or \\\"error\\\".\n\n  `var status = FontFace.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/status`"}, constructor {:name web.FontFace/constructor, :file "src/web/FontFace.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The FontFace() constructor creates a new `web.FontFace` object.\n\n  family\n  Specifies a name that will be used as the font face value for font properties. Takes the same type of values as the `web.font-family` descriptor of `web.@font-face` .\n  source\n  The font source. This can be either:\n\n  A URL\n  Binary font data\n\n\n  descriptors Optional\n  A set of optional descriptors passed as an object. It can have the following keys:\n\n  family: Family\n  style: Style\n  weight: Weight\n  stretch: Stretch\n  unicodeRange: Unicode range\n  variant: variant\n  featureSettings: Feature settings\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/FontFace`", :tag js}, display {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FontFace.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The display property of the `web.FontFace` interface determines\n  a font face is displayed based on whether and when it is downloaded\n  ready to use. This property is equivalent to the CSS font-display\n\n  `var display = FontFace.display\n  FontFace.display = display`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/display`"}, :name web.FontFace/display, :variadic false, :file "src/web/FontFace.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The display property of the `web.FontFace` interface determines\n  a font face is displayed based on whether and when it is downloaded\n  ready to use. This property is equivalent to the CSS font-display\n\n  `var display = FontFace.display\n  FontFace.display = display`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FontFace/display`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The FontFace interface represents a single usable font face.\n  allows control of the source of the font face, being a URL to\n  external resource, or a buffer; it also allows control of when\n  font face is loaded and its current status."}