{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{replace}, :name web.Location, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {assign {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Location.cljs", :line 9, :column 7, :end-line 9, :end-column 13, :arglists (quote ([this url])), :doc "Method.\n\n  The Location.assign() method causes the window to load and display\n  document at the URL specified.\n\n  `location.assign(url);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/assign`"}, :name web.Location/assign, :variadic false, :file "src/web/Location.cljs", :end-column 13, :method-params ([this url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this url])), :doc "Method.\n\n  The Location.assign() method causes the window to load and display\n  document at the URL specified.\n\n  `location.assign(url);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/assign`"}, reload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Location.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([this forced-reload])), :doc "Method.\n\n  The Location.reload() method reloads the current URL, like the\n  button.\n\n  `location.reload(forcedReload);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/reload`"}, :name web.Location/reload, :variadic false, :file "src/web/Location.cljs", :end-column 13, :method-params ([this forced-reload]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this forced-reload])), :doc "Method.\n\n  The Location.reload() method reloads the current URL, like the\n  button.\n\n  `location.reload(forcedReload);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/reload`"}, replace {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Location.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([this url])), :doc "Method.\n\n  The Location.replace() method replaces the current resource with\n  one at the provided URL. The difference from the `web.assign()`\n  is that after using replace() the current page will not be saved\n  session `web.History`, meaning the user won't be able to use\n  back button to navigate to it.\n\n  `object.replace(url);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/replace`"}, :name web.Location/replace, :variadic false, :file "src/web/Location.cljs", :end-column 14, :method-params ([this url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this url])), :doc "Method.\n\n  The Location.replace() method replaces the current resource with\n  one at the provided URL. The difference from the `web.assign()`\n  is that after using replace() the current page will not be saved\n  session `web.History`, meaning the user won't be able to use\n  back button to navigate to it.\n\n  `object.replace(url);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Location/replace`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Location interface represents the location (URL) of the object\n  is linked to. Changes done on it are reflected on the object\n  relates to. Both the `web.Document` and `web.Window` interface\n  such a linked Location, accessible via `web.Document.location`\n  `web.Window.location` respectively."}