{:rename-macros {}, :renames {}, :externs {TextEncoder {}}, :use-macros {}, :excludes #{}, :name web.TextEncoder, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.TextEncoder/constructor, :file "src/web/TextEncoder.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TextEncoder.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The TextEncoder() constructor returns a newly created utf-8 `web.TextEncoder` object.\n\n  TextEncoder() takes no parameters since Firefox 48 and Chrome 53\n\n\n\n  Note: Prior to Firefox 48 and Chrome 53, an encoding type label was accepted as a paramer to the TextEncoder object, since then both browers have removed support for any encoder type other than utf-8, to match the spec. Any type label passed into the TextEncoder constructor will now be ignored and a utf-8 TextEncoder will be created.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder`", :tag js}, encode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TextEncoder.cljs", :line 21, :column 7, :end-line 21, :end-column 13, :arglists (quote ([this string])), :doc "Method.\n\n  The TextEncoder.prototype.encode() method takes a `web.USVString`\n  input, and returns a `web.Uint8Array` containing the text given\n  parameters encoded with the specific method for that TextEncoder\n\n  `b1 = encoder.encode(string);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode`"}, :name web.TextEncoder/encode, :variadic false, :file "src/web/TextEncoder.cljs", :end-column 13, :method-params ([this string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this string])), :doc "Method.\n\n  The TextEncoder.prototype.encode() method takes a `web.USVString`\n  input, and returns a `web.Uint8Array` containing the text given\n  parameters encoded with the specific method for that TextEncoder\n\n  `b1 = encoder.encode(string);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encode`"}, encode-into {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TextEncoder.cljs", :line 34, :column 7, :end-line 34, :end-column 18, :arglists (quote ([this string uint-8-array])), :doc "Method.\n\n  The TextEncoder.prototype.encodeInto() method takes a `web.USVString`\n  encode and a destination `web.Uint8Array` to put resulting UTF-8\n  text into, and returns a dictionary object indicating the progress\n  the encoding. This is potentially more performant than the older\n  method especially when the target buffer is a view into a Wasm\n\n  `b1 = encoder.encodeInto(string, uint8Array);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encodeInto`"}, :name web.TextEncoder/encode-into, :variadic false, :file "src/web/TextEncoder.cljs", :end-column 18, :method-params ([this string uint-8-array]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this string uint-8-array])), :doc "Method.\n\n  The TextEncoder.prototype.encodeInto() method takes a `web.USVString`\n  encode and a destination `web.Uint8Array` to put resulting UTF-8\n  text into, and returns a dictionary object indicating the progress\n  the encoding. This is potentially more performant than the older\n  method especially when the target buffer is a view into a Wasm\n\n  `b1 = encoder.encodeInto(string, uint8Array);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encodeInto`"}, encoding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TextEncoder.cljs", :line 49, :column 7, :end-line 49, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The TextEncoder.encoding read-only property returns a `dom.DOMString`\n  the name of the encoding algorithm used by the specific encoder.\n\n  `b = encoder.encoding;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encoding`"}, :name web.TextEncoder/encoding, :variadic false, :file "src/web/TextEncoder.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TextEncoder.encoding read-only property returns a `dom.DOMString`\n  the name of the encoding algorithm used by the specific encoder.\n\n  `b = encoder.encoding;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/encoding`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "TextEncoder takes a stream of code points as input and emits\n  stream of bytes. For a more scalable, non-native library, see\n  â€“ a C-like representation of strings based on typed arrays."}