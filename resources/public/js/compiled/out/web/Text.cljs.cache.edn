{:rename-macros {}, :renames {}, :externs {Text {}}, :use-macros {}, :excludes #{}, :name web.Text, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.Text/constructor, :file "src/web/Text.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The Text() constructor returns a newly created `web.Text` object with the optional `dom.DOMString` given in parameter as its textual content.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/Text`", :tag js}, replace-whole-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 17, :column 7, :end-line 17, :end-column 25, :arglists (quote ([this content])), :doc "Method.\n\n  The Text.replaceWholeText() method replaces the text of the node\n  all of its logically adjacent text nodes with the specified text.\n  replaced nodes are removed, including the current node, unless\n  was the recipient of the replacement text.\n\n  `replacementNode = textnode.replaceWholeText(content)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/replaceWholeText`"}, :name web.Text/replace-whole-text, :variadic false, :file "src/web/Text.cljs", :end-column 25, :method-params ([this content]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this content])), :doc "Method.\n\n  The Text.replaceWholeText() method replaces the text of the node\n  all of its logically adjacent text nodes with the specified text.\n  replaced nodes are removed, including the current node, unless\n  was the recipient of the replacement text.\n\n  `replacementNode = textnode.replaceWholeText(content)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/replaceWholeText`"}, split-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 31, :column 7, :end-line 31, :end-column 17, :arglists (quote ([this offset])), :doc "Method.\n\n  The Text.splitText() method breaks the `web.Text` node into two\n  at the specified offset, keeping both nodes in the tree as siblings.\n\n  `newNode = textNode.splitText(offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText`"}, :name web.Text/split-text, :variadic false, :file "src/web/Text.cljs", :end-column 17, :method-params ([this offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this offset])), :doc "Method.\n\n  The Text.splitText() method breaks the `web.Text` node into two\n  at the specified offset, keeping both nodes in the tree as siblings.\n\n  `newNode = textNode.splitText(offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/splitText`"}, assigned-slot {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 43, :column 7, :end-line 43, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The assignedSlot property of the `web.Text` interface returns\n  `html.HTMLSlotElement` object associated with the element.\n\n  `var htmlSlotElement = text.assignedSlot`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot`"}, :name web.Text/assigned-slot, :variadic false, :file "src/web/Text.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The assignedSlot property of the `web.Text` interface returns\n  `html.HTMLSlotElement` object associated with the element.\n\n  `var htmlSlotElement = text.assignedSlot`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot`"}, set-assigned-slot! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 55, :column 7, :end-line 55, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The assignedSlot property of the `web.Text` interface returns\n  `html.HTMLSlotElement` object associated with the element.\n\n  `var htmlSlotElement = text.assignedSlot`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot`"}, :name web.Text/set-assigned-slot!, :variadic false, :file "src/web/Text.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The assignedSlot property of the `web.Text` interface returns\n  `html.HTMLSlotElement` object associated with the element.\n\n  `var htmlSlotElement = text.assignedSlot`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/assignedSlot`"}, is-element-content-whitespace {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 67, :column 7, :end-line 67, :end-column 36, :arglists (quote ([this])), :doc "Property.\n\n  The Text.isElementContentWhitespace read-only property returns\n  `web.Boolean` flag indicating whether or not the text node's\n  consists solely of whitespace.\n\n  `b = textnode.isElementContentWhitespace;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace`"}, :name web.Text/is-element-content-whitespace, :variadic false, :file "src/web/Text.cljs", :end-column 36, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Text.isElementContentWhitespace read-only property returns\n  `web.Boolean` flag indicating whether or not the text node's\n  consists solely of whitespace.\n\n  `b = textnode.isElementContentWhitespace;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace`"}, set-is-element-content-whitespace! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 80, :column 7, :end-line 80, :end-column 41, :arglists (quote ([this val])), :doc "Property.\n\n  The Text.isElementContentWhitespace read-only property returns\n  `web.Boolean` flag indicating whether or not the text node's\n  consists solely of whitespace.\n\n  `b = textnode.isElementContentWhitespace;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace`"}, :name web.Text/set-is-element-content-whitespace!, :variadic false, :file "src/web/Text.cljs", :end-column 41, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Text.isElementContentWhitespace read-only property returns\n  `web.Boolean` flag indicating whether or not the text node's\n  consists solely of whitespace.\n\n  `b = textnode.isElementContentWhitespace;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/isElementContentWhitespace`"}, whole-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 93, :column 7, :end-line 93, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Text.wholeText read-only property returns the full text of\n  `web.Text` nodes logically adjacent to the node.\n\n  `str = textnode.wholeText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText`"}, :name web.Text/whole-text, :variadic false, :file "src/web/Text.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Text.wholeText read-only property returns the full text of\n  `web.Text` nodes logically adjacent to the node.\n\n  `str = textnode.wholeText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText`"}, set-whole-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Text.cljs", :line 105, :column 7, :end-line 105, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Text.wholeText read-only property returns the full text of\n  `web.Text` nodes logically adjacent to the node.\n\n  `str = textnode.wholeText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText`"}, :name web.Text/set-whole-text!, :variadic false, :file "src/web/Text.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Text.wholeText read-only property returns the full text of\n  `web.Text` nodes logically adjacent to the node.\n\n  `str = textnode.wholeText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Text/wholeText`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Text interface represents the textual content of `web.Element`\n  `web.Attr`. If an element has no markup within its content, it\n  a single child implementing Text that contains the element's\n  However, if the element contains markup, it is parsed into information\n  and Text nodes that form its children."}