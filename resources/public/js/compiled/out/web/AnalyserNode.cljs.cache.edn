{:rename-macros {}, :renames {}, :externs {AnalyserNode {}}, :use-macros {}, :excludes #{}, :name web.AnalyserNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {min-decibels {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 189, :column 7, :end-line 189, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The minDecibels property of the `web.AnalyserNode` interface\n  a double value representing the minimum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the minimum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.minDecibels;\n  analyserNode.minDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels`"}, :name web.AnalyserNode/min-decibels, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The minDecibels property of the `web.AnalyserNode` interface\n  a double value representing the minimum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the minimum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.minDecibels;\n  analyserNode.minDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels`"}, set-smoothing-time-constant! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 237, :column 7, :end-line 237, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The smoothingTimeConstant property of the `web.AnalyserNode`\n  is a double value representing the averaging constant with the\n  analysis frame. It's basically an average between the current\n  and the last buffer the AnalyserNode processed, and results in\n  much smoother set of value changes over time.\n\n  `var smoothValue = analyserNode.smoothingTimeConstant;\n  analyserNode.smoothingTimeConstant = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant`"}, :name web.AnalyserNode/set-smoothing-time-constant!, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The smoothingTimeConstant property of the `web.AnalyserNode`\n  is a double value representing the averaging constant with the\n  analysis frame. It's basically an average between the current\n  and the last buffer the AnalyserNode processed, and results in\n  much smoother set of value changes over time.\n\n  `var smoothValue = analyserNode.smoothingTimeConstant;\n  analyserNode.smoothingTimeConstant = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant`"}, get-byte-time-domain-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 50, :column 7, :end-line 50, :end-column 32, :arglists (quote ([this & args])), :doc "Method.\n\n  The getByteTimeDomainData() method of the `web.AnalyserNode`\n  copies the current waveform, or time-domain, data into a `web.Uint8Array`\n  byte array) passed into it.\n\n  `const audioCtx = new AudioContext();\n  const analyser = audioCtx.createAnalyser();\n  const dataArray = new Uint8Array(analyser.fftSize); // Uint8Array should be the same length as the fftSize\n  analyser.getByteTimeDomainData(dataArray); // fill the Uint8Array with data returned from getByteTimeDomainData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.AnalyserNode/get-byte-time-domain-data, :variadic true, :file "src/web/AnalyserNode.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getByteTimeDomainData() method of the `web.AnalyserNode`\n  copies the current waveform, or time-domain, data into a `web.Uint8Array`\n  byte array) passed into it.\n\n  `const audioCtx = new AudioContext();\n  const analyser = audioCtx.createAnalyser();\n  const dataArray = new Uint8Array(analyser.fftSize); // Uint8Array should be the same length as the fftSize\n  analyser.getByteTimeDomainData(dataArray); // fill the Uint8Array with data returned from getByteTimeDomainData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteTimeDomainData`"}, set-frequency-bin-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 143, :column 7, :end-line 143, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The frequencyBinCount read-only property of the `web.AnalyserNode`\n  is an unsigned integer half that of the `web.AnalyserNode.fftSize`.\n  generally equates to the number of data values you will have\n  play with for the visualization.\n\n  `var arrayLength = analyserNode.frequencyBinCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount`"}, :name web.AnalyserNode/set-frequency-bin-count!, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The frequencyBinCount read-only property of the `web.AnalyserNode`\n  is an unsigned integer half that of the `web.AnalyserNode.fftSize`.\n  generally equates to the number of data values you will have\n  play with for the visualization.\n\n  `var arrayLength = analyserNode.frequencyBinCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount`"}, set-min-decibels! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 205, :column 7, :end-line 205, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The minDecibels property of the `web.AnalyserNode` interface\n  a double value representing the minimum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the minimum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.minDecibels;\n  analyserNode.minDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels`"}, :name web.AnalyserNode/set-min-decibels!, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The minDecibels property of the `web.AnalyserNode` interface\n  a double value representing the minimum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the minimum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.minDecibels;\n  analyserNode.minDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/minDecibels`"}, frequency-bin-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 129, :column 7, :end-line 129, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The frequencyBinCount read-only property of the `web.AnalyserNode`\n  is an unsigned integer half that of the `web.AnalyserNode.fftSize`.\n  generally equates to the number of data values you will have\n  play with for the visualization.\n\n  `var arrayLength = analyserNode.frequencyBinCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount`"}, :name web.AnalyserNode/frequency-bin-count, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The frequencyBinCount read-only property of the `web.AnalyserNode`\n  is an unsigned integer half that of the `web.AnalyserNode.fftSize`.\n  generally equates to the number of data values you will have\n  play with for the visualization.\n\n  `var arrayLength = analyserNode.frequencyBinCount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/frequencyBinCount`"}, get-float-frequency-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 66, :column 7, :end-line 66, :end-column 31, :arglists (quote ([this & args])), :doc "Method.\n\n  The getFloatFrequencyData() method of the `web.AnalyserNode`\n  copies the current frequency data into a `web.Float32Array` array\n  into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Float32Array(analyser.frequencyBinCount); // Float32Array should be the same length as the frequencyBinCount\n\n  void analyser.getFloatFrequencyData(dataArray); // fill the Float32Array with data returned from getFloatFrequencyData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.AnalyserNode/get-float-frequency-data, :variadic true, :file "src/web/AnalyserNode.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getFloatFrequencyData() method of the `web.AnalyserNode`\n  copies the current frequency data into a `web.Float32Array` array\n  into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Float32Array(analyser.frequencyBinCount); // Float32Array should be the same length as the frequencyBinCount\n\n  void analyser.getFloatFrequencyData(dataArray); // fill the Float32Array with data returned from getFloatFrequencyData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatFrequencyData`"}, get-float-time-domain-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 83, :column 7, :end-line 83, :end-column 33, :arglists (quote ([this & args])), :doc "Method.\n\n  The getFloatTimeDomainData() method of the `web.AnalyserNode`\n  copies the current waveform, or time-domain, data into a `web.Float32Array`\n  passed into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Float32Array(analyser.fftSize); // Float32Array needs to be the same length as the fftSize\n  analyser.getFloatTimeDomainData(dataArray); // fill the Float32Array with data returned from getFloatTimeDomainData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.AnalyserNode/get-float-time-domain-data, :variadic true, :file "src/web/AnalyserNode.cljs", :end-column 33, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getFloatTimeDomainData() method of the `web.AnalyserNode`\n  copies the current waveform, or time-domain, data into a `web.Float32Array`\n  passed into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Float32Array(analyser.fftSize); // Float32Array needs to be the same length as the fftSize\n  analyser.getFloatTimeDomainData(dataArray); // fill the Float32Array with data returned from getFloatTimeDomainData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getFloatTimeDomainData`"}, max-decibels {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 157, :column 7, :end-line 157, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The maxDecibels property of the `web.AnalyserNode` interface\n  a double value representing the maximum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the maximum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.maxDecibels;\n  analyserNode.maxDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels`"}, :name web.AnalyserNode/max-decibels, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The maxDecibels property of the `web.AnalyserNode` interface\n  a double value representing the maximum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the maximum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.maxDecibels;\n  analyserNode.maxDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels`"}, get-byte-frequency-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 33, :column 7, :end-line 33, :end-column 30, :arglists (quote ([this & args])), :doc "Method.\n\n  The getByteFrequencyData() method of the `web.AnalyserNode` interface\n  the current frequency data into a `web.Uint8Array` (unsigned\n  array) passed into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Uint8Array(analyser.frequencyBinCount); // Uint8Array should be the same length as the frequencyBinCount\n\n  void analyser.getByteFrequencyData(dataArray); // fill the Uint8Array with data returned from getByteFrequencyData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.AnalyserNode/get-byte-frequency-data, :variadic true, :file "src/web/AnalyserNode.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getByteFrequencyData() method of the `web.AnalyserNode` interface\n  the current frequency data into a `web.Uint8Array` (unsigned\n  array) passed into it.\n\n  `var audioCtx = new AudioContext();\n  var analyser = audioCtx.createAnalyser();\n  var dataArray = new Uint8Array(analyser.frequencyBinCount); // Uint8Array should be the same length as the frequencyBinCount\n\n  void analyser.getByteFrequencyData(dataArray); // fill the Uint8Array with data returned from getByteFrequencyData()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/getByteFrequencyData`"}, set-max-decibels! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 173, :column 7, :end-line 173, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The maxDecibels property of the `web.AnalyserNode` interface\n  a double value representing the maximum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the maximum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.maxDecibels;\n  analyserNode.maxDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels`"}, :name web.AnalyserNode/set-max-decibels!, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The maxDecibels property of the `web.AnalyserNode` interface\n  a double value representing the maximum power value in the scaling\n  for the FFT analysis data, for conversion to unsigned byte/float\n  — basically, this specifies the maximum value for the range of\n  when using getFloatFrequencyData() or getByteFrequencyData().\n\n  `var curValue = analyserNode.maxDecibels;\n  analyserNode.maxDecibels = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/maxDecibels`"}, fft-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 99, :column 7, :end-line 99, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The fftSize property of the `web.AnalyserNode` interface is an\n  long value and represents the window size in samples that is\n  when performing a Fast Fourier Transform (FFT) to get frequency\n  data.\n\n  `var curValue = analyserNode.fftSize;\n  analyserNode.fftSize = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize`"}, :name web.AnalyserNode/fft-size, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The fftSize property of the `web.AnalyserNode` interface is an\n  long value and represents the window size in samples that is\n  when performing a Fast Fourier Transform (FFT) to get frequency\n  data.\n\n  `var curValue = analyserNode.fftSize;\n  analyserNode.fftSize = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize`"}, constructor {:name web.AnalyserNode/constructor, :file "src/web/AnalyserNode.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The AnalyserNode constructor of the Web Audio API creates a new `web.AnalyserNode` object instance.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  \\tcontext\n  \\tA reference to an `audio.AudioContext` or `web.OfflineAudioContext`.\n  \\toptions Optional\n\n\n  \\t\\tfftSize: The desired initial size of the FFT for frequency-domain analysis.\n  \\t\\tThe default is 2048.\n  \\t\\tmaxDecibels: The desired initial maximum power in dB for FFT analysis.\n  \\t\\tThe default is -30.\n  \\t\\tminDecibels: The desired initial minimum power in dB for FFT analysis.\n  \\t\\tThe default is -100.\n  \\t\\tsmoothingTimeConstant: The desired initial smoothing constant for the FFT analysis. The default is 0.8.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/AnalyserNode`", :tag js}, set-fft-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 114, :column 7, :end-line 114, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The fftSize property of the `web.AnalyserNode` interface is an\n  long value and represents the window size in samples that is\n  when performing a Fast Fourier Transform (FFT) to get frequency\n  data.\n\n  `var curValue = analyserNode.fftSize;\n  analyserNode.fftSize = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize`"}, :name web.AnalyserNode/set-fft-size!, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The fftSize property of the `web.AnalyserNode` interface is an\n  long value and represents the window size in samples that is\n  when performing a Fast Fourier Transform (FFT) to get frequency\n  data.\n\n  `var curValue = analyserNode.fftSize;\n  analyserNode.fftSize = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize`"}, smoothing-time-constant {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AnalyserNode.cljs", :line 221, :column 7, :end-line 221, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The smoothingTimeConstant property of the `web.AnalyserNode`\n  is a double value representing the averaging constant with the\n  analysis frame. It's basically an average between the current\n  and the last buffer the AnalyserNode processed, and results in\n  much smoother set of value changes over time.\n\n  `var smoothValue = analyserNode.smoothingTimeConstant;\n  analyserNode.smoothingTimeConstant = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant`"}, :name web.AnalyserNode/smoothing-time-constant, :variadic false, :file "src/web/AnalyserNode.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 221, :end-line 221, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The smoothingTimeConstant property of the `web.AnalyserNode`\n  is a double value representing the averaging constant with the\n  analysis frame. It's basically an average between the current\n  and the last buffer the AnalyserNode processed, and results in\n  much smoother set of value changes over time.\n\n  `var smoothValue = analyserNode.smoothingTimeConstant;\n  analyserNode.smoothingTimeConstant = newValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/smoothingTimeConstant`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AnalyserNode interface represents a node able to provide\n  frequency and time-domain analysis information. It is an `audio.AudioNode`\n  passes the audio stream unchanged from the input to the output,\n  allows you to take the generated data, process it, and create\n  visualizations."}