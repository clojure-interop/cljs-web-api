{:rename-macros {}, :renames {}, :externs {CustomEvent {}}, :use-macros {}, :excludes #{type}, :name web.CustomEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 346, :column 7, :end-line 346, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, :name web.CustomEvent/target, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 346, :end-line 346, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, set-return-value! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 310, :column 7, :end-line 310, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, :name web.CustomEvent/set-return-value!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, return-value {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 296, :column 7, :end-line 296, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, :name web.CustomEvent/return-value, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 296, :end-line 296, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, event-phase {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 248, :column 7, :end-line 248, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The eventPhase read-only property of the `web.Event` interface\n  which phase of the event flow is currently being evaluated.\n\n  `var phase = event.eventPhase;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase`"}, :name web.CustomEvent/event-phase, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The eventPhase read-only property of the `web.Event` interface\n  which phase of the event flow is currently being evaluated.\n\n  `var phase = event.eventPhase;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase`"}, init-custom-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 24, :column 7, :end-line 24, :end-column 24, :arglists (quote ([this type can-bubble cancelable detail])), :doc "Method.\n\n  The CustomEvent.initCustomEvent() method initializes a CustomEvent\n  If the event has already been dispatched, this method does nothing.\n\n  `event.initCustomEvent(type, canBubble, cancelable, detail);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent`"}, :name web.CustomEvent/init-custom-event, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 24, :method-params ([this type can-bubble cancelable detail]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this type can-bubble cancelable detail])), :doc "Method.\n\n  The CustomEvent.initCustomEvent() method initializes a CustomEvent\n  If the event has already been dispatched, this method does nothing.\n\n  `event.initCustomEvent(type, canBubble, cancelable, detail);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/initCustomEvent`"}, time-stamp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 374, :column 7, :end-line 374, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, :name web.CustomEvent/time-stamp, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, bubbles {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 150, :column 7, :end-line 150, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The bubbles read-only property of the `web.Event` interface indicates\n  the event bubbles up through the DOM or not.\n\n  `var doesItBubble = event.bubbles;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles`"}, :name web.CustomEvent/bubbles, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The bubbles read-only property of the `web.Event` interface indicates\n  the event bubbles up through the DOM or not.\n\n  `var doesItBubble = event.bubbles;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles`"}, explicit-original-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 260, :column 7, :end-line 260, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, :name web.CustomEvent/explicit-original-target, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, current-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 220, :column 7, :end-line 220, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The currentTarget read-only property of the `web.Event` interface\n  the current target for the event, as the event traverses the\n  It always refers to the element to which the event handler has\n  attached, as opposed to `web.Event.target`, which identifies\n  element on which the event occurred and which may be its direct\n\n  `var currentEventTarget = event.currentTarget;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget`"}, :name web.CustomEvent/current-target, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The currentTarget read-only property of the `web.Event` interface\n  the current target for the event, as the event traverses the\n  It always refers to the element to which the event handler has\n  attached, as opposed to `web.Event.target`, which identifies\n  element on which the event occurred and which may be its direct\n\n  `var currentEventTarget = event.currentTarget;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 360, :column 7, :end-line 360, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, :name web.CustomEvent/set-target!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 360, :end-line 360, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, detail {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 126, :column 7, :end-line 126, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The detail readonly property of the `web.CustomEvent` interface\n  any data passed when initializing the event.\n\n  `let myDetail = customEventInstance.detail;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail`"}, :name web.CustomEvent/detail, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The detail readonly property of the `web.CustomEvent` interface\n  any data passed when initializing the event.\n\n  `let myDetail = customEventInstance.detail;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail`"}, default-prevented {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 235, :column 7, :end-line 235, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The defaultPrevented read-only property of the `web.Event` interface\n  a `web.Boolean` indicating whether or not `web.Event.preventDefault()`\n  called on the event.\n\n  `var defaultWasPrevented = event.defaultPrevented;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented`"}, :name web.CustomEvent/default-prevented, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 235, :end-line 235, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The defaultPrevented read-only property of the `web.Event` interface\n  a `web.Boolean` indicating whether or not `web.Event.preventDefault()`\n  called on the event.\n\n  `var defaultWasPrevented = event.defaultPrevented;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented`"}, init-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 69, :column 7, :end-line 69, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The Event.initEvent() method is used to initialize the value\n  an `web.event` created using `web.Document.createEvent()`.\n\n  `event.initEvent(type, bubbles, cancelable);\n\n\n  type\n  Is a `dom.DOMString` defining the type of event.\n  bubbles\n  Is a `web.Boolean` deciding whether the event should bubble up through the event chain or not. Once set, the read-only property `web.Event.bubbles` will give its value.\n  cancelable\n  Is a `web.Boolean` defining whether the event can be canceled. Once set, the read-only property `web.Event.cancelable` will give its value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CustomEvent/init-event, :variadic true, :file "src/web/CustomEvent.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Event.initEvent() method is used to initialize the value\n  an `web.event` created using `web.Document.createEvent()`.\n\n  `event.initEvent(type, bubbles, cancelable);\n\n\n  type\n  Is a `dom.DOMString` defining the type of event.\n  bubbles\n  Is a `web.Boolean` deciding whether the event should bubble up through the event chain or not. Once set, the read-only property `web.Event.bubbles` will give its value.\n  cancelable\n  Is a `web.Boolean` defining whether the event can be canceled. Once set, the read-only property `web.Event.cancelable` will give its value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent`"}, set-original-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 287, :column 7, :end-line 287, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, :name web.CustomEvent/set-original-target!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, prevent-default {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 89, :column 7, :end-line 89, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Event` interface's preventDefault() method tells the\n  agent that if the event does not get explicitly handled, its\n  action should not be taken as it normally would be.\n\n  `event.preventDefault();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault`"}, :name web.CustomEvent/prevent-default, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Event` interface's preventDefault() method tells the\n  agent that if the event does not get explicitly handled, its\n  action should not be taken as it normally would be.\n\n  `event.preventDefault();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault`"}, stop-immediate-propagation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 102, :column 7, :end-line 102, :end-column 33, :arglists (quote ([this])), :doc "Method.\n\n  The stopImmediatePropagation() method of the `web.Event` interface\n  other listeners of the same event from being called.\n\n  `event.stopImmediatePropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation`"}, :name web.CustomEvent/stop-immediate-propagation, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stopImmediatePropagation() method of the `web.Event` interface\n  other listeners of the same event from being called.\n\n  `event.stopImmediatePropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation`"}, set-cancel-bubble! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 178, :column 7, :end-line 178, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, :name web.CustomEvent/set-cancel-bubble!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, cancel-bubble {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 162, :column 7, :end-line 162, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, :name web.CustomEvent/cancel-bubble, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, src-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 324, :column 7, :end-line 324, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, :name web.CustomEvent/src-element, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 324, :end-line 324, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, is-trusted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 412, :column 7, :end-line 412, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The isTrusted read-only property of the `web.Event` interface\n  a `web.Boolean` that is true when the event was generated by\n  user action, and false when the event was created or modified\n  a script or dispatched via `web.EventTarget.dispatchEvent()`.\n\n  `var eventIsTrusted = event.isTrusted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted`"}, :name web.CustomEvent/is-trusted, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isTrusted read-only property of the `web.Event` interface\n  a `web.Boolean` that is true when the event was generated by\n  user action, and false when the event was created or modified\n  a script or dispatched via `web.EventTarget.dispatchEvent()`.\n\n  `var eventIsTrusted = event.isTrusted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted`"}, set-explicit-original-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 269, :column 7, :end-line 269, :end-column 36, :arglists (quote ([this val])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, :name web.CustomEvent/set-explicit-original-target!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 36, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, composed-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 55, :column 7, :end-line 55, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, :name web.CustomEvent/composed-path, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 398, :column 7, :end-line 398, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Event` interface returns\n  string containing the event's type. It is set when the event\n  constructed and is the name commonly used to refer to the specific\n  such as click, load, or error.\n\n  `let eventType = event.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/type`"}, :name web.CustomEvent/type, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Event` interface returns\n  string containing the event's type. It is set when the event\n  constructed and is the name commonly used to refer to the specific\n  such as click, load, or error.\n\n  `let eventType = event.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/type`"}, stop-propagation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 114, :column 7, :end-line 114, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The stopPropagation() method of the `web.Event` interface prevents\n  propagation of the current event in the capturing and bubbling\n\n  `event.stopPropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation`"}, :name web.CustomEvent/stop-propagation, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stopPropagation() method of the `web.Event` interface prevents\n  propagation of the current event in the capturing and bubbling\n\n  `event.stopPropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation`"}, set-src-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 335, :column 7, :end-line 335, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, :name web.CustomEvent/set-src-element!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, original-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 278, :column 7, :end-line 278, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, :name web.CustomEvent/original-target, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, cancelable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 194, :column 7, :end-line 194, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The cancelable read-only property of the `web.Event` interface\n  whether the event can be canceled, and therefore prevented as\n  the event never happened.\n\n  `bool = event.cancelable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable`"}, :name web.CustomEvent/cancelable, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The cancelable read-only property of the `web.Event` interface\n  whether the event can be canceled, and therefore prevented as\n  the event never happened.\n\n  `bool = event.cancelable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable`"}, set-time-stamp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 386, :column 7, :end-line 386, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, :name web.CustomEvent/set-time-stamp!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 386, :end-line 386, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, constructor {:name web.CustomEvent/constructor, :file "src/web/CustomEvent.cljs", :line 5, :column 1, :end-line 5, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 5, :column 6, :end-line 5, :end-column 17}, :doc "Constructor.\n\n  The CustomEvent() constructor creates a new `web.CustomEvent`.\n\n  typeArg\n  A `dom.DOMString` representing the name of the event.\n  customEventInit Optional\n  A CustomEventInit dictionary, having the following fields:\n\n  \\\"detail\\\", optional and defaulting to null, of type any, that is an event-dependent value associated with the event.\n\n\n\n  The CustomEventInit dictionary also accepts fields from the `web.EventInit` dictionary.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent`", :tag js}, create-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 36, :column 7, :end-line 36, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  Creates a new event, which must then be initialized by calling\n  initEvent() method.\n\n  `document.createEvent(type)\n\n\n  type\n  A string indicating the event type to create.\n\n\n  This method returns a new DOM `web.Event` object of the specified type, which must be initialized before use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/createEvent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CustomEvent/create-event, :variadic true, :file "src/web/CustomEvent.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Creates a new event, which must then be initialized by calling\n  initEvent() method.\n\n  `document.createEvent(type)\n\n\n  type\n  A string indicating the event type to create.\n\n\n  This method returns a new DOM `web.Event` object of the specified type, which must be initialized before use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/createEvent`"}, set-detail! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 138, :column 7, :end-line 138, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The detail readonly property of the `web.CustomEvent` interface\n  any data passed when initializing the event.\n\n  `let myDetail = customEventInstance.detail;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail`"}, :name web.CustomEvent/set-detail!, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The detail readonly property of the `web.CustomEvent` interface\n  any data passed when initializing the event.\n\n  `let myDetail = customEventInstance.detail;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail`"}, composed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomEvent.cljs", :line 207, :column 7, :end-line 207, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}, :name web.CustomEvent/composed, :variadic false, :file "src/web/CustomEvent.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "This interface inherits properties from its parent, `web.Event`:"}