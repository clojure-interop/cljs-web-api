{:rename-macros {}, :renames {}, :externs {EventSource {}}, :use-macros {}, :excludes #{}, :name web.EventSource, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {with-credentials {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 161, :column 7, :end-line 161, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The withCredentials read-only property of the `web.EventSource`\n  returns a `web.Boolean` indicating whether the EventSource object\n  instantiated with CORS credentials set.\n\n  `var myWithCredentials = eventSource.withCredentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials`"}, :name web.EventSource/with-credentials, :variadic false, :file "src/web/EventSource.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The withCredentials read-only property of the `web.EventSource`\n  returns a `web.Boolean` indicating whether the EventSource object\n  instantiated with CORS credentials set.\n\n  `var myWithCredentials = eventSource.withCredentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 113, :column 7, :end-line 113, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The readyState read-only property of the `web.EventSource` interface\n  a number representing the state of the connection.\n\n  `var myReadyState = eventSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState`"}, :name web.EventSource/ready-state, :variadic false, :file "src/web/EventSource.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The readyState read-only property of the `web.EventSource` interface\n  a number representing the state of the connection.\n\n  `var myReadyState = eventSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.EventSource` interface is an\n  called when an error occurs and the error event is dispatched\n  an EventSource object.\n\n  `eventSource.onerror = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror`"}, :name web.EventSource/set-onerror!, :variadic false, :file "src/web/EventSource.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.EventSource` interface is an\n  called when an error occurs and the error event is dispatched\n  an EventSource object.\n\n  `eventSource.onerror = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 35, :column 7, :end-line 35, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.EventSource` interface is an\n  called when an error occurs and the error event is dispatched\n  an EventSource object.\n\n  `eventSource.onerror = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror`"}, :name web.EventSource/onerror, :variadic false, :file "src/web/EventSource.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.EventSource` interface is an\n  called when an error occurs and the error event is dispatched\n  an EventSource object.\n\n  `eventSource.onerror = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 61, :column 7, :end-line 61, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.EventSource` interface is\n  `web.EventHandler` called when a message event is received, that\n  when a message is coming from the source.\n\n  `eventSource.onmessage = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage`"}, :name web.EventSource/onmessage, :variadic false, :file "src/web/EventSource.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.EventSource` interface is\n  `web.EventHandler` called when a message event is received, that\n  when a message is coming from the source.\n\n  `eventSource.onmessage = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 74, :column 7, :end-line 74, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.EventSource` interface is\n  `web.EventHandler` called when a message event is received, that\n  when a message is coming from the source.\n\n  `eventSource.onmessage = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage`"}, :name web.EventSource/set-onmessage!, :variadic false, :file "src/web/EventSource.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.EventSource` interface is\n  `web.EventHandler` called when a message event is received, that\n  when a message is coming from the source.\n\n  `eventSource.onmessage = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onmessage`"}, onopen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 87, :column 7, :end-line 87, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onopen property of the `web.EventSource` interface is an\n  called when an open event is received, that is when the connection\n  just opened.\n\n  `eventSource.onopen = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen`"}, :name web.EventSource/onopen, :variadic false, :file "src/web/EventSource.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onopen property of the `web.EventSource` interface is an\n  called when an open event is received, that is when the connection\n  just opened.\n\n  `eventSource.onopen = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 22, :column 7, :end-line 22, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.EventSource` interface closes\n  connection, if one is made, and sets the `web.EventSource.readyState`\n  to 2 (closed).\n\n  `eventSource.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close`"}, :name web.EventSource/close, :variadic false, :file "src/web/EventSource.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.EventSource` interface closes\n  connection, if one is made, and sets the `web.EventSource.readyState`\n  to 2 (closed).\n\n  `eventSource.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close`"}, set-ready-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 125, :column 7, :end-line 125, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The readyState read-only property of the `web.EventSource` interface\n  a number representing the state of the connection.\n\n  `var myReadyState = eventSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState`"}, :name web.EventSource/set-ready-state!, :variadic false, :file "src/web/EventSource.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The readyState read-only property of the `web.EventSource` interface\n  a number representing the state of the connection.\n\n  `var myReadyState = eventSource.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/readyState`"}, set-with-credentials! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 174, :column 7, :end-line 174, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The withCredentials read-only property of the `web.EventSource`\n  returns a `web.Boolean` indicating whether the EventSource object\n  instantiated with CORS credentials set.\n\n  `var myWithCredentials = eventSource.withCredentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials`"}, :name web.EventSource/set-with-credentials!, :variadic false, :file "src/web/EventSource.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The withCredentials read-only property of the `web.EventSource`\n  returns a `web.Boolean` indicating whether the EventSource object\n  instantiated with CORS credentials set.\n\n  `var myWithCredentials = eventSource.withCredentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/withCredentials`"}, set-onopen! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 100, :column 7, :end-line 100, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onopen property of the `web.EventSource` interface is an\n  called when an open event is received, that is when the connection\n  just opened.\n\n  `eventSource.onopen = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen`"}, :name web.EventSource/set-onopen!, :variadic false, :file "src/web/EventSource.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onopen property of the `web.EventSource` interface is an\n  called when an open event is received, that is when the connection\n  just opened.\n\n  `eventSource.onopen = function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/onopen`"}, constructor {:name web.EventSource/constructor, :file "src/web/EventSource.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The EventSource() constructor returns a newly-created `web.EventSource`, which represents a remote resource.\n\n  url\n  A `web.USVString` that represents the location of the remote resource serving the events/messages.\n  configuration Optional\n  Provides options to configure the new connection. The possible entries are:\n\n  withCredentials, defaulting to false, indicating if CORS should be set to include credentials.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/EventSource`", :tag js}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 137, :column 7, :end-line 137, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.EventSource` interface\n  a `dom.DOMString` representing the URL of the source.\n\n  `var myUrl = eventSource.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url`"}, :name web.EventSource/url, :variadic false, :file "src/web/EventSource.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.EventSource` interface\n  a `dom.DOMString` representing the URL of the source.\n\n  `var myUrl = eventSource.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EventSource.cljs", :line 149, :column 7, :end-line 149, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.EventSource` interface\n  a `dom.DOMString` representing the URL of the source.\n\n  `var myUrl = eventSource.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url`"}, :name web.EventSource/set-url!, :variadic false, :file "src/web/EventSource.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.EventSource` interface\n  a `dom.DOMString` representing the URL of the source.\n\n  `var myUrl = eventSource.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventSource/url`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The EventSource interface is web content's interface to server-sent\n  An EventSource instance opens a persistent connection to an HTTP\n  which sends events in text/event-stream format."}