{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ServiceWorker, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 8, :column 7, :end-line 8, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.ServiceWorker/onerror, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 21, :column 7, :end-line 21, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.ServiceWorker/set-onerror!, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, onstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 34, :column 7, :end-line 34, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  An `web.EventListener` property called whenever an event of type\n  is fired; it is basically fired anytime the `web.ServiceWorker.state`\n\n  `ServiceWorker.onstatechange = function(statechangeevent) { ... }\n  ServiceWorker.addEventListener('statechange', function(statechangeevent) { ... } )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange`"}, :name web.ServiceWorker/onstatechange, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `web.EventListener` property called whenever an event of type\n  is fired; it is basically fired anytime the `web.ServiceWorker.state`\n\n  `ServiceWorker.onstatechange = function(statechangeevent) { ... }\n  ServiceWorker.addEventListener('statechange', function(statechangeevent) { ... } )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange`"}, set-onstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 47, :column 7, :end-line 47, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  An `web.EventListener` property called whenever an event of type\n  is fired; it is basically fired anytime the `web.ServiceWorker.state`\n\n  `ServiceWorker.onstatechange = function(statechangeevent) { ... }\n  ServiceWorker.addEventListener('statechange', function(statechangeevent) { ... } )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange`"}, :name web.ServiceWorker/set-onstatechange!, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `web.EventListener` property called whenever an event of type\n  is fired; it is basically fired anytime the `web.ServiceWorker.state`\n\n  `ServiceWorker.onstatechange = function(statechangeevent) { ... }\n  ServiceWorker.addEventListener('statechange', function(statechangeevent) { ... } )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/onstatechange`"}, script-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 60, :column 7, :end-line 60, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  Returns the ServiceWorker serialized script URL defined as part\n  ServiceWorkerRegistration. Must be on the same origin as the\n  that registers the ServiceWorker.\n\n  `someURL = ServiceWorker.scriptURL`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL`"}, :name web.ServiceWorker/script-url, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the ServiceWorker serialized script URL defined as part\n  ServiceWorkerRegistration. Must be on the same origin as the\n  that registers the ServiceWorker.\n\n  `someURL = ServiceWorker.scriptURL`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL`"}, set-script-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 73, :column 7, :end-line 73, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the ServiceWorker serialized script URL defined as part\n  ServiceWorkerRegistration. Must be on the same origin as the\n  that registers the ServiceWorker.\n\n  `someURL = ServiceWorker.scriptURL`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL`"}, :name web.ServiceWorker/set-script-url!, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the ServiceWorker serialized script URL defined as part\n  ServiceWorkerRegistration. Must be on the same origin as the\n  that registers the ServiceWorker.\n\n  `someURL = ServiceWorker.scriptURL`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/scriptURL`"}, state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 86, :column 7, :end-line 86, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The state read-only property of the `web.ServiceWorker` interface\n  a string representing the current state of the service worker.\n  can be one of the following values: installing, installed, activating,\n  or redundant.\n\n  `someURL = ServiceWorker.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state`"}, :name web.ServiceWorker/state, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The state read-only property of the `web.ServiceWorker` interface\n  a string representing the current state of the service worker.\n  can be one of the following values: installing, installed, activating,\n  or redundant.\n\n  `someURL = ServiceWorker.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state`"}, set-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ServiceWorker.cljs", :line 100, :column 7, :end-line 100, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The state read-only property of the `web.ServiceWorker` interface\n  a string representing the current state of the service worker.\n  can be one of the following values: installing, installed, activating,\n  or redundant.\n\n  `someURL = ServiceWorker.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state`"}, :name web.ServiceWorker/set-state!, :variadic false, :file "src/web/ServiceWorker.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The state read-only property of the `web.ServiceWorker` interface\n  a string representing the current state of the service worker.\n  can be one of the following values: installing, installed, activating,\n  or redundant.\n\n  `someURL = ServiceWorker.state`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ServiceWorker interface of the ServiceWorker API provides\n  reference to a service worker. Multiple browsing contexts (e.g.\n  workers, etc.) can be associated with the same service worker,\n  through a unique ServiceWorker object."}