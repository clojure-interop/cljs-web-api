{:rename-macros {}, :renames {}, :externs {TouchEvent {}}, :use-macros {}, :excludes #{}, :name web.TouchEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {alt-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 18, :column 7, :end-line 18, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the alt (Alternate)\n  is enabled when the touch event is created. If the alt key is\n  the attribute's value is true. Otherwise, it is false.\n\n  `var altEnabled = touchEvent.altKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey`"}, :name web.TouchEvent/alt-key, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the alt (Alternate)\n  is enabled when the touch event is created. If the alt key is\n  the attribute's value is true. Otherwise, it is false.\n\n  `var altEnabled = touchEvent.altKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey`"}, changed-touches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 44, :column 7, :end-line 44, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The changedTouches read-only property is a `web.TouchList` whose\n  points (`web.Touch` objects) varies depending on the event type,\n  follows:\n\n  `var changes = touchEvent.changedTouches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches`"}, :name web.TouchEvent/changed-touches, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The changedTouches read-only property is a `web.TouchList` whose\n  points (`web.Touch` objects) varies depending on the event type,\n  follows:\n\n  `var changes = touchEvent.changedTouches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/changedTouches`"}, meta-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 83, :column 7, :end-line 83, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the Meta key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var metaEnabled = touchEvent.metaKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey`"}, :name web.TouchEvent/meta-key, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the Meta key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var metaEnabled = touchEvent.metaKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey`"}, ctrl-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 57, :column 7, :end-line 57, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether the control (Control)\n  is enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var ctrlEnabled = touchEvent.ctrlKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey`"}, :name web.TouchEvent/ctrl-key, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether the control (Control)\n  is enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var ctrlEnabled = touchEvent.ctrlKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey`"}, set-meta-key! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 96, :column 7, :end-line 96, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the Meta key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var metaEnabled = touchEvent.metaKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey`"}, :name web.TouchEvent/set-meta-key!, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the Meta key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var metaEnabled = touchEvent.metaKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/metaKey`"}, set-alt-key! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 31, :column 7, :end-line 31, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the alt (Alternate)\n  is enabled when the touch event is created. If the alt key is\n  the attribute's value is true. Otherwise, it is false.\n\n  `var altEnabled = touchEvent.altKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey`"}, :name web.TouchEvent/set-alt-key!, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the alt (Alternate)\n  is enabled when the touch event is created. If the alt key is\n  the attribute's value is true. Otherwise, it is false.\n\n  `var altEnabled = touchEvent.altKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/altKey`"}, set-shift-key! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 122, :column 7, :end-line 122, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the shift key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var shiftEnabled = touchEvent.shiftKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey`"}, :name web.TouchEvent/set-shift-key!, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the shift key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var shiftEnabled = touchEvent.shiftKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey`"}, touches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 149, :column 7, :end-line 149, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  touches is a read-only `web.TouchList` listing all the `web.Touch`\n  for touch points that are currently in contact with the touch\n  regardless of whether or not they've changed or what their target\n  was at touchstart time.\n\n  `var touches = touchEvent.touches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches`"}, :name web.TouchEvent/touches, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  touches is a read-only `web.TouchList` listing all the `web.Touch`\n  for touch points that are currently in contact with the touch\n  regardless of whether or not they've changed or what their target\n  was at touchstart time.\n\n  `var touches = touchEvent.touches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/touches`"}, target-touches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 135, :column 7, :end-line 135, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The targetTouches read-only property is a `web.TouchList` listing\n  the `web.Touch` objects for touch points that are still in contact\n  the touch surface and whose touchstart event occurred inside\n  same target `web.element` as the current target element.\n\n  `var touches = touchEvent.targetTouches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches`"}, :name web.TouchEvent/target-touches, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The targetTouches read-only property is a `web.TouchList` listing\n  the `web.Touch` objects for touch points that are still in contact\n  the touch surface and whose touchstart event occurred inside\n  same target `web.element` as the current target element.\n\n  `var touches = touchEvent.targetTouches;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/targetTouches`"}, shift-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 109, :column 7, :end-line 109, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the shift key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var shiftEnabled = touchEvent.shiftKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey`"}, :name web.TouchEvent/shift-key, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.Boolean` value indicating whether or not the shift key\n  enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var shiftEnabled = touchEvent.shiftKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/shiftKey`"}, constructor {:name web.TouchEvent/constructor, :file "src/web/TouchEvent.cljs", :line 10, :column 1, :end-line 10, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 10, :column 6, :end-line 10, :end-column 17}, :doc "Constructor.\n\n  The TouchEvent() constructor creates a new `web.TouchEvent`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/TouchEvent`", :tag js}, set-ctrl-key! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TouchEvent.cljs", :line 70, :column 7, :end-line 70, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether the control (Control)\n  is enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var ctrlEnabled = touchEvent.ctrlKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey`"}, :name web.TouchEvent/set-ctrl-key!, :variadic false, :file "src/web/TouchEvent.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.Boolean` value indicating whether the control (Control)\n  is enabled when the touch event is created. If this key is enabled,\n  attribute's value is true. Otherwise, it is false.\n\n  `var ctrlEnabled = touchEvent.ctrlKey;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent/ctrlKey`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The TouchEvent interface represents an `web.UIEvent` which is\n  when the state of contacts with a touch-sensitive surface changes.\n  surface can be a touch screen or trackpad, for example. The event\n  describe one or more points of contact with the screen and includes\n  for detecting movement, addition and removal of contact points,\n  so forth."}