{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.WindowOrWorkerGlobalScope, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-origin! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 195, :column 7, :end-line 195, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, :name web.WindowOrWorkerGlobalScope/set-origin!, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, fetch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 76, :column 7, :end-line 76, :end-column 12, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, :name web.WindowOrWorkerGlobalScope/fetch, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 12, :method-params ([this resource init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, is-secure-context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 157, :column 7, :end-line 157, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, :name web.WindowOrWorkerGlobalScope/is-secure-context, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, caches {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 130, :column 7, :end-line 130, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The caches read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the `web.CacheStorage` object associated with the current\n  This object enables functionality such as storing assets for\n  use, and generating custom responses to requests.\n\n  `var myCacheStorage = self.caches; // or just caches`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches`"}, :name web.WindowOrWorkerGlobalScope/caches, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The caches read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the `web.CacheStorage` object associated with the current\n  This object enables functionality such as storing assets for\n  use, and generating custom responses to requests.\n\n  `var myCacheStorage = self.caches; // or just caches`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/caches`"}, clear-interval {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 35, :column 7, :end-line 35, :end-column 21, :arglists (quote ([this interval-id])), :doc "Method.\n\n  The clearInterval() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timed, repeating action which was previously established\n  a call to `web.setInterval()`.\n\n  `scope.clearInterval(intervalID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval`"}, :name web.WindowOrWorkerGlobalScope/clear-interval, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 21, :method-params ([this interval-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this interval-id])), :doc "Method.\n\n  The clearInterval() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timed, repeating action which was previously established\n  a call to `web.setInterval()`.\n\n  `scope.clearInterval(intervalID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval`"}, btoa {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 22, :column 7, :end-line 22, :end-column 11, :arglists (quote ([this string-to-encode])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.btoa() method creates a base-64\n  ASCII string from a binary string (i.e., a `web.String` object\n  which each character in the string is treated as a byte of binary\n\n  `var encodedData = scope.btoa(stringToEncode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa`"}, :name web.WindowOrWorkerGlobalScope/btoa, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 11, :method-params ([this string-to-encode]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this string-to-encode])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.btoa() method creates a base-64\n  ASCII string from a binary string (i.e., a `web.String` object\n  which each character in the string is treated as a byte of binary\n\n  `var encodedData = scope.btoa(stringToEncode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/btoa`"}, clear-timeout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 48, :column 7, :end-line 48, :end-column 20, :arglists (quote ([this timeout-id])), :doc "Method.\n\n  The clearTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timeout previously established by calling `web.setTimeout()`.\n\n  `scope.clearTimeout(timeoutID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout`"}, :name web.WindowOrWorkerGlobalScope/clear-timeout, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 20, :method-params ([this timeout-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this timeout-id])), :doc "Method.\n\n  The clearTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  cancels a timeout previously established by calling `web.setTimeout()`.\n\n  `scope.clearTimeout(timeoutID)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout`"}, atob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([this encoded-data])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.atob() function decodes a string\n  data which has been encoded using base-64 encoding. You can use\n  `web.btoa()` method to encode and transmit data which may otherwise\n  communication problems, then transmit it and use the atob() method\n  decode the data again. For example, you can encode, transmit,\n  decode control characters such as ASCII values 0 through 31.\n\n  `var decodedData = scope.atob(encodedData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob`"}, :name web.WindowOrWorkerGlobalScope/atob, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 11, :method-params ([this encoded-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this encoded-data])), :doc "Method.\n\n  The WindowOrWorkerGlobalScope.atob() function decodes a string\n  data which has been encoded using base-64 encoding. You can use\n  `web.btoa()` method to encode and transmit data which may otherwise\n  communication problems, then transmit it and use the atob() method\n  decode the data again. For example, you can encode, transmit,\n  decode control characters such as ASCII values 0 through 31.\n\n  `var decodedData = scope.atob(encodedData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/atob`"}, create-image-bitmap {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 60, :column 7, :end-line 60, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The createImageBitmap() method creates a bitmap from a given\n  optionally cropped to contain only a portion of that source.\n  method exists on the global scope in both windows and workers.\n  accepts a variety of different image sources, and returns a `web.Promise`\n  resolves to an `web.ImageBitmap`.\n\n  `createImageBitmap(image[, options]).then(function(response) { ... });\n  createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WindowOrWorkerGlobalScope/create-image-bitmap, :variadic true, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createImageBitmap() method creates a bitmap from a given\n  optionally cropped to contain only a portion of that source.\n  method exists on the global scope in both windows and workers.\n  accepts a variety of different image sources, and returns a `web.Promise`\n  resolves to an `web.ImageBitmap`.\n\n  `createImageBitmap(image[, options]).then(function(response) { ... });\n  createImageBitmap(image, sx, sy, sw, sh[, options]).then(function(response) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/createImageBitmap`"}, set-interval {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 101, :column 7, :end-line 101, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The setInterval() method, offered on the `web.Window` and `web.Worker`\n  repeatedly calls a function or executes a code snippet, with\n  fixed time delay between each call.\n\n  `var intervalID = scope.setInterval(func, delay[, param1, param2, ...]);\n  var intervalID = scope.setInterval(code, delay);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WindowOrWorkerGlobalScope/set-interval, :variadic true, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setInterval() method, offered on the `web.Window` and `web.Worker`\n  repeatedly calls a function or executes a code snippet, with\n  fixed time delay between each call.\n\n  `var intervalID = scope.setInterval(func, delay[, param1, param2, ...]);\n  var intervalID = scope.setInterval(code, delay);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval`"}, queue-microtask {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 89, :column 7, :end-line 89, :end-column 22, :arglists (quote ([this function])), :doc "Method.\n\n  The queueMicrotask() method of the `web.WindowOrWorkerGlobalScope`\n  queues a microtask.\n\n  `scope.queueMicrotask(function);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask`"}, :name web.WindowOrWorkerGlobalScope/queue-microtask, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 22, :method-params ([this function]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this function])), :doc "Method.\n\n  The queueMicrotask() method of the `web.WindowOrWorkerGlobalScope`\n  queues a microtask.\n\n  `scope.queueMicrotask(function);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/queueMicrotask`"}, set-timeout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 115, :column 7, :end-line 115, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The setTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  (and successor to Window.setTimeout()) sets a timer which executes\n  function or specified piece of code once the timer expires.\n\n  `var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);\n  var timeoutID = scope.setTimeout(function[, delay]);\n  var timeoutID = scope.setTimeout(code[, delay]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WindowOrWorkerGlobalScope/set-timeout, :variadic true, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setTimeout() method of the `web.WindowOrWorkerGlobalScope`\n  (and successor to Window.setTimeout()) sets a timer which executes\n  function or specified piece of code once the timer expires.\n\n  `var timeoutID = scope.setTimeout(function[, delay, arg1, arg2, ...]);\n  var timeoutID = scope.setTimeout(function[, delay]);\n  var timeoutID = scope.setTimeout(code[, delay]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout`"}, origin {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 183, :column 7, :end-line 183, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, :name web.WindowOrWorkerGlobalScope/origin, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, set-is-secure-context! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 170, :column 7, :end-line 170, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, :name web.WindowOrWorkerGlobalScope/set-is-secure-context!, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isSecureContext read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns a boolean indicating whether the current context is secure\n  or not (false).\n\n  `var isItSecure = self.isSecureContext; // or just isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/isSecureContext`"}, indexed-db {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowOrWorkerGlobalScope.cljs", :line 144, :column 7, :end-line 144, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The indexedDB read-only property of the `web.WindowOrWorkerGlobalScope`\n  provides a mechanism for applications to asynchronously access\n  capabilities of indexed databases.\n\n  `var IDBFactory = self.indexedDB;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB`"}, :name web.WindowOrWorkerGlobalScope/indexed-db, :variadic false, :file "src/web/WindowOrWorkerGlobalScope.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The indexedDB read-only property of the `web.WindowOrWorkerGlobalScope`\n  provides a mechanism for applications to asynchronously access\n  capabilities of indexed databases.\n\n  `var IDBFactory = self.indexedDB;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/indexedDB`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WindowOrWorkerGlobalScope mixin describes several features\n  to the `web.Window` and `web.WorkerGlobalScope` interfaces."}