{:rename-macros {}, :renames {}, :externs {ReportingObserver {}}, :use-macros {}, :excludes #{}, :name web.ReportingObserver, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ReportingObserver/constructor, :file "src/web/ReportingObserver.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReportingObserver.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The ReportingObserver() constructor of the Reporting API creates a new `web.ReportingObserver` object instance, which can be used to collect and access reports.\n\n  callback\n  A callback function that runs when the observer starts to collect reports (i.e. via `web.ReportingObserver.observe()`). The callback function is given two parameters:\n\n  reports: A sequence of `web.Report` objects representing the reports collected in the observer's report queue. This is probably the most common way to retrieve the reports.\n  observer: A reference to the same ReportingObserver object, allowing for recursive report collection, etc.\n\n\n  options Optional\n  An `web.ReportingObserverOptions` object allowing you to set the options for creating the object. The available options are:\n\n  types: An array of strings representing the types of report to be collected by this observer. Available types include deprecation, intervention, and crash (although this last type usually isn't retrievable via a ReportingObserver).\n  buffered: a boolean that defines whether the reports that were generated before the observer was able to be created should be observable (true) or not (false).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/ReportingObserver`", :tag js}, disconnect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReportingObserver.cljs", :line 27, :column 7, :end-line 27, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The disconnect() method of the `web.ReportingObserver` interface\n  a reporting observer that had previously started observing from\n  reports.\n\n  `reportingObserverInstance.disconnect()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/disconnect`"}, :name web.ReportingObserver/disconnect, :variadic false, :file "src/web/ReportingObserver.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The disconnect() method of the `web.ReportingObserver` interface\n  a reporting observer that had previously started observing from\n  reports.\n\n  `reportingObserverInstance.disconnect()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/disconnect`"}, observe {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReportingObserver.cljs", :line 40, :column 7, :end-line 40, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The observe() method of the `web.ReportingObserver` interface\n  a reporting observer to start collecting reports in its report\n\n  `reportingObserverInstance.observe()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/observe`"}, :name web.ReportingObserver/observe, :variadic false, :file "src/web/ReportingObserver.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The observe() method of the `web.ReportingObserver` interface\n  a reporting observer to start collecting reports in its report\n\n  `reportingObserverInstance.observe()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/observe`"}, take-records {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReportingObserver.cljs", :line 52, :column 7, :end-line 52, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The takeRecords() method of the `web.ReportingObserver` interface\n  the current list of reports contained in the observer's report\n  and empties the queue.\n\n  `reportingObserverInstance.takeRecords()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/takeRecords`"}, :name web.ReportingObserver/take-records, :variadic false, :file "src/web/ReportingObserver.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The takeRecords() method of the `web.ReportingObserver` interface\n  the current list of reports contained in the observer's report\n  and empties the queue.\n\n  `reportingObserverInstance.takeRecords()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReportingObserver/takeRecords`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ReportingObserver interface of the Reporting API allows you\n  collect and access reports."}