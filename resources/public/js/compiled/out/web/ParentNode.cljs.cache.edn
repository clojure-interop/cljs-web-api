{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.ParentNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-last-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 159, :column 7, :end-line 159, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.ParentNode/set-last-element-child!, :variadic false, :file "src/web/ParentNode.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, first-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 123, :column 7, :end-line 123, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.ParentNode/first-element-child, :variadic false, :file "src/web/ParentNode.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, children {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 97, :column 7, :end-line 97, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.ParentNode/children, :variadic false, :file "src/web/ParentNode.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, child-element-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 61, :column 7, :end-line 61, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.ParentNode/child-element-count, :variadic false, :file "src/web/ParentNode.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, query-selector {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 33, :column 7, :end-line 33, :end-column 21, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelector() method\n  returning an `web.Element` representing the first element matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `element = parentNode.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelector`"}, :name web.ParentNode/query-selector, :variadic false, :file "src/web/ParentNode.cljs", :end-column 21, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelector() method\n  returning an `web.Element` representing the first element matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `element = parentNode.querySelector(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelector`"}, set-children! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 110, :column 7, :end-line 110, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.ParentNode/set-children!, :variadic false, :file "src/web/ParentNode.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, set-child-element-count! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 79, :column 7, :end-line 79, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, :name web.ParentNode/set-child-element-count!, :variadic false, :file "src/web/ParentNode.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.childElementCount read-only property returns an\n  long representing the number of child elements of the given element.\n\n  `var count = node.childElementCount;\n\n\n  count\n  The return value, which is an unsigned long (simply an integer) type.\n  node\n  An object representing a `web.Document`, `web.DocumentFragment`, or `web.Element`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/childElementCount`"}, prepend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 20, :column 7, :end-line 20, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ParentNode/prepend, :variadic true, :file "src/web/ParentNode.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.prepend() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects before the first child of the `web.ParentNode`.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `ParentNode.prepend(...nodesToPrepend);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/prepend`"}, append {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 6, :column 7, :end-line 6, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.ParentNode/append, :variadic true, :file "src/web/ParentNode.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ParentNode.append() method inserts a set of `web.Node` objects\n  `dom.DOMString` objects after the last child of the ParentNode.\n  objects are inserted as equivalent `web.Text` nodes.\n\n  `[Throws, Unscopable]\n  void ParentNode.append((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/append`"}, query-selector-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 47, :column 7, :end-line 47, :end-column 25, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelectorAll() method\n  returning a `web.NodeList` representing a list of elements matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `elementList = parentNode.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll`"}, :name web.ParentNode/query-selector-all, :variadic false, :file "src/web/ParentNode.cljs", :end-column 25, :method-params ([this selectors]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this selectors])), :doc "Method.\n\n  The `web.ParentNode` mixin defines the querySelectorAll() method\n  returning a `web.NodeList` representing a list of elements matching\n  specified group of selectors which are descendants of the object\n  which the method was called.\n\n  `elementList = parentNode.querySelectorAll(selectors);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/querySelectorAll`"}, set-first-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 135, :column 7, :end-line 135, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.ParentNode/set-first-element-child!, :variadic false, :file "src/web/ParentNode.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, last-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ParentNode.cljs", :line 147, :column 7, :end-line 147, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.ParentNode/last-element-child, :variadic false, :file "src/web/ParentNode.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ParentNode mixin contains methods and properties that are\n  to all types of `web.Node` objects that can have children."}