{:rename-macros {}, :renames {}, :externs {WebSocket {}}, :use-macros {}, :excludes #{}, :name web.WebSocket, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-buffered-amount! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 88, :column 7, :end-line 88, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.bufferedAmount read-only property returns the number\n  bytes of data that have been queued using calls to send() but\n  yet transmitted to the network. This value resets to zero once\n  queued data has been sent. This value does not reset to zero\n  the connection is closed; if you keep calling send(), this will\n  to climb.\n\n  `var bufferedAmount = aWebSocket.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount`"}, :name web.WebSocket/set-buffered-amount!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.bufferedAmount read-only property returns the number\n  bytes of data that have been queued using calls to send() but\n  yet transmitted to the network. This value resets to zero once\n  queued data has been sent. This value does not reset to zero\n  the connection is closed; if you keep calling send(), this will\n  to climb.\n\n  `var bufferedAmount = aWebSocket.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 145, :column 7, :end-line 145, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onclose property is an `web.EventHandler` that\n  called when the WebSocket connection's `web.readyState` changes\n  `web.CLOSED`. It is called with a `web.CloseEvent`.\n\n  `aWebSocket.onclose = function(event) {\n  console.log(\\\"WebSocket is closed now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose`"}, :name web.WebSocket/set-onclose!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onclose property is an `web.EventHandler` that\n  called when the WebSocket connection's `web.readyState` changes\n  `web.CLOSED`. It is called with a `web.CloseEvent`.\n\n  `aWebSocket.onclose = function(event) {\n  console.log(\\\"WebSocket is closed now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose`"}, binary-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 48, :column 7, :end-line 48, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.binaryType property returns the type of binary\n  being transmitted by the connection.\n\n  `var binaryType = aWebSocket.binaryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType`"}, :name web.WebSocket/binary-type, :variadic false, :file "src/web/WebSocket.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.binaryType property returns the type of binary\n  being transmitted by the connection.\n\n  `var binaryType = aWebSocket.binaryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 274, :column 7, :end-line 274, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.readyState read-only property returns the current\n  of the `web.WebSocket` connection.\n\n  `var readyState = aWebSocket.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState`"}, :name web.WebSocket/ready-state, :variadic false, :file "src/web/WebSocket.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 274, :end-line 274, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.readyState read-only property returns the current\n  of the `web.WebSocket` connection.\n\n  `var readyState = aWebSocket.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 172, :column 7, :end-line 172, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.WebSocket` interface's onerror event handler property\n  a function which gets called when an error occurs on the WebSocket.\n\n  `webSocket.onerror = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror`"}, :name web.WebSocket/set-onerror!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 172, :end-line 172, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.WebSocket` interface's onerror event handler property\n  a function which gets called when an error occurs on the WebSocket.\n\n  `webSocket.onerror = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror`"}, buffered-amount {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 72, :column 7, :end-line 72, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.bufferedAmount read-only property returns the number\n  bytes of data that have been queued using calls to send() but\n  yet transmitted to the network. This value resets to zero once\n  queued data has been sent. This value does not reset to zero\n  the connection is closed; if you keep calling send(), this will\n  to climb.\n\n  `var bufferedAmount = aWebSocket.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount`"}, :name web.WebSocket/buffered-amount, :variadic false, :file "src/web/WebSocket.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.bufferedAmount read-only property returns the number\n  bytes of data that have been queued using calls to send() but\n  yet transmitted to the network. This value resets to zero once\n  queued data has been sent. This value does not reset to zero\n  the connection is closed; if you keep calling send(), this will\n  to climb.\n\n  `var bufferedAmount = aWebSocket.bufferedAmount;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/bufferedAmount`"}, protocol {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 246, :column 7, :end-line 246, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.protocol read-only property returns the name of\n  sub-protocol the server selected; this will be one of the strings\n  in the protocols parameter when creating the `web.WebSocket`\n  or the empty string if no connection is established.\n\n  `var protocol = aWebSocket.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol`"}, :name web.WebSocket/protocol, :variadic false, :file "src/web/WebSocket.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.protocol read-only property returns the name of\n  sub-protocol the server selected; this will be one of the strings\n  in the protocols parameter when creating the `web.WebSocket`\n  or the empty string if no connection is established.\n\n  `var protocol = aWebSocket.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 160, :column 7, :end-line 160, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The `web.WebSocket` interface's onerror event handler property\n  a function which gets called when an error occurs on the WebSocket.\n\n  `webSocket.onerror = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror`"}, :name web.WebSocket/onerror, :variadic false, :file "src/web/WebSocket.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.WebSocket` interface's onerror event handler property\n  a function which gets called when an error occurs on the WebSocket.\n\n  `webSocket.onerror = eventHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 184, :column 7, :end-line 184, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onmessage property is an `web.EventHandler` that\n  called when a message is received from the server. It is called\n  a `web.MessageEvent`.\n\n  `aWebSocket.onmessage = function(event) {\n  console.debug(\\\"WebSocket message received:\\\", event);\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage`"}, :name web.WebSocket/onmessage, :variadic false, :file "src/web/WebSocket.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 184, :end-line 184, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onmessage property is an `web.EventHandler` that\n  called when a message is received from the server. It is called\n  a `web.MessageEvent`.\n\n  `aWebSocket.onmessage = function(event) {\n  console.debug(\\\"WebSocket message received:\\\", event);\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage`"}, set-extensions! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 117, :column 7, :end-line 117, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.extensions read-only property returns the extensions\n  by the server. This is currently only the empty string or a list\n  extensions as negotiated by the connection.\n\n  `var extensions = aWebSocket.extensions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions`"}, :name web.WebSocket/set-extensions!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.extensions read-only property returns the extensions\n  by the server. This is currently only the empty string or a list\n  extensions as negotiated by the connection.\n\n  `var extensions = aWebSocket.extensions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 199, :column 7, :end-line 199, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onmessage property is an `web.EventHandler` that\n  called when a message is received from the server. It is called\n  a `web.MessageEvent`.\n\n  `aWebSocket.onmessage = function(event) {\n  console.debug(\\\"WebSocket message received:\\\", event);\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage`"}, :name web.WebSocket/set-onmessage!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onmessage property is an `web.EventHandler` that\n  called when a message is received from the server. It is called\n  a `web.MessageEvent`.\n\n  `aWebSocket.onmessage = function(event) {\n  console.debug(\\\"WebSocket message received:\\\", event);\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onmessage`"}, onopen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 214, :column 7, :end-line 214, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onopen property is an `web.EventHandler` that is\n  when the `web.WebSocket` connection's `web.readyState` changes\n  `web.OPEN`; this indicates that the connection is ready to send\n  receive data. It is called with an `web.Event`.\n\n  `aWebSocket.onopen = function(event) {\n  console.log(\\\"WebSocket is open now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen`"}, :name web.WebSocket/onopen, :variadic false, :file "src/web/WebSocket.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onopen property is an `web.EventHandler` that is\n  when the `web.WebSocket` connection's `web.readyState` changes\n  `web.OPEN`; this indicates that the connection is ready to send\n  receive data. It is called with an `web.Event`.\n\n  `aWebSocket.onopen = function(event) {\n  console.log(\\\"WebSocket is open now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 20, :column 7, :end-line 20, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The WebSocket.close() method closes the `web.WebSocket` connection\n  connection attempt, if any. If the connection is already CLOSED,\n  method does nothing.\n\n  `WebSocket.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close`"}, :name web.WebSocket/close, :variadic false, :file "src/web/WebSocket.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The WebSocket.close() method closes the `web.WebSocket` connection\n  connection attempt, if any. If the connection is already CLOSED,\n  method does nothing.\n\n  `WebSocket.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close`"}, set-binary-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 60, :column 7, :end-line 60, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.binaryType property returns the type of binary\n  being transmitted by the connection.\n\n  `var binaryType = aWebSocket.binaryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType`"}, :name web.WebSocket/set-binary-type!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.binaryType property returns the type of binary\n  being transmitted by the connection.\n\n  `var binaryType = aWebSocket.binaryType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/binaryType`"}, set-ready-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 286, :column 7, :end-line 286, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.readyState read-only property returns the current\n  of the `web.WebSocket` connection.\n\n  `var readyState = aWebSocket.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState`"}, :name web.WebSocket/set-ready-state!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.readyState read-only property returns the current\n  of the `web.WebSocket` connection.\n\n  `var readyState = aWebSocket.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/readyState`"}, onclose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 130, :column 7, :end-line 130, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onclose property is an `web.EventHandler` that\n  called when the WebSocket connection's `web.readyState` changes\n  `web.CLOSED`. It is called with a `web.CloseEvent`.\n\n  `aWebSocket.onclose = function(event) {\n  console.log(\\\"WebSocket is closed now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose`"}, :name web.WebSocket/onclose, :variadic false, :file "src/web/WebSocket.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.onclose property is an `web.EventHandler` that\n  called when the WebSocket connection's `web.readyState` changes\n  `web.CLOSED`. It is called with a `web.CloseEvent`.\n\n  `aWebSocket.onclose = function(event) {\n  console.log(\\\"WebSocket is closed now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onclose`"}, extensions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 104, :column 7, :end-line 104, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.extensions read-only property returns the extensions\n  by the server. This is currently only the empty string or a list\n  extensions as negotiated by the connection.\n\n  `var extensions = aWebSocket.extensions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions`"}, :name web.WebSocket/extensions, :variadic false, :file "src/web/WebSocket.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.extensions read-only property returns the extensions\n  by the server. This is currently only the empty string or a list\n  extensions as negotiated by the connection.\n\n  `var extensions = aWebSocket.extensions;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/extensions`"}, set-onopen! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 230, :column 7, :end-line 230, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onopen property is an `web.EventHandler` that is\n  when the `web.WebSocket` connection's `web.readyState` changes\n  `web.OPEN`; this indicates that the connection is ready to send\n  receive data. It is called with an `web.Event`.\n\n  `aWebSocket.onopen = function(event) {\n  console.log(\\\"WebSocket is open now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen`"}, :name web.WebSocket/set-onopen!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.onopen property is an `web.EventHandler` that is\n  when the `web.WebSocket` connection's `web.readyState` changes\n  `web.OPEN`; this indicates that the connection is ready to send\n  receive data. It is called with an `web.Event`.\n\n  `aWebSocket.onopen = function(event) {\n  console.log(\\\"WebSocket is open now.\\\");\n  };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/onopen`"}, constructor {:name web.WebSocket/constructor, :file "src/web/WebSocket.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The WebSocket() constructor returns a new `web.WebSocket` object.\n\n  url\n  The URL to which to connect; this should be the URL to which the WebSocket server will respond.\n  protocols Optional\n  Either a single protocol string or an array of protocol strings. These strings are used to indicate sub-protocols, so that a single server can implement multiple WebSocket sub-protocols (for example, you might want one server to be able to handle different types of interactions depending on the specified protocol). If you don't specify a protocol string, an empty string is assumed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/WebSocket`", :tag js}, send {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 33, :column 7, :end-line 33, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The WebSocket.send() method enqueues the specified data to be\n  to the server over the WebSocket connection, increasing the value\n  bufferedAmount by the number of bytes needed to contain the data.\n  the data can't be sent (for example, because it needs to be buffered\n  the buffer is full), the socket is closed automatically.\n\n  `WebSocket.send(\\\"Hello server!\\\");`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WebSocket/send, :variadic true, :file "src/web/WebSocket.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The WebSocket.send() method enqueues the specified data to be\n  to the server over the WebSocket connection, increasing the value\n  bufferedAmount by the number of bytes needed to contain the data.\n  the data can't be sent (for example, because it needs to be buffered\n  the buffer is full), the socket is closed automatically.\n\n  `WebSocket.send(\\\"Hello server!\\\");`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send`"}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 298, :column 7, :end-line 298, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.url read-only property returns the absolute URL\n  the `web.WebSocket` as resolved by the constructor.\n\n  `var url = aWebSocket.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url`"}, :name web.WebSocket/url, :variadic false, :file "src/web/WebSocket.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WebSocket.url read-only property returns the absolute URL\n  the `web.WebSocket` as resolved by the constructor.\n\n  `var url = aWebSocket.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url`"}, set-protocol! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 260, :column 7, :end-line 260, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.protocol read-only property returns the name of\n  sub-protocol the server selected; this will be one of the strings\n  in the protocols parameter when creating the `web.WebSocket`\n  or the empty string if no connection is established.\n\n  `var protocol = aWebSocket.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol`"}, :name web.WebSocket/set-protocol!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.protocol read-only property returns the name of\n  sub-protocol the server selected; this will be one of the strings\n  in the protocols parameter when creating the `web.WebSocket`\n  or the empty string if no connection is established.\n\n  `var protocol = aWebSocket.protocol;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/protocol`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WebSocket.cljs", :line 310, :column 7, :end-line 310, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.url read-only property returns the absolute URL\n  the `web.WebSocket` as resolved by the constructor.\n\n  `var url = aWebSocket.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url`"}, :name web.WebSocket/set-url!, :variadic false, :file "src/web/WebSocket.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WebSocket.url read-only property returns the absolute URL\n  the `web.WebSocket` as resolved by the constructor.\n\n  `var url = aWebSocket.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/url`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WebSocket object provides the API for creating and managing\n  WebSocket connection to a server, as well as for sending and\n  data on the connection."}