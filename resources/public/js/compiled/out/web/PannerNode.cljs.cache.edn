{:rename-macros {}, :renames {}, :externs {PannerNode {}}, :use-macros {}, :excludes #{}, :name web.PannerNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-position-z! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 395, :column 7, :end-line 395, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionZ = PannerNode.positionZ;\n\n  PannerNode.positionZ.value = newPositionZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ`"}, :name web.PannerNode/set-position-z!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 395, :end-line 395, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionZ = PannerNode.positionZ;\n\n  PannerNode.positionZ.value = newPositionZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ`"}, set-orientation-z! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 283, :column 7, :end-line 283, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationZ = PannerNode.orientationZ;\n\n  PannerNode.orientationZ.value = newOrientationZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ`"}, :name web.PannerNode/set-orientation-z!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 283, :end-line 283, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationZ = PannerNode.orientationZ;\n\n  PannerNode.orientationZ.value = newOrientationZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ`"}, set-orientation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 38, :column 7, :end-line 38, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  Void.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setOrientation(1,0,0);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PannerNode/set-orientation, :variadic true, :file "src/web/PannerNode.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Void.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setOrientation(1,0,0);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setOrientation`"}, set-distance-model! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 174, :column 7, :end-line 174, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  A enum — see DistanceModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.distanceModel = 'inverse';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel`"}, :name web.PannerNode/set-distance-model!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A enum — see DistanceModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.distanceModel = 'inverse';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel`"}, set-cone-outer-gain! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 146, :column 7, :end-line 146, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The coneOuterGain property of the `web.PannerNode` interface\n  a double value, describing the amount of volume reduction outside\n  cone, defined by the `web.coneOuterAngle` attribute.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterGain = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain`"}, :name web.PannerNode/set-cone-outer-gain!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The coneOuterGain property of the `web.PannerNode` interface\n  a double value, describing the amount of volume reduction outside\n  cone, defined by the `web.coneOuterAngle` attribute.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterGain = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain`"}, set-rolloff-factor! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 451, :column 7, :end-line 451, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  A number whose range depends on the `web.distanceModel` of the\n  as follows (negative values are not allowed):\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.rolloffFactor = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor`"}, :name web.PannerNode/set-rolloff-factor!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A number whose range depends on the `web.distanceModel` of the\n  as follows (negative values are not allowed):\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.rolloffFactor = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor`"}, set-cone-inner-angle! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 92, :column 7, :end-line 92, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneInnerAngle = 360;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle`"}, :name web.PannerNode/set-cone-inner-angle!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneInnerAngle = 360;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle`"}, set-velocity {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The setVelocity() method of the `web.PannerNode` Interface defines\n  velocity vector of the audio source — how fast it is moving and\n  what direction.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setVelocity(0,0,17);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setVelocity`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PannerNode/set-velocity, :variadic true, :file "src/web/PannerNode.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setVelocity() method of the `web.PannerNode` Interface defines\n  velocity vector of the audio source — how fast it is moving and\n  what direction.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setVelocity(0,0,17);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setVelocity`"}, distance-model {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 161, :column 7, :end-line 161, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  A enum — see DistanceModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.distanceModel = 'inverse';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel`"}, :name web.PannerNode/distance-model, :variadic false, :file "src/web/PannerNode.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A enum — see DistanceModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.distanceModel = 'inverse';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/distanceModel`"}, orientation-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 213, :column 7, :end-line 213, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X component of the direction\n  which the audio source is facing, in 3D Cartesian coordinate\n\n  `var orientationX = PannerNode.orientationX;\n\n  PannerNode.orientationX.value = newOrientationX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX`"}, :name web.PannerNode/orientation-x, :variadic false, :file "src/web/PannerNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X component of the direction\n  which the audio source is facing, in 3D Cartesian coordinate\n\n  `var orientationX = PannerNode.orientationX;\n\n  PannerNode.orientationX.value = newOrientationX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX`"}, ref-distance {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 409, :column 7, :end-line 409, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  A non-negative number. If the value is set to less than 0, a\n  is thrown.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.refDistance = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance`"}, :name web.PannerNode/ref-distance, :variadic false, :file "src/web/PannerNode.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A non-negative number. If the value is set to less than 0, a\n  is thrown.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.refDistance = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance`"}, set-position-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 367, :column 7, :end-line 367, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionY = PannerNode.positionY;\n\n  PannerNode.positionY.value = newPositionY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY`"}, :name web.PannerNode/set-position-y!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 367, :end-line 367, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionY = PannerNode.positionY;\n\n  PannerNode.positionY.value = newPositionY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY`"}, set-position {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 51, :column 7, :end-line 51, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  Void.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setPosition(0,0,0);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PannerNode/set-position, :variadic true, :file "src/web/PannerNode.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Void.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.setPosition(0,0,0);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/setPosition`"}, cone-inner-angle {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 79, :column 7, :end-line 79, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneInnerAngle = 360;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle`"}, :name web.PannerNode/cone-inner-angle, :variadic false, :file "src/web/PannerNode.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneInnerAngle = 360;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneInnerAngle`"}, panning-model {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 297, :column 7, :end-line 297, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  A enum — see PanningModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.panningModel = 'HRTF';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel`"}, :name web.PannerNode/panning-model, :variadic false, :file "src/web/PannerNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 297, :end-line 297, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A enum — see PanningModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.panningModel = 'HRTF';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel`"}, orientation-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 241, :column 7, :end-line 241, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationY = PannerNode.orientationY;\n\n  PannerNode.orientationY.value = newOrientationY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY`"}, :name web.PannerNode/orientation-y, :variadic false, :file "src/web/PannerNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationY = PannerNode.orientationY;\n\n  PannerNode.orientationY.value = newOrientationY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY`"}, rolloff-factor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 437, :column 7, :end-line 437, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  A number whose range depends on the `web.distanceModel` of the\n  as follows (negative values are not allowed):\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.rolloffFactor = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor`"}, :name web.PannerNode/rolloff-factor, :variadic false, :file "src/web/PannerNode.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A number whose range depends on the `web.distanceModel` of the\n  as follows (negative values are not allowed):\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.rolloffFactor = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/rolloffFactor`"}, set-max-distance! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 200, :column 7, :end-line 200, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  A double. The default is 10000, and non-positive values are not\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.maxDistance = 10000;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance`"}, :name web.PannerNode/set-max-distance!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A double. The default is 10000, and non-positive values are not\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.maxDistance = 10000;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance`"}, orientation-z {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 269, :column 7, :end-line 269, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationZ = PannerNode.orientationZ;\n\n  PannerNode.orientationZ.value = newOrientationZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ`"}, :name web.PannerNode/orientation-z, :variadic false, :file "src/web/PannerNode.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationZ = PannerNode.orientationZ;\n\n  PannerNode.orientationZ.value = newOrientationZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationZ`"}, position-z {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 381, :column 7, :end-line 381, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionZ = PannerNode.positionZ;\n\n  PannerNode.positionZ.value = newPositionZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ`"}, :name web.PannerNode/position-z, :variadic false, :file "src/web/PannerNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Z coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionZ = PannerNode.positionZ;\n\n  PannerNode.positionZ.value = newPositionZ;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionZ`"}, position-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 353, :column 7, :end-line 353, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionY = PannerNode.positionY;\n\n  PannerNode.positionY.value = newPositionY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY`"}, :name web.PannerNode/position-y, :variadic false, :file "src/web/PannerNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 353, :end-line 353, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y coordinate of the\n  source's position, in 3D Cartesian coordinates.\n\n  `var positionY = PannerNode.positionY;\n\n  PannerNode.positionY.value = newPositionY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionY`"}, set-panning-model! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 310, :column 7, :end-line 310, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  A enum — see PanningModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.panningModel = 'HRTF';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel`"}, :name web.PannerNode/set-panning-model!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A enum — see PanningModelType.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.panningModel = 'HRTF';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/panningModel`"}, set-orientation-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 255, :column 7, :end-line 255, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationY = PannerNode.orientationY;\n\n  PannerNode.orientationY.value = newOrientationY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY`"}, :name web.PannerNode/set-orientation-y!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the Y component of the direction\n  audio source is facing, in 3D Cartesian coordinate space.\n\n  `var orientationY = PannerNode.orientationY;\n\n  PannerNode.orientationY.value = newOrientationY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationY`"}, set-orientation-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 227, :column 7, :end-line 227, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X component of the direction\n  which the audio source is facing, in 3D Cartesian coordinate\n\n  `var orientationX = PannerNode.orientationX;\n\n  PannerNode.orientationX.value = newOrientationX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX`"}, :name web.PannerNode/set-orientation-x!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X component of the direction\n  which the audio source is facing, in 3D Cartesian coordinate\n\n  `var orientationX = PannerNode.orientationX;\n\n  PannerNode.orientationX.value = newOrientationX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/orientationX`"}, position-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 323, :column 7, :end-line 323, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X coordinate of the\n  source's position, in 3D Cartesian coordinates. The default value\n  0.\n\n  `var positionX = PannerNode.positionX;\n\n  PannerNode.positionX.value = newPositionX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX`"}, :name web.PannerNode/position-x, :variadic false, :file "src/web/PannerNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X coordinate of the\n  source's position, in 3D Cartesian coordinates. The default value\n  0.\n\n  `var positionX = PannerNode.positionX;\n\n  PannerNode.positionX.value = newPositionX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX`"}, cone-outer-gain {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 131, :column 7, :end-line 131, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The coneOuterGain property of the `web.PannerNode` interface\n  a double value, describing the amount of volume reduction outside\n  cone, defined by the `web.coneOuterAngle` attribute.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterGain = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain`"}, :name web.PannerNode/cone-outer-gain, :variadic false, :file "src/web/PannerNode.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The coneOuterGain property of the `web.PannerNode` interface\n  a double value, describing the amount of volume reduction outside\n  cone, defined by the `web.coneOuterAngle` attribute.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterGain = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterGain`"}, cone-outer-angle {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 105, :column 7, :end-line 105, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterAngle = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle`"}, :name web.PannerNode/cone-outer-angle, :variadic false, :file "src/web/PannerNode.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterAngle = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle`"}, set-position-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 338, :column 7, :end-line 338, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X coordinate of the\n  source's position, in 3D Cartesian coordinates. The default value\n  0.\n\n  `var positionX = PannerNode.positionX;\n\n  PannerNode.positionX.value = newPositionX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX`"}, :name web.PannerNode/set-position-x!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 338, :end-line 338, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam` whose value is the X coordinate of the\n  source's position, in 3D Cartesian coordinates. The default value\n  0.\n\n  `var positionX = PannerNode.positionX;\n\n  PannerNode.positionX.value = newPositionX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/positionX`"}, set-ref-distance! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 423, :column 7, :end-line 423, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  A non-negative number. If the value is set to less than 0, a\n  is thrown.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.refDistance = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance`"}, :name web.PannerNode/set-ref-distance!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 423, :end-line 423, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A non-negative number. If the value is set to less than 0, a\n  is thrown.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.refDistance = 1;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/refDistance`"}, constructor {:name web.PannerNode/constructor, :file "src/web/PannerNode.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The PannerNode() constructor of the Web Audio API creates a new `web.PannerNode` object instance.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  \\tcontext\n  \\tA `web.BaseAudioContext` representing the audio context you want the node to be associated with.\n  \\toptions Optional\n  \\tA PannerOptions dictionary object defining the properties you want the PannerNode to have (It also inherits the options defined in the AudioNodeOptions dictionary.):\n\n  \\t\\tpanningModel: The `web.PannerNode.panningModel` you want the `web.PannerNode` to have (the default is equalpower.)\n  \\t\\tdistanceModel: The `web.PannerNode.distanceModel` you want the `web.PannerNode` to have (the default is inverse.)\n  \\t\\tpositionX: The `web.PannerNode.positionX` you want the `web.PannerNode` to have (the default is 0.)\n  \\t\\tpositionY: The `web.PannerNode.positionY` you want the `web.PannerNode` to have (the default is 0.)\n  \\t\\tpositionZ: The `web.PannerNode.positionZ` you want the `web.PannerNode` to have (the default is 0.)\n  \\t\\torientationX: The `web.PannerNode.orientationX` you want the `web.PannerNode` to have (the default is 1.)\n  \\t\\torientationY: The `web.PannerNode.orientationY` you want the `web.PannerNode` to have (the default is 0.)\n  \\t\\torientationZ: The `web.PannerNode.orientationZ` you want the `web.PannerNode` to have (the default is 0.)\n  \\t\\trefDistance: The `web.PannerNode.refDistance` you want the `web.PannerNode` to have. The default is 1, and negative values are not allowed.\n  \\t\\tmaxDistance: The `web.PannerNode.maxDistance` you want the `web.PannerNode` to have. The default is 10000, and non-positive values are not allowed.\n  \\t\\trollOffFactor: The `web.PannerNode.rollOffFactor` you want the `web.PannerNode` to have. The default is 1, and negative values are not allowed.\n  \\t\\tconeInnerAngle: The `web.PannerNode.coneInnerAngle` you want the `web.PannerNode` to have (the default is 360.)\n  \\t\\tconeOuterAngle: The `web.PannerNode.coneOuterAngle` you want the `web.PannerNode` to have (the default is 360.)\n  \\t\\tconeOuterGain: The `web.PannerNode.coneOuterGain` you want the `web.PannerNode` to have. The default is 0, and its value can be in the range 0–1.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/PannerNode`", :tag js}, max-distance {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 187, :column 7, :end-line 187, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  A double. The default is 10000, and non-positive values are not\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.maxDistance = 10000;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance`"}, :name web.PannerNode/max-distance, :variadic false, :file "src/web/PannerNode.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 187, :end-line 187, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A double. The default is 10000, and non-positive values are not\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.maxDistance = 10000;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/maxDistance`"}, set-cone-outer-angle! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PannerNode.cljs", :line 118, :column 7, :end-line 118, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterAngle = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle`"}, :name web.PannerNode/set-cone-outer-angle!, :variadic false, :file "src/web/PannerNode.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A double.\n\n  `var audioCtx = new AudioContext();\n  var panner = audioCtx.createPanner();\n  panner.coneOuterAngle = 0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PannerNode/coneOuterAngle`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A PannerNode always has exactly one input and one output: the\n  can be mono or stereo but the output is always stereo (2 channels);\n  can't have panning effects without at least two audio channels!"}