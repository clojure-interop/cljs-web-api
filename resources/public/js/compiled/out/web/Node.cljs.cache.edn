{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Node, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {local-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 426, :column 7, :end-line 426, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Node.localName read-only property returns the local part\n  the qualified name of this node.\n\n  `name = element.localName\n\n\n  name is the local name as a string (see Notes below for details)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/localName`"}, :name web.Node/local-name, :variadic false, :file "src/web/Node.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.localName read-only property returns the local part\n  the qualified name of this node.\n\n  `name = element.localName\n\n\n  name is the local name as a string (see Notes below for details)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/localName`"}, set-text-content! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 791, :column 7, :end-line 791, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The textContent property of the `web.Node` interface represents\n  text content of the node and its descendants.\n\n  `var text = Node.textContent;\n  Node.textContent = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent`"}, :name web.Node/set-text-content!, :variadic false, :file "src/web/Node.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 791, :end-line 791, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The textContent property of the `web.Node` interface represents\n  text content of the node and its descendants.\n\n  `var text = Node.textContent;\n  Node.textContent = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent`"}, set-is-connected! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 383, :column 7, :end-line 383, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, :name web.Node/set-is-connected!, :variadic false, :file "src/web/Node.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 383, :end-line 383, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, remove-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 233, :column 7, :end-line 233, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.removeChild() method removes a child node from the DOM\n  returns the removed node.\n\n  `var oldChild = node.removeChild(child);\n  OR\n  node.removeChild(child);\n\n\n  child is the child node to be removed from the DOM.\n  node is the parent node of child.\n  oldChild holds a reference to the removed child node, i.e., oldChild === child.\n\n\n  The removed child node still exists in memory, but is no longer part of the DOM. With the first syntax form shown, you may reuse the removed node later in your code, via the oldChild object reference.\n\n  In the second syntax form, however, there is no oldChild reference kept, so assuming your code has not kept any other reference to the node elsewhere, it will immediately become unusable and irretrievable, and will usually be automatically deleted from memory after a short time.\n\n  If child is actually not a child of the element node, the method throws an exception. This will also happen if child was in fact a child of element at the time of the call, but was removed by an event handler invoked in the course of trying to remove the element (e.g., blur.)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/remove-child, :variadic true, :file "src/web/Node.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.removeChild() method removes a child node from the DOM\n  returns the removed node.\n\n  `var oldChild = node.removeChild(child);\n  OR\n  node.removeChild(child);\n\n\n  child is the child node to be removed from the DOM.\n  node is the parent node of child.\n  oldChild holds a reference to the removed child node, i.e., oldChild === child.\n\n\n  The removed child node still exists in memory, but is no longer part of the DOM. With the first syntax form shown, you may reuse the removed node later in your code, via the oldChild object reference.\n\n  In the second syntax form, however, there is no oldChild reference kept, so assuming your code has not kept any other reference to the node elsewhere, it will immediately become unusable and irretrievable, and will usually be automatically deleted from memory after a short time.\n\n  If child is actually not a child of the element node, the method throws an exception. This will also happen if child was in fact a child of element at the time of the call, but was removed by an event handler invoked in the course of trying to remove the element (e.g., blur.)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild`"}, set-node-value! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 587, :column 7, :end-line 587, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The nodeValue property of the `web.Node` interface returns or\n  the value of the current node.\n\n  `str = node.nodeValue;\n  node.nodeValue = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue`"}, :name web.Node/set-node-value!, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 587, :end-line 587, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The nodeValue property of the `web.Node` interface returns or\n  the value of the current node.\n\n  `str = node.nodeValue;\n  node.nodeValue = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue`"}, normalize {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 219, :column 7, :end-line 219, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The Node.normalize() method puts the specified node and all of\n  sub-tree into a \\\"normalized\\\" form. In a normalized sub-tree,\n  text nodes in the sub-tree are empty and there are no adjacent\n  nodes.\n\n  `element.normalize();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize`"}, :name web.Node/normalize, :variadic false, :file "src/web/Node.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Node.normalize() method puts the specified node and all of\n  sub-tree into a \\\"normalized\\\" form. In a normalized sub-tree,\n  text nodes in the sub-tree are empty and there are no adjacent\n  nodes.\n\n  `element.normalize();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize`"}, child-nodes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 318, :column 7, :end-line 318, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Node.childNodes read-only property returns a live `web.NodeList`\n  child `web.nodes` of the given element where the first child\n  is assigned index 0.\n\n  `var nodeList = elementNodeReference.childNodes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes`"}, :name web.Node/child-nodes, :variadic false, :file "src/web/Node.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.childNodes read-only property returns a live `web.NodeList`\n  child `web.nodes` of the given element where the first child\n  is assigned index 0.\n\n  `var nodeList = elementNodeReference.childNodes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes`"}, insert-before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 110, :column 7, :end-line 110, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.insertBefore() method inserts a node before the reference\n  as a child of a specified parent node. If the given child is\n  reference to an existing node in the document, insertBefore()\n  it from its current position to the new position (there is no\n  to remove the node from its parent node before appending it to\n  other node).\n\n  `var insertedNode = parentNode.insertBefore(newNode, referenceNode);\n\n\n  insertedNode The node being inserted, that is newNode\n  parentNode The parent of the newly inserted node.\n  newNode The node to be inserted.\n  referenceNode The node before which newNode is inserted.\n\n\n  If referenceNode is null, the newNode is inserted at the end of the list of child nodes.\n\n\n  referenceNode is not an optional parameter -- you must explicitly pass a Node or null. Failing to provide it or passing invalid values may behave differently in different browser versions.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/insert-before, :variadic true, :file "src/web/Node.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.insertBefore() method inserts a node before the reference\n  as a child of a specified parent node. If the given child is\n  reference to an existing node in the document, insertBefore()\n  it from its current position to the new position (there is no\n  to remove the node from its parent node before appending it to\n  other node).\n\n  `var insertedNode = parentNode.insertBefore(newNode, referenceNode);\n\n\n  insertedNode The node being inserted, that is newNode\n  parentNode The parent of the newly inserted node.\n  newNode The node to be inserted.\n  referenceNode The node before which newNode is inserted.\n\n\n  If referenceNode is null, the newNode is inserted at the end of the list of child nodes.\n\n\n  referenceNode is not an optional parameter -- you must explicitly pass a Node or null. Failing to provide it or passing invalid values may behave differently in different browser versions.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/insertBefore`"}, root-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 750, :column 7, :end-line 750, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The Node.rootNode read-only property returns a `web.Node` object\n  the topmost node in the tree, or the current node if it's the\n  node in the tree. This is found by walking backward along `web.Node.parentNode`\n  the top is reached.\n\n  `rootNode = node.rootNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode`"}, :name web.Node/root-node, :variadic false, :file "src/web/Node.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 750, :end-line 750, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.rootNode read-only property returns a `web.Node` object\n  the topmost node in the tree, or the current node if it's the\n  node in the tree. This is found by walking backward along `web.Node.parentNode`\n  the top is reached.\n\n  `rootNode = node.rootNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode`"}, set-node-principal! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 532, :column 7, :end-line 532, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.nodePrincipal read-only property returns the nsIPrincipal\n  representing current security context of the node.\n\n  `principalObj = Node.nodePrincipal`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal`"}, :name web.Node/set-node-principal!, :variadic false, :file "src/web/Node.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 532, :end-line 532, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.nodePrincipal read-only property returns the nsIPrincipal\n  representing current security context of the node.\n\n  `principalObj = Node.nodePrincipal`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal`"}, is-same-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 170, :column 7, :end-line 170, :end-column 19, :arglists (quote ([this other-node])), :doc "Method.\n\n  The Node.isSameNode() method tests whether two nodes are the\n  that is if they reference the same object.\n\n  `var isSameNode = node.isSameNode(otherNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode`"}, :name web.Node/is-same-node, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this other-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this other-node])), :doc "Method.\n\n  The Node.isSameNode() method tests whether two nodes are the\n  that is if they reference the same object.\n\n  `var isSameNode = node.isSameNode(otherNode);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isSameNode`"}, set-user-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 276, :column 7, :end-line 276, :end-column 20, :arglists (quote ([this user-key user-data handler])), :doc "Method.\n\n  The Node.setUserData() method allows a user to attach (or remove)\n  to an element, without needing to modify the DOM. Note that such\n  will not be preserved when imported via `web.Node.importNode`,\n  with `web.Node.cloneNode()` and `web.Node.renameNode()` operations\n  `web.Node.adoptNode` does preserve the information), and equality\n  in `web.Node.isEqualNode()` do not consider user data in making\n  assessment.\n\n  `var prevUserData = someNode.setUserData(userKey, userData, handler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/setUserData`"}, :name web.Node/set-user-data, :variadic false, :file "src/web/Node.cljs", :end-column 20, :method-params ([this user-key user-data handler]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 276, :end-line 276, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this user-key user-data handler])), :doc "Method.\n\n  The Node.setUserData() method allows a user to attach (or remove)\n  to an element, without needing to modify the DOM. Note that such\n  will not be preserved when imported via `web.Node.importNode`,\n  with `web.Node.cloneNode()` and `web.Node.renameNode()` operations\n  `web.Node.adoptNode` does preserve the information), and equality\n  in `web.Node.isEqualNode()` do not consider user data in making\n  assessment.\n\n  `var prevUserData = someNode.setUserData(userKey, userData, handler);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/setUserData`"}, parent-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 642, :column 7, :end-line 642, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Node.parentElement read-only property returns the DOM node's\n  `web.Element`, or null if the node either has no parent, or its\n  isn't a DOM `web.Element`.\n\n  `parentElement = node.parentElement\n\n  parentElement is the parent element of the current node. This is always a DOM `web.Element` object, or null.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement`"}, :name web.Node/parent-element, :variadic false, :file "src/web/Node.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 642, :end-line 642, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.parentElement read-only property returns the DOM node's\n  `web.Element`, or null if the node either has no parent, or its\n  isn't a DOM `web.Element`.\n\n  `parentElement = node.parentElement\n\n  parentElement is the parent element of the current node. This is always a DOM `web.Element` object, or null.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement`"}, append-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 5, :column 7, :end-line 5, :end-column 19, :arglists (quote ([this a-child])), :doc "Method.\n\n  The Node.appendChild() method adds a node to the end of the list\n  children of a specified parent node. If the given child is a\n  to an existing node in the document, appendChild() moves it from\n  current position to the new position (there is no requirement\n  remove the node from its parent node before appending it to some\n  node).\n\n  `element.appendChild(aChild);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild`"}, :name web.Node/append-child, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this a-child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this a-child])), :doc "Method.\n\n  The Node.appendChild() method adds a node to the end of the list\n  children of a specified parent node. If the given child is a\n  to an existing node in the document, appendChild() moves it from\n  current position to the new position (there is no requirement\n  remove the node from its parent node before appending it to some\n  node).\n\n  `element.appendChild(aChild);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/appendChild`"}, set-next-sibling! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 495, :column 7, :end-line 495, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.nextSibling read-only property returns the node immediately\n  the specified one in their parent's `web.childNodes`, or returns\n  if the specified node is the last child in the parent element.\n\n  `nextNode = node.nextSibling`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling`"}, :name web.Node/set-next-sibling!, :variadic false, :file "src/web/Node.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 495, :end-line 495, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.nextSibling read-only property returns the node immediately\n  the specified one in their parent's `web.childNodes`, or returns\n  if the specified node is the last child in the parent element.\n\n  `nextNode = node.nextSibling`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling`"}, get-user-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 86, :column 7, :end-line 86, :end-column 20, :arglists (quote ([this user-key])), :doc "Method.\n\n  The Node.getUserData() method returns any user `dom.DOMUserData`\n  previously on the given node by `web.Node.setUserData()`.\n\n  `userData = someNode.getUserData(userKey);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getUserData`"}, :name web.Node/get-user-data, :variadic false, :file "src/web/Node.cljs", :end-column 20, :method-params ([this user-key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this user-key])), :doc "Method.\n\n  The Node.getUserData() method returns any user `dom.DOMUserData`\n  previously on the given node by `web.Node.setUserData()`.\n\n  `userData = someNode.getUserData(userKey);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getUserData`"}, has-child-nodes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 98, :column 7, :end-line 98, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The Node.hasChildNodes() method returns a `web.Boolean` value\n  whether the given `web.Node` has child nodes or not.\n\n  `bool = node.hasChildNodes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes`"}, :name web.Node/has-child-nodes, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Node.hasChildNodes() method returns a `web.Boolean` value\n  whether the given `web.Node` has child nodes or not.\n\n  `bool = node.hasChildNodes();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/hasChildNodes`"}, text-content {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 778, :column 7, :end-line 778, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The textContent property of the `web.Node` interface represents\n  text content of the node and its descendants.\n\n  `var text = Node.textContent;\n  Node.textContent = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent`"}, :name web.Node/text-content, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 778, :end-line 778, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The textContent property of the `web.Node` interface represents\n  text content of the node and its descendants.\n\n  `var text = Node.textContent;\n  Node.textContent = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent`"}, set-child-nodes! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 331, :column 7, :end-line 331, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.childNodes read-only property returns a live `web.NodeList`\n  child `web.nodes` of the given element where the first child\n  is assigned index 0.\n\n  `var nodeList = elementNodeReference.childNodes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes`"}, :name web.Node/set-child-nodes!, :variadic false, :file "src/web/Node.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 331, :end-line 331, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.childNodes read-only property returns a live `web.NodeList`\n  child `web.nodes` of the given element where the first child\n  is assigned index 0.\n\n  `var nodeList = elementNodeReference.childNodes;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/childNodes`"}, set-node-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 559, :column 7, :end-line 559, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Node.nodeType property is an integer that identifies\n  the node is. It distinguishes different kind of nodes from each\n  such as `web.elements`, `web.text` and `web.comments`.\n\n  `var type = node.nodeType;\n\n  Returns an integer which specifies the type of the node. Possible values are listed in Node type constants.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType`"}, :name web.Node/set-node-type!, :variadic false, :file "src/web/Node.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 559, :end-line 559, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only Node.nodeType property is an integer that identifies\n  the node is. It distinguishes different kind of nodes from each\n  such as `web.elements`, `web.text` and `web.comments`.\n\n  `var type = node.nodeType;\n\n  Returns an integer which specifies the type of the node. Possible values are listed in Node type constants.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType`"}, first-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 344, :column 7, :end-line 344, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Node.firstChild read-only property returns the node's first\n  in the tree, or null if the node has no children.\n\n  `var childNode = node.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild`"}, :name web.Node/first-child, :variadic false, :file "src/web/Node.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.firstChild read-only property returns the node's first\n  in the tree, or null if the node has no children.\n\n  `var childNode = node.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild`"}, previous-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 724, :column 7, :end-line 724, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The Node.previousSibling read-only property returns the node\n  preceding the specified one in its parent's `web.childNodes`\n  or null if the specified node is the first in that list.\n\n  `previousNode = node.previousSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling`"}, :name web.Node/previous-sibling, :variadic false, :file "src/web/Node.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.previousSibling read-only property returns the node\n  preceding the specified one in its parent's `web.childNodes`\n  or null if the specified node is the first in that list.\n\n  `previousNode = node.previousSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling`"}, set-outer-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 609, :column 7, :end-line 609, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  See `html.HTMLElement.outerText`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText`"}, :name web.Node/set-outer-text!, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 609, :end-line 609, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  See `html.HTMLElement.outerText`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText`"}, replace-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 259, :column 7, :end-line 259, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.replaceChild() method replaces a child node within the\n  (parent) node.\n\n  `replacedNode = parentNode.replaceChild(newChild, oldChild);\n\n\n  newChild is the new node to replace oldChild. If it already exists in the DOM, it is first removed.\n  oldChild is the existing child to be replaced.\n  replacedNode is the replaced node. This is the same node as oldChild.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/replace-child, :variadic true, :file "src/web/Node.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.replaceChild() method replaces a child node within the\n  (parent) node.\n\n  `replacedNode = parentNode.replaceChild(newChild, oldChild);\n\n\n  newChild is the new node to replace oldChild. If it already exists in the DOM, it is first removed.\n  oldChild is the existing child to be replaced.\n  replacedNode is the replaced node. This is the same node as oldChild.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/replaceChild`"}, next-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 482, :column 7, :end-line 482, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Node.nextSibling read-only property returns the node immediately\n  the specified one in their parent's `web.childNodes`, or returns\n  if the specified node is the last child in the parent element.\n\n  `nextNode = node.nextSibling`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling`"}, :name web.Node/next-sibling, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 482, :end-line 482, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.nextSibling read-only property returns the node immediately\n  the specified one in their parent's `web.childNodes`, or returns\n  if the specified node is the last child in the parent element.\n\n  `nextNode = node.nextSibling`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nextSibling`"}, contains {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 59, :column 7, :end-line 59, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.contains() method returns a `web.Boolean` value indicating\n  a node is a descendant of a given node, i.e. the node itself,\n  of its direct children (`web.childNodes`), one of the children's\n  children, and so on.\n\n  `node.contains( otherNode )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/contains`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/contains, :variadic true, :file "src/web/Node.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.contains() method returns a `web.Boolean` value indicating\n  a node is a descendant of a given node, i.e. the node itself,\n  of its direct children (`web.childNodes`), one of the children's\n  children, and so on.\n\n  `node.contains( otherNode )`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/contains`"}, outer-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 600, :column 7, :end-line 600, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  See `html.HTMLElement.outerText`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText`"}, :name web.Node/outer-text, :variadic false, :file "src/web/Node.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 600, :end-line 600, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  See `html.HTMLElement.outerText`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/outerText`"}, set-parent-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 657, :column 7, :end-line 657, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.parentElement read-only property returns the DOM node's\n  `web.Element`, or null if the node either has no parent, or its\n  isn't a DOM `web.Element`.\n\n  `parentElement = node.parentElement\n\n  parentElement is the parent element of the current node. This is always a DOM `web.Element` object, or null.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement`"}, :name web.Node/set-parent-element!, :variadic false, :file "src/web/Node.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 657, :end-line 657, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.parentElement read-only property returns the DOM node's\n  `web.Element`, or null if the node either has no parent, or its\n  isn't a DOM `web.Element`.\n\n  `parentElement = node.parentElement\n\n  parentElement is the parent element of the current node. This is always a DOM `web.Element` object, or null.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentElement`"}, lookup-namespace-uri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 195, :column 7, :end-line 195, :end-column 27, :arglists (quote ([this prefix])), :doc "Method.\n\n  The Node.lookupNamespaceURI() method accepts a prefix and returns\n  namespace URI associated with it on the given node if found (and\n  if not).\n\n  `var namespace = node.lookupNamespaceURI(prefix);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI`"}, :name web.Node/lookup-namespace-uri, :variadic false, :file "src/web/Node.cljs", :end-column 27, :method-params ([this prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this prefix])), :doc "Method.\n\n  The Node.lookupNamespaceURI() method accepts a prefix and returns\n  namespace URI associated with it on the given node if found (and\n  if not).\n\n  `var namespace = node.lookupNamespaceURI(prefix);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupNamespaceURI`"}, owner-document {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 618, :column 7, :end-line 618, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The ownerDocument read-only property of the `web.Node` interface\n  the top-level document object of the node.\n\n  `var document = element.ownerDocument;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument`"}, :name web.Node/owner-document, :variadic false, :file "src/web/Node.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 618, :end-line 618, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ownerDocument read-only property of the `web.Node` interface\n  the top-level document object of the node.\n\n  `var document = element.ownerDocument;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument`"}, set-last-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 412, :column 7, :end-line 412, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.lastChild read-only property returns the last child\n  the node. If its parent is an element, then the child is generally\n  element node, a text node, or a comment node. It returns null\n  there are no child elements.\n\n  `var childNode = node.lastChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild`"}, :name web.Node/set-last-child!, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.lastChild read-only property returns the last child\n  the node. If its parent is an element, then the child is generally\n  element node, a text node, or a comment node. It returns null\n  there are no child elements.\n\n  `var childNode = node.lastChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild`"}, set-local-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 441, :column 7, :end-line 441, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.localName read-only property returns the local part\n  the qualified name of this node.\n\n  `name = element.localName\n\n\n  name is the local name as a string (see Notes below for details)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/localName`"}, :name web.Node/set-local-name!, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 441, :end-line 441, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.localName read-only property returns the local part\n  the qualified name of this node.\n\n  `name = element.localName\n\n\n  name is the local name as a string (see Notes below for details)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/localName`"}, parent-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 672, :column 7, :end-line 672, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Node.parentNode read-only property returns the parent of\n  specified node in the DOM tree.\n\n  `parentNode = node.parentNode\n\n  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode`"}, :name web.Node/parent-node, :variadic false, :file "src/web/Node.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 672, :end-line 672, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.parentNode read-only property returns the parent of\n  specified node in the DOM tree.\n\n  `parentNode = node.parentNode\n\n  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode`"}, clone-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 21, :column 7, :end-line 21, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.cloneNode() method returns a duplicate of the node on\n  this method was called.\n\n  `var dupNode = node.cloneNode([deep]);\n\n\n  node\n  The node to be cloned.\n  dupNode\n  The new node that will be a clone of node\n  deep Optional\n  true if the children of the node should also be cloned, or false to clone only the specified node.\n\n\n\n  Note: In the DOM4 specification (as implemented in Gecko 13.0 (Firefox 13 / Thunderbird 13 / SeaMonkey 2.10)), deep is an optional argument. If omitted, the method acts as if the value of deep was true, defaulting to using deep cloning as the default behavior. To create a shallow clone, deep must be set to false.\n\n  This behavior has been changed in the latest spec, and if omitted, the method will act as if the value of deep was false. Though it's still optional, you should always provide the deep argument both for backward and forward compatibility. With Gecko 28.0 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 / Firefox OS 1.3)), the console warned developers not to omit the argument. Starting with Gecko 29.0 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26)), a shallow clone is defaulted instead of a deep clone.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/clone-node, :variadic true, :file "src/web/Node.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.cloneNode() method returns a duplicate of the node on\n  this method was called.\n\n  `var dupNode = node.cloneNode([deep]);\n\n\n  node\n  The node to be cloned.\n  dupNode\n  The new node that will be a clone of node\n  deep Optional\n  true if the children of the node should also be cloned, or false to clone only the specified node.\n\n\n\n  Note: In the DOM4 specification (as implemented in Gecko 13.0 (Firefox 13 / Thunderbird 13 / SeaMonkey 2.10)), deep is an optional argument. If omitted, the method acts as if the value of deep was true, defaulting to using deep cloning as the default behavior. To create a shallow clone, deep must be set to false.\n\n  This behavior has been changed in the latest spec, and if omitted, the method will act as if the value of deep was false. Though it's still optional, you should always provide the deep argument both for backward and forward compatibility. With Gecko 28.0 (Firefox 28 / Thunderbird 28 / SeaMonkey 2.25 / Firefox OS 1.3)), the console warned developers not to omit the argument. Starting with Gecko 29.0 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26)), a shallow clone is defaulted instead of a deep clone.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/cloneNode`"}, set-prefix! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 712, :column 7, :end-line 712, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.prefix read-only property returns the namespace prefix\n  the specified node, or null if no prefix is specified.\n\n  `string = node.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/prefix`"}, :name web.Node/set-prefix!, :variadic false, :file "src/web/Node.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 712, :end-line 712, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.prefix read-only property returns the namespace prefix\n  the specified node, or null if no prefix is specified.\n\n  `string = node.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/prefix`"}, get-root-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 73, :column 7, :end-line 73, :end-column 20, :arglists (quote ([this options])), :doc "Method.\n\n  The getRootNode() method of the `web.Node` interface returns\n  context object's root, which optionally includes the shadow root\n  it is available.\n\n  `var root = node.getRootNode(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode`"}, :name web.Node/get-root-node, :variadic false, :file "src/web/Node.cljs", :end-column 20, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The getRootNode() method of the `web.Node` interface returns\n  context object's root, which optionally includes the shadow root\n  it is available.\n\n  `var root = node.getRootNode(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode`"}, node-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 544, :column 7, :end-line 544, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Node.nodeType property is an integer that identifies\n  the node is. It distinguishes different kind of nodes from each\n  such as `web.elements`, `web.text` and `web.comments`.\n\n  `var type = node.nodeType;\n\n  Returns an integer which specifies the type of the node. Possible values are listed in Node type constants.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType`"}, :name web.Node/node-type, :variadic false, :file "src/web/Node.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 544, :end-line 544, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only Node.nodeType property is an integer that identifies\n  the node is. It distinguishes different kind of nodes from each\n  such as `web.elements`, `web.text` and `web.comments`.\n\n  `var type = node.nodeType;\n\n  Returns an integer which specifies the type of the node. Possible values are listed in Node type constants.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType`"}, set-namespace-uri! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 469, :column 7, :end-line 469, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.namespaceURI read-only property returns the namespace\n  of the node, or null if the node is not in a namespace. When\n  node is a document, it returns the XML namespace for the current\n\n  `namespace = node.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/namespaceURI`"}, :name web.Node/set-namespace-uri!, :variadic false, :file "src/web/Node.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 469, :end-line 469, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.namespaceURI read-only property returns the namespace\n  of the node, or null if the node is not in a namespace. When\n  node is a document, it returns the XML namespace for the current\n\n  `namespace = node.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/namespaceURI`"}, prefix {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 700, :column 7, :end-line 700, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Node.prefix read-only property returns the namespace prefix\n  the specified node, or null if no prefix is specified.\n\n  `string = node.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/prefix`"}, :name web.Node/prefix, :variadic false, :file "src/web/Node.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 700, :end-line 700, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.prefix read-only property returns the namespace prefix\n  the specified node, or null if no prefix is specified.\n\n  `string = node.prefix`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/prefix`"}, lookup-prefix {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 208, :column 7, :end-line 208, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.lookupPrefix() method returns a `dom.DOMString` containing\n  prefix for a given namespace URI, if present, and null if not.\n  multiple prefixes are possible, the result is implementation-dependent.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/lookup-prefix, :variadic true, :file "src/web/Node.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.lookupPrefix() method returns a `dom.DOMString` containing\n  prefix for a given namespace URI, if present, and null if not.\n  multiple prefixes are possible, the result is implementation-dependent.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lookupPrefix`"}, is-equal-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 152, :column 7, :end-line 152, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The Node.isEqualNode() method tests whether two nodes are equal.\n  nodes are equal when they have the same type, defining characteristics\n  elements, this would be their ID, number of children, and so\n  its attributes match, and so on. The specific set of data points\n  must match varies depending on the types of the nodes.\n\n  `var isEqualNode = node.isEqualNode(otherNode);\n\n\n  otherNode: The `web.Node` to compare equality with.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Node/is-equal-node, :variadic true, :file "src/web/Node.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Node.isEqualNode() method tests whether two nodes are equal.\n  nodes are equal when they have the same type, defining characteristics\n  elements, this would be their ID, number of children, and so\n  its attributes match, and so on. The specific set of data points\n  must match varies depending on the types of the nodes.\n\n  `var isEqualNode = node.isEqualNode(otherNode);\n\n\n  otherNode: The `web.Node` to compare equality with.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isEqualNode`"}, namespace-uri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 456, :column 7, :end-line 456, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Node.namespaceURI read-only property returns the namespace\n  of the node, or null if the node is not in a namespace. When\n  node is a document, it returns the XML namespace for the current\n\n  `namespace = node.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/namespaceURI`"}, :name web.Node/namespace-uri, :variadic false, :file "src/web/Node.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.namespaceURI read-only property returns the namespace\n  of the node, or null if the node is not in a namespace. When\n  node is a document, it returns the XML namespace for the current\n\n  `namespace = node.namespaceURI`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/namespaceURI`"}, is-connected {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 368, :column 7, :end-line 368, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, :name web.Node/is-connected, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, base-uri-object {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 305, :column 7, :end-line 305, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The Node.baseURIObject property returns the nsIURI representing\n  node's (typically a document or an element) base URL. It's similar\n  `web.Node.baseURI`, except it returns an nsIURI instead of a\n\n  `uriObj = node.baseURIObject`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURIObject`"}, :name web.Node/base-uri-object, :variadic false, :file "src/web/Node.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 305, :end-line 305, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.baseURIObject property returns the nsIURI representing\n  node's (typically a document or an element) base URL. It's similar\n  `web.Node.baseURI`, except it returns an nsIURI instead of a\n\n  `uriObj = node.baseURIObject`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURIObject`"}, set-first-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 356, :column 7, :end-line 356, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.firstChild read-only property returns the node's first\n  in the tree, or null if the node has no children.\n\n  `var childNode = node.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild`"}, :name web.Node/set-first-child!, :variadic false, :file "src/web/Node.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.firstChild read-only property returns the node's first\n  in the tree, or null if the node has no children.\n\n  `var childNode = node.firstChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/firstChild`"}, set-owner-document! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 630, :column 7, :end-line 630, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The ownerDocument read-only property of the `web.Node` interface\n  the top-level document object of the node.\n\n  `var document = element.ownerDocument;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument`"}, :name web.Node/set-owner-document!, :variadic false, :file "src/web/Node.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 630, :end-line 630, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ownerDocument read-only property of the `web.Node` interface\n  the top-level document object of the node.\n\n  `var document = element.ownerDocument;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/ownerDocument`"}, node-principal {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 520, :column 7, :end-line 520, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Node.nodePrincipal read-only property returns the nsIPrincipal\n  representing current security context of the node.\n\n  `principalObj = Node.nodePrincipal`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal`"}, :name web.Node/node-principal, :variadic false, :file "src/web/Node.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 520, :end-line 520, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.nodePrincipal read-only property returns the nsIPrincipal\n  representing current security context of the node.\n\n  `principalObj = Node.nodePrincipal`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodePrincipal`"}, is-default-namespace {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 138, :column 7, :end-line 138, :end-column 27, :arglists (quote ([this namespace-uri])), :doc "Method.\n\n  The Node.isDefaultNamespace() method accepts a namespace URI\n  an argument and returns a `web.Boolean` with a value of true\n  the namespace is the default namespace on the given node or false\n  not.\n\n  `result = node.isDefaultNamespace(namespaceURI);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace`"}, :name web.Node/is-default-namespace, :variadic false, :file "src/web/Node.cljs", :end-column 27, :method-params ([this namespace-uri]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this namespace-uri])), :doc "Method.\n\n  The Node.isDefaultNamespace() method accepts a namespace URI\n  an argument and returns a `web.Boolean` with a value of true\n  the namespace is the default namespace on the given node or false\n  not.\n\n  `result = node.isDefaultNamespace(namespaceURI);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isDefaultNamespace`"}, node-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 508, :column 7, :end-line 508, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The nodeName read-only property returns the name of the current\n  as a string.\n\n  `var str = node.nodeName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName`"}, :name web.Node/node-name, :variadic false, :file "src/web/Node.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 508, :end-line 508, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The nodeName read-only property returns the name of the current\n  as a string.\n\n  `var str = node.nodeName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeName`"}, set-root-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 764, :column 7, :end-line 764, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.rootNode read-only property returns a `web.Node` object\n  the topmost node in the tree, or the current node if it's the\n  node in the tree. This is found by walking backward along `web.Node.parentNode`\n  the top is reached.\n\n  `rootNode = node.rootNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode`"}, :name web.Node/set-root-node!, :variadic false, :file "src/web/Node.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 764, :end-line 764, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.rootNode read-only property returns a `web.Node` object\n  the topmost node in the tree, or the current node if it's the\n  node in the tree. This is found by walking backward along `web.Node.parentNode`\n  the top is reached.\n\n  `rootNode = node.rootNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/rootNode`"}, last-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 398, :column 7, :end-line 398, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Node.lastChild read-only property returns the last child\n  the node. If its parent is an element, then the child is generally\n  element node, a text node, or a comment node. It returns null\n  there are no child elements.\n\n  `var childNode = node.lastChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild`"}, :name web.Node/last-child, :variadic false, :file "src/web/Node.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Node.lastChild read-only property returns the last child\n  the node. If its parent is an element, then the child is generally\n  element node, a text node, or a comment node. It returns null\n  there are no child elements.\n\n  `var childNode = node.lastChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/lastChild`"}, node-value {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 574, :column 7, :end-line 574, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The nodeValue property of the `web.Node` interface returns or\n  the value of the current node.\n\n  `str = node.nodeValue;\n  node.nodeValue = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue`"}, :name web.Node/node-value, :variadic false, :file "src/web/Node.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The nodeValue property of the `web.Node` interface returns or\n  the value of the current node.\n\n  `str = node.nodeValue;\n  node.nodeValue = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeValue`"}, set-previous-sibling! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 737, :column 7, :end-line 737, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.previousSibling read-only property returns the node\n  preceding the specified one in its parent's `web.childNodes`\n  or null if the specified node is the first in that list.\n\n  `previousNode = node.previousSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling`"}, :name web.Node/set-previous-sibling!, :variadic false, :file "src/web/Node.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 737, :end-line 737, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.previousSibling read-only property returns the node\n  preceding the specified one in its parent's `web.childNodes`\n  or null if the specified node is the first in that list.\n\n  `previousNode = node.previousSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/previousSibling`"}, set-parent-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 686, :column 7, :end-line 686, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.parentNode read-only property returns the parent of\n  specified node in the DOM tree.\n\n  `parentNode = node.parentNode\n\n  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode`"}, :name web.Node/set-parent-node!, :variadic false, :file "src/web/Node.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Node.parentNode read-only property returns the parent of\n  specified node in the DOM tree.\n\n  `parentNode = node.parentNode\n\n  parentNode is the parent of the current node. The parent of an element is an Element node, a Document node, or a DocumentFragment node.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/parentNode`"}, base-uri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 293, :column 7, :end-line 293, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The baseURI read-only property returns the absolute base URL\n  a `web.Node`.\n\n  `var nodeBaseURI = node.baseURI;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI`"}, :name web.Node/base-uri, :variadic false, :file "src/web/Node.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The baseURI read-only property returns the absolute base URL\n  a `web.Node`.\n\n  `var nodeBaseURI = node.baseURI;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/baseURI`"}, compare-document-position {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 47, :column 7, :end-line 47, :end-column 32, :arglists (quote ([this other-node])), :doc "Method.\n\n  The Node.compareDocumentPosition() method compares the position\n  the given node against another node in any document.\n\n  `compareMask = node.compareDocumentPosition(otherNode)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition`"}, :name web.Node/compare-document-position, :variadic false, :file "src/web/Node.cljs", :end-column 32, :method-params ([this other-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this other-node])), :doc "Method.\n\n  The Node.compareDocumentPosition() method compares the position\n  the given node against another node in any document.\n\n  `compareMask = node.compareDocumentPosition(otherNode)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition`"}, is-supported {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Node.cljs", :line 182, :column 7, :end-line 182, :end-column 19, :arglists (quote ([this feature version])), :doc "Method.\n\n  The Node.isSupported()returns a `web.Boolean` flag containing\n  result of a test whether the DOM implementation implements a\n  feature and this feature is supported by the specific node.\n\n  `boolValue = element.isSupported(feature, version)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isSupported`"}, :name web.Node/is-supported, :variadic false, :file "src/web/Node.cljs", :end-column 19, :method-params ([this feature version]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this feature version])), :doc "Method.\n\n  The Node.isSupported()returns a `web.Boolean` flag containing\n  result of a test whether the DOM implementation implements a\n  feature and this feature is supported by the specific node.\n\n  `boolValue = element.isSupported(feature, version)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isSupported`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Node Node"}