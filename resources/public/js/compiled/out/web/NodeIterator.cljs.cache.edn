{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{filter}, :name web.NodeIterator, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {next-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 19, :column 7, :end-line 19, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.nextNode() method returns the next node in the\n  represented by the `web.NodeIterator` and advances the position\n  the iterator within the set. The first call to nextNode() returns\n  first node in the set.\n\n  `node = nodeIterator.nextNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode`"}, :name web.NodeIterator/next-node, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.nextNode() method returns the next node in the\n  represented by the `web.NodeIterator` and advances the position\n  the iterator within the set. The first call to nextNode() returns\n  first node in the set.\n\n  `node = nodeIterator.nextNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/nextNode`"}, set-pointer-before-reference-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 112, :column 7, :end-line 112, :end-column 41, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.pointerBeforeReferenceNode read-only property\n  a `web.Boolean` flag that indicates whether the `web.NodeFilter`\n  anchored before (if this value is true) or after (if this value\n  false) the anchor node indicated by the `web.NodeIterator.referenceNode`\n\n  `flag = nodeIterator.pointerBeforeReferenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode`"}, :name web.NodeIterator/set-pointer-before-reference-node!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 41, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.pointerBeforeReferenceNode read-only property\n  a `web.Boolean` flag that indicates whether the `web.NodeFilter`\n  anchored before (if this value is true) or after (if this value\n  false) the anchor node indicated by the `web.NodeIterator.referenceNode`\n\n  `flag = nodeIterator.pointerBeforeReferenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode`"}, expand-entity-references {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 46, :column 7, :end-line 46, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.NodeIterator`.\n\n  `expand = nodeIterator.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences`"}, :name web.NodeIterator/expand-entity-references, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.NodeIterator`.\n\n  `expand = nodeIterator.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences`"}, set-what-to-show! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 263, :column 7, :end-line 263, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.whatToShow read-only property represents an\n  integer representing a bitmask signifying what types of nodes\n  be returned by the `web.NodeIterator`.\n\n  `var nodeTypes = nodeIterator.whatToShow;\n\n  The values that can be combined to form the bitmask are:\n\n\n\n\n  \\t\\t\\tConstant\n  \\t\\t\\tNumerical value\n  \\t\\t\\tDescription\n\n\n  \\t\\t\\tNodeFilter.SHOW_ALL\n  \\t\\t\\t-1 (that is the max value of unsigned long)\n  \\t\\t\\tShows all nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ATTRIBUTE\n  \\t\\t\\t2\n  \\t\\t\\tShows attribute `web.Attr` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Attr` node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_CDATA_SECTION\n  \\t\\t\\t8\n  \\t\\t\\tShows `web.CDATASection` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_COMMENT\n  \\t\\t\\t128\n  \\t\\t\\tShows `web.Comment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT\n  \\t\\t\\t256\n  \\t\\t\\tShows `web.Document` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_FRAGMENT\n  \\t\\t\\t1024\n  \\t\\t\\tShows `web.DocumentFragment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_TYPE\n  \\t\\t\\t512\n  \\t\\t\\tShows `web.DocumentType` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ELEMENT\n  \\t\\t\\t1\n  \\t\\t\\tShows `web.Element` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY\n  \\t\\t\\t32\n  \\t\\t\\tShows `web.Entity` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Entity` node as its root; in this case, it means that the `web.Entity` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY_REFERENCE\n  \\t\\t\\t16\n  \\t\\t\\tShows `web.EntityReference` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_NOTATION\n  \\t\\t\\t2048\n  \\t\\t\\tShows `web.Notation` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with a `web.Notation` node as its root; in this case, it means that the `web.Notation` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_PROCESSING_INSTRUCTION\n  \\t\\t\\t64\n  \\t\\t\\tShows `web.ProcessingInstruction` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_TEXT\n  \\t\\t\\t4\n  \\t\\t\\tShows `web.Text` nodes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow`"}, :name web.NodeIterator/set-what-to-show!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.whatToShow read-only property represents an\n  integer representing a bitmask signifying what types of nodes\n  be returned by the `web.NodeIterator`.\n\n  `var nodeTypes = nodeIterator.whatToShow;\n\n  The values that can be combined to form the bitmask are:\n\n\n\n\n  \\t\\t\\tConstant\n  \\t\\t\\tNumerical value\n  \\t\\t\\tDescription\n\n\n  \\t\\t\\tNodeFilter.SHOW_ALL\n  \\t\\t\\t-1 (that is the max value of unsigned long)\n  \\t\\t\\tShows all nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ATTRIBUTE\n  \\t\\t\\t2\n  \\t\\t\\tShows attribute `web.Attr` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Attr` node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_CDATA_SECTION\n  \\t\\t\\t8\n  \\t\\t\\tShows `web.CDATASection` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_COMMENT\n  \\t\\t\\t128\n  \\t\\t\\tShows `web.Comment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT\n  \\t\\t\\t256\n  \\t\\t\\tShows `web.Document` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_FRAGMENT\n  \\t\\t\\t1024\n  \\t\\t\\tShows `web.DocumentFragment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_TYPE\n  \\t\\t\\t512\n  \\t\\t\\tShows `web.DocumentType` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ELEMENT\n  \\t\\t\\t1\n  \\t\\t\\tShows `web.Element` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY\n  \\t\\t\\t32\n  \\t\\t\\tShows `web.Entity` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Entity` node as its root; in this case, it means that the `web.Entity` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY_REFERENCE\n  \\t\\t\\t16\n  \\t\\t\\tShows `web.EntityReference` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_NOTATION\n  \\t\\t\\t2048\n  \\t\\t\\tShows `web.Notation` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with a `web.Notation` node as its root; in this case, it means that the `web.Notation` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_PROCESSING_INSTRUCTION\n  \\t\\t\\t64\n  \\t\\t\\tShows `web.ProcessingInstruction` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_TEXT\n  \\t\\t\\t4\n  \\t\\t\\tShows `web.Text` nodes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow`"}, set-root! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 164, :column 7, :end-line 164, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.root read-only property represents the `web.Node`\n  is the root of what the `web.NodeIterator` traverses.\n\n  `root = nodeIterator.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root`"}, :name web.NodeIterator/set-root!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.root read-only property represents the `web.Node`\n  is the root of what the `web.NodeIterator` traverses.\n\n  `root = nodeIterator.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root`"}, previous-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 33, :column 7, :end-line 33, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.previousNode() method returns the previous node\n  the set represented by the `web.NodeIterator` and moves the position\n  the iterator backwards within the set.\n\n  `node = nodeIterator.previousNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode`"}, :name web.NodeIterator/previous-node, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.previousNode() method returns the previous node\n  the set represented by the `web.NodeIterator` and moves the position\n  the iterator backwards within the set.\n\n  `node = nodeIterator.previousNode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/previousNode`"}, detach {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 7, :column 7, :end-line 7, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.detach() method is a no-op, kept for backward\n  only.\n\n  `nodeIterator.detach();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach`"}, :name web.NodeIterator/detach, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The NodeIterator.detach() method is a no-op, kept for backward\n  only.\n\n  `nodeIterator.detach();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/detach`"}, set-reference-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 139, :column 7, :end-line 139, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.referenceNode read-only returns the `web.Node`\n  which the iterator is anchored; as new nodes are inserted, the\n  remains anchored to the reference node as specified by this property.\n\n  `node = nodeIterator.referenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode`"}, :name web.NodeIterator/set-reference-node!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.referenceNode read-only returns the `web.Node`\n  which the iterator is anchored; as new nodes are inserted, the\n  remains anchored to the reference node as specified by this property.\n\n  `node = nodeIterator.referenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode`"}, set-filter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 85, :column 7, :end-line 85, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.filter read-only method returns a `web.NodeFilter`\n  that is an object implement an acceptNode(node) method, used\n  screen nodes.\n\n  `nodeFilter = nodeIterator.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter`"}, :name web.NodeIterator/set-filter!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.filter read-only method returns a `web.NodeFilter`\n  that is an object implement an acceptNode(node) method, used\n  screen nodes.\n\n  `nodeFilter = nodeIterator.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter`"}, reference-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 126, :column 7, :end-line 126, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.referenceNode read-only returns the `web.Node`\n  which the iterator is anchored; as new nodes are inserted, the\n  remains anchored to the reference node as specified by this property.\n\n  `node = nodeIterator.referenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode`"}, :name web.NodeIterator/reference-node, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.referenceNode read-only returns the `web.Node`\n  which the iterator is anchored; as new nodes are inserted, the\n  remains anchored to the reference node as specified by this property.\n\n  `node = nodeIterator.referenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/referenceNode`"}, what-to-show {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 176, :column 7, :end-line 176, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.whatToShow read-only property represents an\n  integer representing a bitmask signifying what types of nodes\n  be returned by the `web.NodeIterator`.\n\n  `var nodeTypes = nodeIterator.whatToShow;\n\n  The values that can be combined to form the bitmask are:\n\n\n\n\n  \\t\\t\\tConstant\n  \\t\\t\\tNumerical value\n  \\t\\t\\tDescription\n\n\n  \\t\\t\\tNodeFilter.SHOW_ALL\n  \\t\\t\\t-1 (that is the max value of unsigned long)\n  \\t\\t\\tShows all nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ATTRIBUTE\n  \\t\\t\\t2\n  \\t\\t\\tShows attribute `web.Attr` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Attr` node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_CDATA_SECTION\n  \\t\\t\\t8\n  \\t\\t\\tShows `web.CDATASection` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_COMMENT\n  \\t\\t\\t128\n  \\t\\t\\tShows `web.Comment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT\n  \\t\\t\\t256\n  \\t\\t\\tShows `web.Document` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_FRAGMENT\n  \\t\\t\\t1024\n  \\t\\t\\tShows `web.DocumentFragment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_TYPE\n  \\t\\t\\t512\n  \\t\\t\\tShows `web.DocumentType` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ELEMENT\n  \\t\\t\\t1\n  \\t\\t\\tShows `web.Element` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY\n  \\t\\t\\t32\n  \\t\\t\\tShows `web.Entity` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Entity` node as its root; in this case, it means that the `web.Entity` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY_REFERENCE\n  \\t\\t\\t16\n  \\t\\t\\tShows `web.EntityReference` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_NOTATION\n  \\t\\t\\t2048\n  \\t\\t\\tShows `web.Notation` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with a `web.Notation` node as its root; in this case, it means that the `web.Notation` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_PROCESSING_INSTRUCTION\n  \\t\\t\\t64\n  \\t\\t\\tShows `web.ProcessingInstruction` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_TEXT\n  \\t\\t\\t4\n  \\t\\t\\tShows `web.Text` nodes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow`"}, :name web.NodeIterator/what-to-show, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.whatToShow read-only property represents an\n  integer representing a bitmask signifying what types of nodes\n  be returned by the `web.NodeIterator`.\n\n  `var nodeTypes = nodeIterator.whatToShow;\n\n  The values that can be combined to form the bitmask are:\n\n\n\n\n  \\t\\t\\tConstant\n  \\t\\t\\tNumerical value\n  \\t\\t\\tDescription\n\n\n  \\t\\t\\tNodeFilter.SHOW_ALL\n  \\t\\t\\t-1 (that is the max value of unsigned long)\n  \\t\\t\\tShows all nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ATTRIBUTE\n  \\t\\t\\t2\n  \\t\\t\\tShows attribute `web.Attr` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Attr` node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_CDATA_SECTION\n  \\t\\t\\t8\n  \\t\\t\\tShows `web.CDATASection` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_COMMENT\n  \\t\\t\\t128\n  \\t\\t\\tShows `web.Comment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT\n  \\t\\t\\t256\n  \\t\\t\\tShows `web.Document` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_FRAGMENT\n  \\t\\t\\t1024\n  \\t\\t\\tShows `web.DocumentFragment` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_DOCUMENT_TYPE\n  \\t\\t\\t512\n  \\t\\t\\tShows `web.DocumentType` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ELEMENT\n  \\t\\t\\t1\n  \\t\\t\\tShows `web.Element` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY\n  \\t\\t\\t32\n  \\t\\t\\tShows `web.Entity` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with an `web.Entity` node as its root; in this case, it means that the `web.Entity` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_ENTITY_REFERENCE\n  \\t\\t\\t16\n  \\t\\t\\tShows `web.EntityReference` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_NOTATION\n  \\t\\t\\t2048\n  \\t\\t\\tShows `web.Notation` nodes. This is meaningful only when creating a `web.NodeIterator` or `web.TreeWalker` with a `web.Notation` node as its root; in this case, it means that the `web.Notation` node will appear in the first position of the traversal. Since entities are not part of the document tree, they do not appear when traversing over the document tree.\n\n\n  \\t\\t\\tNodeFilter.SHOW_PROCESSING_INSTRUCTION\n  \\t\\t\\t64\n  \\t\\t\\tShows `web.ProcessingInstruction` nodes.\n\n\n  \\t\\t\\tNodeFilter.SHOW_TEXT\n  \\t\\t\\t4\n  \\t\\t\\tShows `web.Text` nodes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/whatToShow`"}, set-expand-entity-references! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 59, :column 7, :end-line 59, :end-column 36, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.NodeIterator`.\n\n  `expand = nodeIterator.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences`"}, :name web.NodeIterator/set-expand-entity-references!, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 36, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NodeIterator.expandEntityReferences read-only property returns\n  `web.Boolean` flag indicating whether or not the children of\n  reference nodes are visible to the `web.NodeIterator`.\n\n  `expand = nodeIterator.expandEntityReferences;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/expandEntityReferences`"}, filter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 72, :column 7, :end-line 72, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.filter read-only method returns a `web.NodeFilter`\n  that is an object implement an acceptNode(node) method, used\n  screen nodes.\n\n  `nodeFilter = nodeIterator.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter`"}, :name web.NodeIterator/filter, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.filter read-only method returns a `web.NodeFilter`\n  that is an object implement an acceptNode(node) method, used\n  screen nodes.\n\n  `nodeFilter = nodeIterator.filter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/filter`"}, root {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 152, :column 7, :end-line 152, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.root read-only property represents the `web.Node`\n  is the root of what the `web.NodeIterator` traverses.\n\n  `root = nodeIterator.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root`"}, :name web.NodeIterator/root, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 152, :end-line 152, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.root read-only property represents the `web.Node`\n  is the root of what the `web.NodeIterator` traverses.\n\n  `root = nodeIterator.root;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/root`"}, pointer-before-reference-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/NodeIterator.cljs", :line 98, :column 7, :end-line 98, :end-column 36, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.pointerBeforeReferenceNode read-only property\n  a `web.Boolean` flag that indicates whether the `web.NodeFilter`\n  anchored before (if this value is true) or after (if this value\n  false) the anchor node indicated by the `web.NodeIterator.referenceNode`\n\n  `flag = nodeIterator.pointerBeforeReferenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode`"}, :name web.NodeIterator/pointer-before-reference-node, :variadic false, :file "src/web/NodeIterator.cljs", :end-column 36, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NodeIterator.pointerBeforeReferenceNode read-only property\n  a `web.Boolean` flag that indicates whether the `web.NodeFilter`\n  anchored before (if this value is true) or after (if this value\n  false) the anchor node indicated by the `web.NodeIterator.referenceNode`\n\n  `flag = nodeIterator.pointerBeforeReferenceNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NodeIterator/pointerBeforeReferenceNode`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The NodeIterator interface represents an iterator over the members\n  a list of the nodes in a subtree of the DOM. The nodes will be\n  in document order."}