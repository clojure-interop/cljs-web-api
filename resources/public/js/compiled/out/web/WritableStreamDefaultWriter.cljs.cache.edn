{:rename-macros {}, :renames {}, :externs {WritableStreamDefaultWriter {}}, :use-macros {}, :excludes #{}, :name web.WritableStreamDefaultWriter, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {desired-size {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 114, :column 7, :end-line 114, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.WritableStreamDefaultWriter`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = writableStreamDefaultWriterInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/desiredSize`"}, :name web.WritableStreamDefaultWriter/desired-size, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The desiredSize getter property of the `web.WritableStreamDefaultWriter`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = writableStreamDefaultWriterInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/desiredSize`"}, closed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 88, :column 7, :end-line 88, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The closed getter property of the `web.WritableStreamDefaultWriter`\n  returns a promise that fulfills if the stream becomes closed\n  the writer's lock is released, or rejects if the stream errors.\n\n  `var closed = writableStreamDefaultWriterInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/closed`"}, :name web.WritableStreamDefaultWriter/closed, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The closed getter property of the `web.WritableStreamDefaultWriter`\n  returns a promise that fulfills if the stream becomes closed\n  the writer's lock is released, or rejects if the stream errors.\n\n  `var closed = writableStreamDefaultWriterInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/closed`"}, ready {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 45, :column 7, :end-line 45, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The ready getter property of the `web.WritableStreamDefaultWriter`\n  returns a `web.Promise` that resolves when the desired size of\n  stream's internal queue transitions from non-positive to positive,\n  that it is no longer applying backpressure.\n\n  `var promise = defaultWriter.ready`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/ready`"}, :name web.WritableStreamDefaultWriter/ready, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The ready getter property of the `web.WritableStreamDefaultWriter`\n  returns a `web.Promise` that resolves when the desired size of\n  stream's internal queue transitions from non-positive to positive,\n  that it is no longer applying backpressure.\n\n  `var promise = defaultWriter.ready`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/ready`"}, release-lock {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 59, :column 7, :end-line 59, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The releaseLock() method of the `web.WritableStreamDefaultWriter`\n  releases the writer's lock on the corresponding stream. After\n  lock is released, the writer is no longer active. If the associated\n  is errored when the lock is released, the writer will appear\n  in the same way from now on; otherwise, the writer will appear\n\n  `writableStreamDefaultWriterInstance.releaseLock()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/releaseLock`"}, :name web.WritableStreamDefaultWriter/release-lock, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The releaseLock() method of the `web.WritableStreamDefaultWriter`\n  releases the writer's lock on the corresponding stream. After\n  lock is released, the writer is no longer active. If the associated\n  is errored when the lock is released, the writer will appear\n  in the same way from now on; otherwise, the writer will appear\n\n  `writableStreamDefaultWriterInstance.releaseLock()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/releaseLock`"}, abort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([this reason])), :doc "Method.\n\n  The abort() method of the `web.WritableStreamDefaultWriter` interface\n  the stream, signaling that the producer can no longer successfully\n  to the stream and it is to be immediately moved to an error state,\n  any queued writes discarded.\n\n  `Promise<reason> writableStreamDefaultWriterInstance.abort(reason);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/abort`"}, :name web.WritableStreamDefaultWriter/abort, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 12, :method-params ([this reason]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reason])), :doc "Method.\n\n  The abort() method of the `web.WritableStreamDefaultWriter` interface\n  the stream, signaling that the producer can no longer successfully\n  to the stream and it is to be immediately moved to an error state,\n  any queued writes discarded.\n\n  `Promise<reason> writableStreamDefaultWriterInstance.abort(reason);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/abort`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 33, :column 7, :end-line 33, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.WritableStreamDefaultWriter` interface\n  the associated writable stream.\n\n  `Promise<undefined> writableStreamDefaultWriterInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close`"}, :name web.WritableStreamDefaultWriter/close, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.WritableStreamDefaultWriter` interface\n  the associated writable stream.\n\n  `Promise<undefined> writableStreamDefaultWriterInstance.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/close`"}, write {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 74, :column 7, :end-line 74, :end-column 12, :arglists (quote ([this chunk])), :doc "Method.\n\n  The write() property of the `web.WritableStreamDefaultWriter`\n  writes a passed chunk of data to a `web.WritableStream` and its\n  sink, then returns a `web.Promise` that resolves to indicate\n  success or failure of the write operation.\n\n  `Promise<> = defaultWriter.write(chunk)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/write`"}, :name web.WritableStreamDefaultWriter/write, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 12, :method-params ([this chunk]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this chunk])), :doc "Method.\n\n  The write() property of the `web.WritableStreamDefaultWriter`\n  writes a passed chunk of data to a `web.WritableStream` and its\n  sink, then returns a `web.Promise` that resolves to indicate\n  success or failure of the write operation.\n\n  `Promise<> = defaultWriter.write(chunk)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/write`"}, set-closed! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 101, :column 7, :end-line 101, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The closed getter property of the `web.WritableStreamDefaultWriter`\n  returns a promise that fulfills if the stream becomes closed\n  the writer's lock is released, or rejects if the stream errors.\n\n  `var closed = writableStreamDefaultWriterInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/closed`"}, :name web.WritableStreamDefaultWriter/set-closed!, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The closed getter property of the `web.WritableStreamDefaultWriter`\n  returns a promise that fulfills if the stream becomes closed\n  the writer's lock is released, or rejects if the stream errors.\n\n  `var closed = writableStreamDefaultWriterInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/closed`"}, set-desired-size! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 126, :column 7, :end-line 126, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.WritableStreamDefaultWriter`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = writableStreamDefaultWriterInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/desiredSize`"}, :name web.WritableStreamDefaultWriter/set-desired-size!, :variadic false, :file "src/web/WritableStreamDefaultWriter.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The desiredSize getter property of the `web.WritableStreamDefaultWriter`\n  returns the desired size required to fill the stream's internal\n\n  `var desiredSize = writableStreamDefaultWriterInstance.desiredSize;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/desiredSize`"}, constructor {:name web.WritableStreamDefaultWriter/constructor, :file "src/web/WritableStreamDefaultWriter.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WritableStreamDefaultWriter.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The WritableStreamDefaultWriter() constructor creates a new `web.WritableStreamDefaultWriter` object instance.\n\n  stream\n  \\tThe `web.WritableStream` to be written to.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WritableStreamDefaultWriter/WritableStreamDefaultWriter`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WritableStreamDefaultWriter interface of the the Streams\n  is the object returned by `web.WritableStream.getWriter()` and\n  created locks the < writer to the WritableStream ensuring that\n  other streams can write to the underlying sink."}