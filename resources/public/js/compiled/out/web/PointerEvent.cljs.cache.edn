{:rename-macros {}, :renames {}, :externs {PointerEvent {}}, :use-macros {}, :excludes #{}, :name web.PointerEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-is-primary! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 71, :column 7, :end-line 71, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The isPrimary read-only property of the `web.PointerEvent` interface\n  whether or not the pointer device that created the event is the\n  pointer. It returns true if the pointer that caused the event\n  be fired is the primary device and returns false otherwise.\n\n  `var isPrimary = pointerEvent.isPrimary;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary`"}, :name web.PointerEvent/set-is-primary!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isPrimary read-only property of the `web.PointerEvent` interface\n  whether or not the pointer device that created the event is the\n  pointer. It returns true if the pointer that caused the event\n  be fired is the primary device and returns false otherwise.\n\n  `var isPrimary = pointerEvent.isPrimary;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary`"}, set-twist! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 260, :column 7, :end-line 260, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The twist read-only property of the `web.PointerEvent` interface\n  the clockwise rotation of the pointer (e.g., pen stylus) around\n  major axis, in degrees.\n\n  `var twist = pointerEvent.twist;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist`"}, :name web.PointerEvent/set-twist!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The twist read-only property of the `web.PointerEvent` interface\n  the clockwise rotation of the pointer (e.g., pen stylus) around\n  major axis, in degrees.\n\n  `var twist = pointerEvent.twist;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist`"}, is-primary {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The isPrimary read-only property of the `web.PointerEvent` interface\n  whether or not the pointer device that created the event is the\n  pointer. It returns true if the pointer that caused the event\n  be fired is the primary device and returns false otherwise.\n\n  `var isPrimary = pointerEvent.isPrimary;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary`"}, :name web.PointerEvent/is-primary, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isPrimary read-only property of the `web.PointerEvent` interface\n  whether or not the pointer device that created the event is the\n  pointer. It returns true if the pointer that caused the event\n  be fired is the primary device and returns false otherwise.\n\n  `var isPrimary = pointerEvent.isPrimary;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 287, :column 7, :end-line 287, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The width read-only property of the `web.PointerEvent` interface\n  the width of the pointer's contact geometry along the x-axis,\n  in CSS pixels. Depending on the source of the pointer device\n  as a finger), for a given pointer, each event may produce a different\n\n  `var contactWidth = pointerEvent.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width`"}, :name web.PointerEvent/set-width!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The width read-only property of the `web.PointerEvent` interface\n  the width of the pointer's contact geometry along the x-axis,\n  in CSS pixels. Depending on the source of the pointer device\n  as a finger), for a given pointer, each event may produce a different\n\n  `var contactWidth = pointerEvent.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 29, :column 7, :end-line 29, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The height read-only property of the `web.PointerEvent` interface\n  the height of the pointer's contact geometry, along the y-axis\n  CSS pixels). Depending on the source of the pointer device (for\n  a finger), for a given pointer, each event may produce a different\n\n  `var contactHeight = pointerEvent.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height`"}, :name web.PointerEvent/height, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The height read-only property of the `web.PointerEvent` interface\n  the height of the pointer's contact geometry, along the y-axis\n  CSS pixels). Depending on the source of the pointer device (for\n  a finger), for a given pointer, each event may produce a different\n\n  `var contactHeight = pointerEvent.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height`"}, set-tilt-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 233, :column 7, :end-line 233, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The tiltY read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the X-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltY = pointerEvent.tiltY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY`"}, :name web.PointerEvent/set-tilt-y!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The tiltY read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the X-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltY = pointerEvent.tiltY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY`"}, set-pointer-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 128, :column 7, :end-line 128, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The pointerType read-only property of the `web.PointerEvent`\n  indicates the device type (mouse, pen, or touch) that caused\n  given pointer event.\n\n  `var pType = pointerEvent.pointerType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType`"}, :name web.PointerEvent/set-pointer-type!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The pointerType read-only property of the `web.PointerEvent`\n  indicates the device type (mouse, pen, or touch) that caused\n  given pointer event.\n\n  `var pType = pointerEvent.pointerType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The height read-only property of the `web.PointerEvent` interface\n  the height of the pointer's contact geometry, along the y-axis\n  CSS pixels). Depending on the source of the pointer device (for\n  a finger), for a given pointer, each event may produce a different\n\n  `var contactHeight = pointerEvent.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height`"}, :name web.PointerEvent/set-height!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The height read-only property of the `web.PointerEvent` interface\n  the height of the pointer's contact geometry, along the y-axis\n  CSS pixels). Depending on the source of the pointer device (for\n  a finger), for a given pointer, each event may produce a different\n\n  `var contactHeight = pointerEvent.height;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height`"}, tilt-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 219, :column 7, :end-line 219, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The tiltY read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the X-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltY = pointerEvent.tiltY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY`"}, :name web.PointerEvent/tilt-y, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tiltY read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the X-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltY = pointerEvent.tiltY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY`"}, set-tangential-pressure! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 178, :column 7, :end-line 178, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The tangentialPressure read-only property of the `web.PointerEvent`\n  represents the normalized tangential pressure of the pointer\n  (also known as barrel pressure or cylinder stress).\n\n  `var tanPressure = pointerEvent.tangentialPressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure`"}, :name web.PointerEvent/set-tangential-pressure!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The tangentialPressure read-only property of the `web.PointerEvent`\n  represents the normalized tangential pressure of the pointer\n  (also known as barrel pressure or cylinder stress).\n\n  `var tanPressure = pointerEvent.tangentialPressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure`"}, pressure {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 141, :column 7, :end-line 141, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The pressure read-only property of the `web.PointerEvent` interface\n  the normalized pressure of the pointer input.\n\n  `var pressure = pointerEvent.pressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure`"}, :name web.PointerEvent/pressure, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The pressure read-only property of the `web.PointerEvent` interface\n  the normalized pressure of the pointer input.\n\n  `var pressure = pointerEvent.pressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure`"}, tangential-pressure {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 165, :column 7, :end-line 165, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The tangentialPressure read-only property of the `web.PointerEvent`\n  represents the normalized tangential pressure of the pointer\n  (also known as barrel pressure or cylinder stress).\n\n  `var tanPressure = pointerEvent.tangentialPressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure`"}, :name web.PointerEvent/tangential-pressure, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 165, :end-line 165, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tangentialPressure read-only property of the `web.PointerEvent`\n  represents the normalized tangential pressure of the pointer\n  (also known as barrel pressure or cylinder stress).\n\n  `var tanPressure = pointerEvent.tangentialPressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tangentialPressure`"}, set-tilt-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 205, :column 7, :end-line 205, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The tiltX read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the Y-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltX = pointerEvent.tiltX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX`"}, :name web.PointerEvent/set-tilt-x!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The tiltX read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the Y-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltX = pointerEvent.tiltX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX`"}, tilt-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 191, :column 7, :end-line 191, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The tiltX read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the Y-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltX = pointerEvent.tiltX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX`"}, :name web.PointerEvent/tilt-x, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tiltX read-only property of the `web.PointerEvent` interface\n  the angle (in degrees) between the Y-Z plane of the pointer and\n  screen. This property is typically only useful for a pen/stylus\n  type.\n\n  `var tiltX = pointerEvent.tiltX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX`"}, set-pressure! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 153, :column 7, :end-line 153, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The pressure read-only property of the `web.PointerEvent` interface\n  the normalized pressure of the pointer input.\n\n  `var pressure = pointerEvent.pressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure`"}, :name web.PointerEvent/set-pressure!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The pressure read-only property of the `web.PointerEvent` interface\n  the normalized pressure of the pointer input.\n\n  `var pressure = pointerEvent.pressure;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure`"}, get-coalesced-events {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 16, :column 7, :end-line 16, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  The getCoalescedEvents() method of the `web.PointerEvent` interface\n  a sequence of all PointerEvent instances that were coalesced\n  the dispatched pointermove event.\n\n  `var pointerEvents[] = PointerEvent.getCoalescedEvents()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/getCoalescedEvents`"}, :name web.PointerEvent/get-coalesced-events, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getCoalescedEvents() method of the `web.PointerEvent` interface\n  a sequence of all PointerEvent instances that were coalesced\n  the dispatched pointermove event.\n\n  `var pointerEvents[] = PointerEvent.getCoalescedEvents()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/getCoalescedEvents`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 273, :column 7, :end-line 273, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The width read-only property of the `web.PointerEvent` interface\n  the width of the pointer's contact geometry along the x-axis,\n  in CSS pixels. Depending on the source of the pointer device\n  as a finger), for a given pointer, each event may produce a different\n\n  `var contactWidth = pointerEvent.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width`"}, :name web.PointerEvent/width, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The width read-only property of the `web.PointerEvent` interface\n  the width of the pointer's contact geometry along the x-axis,\n  in CSS pixels. Depending on the source of the pointer device\n  as a finger), for a given pointer, each event may produce a different\n\n  `var contactWidth = pointerEvent.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width`"}, set-pointer-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 100, :column 7, :end-line 100, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The pointerId read-only property of the `web.PointerEvent` interface\n  an identifier assigned to a given pointer event. The identifier\n  unique, being different from the identifiers of all other active\n  events. Since the value may be randomly generated, it is not\n  to convey any particular meaning.\n\n  `var id = pointerEvent.pointerId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId`"}, :name web.PointerEvent/set-pointer-id!, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The pointerId read-only property of the `web.PointerEvent` interface\n  an identifier assigned to a given pointer event. The identifier\n  unique, being different from the identifiers of all other active\n  events. Since the value may be randomly generated, it is not\n  to convey any particular meaning.\n\n  `var id = pointerEvent.pointerId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId`"}, twist {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 247, :column 7, :end-line 247, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The twist read-only property of the `web.PointerEvent` interface\n  the clockwise rotation of the pointer (e.g., pen stylus) around\n  major axis, in degrees.\n\n  `var twist = pointerEvent.twist;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist`"}, :name web.PointerEvent/twist, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The twist read-only property of the `web.PointerEvent` interface\n  the clockwise rotation of the pointer (e.g., pen stylus) around\n  major axis, in degrees.\n\n  `var twist = pointerEvent.twist;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/twist`"}, pointer-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 85, :column 7, :end-line 85, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The pointerId read-only property of the `web.PointerEvent` interface\n  an identifier assigned to a given pointer event. The identifier\n  unique, being different from the identifiers of all other active\n  events. Since the value may be randomly generated, it is not\n  to convey any particular meaning.\n\n  `var id = pointerEvent.pointerId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId`"}, :name web.PointerEvent/pointer-id, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The pointerId read-only property of the `web.PointerEvent` interface\n  an identifier assigned to a given pointer event. The identifier\n  unique, being different from the identifiers of all other active\n  events. Since the value may be randomly generated, it is not\n  to convey any particular meaning.\n\n  `var id = pointerEvent.pointerId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId`"}, pointer-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 115, :column 7, :end-line 115, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The pointerType read-only property of the `web.PointerEvent`\n  indicates the device type (mouse, pen, or touch) that caused\n  given pointer event.\n\n  `var pType = pointerEvent.pointerType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType`"}, :name web.PointerEvent/pointer-type, :variadic false, :file "src/web/PointerEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The pointerType read-only property of the `web.PointerEvent`\n  indicates the device type (mouse, pen, or touch) that caused\n  given pointer event.\n\n  `var pType = pointerEvent.pointerType;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType`"}, constructor {:name web.PointerEvent/constructor, :file "src/web/PointerEvent.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PointerEvent.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The PointerEvent() constructor creates a new synthetic and untrusted `web.PointerEvent` object instance.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/PointerEvent`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PointerEvent interface represents the state of a DOM event\n  by a pointer such as the geometry of the contact point, the device\n  that generated the event, the amount of pressure that was applied\n  the contact surface, etc."}