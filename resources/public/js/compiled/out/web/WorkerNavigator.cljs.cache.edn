{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.WorkerNavigator, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-connection! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 106, :column 7, :end-line 106, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The WorkerNavigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered. This could be used to select high definition content\n  low definition content based on the user's connection.\n\n  `connectionInfo = self.navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/connection`"}, :name web.WorkerNavigator/set-connection!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WorkerNavigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered. This could be used to select high definition content\n  low definition content based on the user's connection.\n\n  `connectionInfo = self.navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/connection`"}, languages {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 134, :column 7, :end-line 134, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.languages read-only property returns an\n  of `dom.DOMString`s representing the user's preferred languages.\n  language is described using BCP 47 language tags. In the returned\n  they are ordered by preference with the most preferred language\n\n  `preferredLanguages = globalObj.navigator.languages`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages`"}, :name web.WorkerNavigator/languages, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.languages read-only property returns an\n  of `dom.DOMString`s representing the user's preferred languages.\n  language is described using BCP 47 language tags. In the returned\n  they are ordered by preference with the most preferred language\n\n  `preferredLanguages = globalObj.navigator.languages`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages`"}, set-app-code-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 31, :column 7, :end-line 31, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, :name web.WorkerNavigator/set-app-code-name!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, connection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 91, :column 7, :end-line 91, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The WorkerNavigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered. This could be used to select high definition content\n  low definition content based on the user's connection.\n\n  `connectionInfo = self.navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/connection`"}, :name web.WorkerNavigator/connection, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WorkerNavigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered. This could be used to select high definition content\n  low definition content based on the user's connection.\n\n  `connectionInfo = self.navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/connection`"}, platform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 232, :column 7, :end-line 232, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, :name web.WorkerNavigator/platform, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, set-hardware-concurrency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 307, :column 7, :end-line 307, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, :name web.WorkerNavigator/set-hardware-concurrency!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, set-permissions! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 219, :column 7, :end-line 219, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The WorkerNavigator.permissions read-only property returns a\n  object that can be used to query and update permission status\n  APIs covered by the Permissions API.\n\n  `permissionsObj = self.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions`"}, :name web.WorkerNavigator/set-permissions!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WorkerNavigator.permissions read-only property returns a\n  object that can be used to query and update permission status\n  APIs covered by the Permissions API.\n\n  `permissionsObj = self.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions`"}, permissions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 206, :column 7, :end-line 206, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The WorkerNavigator.permissions read-only property returns a\n  object that can be used to query and update permission status\n  APIs covered by the Permissions API.\n\n  `permissionsObj = self.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions`"}, :name web.WorkerNavigator/permissions, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WorkerNavigator.permissions read-only property returns a\n  object that can be used to query and update permission status\n  APIs covered by the Permissions API.\n\n  `permissionsObj = self.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/permissions`"}, user-agent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 282, :column 7, :end-line 282, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorID.userAgent read-only property returns the user\n  string for the current browser.\n\n  `var ua = window.navigator.userAgent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent`"}, :name web.WorkerNavigator/user-agent, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 282, :end-line 282, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorID.userAgent read-only property returns the user\n  string for the current browser.\n\n  `var ua = window.navigator.userAgent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent`"}, set-app-version! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 79, :column 7, :end-line 79, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, :name web.WorkerNavigator/set-app-version!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, locks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 148, :column 7, :end-line 148, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The locks read-only property of the `web.WorkerNavigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/locks`"}, :name web.WorkerNavigator/locks, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The locks read-only property of the `web.WorkerNavigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/locks`"}, set-product! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 270, :column 7, :end-line 270, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, :name web.WorkerNavigator/set-product!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, app-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 43, :column 7, :end-line 43, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, :name web.WorkerNavigator/app-name, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, set-locks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 161, :column 7, :end-line 161, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The locks read-only property of the `web.WorkerNavigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/locks`"}, :name web.WorkerNavigator/set-locks!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The locks read-only property of the `web.WorkerNavigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerNavigator/locks`"}, product {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 258, :column 7, :end-line 258, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, :name web.WorkerNavigator/product, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, app-code-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 19, :column 7, :end-line 19, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, :name web.WorkerNavigator/app-code-name, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, set-app-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 55, :column 7, :end-line 55, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, :name web.WorkerNavigator/set-app-name!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, set-platform! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 245, :column 7, :end-line 245, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, :name web.WorkerNavigator/set-platform!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, on-line {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 174, :column 7, :end-line 174, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, :name web.WorkerNavigator/on-line, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, app-version {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, :name web.WorkerNavigator/app-version, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, language {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 121, :column 7, :end-line 121, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.language read-only property returns a string\n  the preferred language of the user, usually the language of the\n  UI.\n\n  `var lang = navigator.language`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language`"}, :name web.WorkerNavigator/language, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.language read-only property returns a string\n  the preferred language of the user, usually the language of the\n  UI.\n\n  `var lang = navigator.language`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language`"}, hardware-concurrency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 294, :column 7, :end-line 294, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, :name web.WorkerNavigator/hardware-concurrency, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, set-on-line! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 190, :column 7, :end-line 190, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, :name web.WorkerNavigator/set-on-line!, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, taint-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WorkerNavigator.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The NavigatorID.taintEnabled() method always returns false.\n\n  `result = window.navigator.taintEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled`"}, :name web.WorkerNavigator/taint-enabled, :variadic false, :file "src/web/WorkerNavigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The NavigatorID.taintEnabled() method always returns false.\n\n  `result = window.navigator.taintEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WorkerNavigator interface represents a subset of the `web.Navigator`\n  allowed to be accessed from a `web.Worker`. Such an object is\n  for each worker and is available via the `web.WorkerGlobalScope.navigator`\n  obtained by calling window.self.navigator."}