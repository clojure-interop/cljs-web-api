{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{time}, :name web.IntersectionObserverEntry, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 145, :column 7, :end-line 145, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only target\n  indicates which targeted `web.Element` has changed its amount\n  intersection with the intersection root.\n\n  `var target = IntersectionObserverEntry.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target`"}, :name web.IntersectionObserverEntry/target, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only target\n  indicates which targeted `web.Element` has changed its amount\n  intersection with the intersection root.\n\n  `var target = IntersectionObserverEntry.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target`"}, intersection-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 59, :column 7, :end-line 59, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRect\n  is a `dom.DOMRectReadOnly` object which describes the smallest\n  that contains the entire portion of the target element which\n  currently visible within the intersection root.\n\n  `var intersectionRect = IntersectionObserverEntry.intersectionRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect`"}, :name web.IntersectionObserverEntry/intersection-rect, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRect\n  is a `dom.DOMRectReadOnly` object which describes the smallest\n  that contains the entire portion of the target element which\n  currently visible within the intersection root.\n\n  `var intersectionRect = IntersectionObserverEntry.intersectionRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect`"}, is-intersecting {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 87, :column 7, :end-line 87, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only isIntersecting\n  is a Boolean value which is true if the target element intersects\n  the intersection observer's root. If this is true, then, the\n  describes a transition into a state of intersection; if it's\n  then you know the transition is from intersecting to not-intersecting.\n\n  `var isIntersecting = IntersectionObserverEntry.isIntersecting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting`"}, :name web.IntersectionObserverEntry/is-intersecting, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only isIntersecting\n  is a Boolean value which is true if the target element intersects\n  the intersection observer's root. If this is true, then, the\n  describes a transition into a state of intersection; if it's\n  then you know the transition is from intersecting to not-intersecting.\n\n  `var isIntersecting = IntersectionObserverEntry.isIntersecting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting`"}, set-intersection-ratio! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 46, :column 7, :end-line 46, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRatio\n  tells you how much of the target element is currently visible\n  the root's intersection ratio, as a value between 0.0 and 1.0.\n\n  `var intersectionRatio = IntersectionObserverEntry.intersectionRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio`"}, :name web.IntersectionObserverEntry/set-intersection-ratio!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRatio\n  tells you how much of the target element is currently visible\n  the root's intersection ratio, as a value between 0.0 and 1.0.\n\n  `var intersectionRatio = IntersectionObserverEntry.intersectionRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 158, :column 7, :end-line 158, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only target\n  indicates which targeted `web.Element` has changed its amount\n  intersection with the intersection root.\n\n  `var target = IntersectionObserverEntry.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target`"}, :name web.IntersectionObserverEntry/set-target!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only target\n  indicates which targeted `web.Element` has changed its amount\n  intersection with the intersection root.\n\n  `var target = IntersectionObserverEntry.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/target`"}, set-root-bounds! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 131, :column 7, :end-line 131, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only rootBounds\n  is a `dom.DOMRectReadOnly` corresponding to the `web.target`'s\n  intersection rectangle, offset by the `web.IntersectionObserver.rootMargin`\n  one is specified.\n\n  `var rootBounds = IntersectionObserverEntry.rootBounds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds`"}, :name web.IntersectionObserverEntry/set-root-bounds!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only rootBounds\n  is a `dom.DOMRectReadOnly` corresponding to the `web.target`'s\n  intersection rectangle, offset by the `web.IntersectionObserver.rootMargin`\n  one is specified.\n\n  `var rootBounds = IntersectionObserverEntry.rootBounds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds`"}, set-bounding-client-rect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 20, :column 7, :end-line 20, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only boundingClientRect\n  returns a `dom.DOMRectReadOnly` which in essence describes a\n  describing the smallest rectangle that contains the entire target\n\n  `var boundsRect = IntersectionObserverEntry.boundingClientRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect`"}, :name web.IntersectionObserverEntry/set-bounding-client-rect!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only boundingClientRect\n  returns a `dom.DOMRectReadOnly` which in essence describes a\n  describing the smallest rectangle that contains the entire target\n\n  `var boundsRect = IntersectionObserverEntry.boundingClientRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect`"}, intersection-ratio {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRatio\n  tells you how much of the target element is currently visible\n  the root's intersection ratio, as a value between 0.0 and 1.0.\n\n  `var intersectionRatio = IntersectionObserverEntry.intersectionRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio`"}, :name web.IntersectionObserverEntry/intersection-ratio, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRatio\n  tells you how much of the target element is currently visible\n  the root's intersection ratio, as a value between 0.0 and 1.0.\n\n  `var intersectionRatio = IntersectionObserverEntry.intersectionRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRatio`"}, time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 171, :column 7, :end-line 171, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only time\n  is a `dom.DOMHighResTimeStamp` that indicates the time at which\n  intersection change occurred relative to the time at which the\n  was created.\n\n  `var time = IntersectionObserverEntry.time;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time`"}, :name web.IntersectionObserverEntry/time, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only time\n  is a `dom.DOMHighResTimeStamp` that indicates the time at which\n  intersection change occurred relative to the time at which the\n  was created.\n\n  `var time = IntersectionObserverEntry.time;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time`"}, set-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 185, :column 7, :end-line 185, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only time\n  is a `dom.DOMHighResTimeStamp` that indicates the time at which\n  intersection change occurred relative to the time at which the\n  was created.\n\n  `var time = IntersectionObserverEntry.time;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time`"}, :name web.IntersectionObserverEntry/set-time!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only time\n  is a `dom.DOMHighResTimeStamp` that indicates the time at which\n  intersection change occurred relative to the time at which the\n  was created.\n\n  `var time = IntersectionObserverEntry.time;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/time`"}, set-intersection-rect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 73, :column 7, :end-line 73, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRect\n  is a `dom.DOMRectReadOnly` object which describes the smallest\n  that contains the entire portion of the target element which\n  currently visible within the intersection root.\n\n  `var intersectionRect = IntersectionObserverEntry.intersectionRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect`"}, :name web.IntersectionObserverEntry/set-intersection-rect!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only intersectionRect\n  is a `dom.DOMRectReadOnly` object which describes the smallest\n  that contains the entire portion of the target element which\n  currently visible within the intersection root.\n\n  `var intersectionRect = IntersectionObserverEntry.intersectionRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/intersectionRect`"}, bounding-client-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 7, :column 7, :end-line 7, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only boundingClientRect\n  returns a `dom.DOMRectReadOnly` which in essence describes a\n  describing the smallest rectangle that contains the entire target\n\n  `var boundsRect = IntersectionObserverEntry.boundingClientRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect`"}, :name web.IntersectionObserverEntry/bounding-client-rect, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only boundingClientRect\n  returns a `dom.DOMRectReadOnly` which in essence describes a\n  describing the smallest rectangle that contains the entire target\n\n  `var boundsRect = IntersectionObserverEntry.boundingClientRect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/boundingClientRect`"}, root-bounds {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 117, :column 7, :end-line 117, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only rootBounds\n  is a `dom.DOMRectReadOnly` corresponding to the `web.target`'s\n  intersection rectangle, offset by the `web.IntersectionObserver.rootMargin`\n  one is specified.\n\n  `var rootBounds = IntersectionObserverEntry.rootBounds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds`"}, :name web.IntersectionObserverEntry/root-bounds, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only rootBounds\n  is a `dom.DOMRectReadOnly` corresponding to the `web.target`'s\n  intersection rectangle, offset by the `web.IntersectionObserver.rootMargin`\n  one is specified.\n\n  `var rootBounds = IntersectionObserverEntry.rootBounds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/rootBounds`"}, set-is-intersecting! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/IntersectionObserverEntry.cljs", :line 102, :column 7, :end-line 102, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only isIntersecting\n  is a Boolean value which is true if the target element intersects\n  the intersection observer's root. If this is true, then, the\n  describes a transition into a state of intersection; if it's\n  then you know the transition is from intersecting to not-intersecting.\n\n  `var isIntersecting = IntersectionObserverEntry.isIntersecting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting`"}, :name web.IntersectionObserverEntry/set-is-intersecting!, :variadic false, :file "src/web/IntersectionObserverEntry.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.IntersectionObserverEntry` interface's read-only isIntersecting\n  is a Boolean value which is true if the target element intersects\n  the intersection observer's root. If this is true, then, the\n  describes a transition into a state of intersection; if it's\n  then you know the transition is from intersecting to not-intersecting.\n\n  `var isIntersecting = IntersectionObserverEntry.isIntersecting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry/isIntersecting`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The IntersectionObserverEntry interface of the Intersection Observer\n  describes the intersection between the target element and its\n  container at a specific moment of transition."}