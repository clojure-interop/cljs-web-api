{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.PaintWorklet, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {register-paint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this name class])), :doc "Method.\n\n  The PaintWorklet.registerPaint() method of the `web.PaintWorklet`\n  registers a class programmatically generate an image where a\n  property expects a file.\n\n  `registerPaint(name, class);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/registerPaint`"}, :name web.PaintWorklet/register-paint, :variadic false, :file "src/web/PaintWorklet.cljs", :end-column 21, :method-params ([this name class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name class])), :doc "Method.\n\n  The PaintWorklet.registerPaint() method of the `web.PaintWorklet`\n  registers a class programmatically generate an image where a\n  property expects a file.\n\n  `registerPaint(name, class);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/registerPaint`"}, add-module {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The addModule() method of the `web.Worklet` interface loads the\n  in the given JavaScript file and adds it to the current Worklet.\n\n  `addPromise = worklet.addModule(moduleURL);\n  addPromise = worklet.addModule(moduleURL, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PaintWorklet/add-module, :variadic true, :file "src/web/PaintWorklet.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The addModule() method of the `web.Worklet` interface loads the\n  in the given JavaScript file and adds it to the current Worklet.\n\n  `addPromise = worklet.addModule(moduleURL);\n  addPromise = worklet.addModule(moduleURL, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worklet/addModule`"}, device-pixel-ratio {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 33, :column 7, :end-line 33, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/devicePizelRatio`"}, :name web.PaintWorklet/device-pixel-ratio, :variadic false, :file "src/web/PaintWorklet.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/devicePizelRatio`"}, set-device-pixel-ratio! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 45, :column 7, :end-line 45, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/devicePizelRatio`"}, :name web.PaintWorklet/set-device-pixel-ratio!, :variadic false, :file "src/web/PaintWorklet.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/devicePizelRatio`"}, device​-pixel​-ratio {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 57, :column 7, :end-line 57, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/Paint%E2%80%8BWorklet%E2%80%8B.device%E2%80%8BPixel%E2%80%8BRatio`"}, :name web.PaintWorklet/device​-pixel​-ratio, :variadic false, :file "src/web/PaintWorklet.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/Paint%E2%80%8BWorklet%E2%80%8B.device%E2%80%8BPixel%E2%80%8BRatio`"}, set-device​-pixel​-ratio! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PaintWorklet.cljs", :line 69, :column 7, :end-line 69, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/Paint%E2%80%8BWorklet%E2%80%8B.device%E2%80%8BPixel%E2%80%8BRatio`"}, :name web.PaintWorklet/set-device​-pixel​-ratio!, :variadic false, :file "src/web/PaintWorklet.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The PaintWorklet.devicePixelRatio read-only property of the `web.PaintWorklet`\n  returns the current device's ratio of physical pixels to logical\n\n  `var devicePixelRatio = paintWorklet.devicePixelRatio;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PaintWorklet/Paint%E2%80%8BWorklet%E2%80%8B.device%E2%80%8BPixel%E2%80%8BRatio`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PaintWorklet interface of the CSS Painting API programmatically\n  an image where a CSS property expects a file. Access this interface\n  `css.CSS.paintWorklet`."}