{:rename-macros {}, :renames {}, :externs {InstallEvent {}}, :use-macros {}, :excludes #{}, :name web.InstallEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.InstallEvent/constructor, :file "src/web/InstallEvent.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/InstallEvent.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The InstallEvent() constructor creates a new `web.InstallEvent` object.\n\n  type\n  The type of the event.\n  init Optional\n  An options object containing any custom settings that you want to apply to the event object. Available options are as follows:\n\n  activeWorker: The `web.ServiceWorker` that is currently actively controlling the page.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/InstallEvent`", :tag js}, active-worker {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/InstallEvent.cljs", :line 24, :column 7, :end-line 24, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The activeWorker read-only property of the `web.InstallEvent`\n  returns the `web.ServiceWorker` that is currently actively controlling\n  page.\n\n  `var myActiveWorker = event.activeWorker`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker`"}, :name web.InstallEvent/active-worker, :variadic false, :file "src/web/InstallEvent.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The activeWorker read-only property of the `web.InstallEvent`\n  returns the `web.ServiceWorker` that is currently actively controlling\n  page.\n\n  `var myActiveWorker = event.activeWorker`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker`"}, set-active-worker! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/InstallEvent.cljs", :line 37, :column 7, :end-line 37, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The activeWorker read-only property of the `web.InstallEvent`\n  returns the `web.ServiceWorker` that is currently actively controlling\n  page.\n\n  `var myActiveWorker = event.activeWorker`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker`"}, :name web.InstallEvent/set-active-worker!, :variadic false, :file "src/web/InstallEvent.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The activeWorker read-only property of the `web.InstallEvent`\n  returns the `web.ServiceWorker` that is currently actively controlling\n  page.\n\n  `var myActiveWorker = event.activeWorker`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/InstallEvent/activeWorker`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The parameter passed into the `web.oninstall` handler, the InstallEvent\n  represents an install action that is dispatched on the `web.ServiceWorkerGlobalScope`\n  a `web.ServiceWorker`. As a child of `web.ExtendableEvent`, it\n  that functional events such as `web.FetchEvent` are not dispatched\n  installation."}