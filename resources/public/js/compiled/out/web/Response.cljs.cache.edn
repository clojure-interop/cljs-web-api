{:rename-macros {}, :renames {}, :externs {Response {}}, :use-macros {}, :excludes #{type clone}, :name web.Response, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {redirect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 118, :column 7, :end-line 118, :end-column 15, :arglists (quote ([this url status])), :doc "Method.\n\n  The redirect() method of the `web.Response` interface returns\n  Response resulting in a redirect to the specified URL.\n\n  `var response = Response.redirect(url, status);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect`"}, :name web.Response/redirect, :variadic false, :file "src/web/Response.cljs", :end-column 15, :method-params ([this url status]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this url status])), :doc "Method.\n\n  The redirect() method of the `web.Response` interface returns\n  Response resulting in a redirect to the specified URL.\n\n  `var response = Response.redirect(url, status);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/redirect`"}, json {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 103, :column 7, :end-line 103, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Response/json, :variadic true, :file "src/web/Response.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`"}, body {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 146, :column 7, :end-line 146, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Response/body, :variadic false, :file "src/web/Response.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, array-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 32, :column 7, :end-line 32, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Response/array-buffer, :variadic true, :file "src/web/Response.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 319, :column 7, :end-line 319, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Response` interface contains\n  type of the response. It can be one of the following:\n\n  `var myType = response.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/type`"}, :name web.Response/set-type!, :variadic false, :file "src/web/Response.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 319, :end-line 319, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Response` interface contains\n  type of the response. It can be one of the following:\n\n  `var myType = response.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/type`"}, text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 130, :column 7, :end-line 130, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Response/text, :variadic true, :file "src/web/Response.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`"}, set-body-used! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 182, :column 7, :end-line 182, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Response/set-body-used!, :variadic false, :file "src/web/Response.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, set-headers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 206, :column 7, :end-line 206, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The headers read-only property of the `web.Response` interface\n  the `web.Headers` object associated with the response.\n\n  `var myHeaders = response.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/headers`"}, :name web.Response/set-headers!, :variadic false, :file "src/web/Response.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The headers read-only property of the `web.Response` interface\n  the `web.Headers` object associated with the response.\n\n  `var myHeaders = response.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/headers`"}, set-status-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 294, :column 7, :end-line 294, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The statusText read-only property of the `web.Response` interface\n  the status message corresponding to the status code (e.g., OK\n  200).\n\n  `var myStatusText = response.statusText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText`"}, :name web.Response/set-status-text!, :variadic false, :file "src/web/Response.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 294, :end-line 294, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The statusText read-only property of the `web.Response` interface\n  the status message corresponding to the status code (e.g., OK\n  200).\n\n  `var myStatusText = response.statusText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText`"}, status-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 281, :column 7, :end-line 281, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The statusText read-only property of the `web.Response` interface\n  the status message corresponding to the status code (e.g., OK\n  200).\n\n  `var myStatusText = response.statusText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText`"}, :name web.Response/status-text, :variadic false, :file "src/web/Response.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The statusText read-only property of the `web.Response` interface\n  the status message corresponding to the status code (e.g., OK\n  200).\n\n  `var myStatusText = response.statusText;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/statusText`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 307, :column 7, :end-line 307, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Response` interface contains\n  type of the response. It can be one of the following:\n\n  `var myType = response.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/type`"}, :name web.Response/type, :variadic false, :file "src/web/Response.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Response` interface contains\n  type of the response. It can be one of the following:\n\n  `var myType = response.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/type`"}, set-status! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 269, :column 7, :end-line 269, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The status read-only property of the `web.Response` interface\n  the status code of the response (e.g., 200 for a success).\n\n  `var myStatus = response.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/status`"}, :name web.Response/set-status!, :variadic false, :file "src/web/Response.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The status read-only property of the `web.Response` interface\n  the status code of the response (e.g., 200 for a success).\n\n  `var myStatus = response.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/status`"}, form-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 87, :column 7, :end-line 87, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Response/form-data, :variadic true, :file "src/web/Response.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`"}, headers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 194, :column 7, :end-line 194, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The headers read-only property of the `web.Response` interface\n  the `web.Headers` object associated with the response.\n\n  `var myHeaders = response.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/headers`"}, :name web.Response/headers, :variadic false, :file "src/web/Response.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The headers read-only property of the `web.Response` interface\n  the `web.Headers` object associated with the response.\n\n  `var myHeaders = response.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/headers`"}, set-body! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 158, :column 7, :end-line 158, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Response/set-body!, :variadic false, :file "src/web/Response.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, blob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 47, :column 7, :end-line 47, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Response/blob, :variadic true, :file "src/web/Response.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`"}, set-use-final-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 369, :column 7, :end-line 369, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The useFinalURL property of the `web.Response` interface contains\n  boolean stating whether this is the final URL of the response.\n\n  `var isfinalURL = Response.useFinalURL;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/useFinalURL`"}, :name web.Response/set-use-final-url!, :variadic false, :file "src/web/Response.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The useFinalURL property of the `web.Response` interface contains\n  boolean stating whether this is the final URL of the response.\n\n  `var isfinalURL = Response.useFinalURL;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/useFinalURL`"}, status {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 257, :column 7, :end-line 257, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The status read-only property of the `web.Response` interface\n  the status code of the response (e.g., 200 for a success).\n\n  `var myStatus = response.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/status`"}, :name web.Response/status, :variadic false, :file "src/web/Response.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 257, :end-line 257, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The status read-only property of the `web.Response` interface\n  the status code of the response (e.g., 200 for a success).\n\n  `var myStatus = response.status;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/status`"}, ok {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 218, :column 7, :end-line 218, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The ok read-only property of the `web.Response` interface contains\n  Boolean stating whether the response was successful (status in\n  range 200-299) or not.\n\n  `var myOK = response.ok;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/ok`"}, :name web.Response/ok, :variadic false, :file "src/web/Response.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ok read-only property of the `web.Response` interface contains\n  Boolean stating whether the response was successful (status in\n  range 200-299) or not.\n\n  `var myOK = response.ok;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/ok`"}, clone {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 62, :column 7, :end-line 62, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `web.Response` interface creates a\n  of a response object, identical in every way, but stored in a\n  variable.\n\n  `var response2 = response1.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/clone`"}, :name web.Response/clone, :variadic false, :file "src/web/Response.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `web.Response` interface creates a\n  of a response object, identical in every way, but stored in a\n  variable.\n\n  `var response2 = response1.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/clone`"}, use-final-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 357, :column 7, :end-line 357, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The useFinalURL property of the `web.Response` interface contains\n  boolean stating whether this is the final URL of the response.\n\n  `var isfinalURL = Response.useFinalURL;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/useFinalURL`"}, :name web.Response/use-final-url, :variadic false, :file "src/web/Response.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The useFinalURL property of the `web.Response` interface contains\n  boolean stating whether this is the final URL of the response.\n\n  `var isfinalURL = Response.useFinalURL;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/useFinalURL`"}, body-used {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 170, :column 7, :end-line 170, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Response/body-used, :variadic false, :file "src/web/Response.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, constructor {:name web.Response/constructor, :file "src/web/Response.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The Response() constructor creates a new `web.Response` object.\n\n  body Optional\n  An object defining a body for the response. This can be null, or one of:\n\n  `web.Blob`\n  `web.BufferSource`\n  `web.FormData`\n  `web.ReadableStream`\n  `web.URLSearchParams`\n  `web.USVString`\n\n\n  init Optional\n  An options object containing any custom settings that you want to apply to the response. The possible options are:\n\n  status: The status code for the reponse, e.g., 200.\n  statusText: The status message associated with the status code, e.g., OK.\n  headers: Any headers you want to add to your response, contained within a `web.Headers` object or object literal of `web.ByteString` key/value pairs (see HTTP headers for a reference).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/Response`", :tag js}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 331, :column 7, :end-line 331, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Response` interface contains\n  URL of the response. The value of the url property will be the\n  URL obtained after any redirects.\n\n  `var myURL = response.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/url`"}, :name web.Response/url, :variadic false, :file "src/web/Response.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 331, :end-line 331, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Response` interface contains\n  URL of the response. The value of the url property will be the\n  URL obtained after any redirects.\n\n  `var myURL = response.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/url`"}, set-ok! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 231, :column 7, :end-line 231, :end-column 14, :arglists (quote ([this val])), :doc "Property.\n\n  The ok read-only property of the `web.Response` interface contains\n  Boolean stating whether the response was successful (status in\n  range 200-299) or not.\n\n  `var myOK = response.ok;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/ok`"}, :name web.Response/set-ok!, :variadic false, :file "src/web/Response.cljs", :end-column 14, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ok read-only property of the `web.Response` interface contains\n  Boolean stating whether the response was successful (status in\n  range 200-299) or not.\n\n  `var myOK = response.ok;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/ok`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 75, :column 7, :end-line 75, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The error() method of the `web.Response` interface returns a\n  Response object associated with a network error.\n\n  `var errorResponse = Response.error();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/error`"}, :name web.Response/error, :variadic false, :file "src/web/Response.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The error() method of the `web.Response` interface returns a\n  Response object associated with a network error.\n\n  `var errorResponse = Response.error();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/error`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 344, :column 7, :end-line 344, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Response` interface contains\n  URL of the response. The value of the url property will be the\n  URL obtained after any redirects.\n\n  `var myURL = response.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/url`"}, :name web.Response/set-url!, :variadic false, :file "src/web/Response.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Response` interface contains\n  URL of the response. The value of the url property will be the\n  URL obtained after any redirects.\n\n  `var myURL = response.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/url`"}, redirected {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Response.cljs", :line 244, :column 7, :end-line 244, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The read-only redirected property of the `web.Response` interface\n  whether or not the response is the result of a request you made\n  was redirected.\n\n  `var isRedirected = Response.redirected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected`"}, :name web.Response/redirected, :variadic false, :file "src/web/Response.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only redirected property of the `web.Response` interface\n  whether or not the response is the result of a request you made\n  was redirected.\n\n  `var isRedirected = Response.redirected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Response/redirected`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Response interface of the Fetch API represents the response\n  a request."}