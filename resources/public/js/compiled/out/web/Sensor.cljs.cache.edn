{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Sensor, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {timestamp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 177, :column 7, :end-line 177, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The timestamp read-only property of the `web.Sensor` interface\n  the time stamp of the latest sensor reading.\n\n  `var timestamp = sensorInstance.timestamp\n\n  Because `web.Sensor` is a base class, timestamp may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/timestamp`"}, :name web.Sensor/timestamp, :variadic false, :file "src/web/Sensor.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timestamp read-only property of the `web.Sensor` interface\n  the time stamp of the latest sensor reading.\n\n  `var timestamp = sensorInstance.timestamp\n\n  Because `web.Sensor` is a base class, timestamp may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/timestamp`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 132, :column 7, :end-line 132, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror `web.EventHandler` is called when an error occurs\n  one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onerror = function\n  sensorInstance.addEventListener('error', function() { ... })\n\n  Because `web.Sensor` is a base class, onerror may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onerror`"}, :name web.Sensor/set-onerror!, :variadic false, :file "src/web/Sensor.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror `web.EventHandler` is called when an error occurs\n  one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onerror = function\n  sensorInstance.addEventListener('error', function() { ... })\n\n  Because `web.Sensor` is a base class, onerror may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onerror`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 117, :column 7, :end-line 117, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror `web.EventHandler` is called when an error occurs\n  one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onerror = function\n  sensorInstance.addEventListener('error', function() { ... })\n\n  Because `web.Sensor` is a base class, onerror may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onerror`"}, :name web.Sensor/onerror, :variadic false, :file "src/web/Sensor.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror `web.EventHandler` is called when an error occurs\n  one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onerror = function\n  sensorInstance.addEventListener('error', function() { ... })\n\n  Because `web.Sensor` is a base class, onerror may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onerror`"}, has-reading {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 59, :column 7, :end-line 59, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The hasReading read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor has a reading.\n\n  `var boolean = sensorInstance.hasReading\n\n  Because `web.Sensor` is a base class, hasReading may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/hasReading`"}, :name web.Sensor/has-reading, :variadic false, :file "src/web/Sensor.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The hasReading read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor has a reading.\n\n  `var boolean = sensorInstance.hasReading\n\n  Because `web.Sensor` is a base class, hasReading may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/hasReading`"}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The start method activates one of the sensors based on Sensor.\n\n  `Sensor.start()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/start`"}, :name web.Sensor/start, :variadic false, :file "src/web/Sensor.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The start method activates one of the sensors based on Sensor.\n\n  `Sensor.start()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/start`"}, onreading {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 147, :column 7, :end-line 147, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onreading `web.EventHandler` is called when a reading is\n  on one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onreading = function\n  sensorInstance.addEventListener('reading', function() { ... })\n\n  Because `web.Sensor` is a base class, onreading may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onreading`"}, :name web.Sensor/onreading, :variadic false, :file "src/web/Sensor.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onreading `web.EventHandler` is called when a reading is\n  on one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onreading = function\n  sensorInstance.addEventListener('reading', function() { ... })\n\n  Because `web.Sensor` is a base class, onreading may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onreading`"}, set-onreading! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 162, :column 7, :end-line 162, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onreading `web.EventHandler` is called when a reading is\n  on one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onreading = function\n  sensorInstance.addEventListener('reading', function() { ... })\n\n  Because `web.Sensor` is a base class, onreading may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onreading`"}, :name web.Sensor/set-onreading!, :variadic false, :file "src/web/Sensor.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onreading `web.EventHandler` is called when a reading is\n  on one of the child interfaces of the `web.Sensor` interface.\n\n  `sensorInstance.onreading = function\n  sensorInstance.addEventListener('reading', function() { ... })\n\n  Because `web.Sensor` is a base class, onreading may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onreading`"}, set-activated! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 45, :column 7, :end-line 45, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The activated read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor is active.\n\n  `var boolean = sensorInstance.activated\n\n  Because `web.Sensor` is a base class, activated may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/activated`"}, :name web.Sensor/set-activated!, :variadic false, :file "src/web/Sensor.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The activated read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor is active.\n\n  `var boolean = sensorInstance.activated\n\n  Because `web.Sensor` is a base class, activated may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/activated`"}, onactivate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 87, :column 7, :end-line 87, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onactivate `web.EventHandler` is called when one of the Sensor\n  child interfaces becomes active.\n\n  `sensorInstance.onactivate = function\n  sensorInstance.addEventListener('activate', function() { ... })\n\n  Because `web.Sensor` is a base class, onactivate may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onactivate`"}, :name web.Sensor/onactivate, :variadic false, :file "src/web/Sensor.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onactivate `web.EventHandler` is called when one of the Sensor\n  child interfaces becomes active.\n\n  `sensorInstance.onactivate = function\n  sensorInstance.addEventListener('activate', function() { ... })\n\n  Because `web.Sensor` is a base class, onactivate may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onactivate`"}, stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 19, :column 7, :end-line 19, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The stop method of the `web.Sensor` interface deactivates the\n  sensor.\n\n  `Sensor.stop()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/stop`"}, :name web.Sensor/stop, :variadic false, :file "src/web/Sensor.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stop method of the `web.Sensor` interface deactivates the\n  sensor.\n\n  `Sensor.stop()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/stop`"}, activated {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 31, :column 7, :end-line 31, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The activated read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor is active.\n\n  `var boolean = sensorInstance.activated\n\n  Because `web.Sensor` is a base class, activated may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/activated`"}, :name web.Sensor/activated, :variadic false, :file "src/web/Sensor.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The activated read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor is active.\n\n  `var boolean = sensorInstance.activated\n\n  Because `web.Sensor` is a base class, activated may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/activated`"}, set-onactivate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 102, :column 7, :end-line 102, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onactivate `web.EventHandler` is called when one of the Sensor\n  child interfaces becomes active.\n\n  `sensorInstance.onactivate = function\n  sensorInstance.addEventListener('activate', function() { ... })\n\n  Because `web.Sensor` is a base class, onactivate may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onactivate`"}, :name web.Sensor/set-onactivate!, :variadic false, :file "src/web/Sensor.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onactivate `web.EventHandler` is called when one of the Sensor\n  child interfaces becomes active.\n\n  `sensorInstance.onactivate = function\n  sensorInstance.addEventListener('activate', function() { ... })\n\n  Because `web.Sensor` is a base class, onactivate may only be used on one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/onactivate`"}, set-has-reading! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 73, :column 7, :end-line 73, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The hasReading read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor has a reading.\n\n  `var boolean = sensorInstance.hasReading\n\n  Because `web.Sensor` is a base class, hasReading may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/hasReading`"}, :name web.Sensor/set-has-reading!, :variadic false, :file "src/web/Sensor.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The hasReading read-only property of the `web.Sensor` interface\n  a `web.Boolean` indicating whether the sensor has a reading.\n\n  `var boolean = sensorInstance.hasReading\n\n  Because `web.Sensor` is a base class, hasReading may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/hasReading`"}, set-timestamp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Sensor.cljs", :line 191, :column 7, :end-line 191, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The timestamp read-only property of the `web.Sensor` interface\n  the time stamp of the latest sensor reading.\n\n  `var timestamp = sensorInstance.timestamp\n\n  Because `web.Sensor` is a base class, timestamp may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/timestamp`"}, :name web.Sensor/set-timestamp!, :variadic false, :file "src/web/Sensor.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timestamp read-only property of the `web.Sensor` interface\n  the time stamp of the latest sensor reading.\n\n  `var timestamp = sensorInstance.timestamp\n\n  Because `web.Sensor` is a base class, timestamp may only be read from one of its derived classes.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Sensor/timestamp`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Sensor interface of the the Sensor APIs is the base class\n  all the other sensor interfaces. This interface cannot be used\n  Instead it provides properties, event handlers, and methods accessed\n  interfaces that inherit from it."}