{:rename-macros {}, :renames {}, :externs {PresentationRequest {}}, :use-macros {}, :excludes #{}, :name web.PresentationRequest, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.PresentationRequest/constructor, :file "src/web/PresentationRequest.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The PresentationRequest constructor creates a new `web.PresentationRequest` object which creates a new PresentationRequest.\n\n  url or urls[]\n  A URL or array of URLs that are possible URLs used to create, or reconnect, a presentation for the PresentationRequest instance.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/PresentationRequest`", :tag js}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 19, :column 7, :end-line 19, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The start() property of the `web.PresentationRequest` interface\n  a `web.Promise` that resolves with a `web.PresentationConnection`\n  the user agent prompts the user to select a display and grant\n  to use that display.\n\n  `var promise = presentationRequest.start()\n  promise.then(function(PresentationConnection) { ... })\n  .catch(function(error) { ...})`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/start`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PresentationRequest/start, :variadic true, :file "src/web/PresentationRequest.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The start() property of the `web.PresentationRequest` interface\n  a `web.Promise` that resolves with a `web.PresentationConnection`\n  the user agent prompts the user to select a display and grant\n  to use that display.\n\n  `var promise = presentationRequest.start()\n  promise.then(function(PresentationConnection) { ... })\n  .catch(function(error) { ...})`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/start`"}, reconnect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 35, :column 7, :end-line 35, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  When the reconnect(presentationId) method is called on a PresentationRequest\n  the user agent MUST run the following steps to reconnect to a\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/reconnect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PresentationRequest/reconnect, :variadic true, :file "src/web/PresentationRequest.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  When the reconnect(presentationId) method is called on a PresentationRequest\n  the user agent MUST run the following steps to reconnect to a\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/reconnect`"}, get-availability {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 45, :column 7, :end-line 45, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  When the getAvailability() method is called, the user agent MUST\n  the following steps:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/getAvailability`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.PresentationRequest/get-availability, :variadic true, :file "src/web/PresentationRequest.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  When the getAvailability() method is called, the user agent MUST\n  the following steps:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/getAvailability`"}, onconnectionavailable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 55, :column 7, :end-line 55, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The following are event handlers (and their corresponding event\n  event types) which must be supported, as event handler IDL attributes,\n  objects implementing the PresentationRequest interface:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/onconnectionavailable`"}, :name web.PresentationRequest/onconnectionavailable, :variadic false, :file "src/web/PresentationRequest.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The following are event handlers (and their corresponding event\n  event types) which must be supported, as event handler IDL attributes,\n  objects implementing the PresentationRequest interface:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/onconnectionavailable`"}, set-onconnectionavailable! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PresentationRequest.cljs", :line 66, :column 7, :end-line 66, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The following are event handlers (and their corresponding event\n  event types) which must be supported, as event handler IDL attributes,\n  objects implementing the PresentationRequest interface:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/onconnectionavailable`"}, :name web.PresentationRequest/set-onconnectionavailable!, :variadic false, :file "src/web/PresentationRequest.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The following are event handlers (and their corresponding event\n  event types) which must be supported, as event handler IDL attributes,\n  objects implementing the PresentationRequest interface:\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PresentationRequest/onconnectionavailable`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A PresentationRequest object is used to initiate or reconnect\n  a presentation made by a controlling browsing context. The PresentationRequest\n  MUST be implemented in a controlling browsing context provided\n  a controlling user agent."}