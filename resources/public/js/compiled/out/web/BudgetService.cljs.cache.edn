{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.BudgetService, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {get-budget {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BudgetService.cljs", :line 7, :column 7, :end-line 7, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The getBudget() property of the `web.BudgetService` interface\n  a `web.Promise` that resolves to an array of BudgetState objects\n  the expected state of the budget at times in the future.\n\n  `var aPromise = BudgetService.getBudget();\n  aPromise.then(function(budgetState[]){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/getBudget`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BudgetService/get-budget, :variadic true, :file "src/web/BudgetService.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getBudget() property of the `web.BudgetService` interface\n  a `web.Promise` that resolves to an array of BudgetState objects\n  the expected state of the budget at times in the future.\n\n  `var aPromise = BudgetService.getBudget();\n  aPromise.then(function(budgetState[]){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/getBudget`"}, get-cost {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BudgetService.cljs", :line 21, :column 7, :end-line 21, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The getCost() property of the `web.BudgetService` interface returns\n  `web.Promise` that resolves to a double indicating the worst-case\n  operation cost of the provided background operation.\n\n  `var aPromise = BudgetService.getCost(operation);\n  aPromise.then(function(someDouble){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/getCost`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BudgetService/get-cost, :variadic true, :file "src/web/BudgetService.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getCost() property of the `web.BudgetService` interface returns\n  `web.Promise` that resolves to a double indicating the worst-case\n  operation cost of the provided background operation.\n\n  `var aPromise = BudgetService.getCost(operation);\n  aPromise.then(function(someDouble){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/getCost`"}, reserve {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BudgetService.cljs", :line 35, :column 7, :end-line 35, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The reserve() property of the `web.BudgetService` interface returns\n  `web.Promise` that resolves to a boolean indicating whether the\n  budget operation can be reserved.\n\n  `var aPromise = BudgetService.reserve(operation);\n  aPromise.then(function(boolean){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/reserve`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BudgetService/reserve, :variadic true, :file "src/web/BudgetService.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The reserve() property of the `web.BudgetService` interface returns\n  `web.Promise` that resolves to a boolean indicating whether the\n  budget operation can be reserved.\n\n  `var aPromise = BudgetService.reserve(operation);\n  aPromise.then(function(boolean){ ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BudgetService/reserve`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The BudgetService interface of the Web Budget API provides a\n  interface to the user agentâ€™s budget service. It is available\n  both document and worker environments."}