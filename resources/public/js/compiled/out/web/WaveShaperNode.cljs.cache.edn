{:rename-macros {}, :renames {}, :externs {WaveShaperNode {}}, :use-macros {}, :excludes #{}, :name web.WaveShaperNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.WaveShaperNode/constructor, :file "src/web/WaveShaperNode.cljs", :line 5, :column 1, :end-line 5, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WaveShaperNode.cljs", :line 5, :column 6, :end-line 5, :end-column 17}, :doc "Constructor.\n\n  The WaveShaperNode() constructor of the Web Audio API creates a new `web.WaveShaperNode` object which is an `audio.AudioNode` that represents a non-linear distorter.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  context\n  A reference to an `audio.AudioContext`.\n  options Optional\n  Options are as follows:\n\n  curve: The shaping curve used for the waveshaping effect. The input signal is nominally within the range [-1;1].\n  oversample: Specifies what type of oversampling (if any) should be used when applying the shaping curve. Valid values are 'none', '2x', or '4x'. The default is 'none'.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/WaveShaperNode`", :tag js}, curve {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WaveShaperNode.cljs", :line 24, :column 7, :end-line 24, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The curve property of the `web.WaveShaperNode` interface is a\n  of numbers describing the distortion to apply.\n\n  `var audioCtx = new AudioContext();\n  var distortion = audioCtx.createWaveShaper();\n  distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve`"}, :name web.WaveShaperNode/curve, :variadic false, :file "src/web/WaveShaperNode.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The curve property of the `web.WaveShaperNode` interface is a\n  of numbers describing the distortion to apply.\n\n  `var audioCtx = new AudioContext();\n  var distortion = audioCtx.createWaveShaper();\n  distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve`"}, set-curve! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WaveShaperNode.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The curve property of the `web.WaveShaperNode` interface is a\n  of numbers describing the distortion to apply.\n\n  `var audioCtx = new AudioContext();\n  var distortion = audioCtx.createWaveShaper();\n  distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve`"}, :name web.WaveShaperNode/set-curve!, :variadic false, :file "src/web/WaveShaperNode.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The curve property of the `web.WaveShaperNode` interface is a\n  of numbers describing the distortion to apply.\n\n  `var audioCtx = new AudioContext();\n  var distortion = audioCtx.createWaveShaper();\n  distortion.curve = myCurveDataArray; // myCurveDataArray is a Float32Array`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/curve`"}, oversample {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WaveShaperNode.cljs", :line 52, :column 7, :end-line 52, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The oversample property of the `web.WaveShaperNode` interface\n  an enumerated value indicating if oversampling must be used.\n  is a technique for creating more samples (up-sampling) before\n  a distortion effect to the audio signal.\n\n  `distortion.oversample = enumeratedValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample`"}, :name web.WaveShaperNode/oversample, :variadic false, :file "src/web/WaveShaperNode.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oversample property of the `web.WaveShaperNode` interface\n  an enumerated value indicating if oversampling must be used.\n  is a technique for creating more samples (up-sampling) before\n  a distortion effect to the audio signal.\n\n  `distortion.oversample = enumeratedValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample`"}, set-oversample! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WaveShaperNode.cljs", :line 66, :column 7, :end-line 66, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The oversample property of the `web.WaveShaperNode` interface\n  an enumerated value indicating if oversampling must be used.\n  is a technique for creating more samples (up-sampling) before\n  a distortion effect to the audio signal.\n\n  `distortion.oversample = enumeratedValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample`"}, :name web.WaveShaperNode/set-oversample!, :variadic false, :file "src/web/WaveShaperNode.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oversample property of the `web.WaveShaperNode` interface\n  an enumerated value indicating if oversampling must be used.\n  is a technique for creating more samples (up-sampling) before\n  a distortion effect to the audio signal.\n\n  `distortion.oversample = enumeratedValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WaveShaperNode/oversample`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A WaveShaperNode always has exactly one input and one output."}