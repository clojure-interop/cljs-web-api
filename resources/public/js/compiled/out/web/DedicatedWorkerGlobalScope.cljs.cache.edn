{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{name}, :name web.DedicatedWorkerGlobalScope, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {console {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 175, :column 7, :end-line 175, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The console read-only property of the `web.WorkerGlobalScope`\n  returns a `web.Console` object providing access to the browser\n  for the worker.\n\n  `var consoleObj = self.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console`"}, :name web.DedicatedWorkerGlobalScope/console, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The console read-only property of the `web.WorkerGlobalScope`\n  returns a `web.Console` object providing access to the browser\n  for the worker.\n\n  `var consoleObj = self.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/console`"}, dump {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The dump() method of the `web.WorkerGlobalScope` interface allows\n  to write a message to stdout — i.e. in your terminal, in Firefox\n  This is the same as Firefox's `web.window.dump`, but for workers.\n\n  `dump('My message\\\\n');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DedicatedWorkerGlobalScope/dump, :variadic true, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The dump() method of the `web.WorkerGlobalScope` interface allows\n  to write a message to stdout — i.e. in your terminal, in Firefox\n  This is the same as Firefox's `web.window.dump`, but for workers.\n\n  `dump('My message\\\\n');`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/dump`"}, location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 188, :column 7, :end-line 188, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, :name web.DedicatedWorkerGlobalScope/location, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, self {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 147, :column 7, :end-line 147, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, :name web.DedicatedWorkerGlobalScope/self, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, import-scripts {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 50, :column 7, :end-line 50, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The importScripts() method of the `web.WorkerGlobalScope` interface\n  imports one or more scripts into the worker's scope.\n\n  `self.importScripts('foo.js');\n  self.importScripts('foo.js', 'bar.js', ...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.DedicatedWorkerGlobalScope/import-scripts, :variadic true, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The importScripts() method of the `web.WorkerGlobalScope` interface\n  imports one or more scripts into the worker's scope.\n\n  `self.importScripts('foo.js');\n  self.importScripts('foo.js', 'bar.js', ...);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 77, :column 7, :end-line 77, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The name read-only property of the `web.DedicatedWorkerGlobalScope`\n  returns the name that the `web.Worker` was (optionally) given\n  it was created. This is the name that the `web.Worker()` constructor\n  pass to get a reference to the `web.DedicatedWorkerGlobalScope`.\n\n  `var nameObj = self.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name`"}, :name web.DedicatedWorkerGlobalScope/set-name!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The name read-only property of the `web.DedicatedWorkerGlobalScope`\n  returns the name that the `web.Worker` was (optionally) given\n  it was created. This is the name that the `web.Worker()` constructor\n  pass to get a reference to the `web.DedicatedWorkerGlobalScope`.\n\n  `var nameObj = self.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name`"}, set-onmessageerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 133, :column 7, :end-line 133, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.DedicatedWorkerGlobalScope`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the worker—that is, when it receives\n  message that cannot be deserialized.\n\n  `onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror`"}, :name web.DedicatedWorkerGlobalScope/set-onmessageerror!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.DedicatedWorkerGlobalScope`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the worker—that is, when it receives\n  message that cannot be deserialized.\n\n  `onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 91, :column 7, :end-line 91, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.DedicatedWorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the message\n  occurs and bubbles through the `web.Worker` — i.e. when a message\n  sent to the worker using the `web.Worker.postMessage` method.\n\n  `self.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage`"}, :name web.DedicatedWorkerGlobalScope/onmessage, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.DedicatedWorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the message\n  occurs and bubbles through the `web.Worker` — i.e. when a message\n  sent to the worker using the `web.Worker.postMessage` method.\n\n  `self.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage`"}, performance {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 244, :column 7, :end-line 244, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The performance read-only property of the `web.WorkerGlobalScope`\n  returns a `performance.Performance` object to be used on the\n\n  `var perfObj = self.performance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance`"}, :name web.DedicatedWorkerGlobalScope/performance, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The performance read-only property of the `web.WorkerGlobalScope`\n  returns a `performance.Performance` object to be used on the\n\n  `var perfObj = self.performance;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/performance`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 63, :column 7, :end-line 63, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The name read-only property of the `web.DedicatedWorkerGlobalScope`\n  returns the name that the `web.Worker` was (optionally) given\n  it was created. This is the name that the `web.Worker()` constructor\n  pass to get a reference to the `web.DedicatedWorkerGlobalScope`.\n\n  `var nameObj = self.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name`"}, :name web.DedicatedWorkerGlobalScope/name, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The name read-only property of the `web.DedicatedWorkerGlobalScope`\n  returns the name that the `web.Worker` was (optionally) given\n  it was created. This is the name that the `web.Worker()` constructor\n  pass to get a reference to the `web.DedicatedWorkerGlobalScope`.\n\n  `var nameObj = self.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/name`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 105, :column 7, :end-line 105, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.DedicatedWorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the message\n  occurs and bubbles through the `web.Worker` — i.e. when a message\n  sent to the worker using the `web.Worker.postMessage` method.\n\n  `self.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage`"}, :name web.DedicatedWorkerGlobalScope/set-onmessage!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.DedicatedWorkerGlobalScope`\n  represents an `web.EventHandler` to be called when the message\n  occurs and bubbles through the `web.Worker` — i.e. when a message\n  sent to the worker using the `web.Worker.postMessage` method.\n\n  `self.onmessage = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessage`"}, set-self! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 161, :column 7, :end-line 161, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, :name web.DedicatedWorkerGlobalScope/set-self!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The self read-only property of the `web.WorkerGlobalScope` interface\n  a reference to the WorkerGlobalScope itself. Most of the time\n  is a specific scope like `web.DedicatedWorkerGlobalScope`, `web.SharedWorkerGlobalScope`,\n  `web.ServiceWorkerGlobalScope`.\n\n  `var selfRef = self;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self`"}, set-navigator! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 230, :column 7, :end-line 230, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, :name web.DedicatedWorkerGlobalScope/set-navigator!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, post-message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([this a-message transfer-list])), :doc "Method.\n\n  The postMessage() method of the `web.DedicatedWorkerGlobalScope`\n  sends a message to the main thread that spawned it. This accepts\n  single parameter, which is the data to send to the worker. The\n  may be any value or JavaScript object handled by the structured\n  algorithm, which includes cyclical references.\n\n  `postMessage(aMessage, transferList);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage`"}, :name web.DedicatedWorkerGlobalScope/post-message, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 19, :method-params ([this a-message transfer-list]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this a-message transfer-list])), :doc "Method.\n\n  The postMessage() method of the `web.DedicatedWorkerGlobalScope`\n  sends a message to the main thread that spawned it. This accepts\n  single parameter, which is the data to send to the worker. The\n  may be any value or JavaScript object handled by the structured\n  algorithm, which includes cyclical references.\n\n  `postMessage(aMessage, transferList);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/postMessage`"}, close {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.DedicatedWorkerGlobalScope` interface\n  any tasks queued in the DedicatedWorkerGlobalScope's event loop,\n  closing this particular scope.\n\n  `self.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close`"}, :name web.DedicatedWorkerGlobalScope/close, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The close() method of the `web.DedicatedWorkerGlobalScope` interface\n  any tasks queued in the DedicatedWorkerGlobalScope's event loop,\n  closing this particular scope.\n\n  `self.close();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/close`"}, set-location! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 202, :column 7, :end-line 202, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, :name web.DedicatedWorkerGlobalScope/set-location!, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The location read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerLocation` associated with the worker.\n  is a specific location object, mostly a subset of the `web.Location`\n  browsing scopes, but adapted to workers.\n\n  `var locationObj = self.location;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/location`"}, onmessageerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 119, :column 7, :end-line 119, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.DedicatedWorkerGlobalScope`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the worker—that is, when it receives\n  message that cannot be deserialized.\n\n  `onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror`"}, :name web.DedicatedWorkerGlobalScope/onmessageerror, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.DedicatedWorkerGlobalScope`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the worker—that is, when it receives\n  message that cannot be deserialized.\n\n  `onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DedicatedWorkerGlobalScope/onmessageerror`"}, navigator {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/DedicatedWorkerGlobalScope.cljs", :line 216, :column 7, :end-line 216, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}, :name web.DedicatedWorkerGlobalScope/navigator, :variadic false, :file "src/web/DedicatedWorkerGlobalScope.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The navigator read-only property of the `web.WorkerGlobalScope`\n  returns the `web.WorkerNavigator` associated with the worker.\n  is a specific navigator object, mostly a subset of the `web.Navigator`\n  browsing scopes, but adapted to workers.\n\n  `var navigatorObj = self.navigator;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/navigator`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The DedicatedWorkerGlobalScope object (the `web.Worker` global\n  is accessible through the `web.self` keyword. Some additional\n  functions, namespaces objects, and constructors, not typically\n  with the worker global scope, but available on it, are listed\n  the JavaScript Reference. See also: Functions available to workers."}