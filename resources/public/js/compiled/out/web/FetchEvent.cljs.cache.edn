{:rename-macros {}, :renames {}, :externs {FetchEvent {}}, :use-macros {}, :excludes #{}, :name web.FetchEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {respond-with {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 26, :column 7, :end-line 26, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The respondWith() method of `web.FetchEvent` prevents the browser's\n  fetch handling, and allows you to provide a promise for a `web.Response`\n\n  `fetchEvent.respondWith(\n  // Promise that resolves to a Response.\n  ​)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.FetchEvent/respond-with, :variadic true, :file "src/web/FetchEvent.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The respondWith() method of `web.FetchEvent` prevents the browser's\n  fetch handling, and allows you to provide a promise for a `web.Response`\n\n  `fetchEvent.respondWith(\n  // Promise that resolves to a Response.\n  ​)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/respondWith`"}, set-navigation-preload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 144, :column 7, :end-line 144, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The navigationPreload read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the instance of `web.NavigationPreloadManager`\n  with the current service worker registration.\n\n  `var promise = fetchEvent.navigationPreload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/navigationPreload`"}, :name web.FetchEvent/set-navigation-preload!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The navigationPreload read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the instance of `web.NavigationPreloadManager`\n  with the current service worker registration.\n\n  `var promise = fetchEvent.navigationPreload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/navigationPreload`"}, set-is-reload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 117, :column 7, :end-line 117, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The isReload read-only property of the `web.FetchEvent` interface\n  true if the event was dispatched by the user attempting to reload\n  page, and false otherwise. Pressing the refresh button is a reload\n  clicking a link and pressing the back button is not.\n\n  `var reloaded = FetchEvent.isReload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload`"}, :name web.FetchEvent/set-is-reload!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isReload read-only property of the `web.FetchEvent` interface\n  true if the event was dispatched by the user attempting to reload\n  page, and false otherwise. Pressing the refresh button is a reload\n  clicking a link and pressing the back button is not.\n\n  `var reloaded = FetchEvent.isReload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload`"}, wait-until {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 40, :column 7, :end-line 40, :end-column 17, :arglists (quote ([this promise])), :doc "Method.\n\n  The extendableEvent.waitUntil() method tells the event dispatcher\n  work is ongoing. It can also be used to detect whether that work\n  successful. In service workers, waitUntil() tells the browser\n  work is ongoing until the promise settles, and it shouldn't terminate\n  service worker if it wants that work to complete.\n\n  `event.waitUntil(promise)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil`"}, :name web.FetchEvent/wait-until, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 17, :method-params ([this promise]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this promise])), :doc "Method.\n\n  The extendableEvent.waitUntil() method tells the event dispatcher\n  work is ongoing. It can also be used to detect whether that work\n  successful. In service workers, waitUntil() tells the browser\n  work is ongoing until the promise settles, and it shouldn't terminate\n  service worker if it wants that work to complete.\n\n  `event.waitUntil(promise)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ExtendableEvent/waitUntil`"}, preload-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 157, :column 7, :end-line 157, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadRequest`"}, :name web.FetchEvent/preload-request, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadRequest`"}, request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 227, :column 7, :end-line 227, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The request read-only property of the `web.FetchEvent` interface\n  the `web.Request` that triggered the event handler.\n\n  `var recentRequest = FetchEvent.request;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request`"}, :name web.FetchEvent/request, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The request read-only property of the `web.FetchEvent` interface\n  the `web.Request` that triggered the event handler.\n\n  `var recentRequest = FetchEvent.request;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request`"}, client-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 79, :column 7, :end-line 79, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The clientId read-only property of the `web.FetchEvent` returns\n  id of the `web.Client` that the current service worker is controlling.\n\n  `var myClientId = FetchEvent.clientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId`"}, :name web.FetchEvent/client-id, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The clientId read-only property of the `web.FetchEvent` returns\n  id of the `web.Client` that the current service worker is controlling.\n\n  `var myClientId = FetchEvent.clientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId`"}, set-request! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 239, :column 7, :end-line 239, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The request read-only property of the `web.FetchEvent` interface\n  the `web.Request` that triggered the event handler.\n\n  `var recentRequest = FetchEvent.request;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request`"}, :name web.FetchEvent/set-request!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The request read-only property of the `web.FetchEvent` interface\n  the `web.Request` that triggered the event handler.\n\n  `var recentRequest = FetchEvent.request;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/request`"}, set-client! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 67, :column 7, :end-line 67, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The FetchEvent.client read-only property returns the `web.Client`\n  the current service worker is controlling.\n\n  `var myClient = FetchEvent.client;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/client`"}, :name web.FetchEvent/set-client!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The FetchEvent.client read-only property returns the `web.Client`\n  the current service worker is controlling.\n\n  `var myClient = FetchEvent.client;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/client`"}, resulting-client-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 251, :column 7, :end-line 251, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The resultingClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that replaces the previous\n  during a page navigation.\n\n  `var myResultingClientId = FetchEvent.resultingClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/resultingClientId`"}, :name web.FetchEvent/resulting-client-id, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The resultingClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that replaces the previous\n  during a page navigation.\n\n  `var myResultingClientId = FetchEvent.resultingClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/resultingClientId`"}, set-preload-request! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 166, :column 7, :end-line 166, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadRequest`"}, :name web.FetchEvent/set-preload-request!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 166, :end-line 166, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadRequest`"}, set-client-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 91, :column 7, :end-line 91, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The clientId read-only property of the `web.FetchEvent` returns\n  id of the `web.Client` that the current service worker is controlling.\n\n  `var myClientId = FetchEvent.clientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId`"}, :name web.FetchEvent/set-client-id!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The clientId read-only property of the `web.FetchEvent` returns\n  id of the `web.Client` that the current service worker is controlling.\n\n  `var myClientId = FetchEvent.clientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/clientId`"}, client {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 55, :column 7, :end-line 55, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The FetchEvent.client read-only property returns the `web.Client`\n  the current service worker is controlling.\n\n  `var myClient = FetchEvent.client;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/client`"}, :name web.FetchEvent/client, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The FetchEvent.client read-only property returns the `web.Client`\n  the current service worker is controlling.\n\n  `var myClient = FetchEvent.client;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/client`"}, set-preload-response! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 188, :column 7, :end-line 188, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The preloadResponse read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the navigation preload\n  if navigation preload was triggered or undefined otherwise.\n\n  `var expectedResponse = FetchEvent.preloadResponse;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadResponse`"}, :name web.FetchEvent/set-preload-response!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The preloadResponse read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the navigation preload\n  if navigation preload was triggered or undefined otherwise.\n\n  `var expectedResponse = FetchEvent.preloadResponse;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadResponse`"}, replaces-client-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 201, :column 7, :end-line 201, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The replacesClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that is being replaced during\n  page navigation.\n\n  `var myReplacedClientId = FetchEvent.replacesClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/replacesClientId`"}, :name web.FetchEvent/replaces-client-id, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The replacesClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that is being replaced during\n  page navigation.\n\n  `var myReplacedClientId = FetchEvent.replacesClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/replacesClientId`"}, is-reload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 103, :column 7, :end-line 103, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The isReload read-only property of the `web.FetchEvent` interface\n  true if the event was dispatched by the user attempting to reload\n  page, and false otherwise. Pressing the refresh button is a reload\n  clicking a link and pressing the back button is not.\n\n  `var reloaded = FetchEvent.isReload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload`"}, :name web.FetchEvent/is-reload, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isReload read-only property of the `web.FetchEvent` interface\n  true if the event was dispatched by the user attempting to reload\n  page, and false otherwise. Pressing the refresh button is a reload\n  clicking a link and pressing the back button is not.\n\n  `var reloaded = FetchEvent.isReload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/isReload`"}, navigation-preload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 131, :column 7, :end-line 131, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The navigationPreload read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the instance of `web.NavigationPreloadManager`\n  with the current service worker registration.\n\n  `var promise = fetchEvent.navigationPreload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/navigationPreload`"}, :name web.FetchEvent/navigation-preload, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The navigationPreload read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the instance of `web.NavigationPreloadManager`\n  with the current service worker registration.\n\n  `var promise = fetchEvent.navigationPreload`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/navigationPreload`"}, set-resulting-client-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 264, :column 7, :end-line 264, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  The resultingClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that replaces the previous\n  during a page navigation.\n\n  `var myResultingClientId = FetchEvent.resultingClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/resultingClientId`"}, :name web.FetchEvent/set-resulting-client-id!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The resultingClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that replaces the previous\n  during a page navigation.\n\n  `var myResultingClientId = FetchEvent.resultingClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/resultingClientId`"}, set-replaces-client-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 214, :column 7, :end-line 214, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The replacesClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that is being replaced during\n  page navigation.\n\n  `var myReplacedClientId = FetchEvent.replacesClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/replacesClientId`"}, :name web.FetchEvent/set-replaces-client-id!, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The replacesClientId read-only property of the `web.FetchEvent`\n  is the `web.id` of the `web.client` that is being replaced during\n  page navigation.\n\n  `var myReplacedClientId = FetchEvent.replacesClientId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/replacesClientId`"}, preload-response {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 175, :column 7, :end-line 175, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The preloadResponse read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the navigation preload\n  if navigation preload was triggered or undefined otherwise.\n\n  `var expectedResponse = FetchEvent.preloadResponse;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadResponse`"}, :name web.FetchEvent/preload-response, :variadic false, :file "src/web/FetchEvent.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The preloadResponse read-only property of the `web.FetchEvent`\n  returns a `web.Promise` that resolves to the navigation preload\n  if navigation preload was triggered or undefined otherwise.\n\n  `var expectedResponse = FetchEvent.preloadResponse;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/PreloadResponse`"}, constructor {:name web.FetchEvent/constructor, :file "src/web/FetchEvent.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/FetchEvent.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The FetchEvent() constructor creates a new `web.FetchEvent` object.\n\n  type\n  The type of the Event.\n  init Optional\n  An options object containing any custom settings that you want to apply to the event object. Options are as follows:\n\n  request: The `web.Request` object that would have triggered the event handler.\n  clientId: The `web.Client` that the current service worker is controlling. This property is not yet implemented in Chrome.\n  isReload: A `web.Boolean` that signifies whether the page was reloaded or not when the event was dispatched. true if yes, and false if not. Typically, pressing the refresh button in a browser is a reload, while clicking a link and pressing the back button is not. If not present, it defaults to false.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FetchEvent/FetchEvent`", :tag js}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "This is the event type for fetch events dispatched on the service\n  global scope. It contains information about the fetch, including\n  request and how the receiver will treat the response. It provides\n  `web.event.respondWith()` method, which allows us to provide\n  response to this fetch."}