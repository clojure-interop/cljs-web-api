{:rename-macros {}, :renames {}, :externs {Event {}}, :use-macros {}, :excludes #{type}, :name web.Event, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 328, :column 7, :end-line 328, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, :name web.Event/target, :variadic false, :file "src/web/Event.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 328, :end-line 328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, set-return-value! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 292, :column 7, :end-line 292, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, :name web.Event/set-return-value!, :variadic false, :file "src/web/Event.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, return-value {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 278, :column 7, :end-line 278, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, :name web.Event/return-value, :variadic false, :file "src/web/Event.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.Event` property returnValue indicates whether the default\n  for this event has been prevented or not.\n\n  `event.returnValue = bool;\n\n  var bool = event.returnValue;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/returnValue`"}, event-phase {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 216, :column 7, :end-line 216, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The eventPhase read-only property of the `web.Event` interface\n  which phase of the event flow is currently being evaluated.\n\n  `var phase = event.eventPhase;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase`"}, :name web.Event/event-phase, :variadic false, :file "src/web/Event.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The eventPhase read-only property of the `web.Event` interface\n  which phase of the event flow is currently being evaluated.\n\n  `var phase = event.eventPhase;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase`"}, time-stamp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 356, :column 7, :end-line 356, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, :name web.Event/time-stamp, :variadic false, :file "src/web/Event.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, bubbles {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 118, :column 7, :end-line 118, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The bubbles read-only property of the `web.Event` interface indicates\n  the event bubbles up through the DOM or not.\n\n  `var doesItBubble = event.bubbles;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles`"}, :name web.Event/bubbles, :variadic false, :file "src/web/Event.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The bubbles read-only property of the `web.Event` interface indicates\n  the event bubbles up through the DOM or not.\n\n  `var doesItBubble = event.bubbles;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/bubbles`"}, explicit-original-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 228, :column 7, :end-line 228, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, :name web.Event/explicit-original-target, :variadic false, :file "src/web/Event.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, current-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 188, :column 7, :end-line 188, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The currentTarget read-only property of the `web.Event` interface\n  the current target for the event, as the event traverses the\n  It always refers to the element to which the event handler has\n  attached, as opposed to `web.Event.target`, which identifies\n  element on which the event occurred and which may be its direct\n\n  `var currentEventTarget = event.currentTarget;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget`"}, :name web.Event/current-target, :variadic false, :file "src/web/Event.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The currentTarget read-only property of the `web.Event` interface\n  the current target for the event, as the event traverses the\n  It always refers to the element to which the event handler has\n  attached, as opposed to `web.Event.target`, which identifies\n  element on which the event occurred and which may be its direct\n\n  `var currentEventTarget = event.currentTarget;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 342, :column 7, :end-line 342, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, :name web.Event/set-target!, :variadic false, :file "src/web/Event.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 342, :end-line 342, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `web.Event` interface is a reference\n  the object that dispatched the event. It is different from `web.Event.currentTarget`\n  the event handler is called during the bubbling or capturing\n  of the event.\n\n  `var theTarget = event.target;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/target`"}, default-prevented {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 203, :column 7, :end-line 203, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The defaultPrevented read-only property of the `web.Event` interface\n  a `web.Boolean` indicating whether or not `web.Event.preventDefault()`\n  called on the event.\n\n  `var defaultWasPrevented = event.defaultPrevented;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented`"}, :name web.Event/default-prevented, :variadic false, :file "src/web/Event.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The defaultPrevented read-only property of the `web.Event` interface\n  a `web.Boolean` indicating whether or not `web.Event.preventDefault()`\n  called on the event.\n\n  `var defaultWasPrevented = event.defaultPrevented;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/defaultPrevented`"}, init-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 47, :column 7, :end-line 47, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The Event.initEvent() method is used to initialize the value\n  an `web.event` created using `web.Document.createEvent()`.\n\n  `event.initEvent(type, bubbles, cancelable);\n\n\n  type\n  Is a `dom.DOMString` defining the type of event.\n  bubbles\n  Is a `web.Boolean` deciding whether the event should bubble up through the event chain or not. Once set, the read-only property `web.Event.bubbles` will give its value.\n  cancelable\n  Is a `web.Boolean` defining whether the event can be canceled. Once set, the read-only property `web.Event.cancelable` will give its value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Event/init-event, :variadic true, :file "src/web/Event.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Event.initEvent() method is used to initialize the value\n  an `web.event` created using `web.Document.createEvent()`.\n\n  `event.initEvent(type, bubbles, cancelable);\n\n\n  type\n  Is a `dom.DOMString` defining the type of event.\n  bubbles\n  Is a `web.Boolean` deciding whether the event should bubble up through the event chain or not. Once set, the read-only property `web.Event.bubbles` will give its value.\n  cancelable\n  Is a `web.Boolean` defining whether the event can be canceled. Once set, the read-only property `web.Event.cancelable` will give its value.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent`"}, set-original-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 269, :column 7, :end-line 269, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, :name web.Event/set-original-target!, :variadic false, :file "src/web/Event.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 269, :end-line 269, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, prevent-default {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 81, :column 7, :end-line 81, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Event` interface's preventDefault() method tells the\n  agent that if the event does not get explicitly handled, its\n  action should not be taken as it normally would be.\n\n  `event.preventDefault();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault`"}, :name web.Event/prevent-default, :variadic false, :file "src/web/Event.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Event` interface's preventDefault() method tells the\n  agent that if the event does not get explicitly handled, its\n  action should not be taken as it normally would be.\n\n  `event.preventDefault();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault`"}, stop-immediate-propagation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 94, :column 7, :end-line 94, :end-column 33, :arglists (quote ([this])), :doc "Method.\n\n  The stopImmediatePropagation() method of the `web.Event` interface\n  other listeners of the same event from being called.\n\n  `event.stopImmediatePropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation`"}, :name web.Event/stop-immediate-propagation, :variadic false, :file "src/web/Event.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stopImmediatePropagation() method of the `web.Event` interface\n  other listeners of the same event from being called.\n\n  `event.stopImmediatePropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopImmediatePropagation`"}, set-cancel-bubble! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 159, :column 7, :end-line 159, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, :name web.Event/set-cancel-bubble!, :variadic false, :file "src/web/Event.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, ms-convert-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 67, :column 7, :end-line 67, :end-column 21, :arglists (quote ([this file target-type target-url])), :doc "Method.\n\n  The msConvertURL method instructs the HTML paste operation on\n  to modify the src attribute that corresponds to each file in\n  clipboardData.files collection, allowing otherwise inaccessible\n  to be converted to blob or data URIs.\n\n  `var retVal = DragEvent.msConvertURL(file, targetType, targetURL);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/msConvertURL`"}, :name web.Event/ms-convert-url, :variadic false, :file "src/web/Event.cljs", :end-column 21, :method-params ([this file target-type target-url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this file target-type target-url])), :doc "Method.\n\n  The msConvertURL method instructs the HTML paste operation on\n  to modify the src attribute that corresponds to each file in\n  clipboardData.files collection, allowing otherwise inaccessible\n  to be converted to blob or data URIs.\n\n  `var retVal = DragEvent.msConvertURL(file, targetType, targetURL);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/msConvertURL`"}, cancel-bubble {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 143, :column 7, :end-line 143, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, :name web.Event/cancel-bubble, :variadic false, :file "src/web/Event.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The cancelBubble property of the `web.Event` interface is a historical\n  to `web.Event.stopPropagation()`. Setting its value to true before\n  from an event handler prevents propagation of the event. In later\n  setting this to false does nothing. See Browser compatibility\n  details.\n\n  `event.cancelBubble = bool;\n  var bool = event.cancelBubble;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelBubble`"}, src-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 306, :column 7, :end-line 306, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, :name web.Event/src-element, :variadic false, :file "src/web/Event.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 306, :end-line 306, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, is-trusted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 246, :column 7, :end-line 246, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The isTrusted read-only property of the `web.Event` interface\n  a `web.Boolean` that is true when the event was generated by\n  user action, and false when the event was created or modified\n  a script or dispatched via `web.EventTarget.dispatchEvent()`.\n\n  `var eventIsTrusted = event.isTrusted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted`"}, :name web.Event/is-trusted, :variadic false, :file "src/web/Event.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 246, :end-line 246, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isTrusted read-only property of the `web.Event` interface\n  a `web.Boolean` that is true when the event was generated by\n  user action, and false when the event was created or modified\n  a script or dispatched via `web.EventTarget.dispatchEvent()`.\n\n  `var eventIsTrusted = event.isTrusted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/isTrusted`"}, set-explicit-original-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 237, :column 7, :end-line 237, :end-column 36, :arglists (quote ([this val])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, :name web.Event/set-explicit-original-target!, :variadic false, :file "src/web/Event.cljs", :end-column 36, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 237, :end-line 237, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The explicit original target of the event. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/explicitOriginalTarget`"}, composed-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 14, :column 7, :end-line 14, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, :name web.Event/composed-path, :variadic false, :file "src/web/Event.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 380, :column 7, :end-line 380, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Event` interface returns\n  string containing the event's type. It is set when the event\n  constructed and is the name commonly used to refer to the specific\n  such as click, load, or error.\n\n  `let eventType = event.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/type`"}, :name web.Event/type, :variadic false, :file "src/web/Event.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 380, :end-line 380, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Event` interface returns\n  string containing the event's type. It is set when the event\n  constructed and is the name commonly used to refer to the specific\n  such as click, load, or error.\n\n  `let eventType = event.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/type`"}, stop-propagation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 106, :column 7, :end-line 106, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The stopPropagation() method of the `web.Event` interface prevents\n  propagation of the current event in the capturing and bubbling\n\n  `event.stopPropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation`"}, :name web.Event/stop-propagation, :variadic false, :file "src/web/Event.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The stopPropagation() method of the `web.Event` interface prevents\n  propagation of the current event in the capturing and bubbling\n\n  `event.stopPropagation();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation`"}, set-src-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 317, :column 7, :end-line 317, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, :name web.Event/set-src-element!, :variadic false, :file "src/web/Event.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Event.srcElement is a proprietary alias (implemented in Internet\n  for the standard `web.Event.target` property, which is supported\n  some other browsers for web compatibility purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/srcElement`"}, original-target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 260, :column 7, :end-line 260, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, :name web.Event/original-target, :variadic false, :file "src/web/Event.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The original target of the event before any retargetings. (Mozilla-specific)\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/originalTarget`"}, cancelable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 130, :column 7, :end-line 130, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The cancelable read-only property of the `web.Event` interface\n  whether the event can be canceled, and therefore prevented as\n  the event never happened.\n\n  `bool = event.cancelable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable`"}, :name web.Event/cancelable, :variadic false, :file "src/web/Event.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The cancelable read-only property of the `web.Event` interface\n  whether the event can be canceled, and therefore prevented as\n  the event never happened.\n\n  `bool = event.cancelable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/cancelable`"}, set-time-stamp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 368, :column 7, :end-line 368, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, :name web.Event/set-time-stamp!, :variadic false, :file "src/web/Event.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The timeStamp read-only property of the `web.Event` interface\n  the time (in milliseconds) at which the event was created.\n\n  `var time = event.timeStamp;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/timeStamp`"}, constructor {:name web.Event/constructor, :file "src/web/Event.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The Event() constructor creates a new `web.Event`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/Event`", :tag js}, create-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 28, :column 7, :end-line 28, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  Creates a new event, which must then be initialized by calling\n  initEvent() method.\n\n  `document.createEvent(type)\n\n\n  type\n  A string indicating the event type to create.\n\n\n  This method returns a new DOM `web.Event` object of the specified type, which must be initialized before use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/createEvent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Event/create-event, :variadic true, :file "src/web/Event.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Creates a new event, which must then be initialized by calling\n  initEvent() method.\n\n  `document.createEvent(type)\n\n\n  type\n  A string indicating the event type to create.\n\n\n  This method returns a new DOM `web.Event` object of the specified type, which must be initialized before use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/createEvent`"}, composed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Event.cljs", :line 175, :column 7, :end-line 175, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}, :name web.Event/composed, :variadic false, :file "src/web/Event.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Event interface represents an event which takes place in\n  DOM."}