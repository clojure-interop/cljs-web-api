{:rename-macros {}, :renames {}, :externs {OscillatorNode {}}, :use-macros {}, :excludes #{type}, :name web.OscillatorNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 173, :column 7, :end-line 173, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` specifying the shape of oscillator wave. The\n  available values are:\n\n  `OscillatorNode.type = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type`"}, :name web.OscillatorNode/set-type!, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString` specifying the shape of oscillator wave. The\n  available values are:\n\n  `OscillatorNode.type = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type`"}, set-detune! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 88, :column 7, :end-line 88, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.detune.setValueAtTime(100, audioCtx.currentTime); // value in cents\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune`"}, :name web.OscillatorNode/set-detune!, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.detune.setValueAtTime(100, audioCtx.currentTime); // value in cents\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune`"}, frequency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 103, :column 7, :end-line 103, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // value in hertz\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency`"}, :name web.OscillatorNode/frequency, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // value in hertz\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency`"}, start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 47, :column 7, :end-line 47, :end-column 12, :arglists (quote ([this when])), :doc "Method.\n\n  The following example shows basic usage of an `audio.AudioContext`\n  create an oscillator node. For an applied example, check out\n  Violent Theremin demo (see app.js for relevant code).\n\n  `oscillator.start(when); // start playing oscillator at the point in time specified by when`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/start`"}, :name web.OscillatorNode/start, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 12, :method-params ([this when]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this when])), :doc "Method.\n\n  The following example shows basic usage of an `audio.AudioContext`\n  create an oscillator node. For an applied example, check out\n  Violent Theremin demo (see app.js for relevant code).\n\n  `oscillator.start(when); // start playing oscillator at the point in time specified by when`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/start`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 161, :column 7, :end-line 161, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` specifying the shape of oscillator wave. The\n  available values are:\n\n  `OscillatorNode.type = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type`"}, :name web.OscillatorNode/type, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString` specifying the shape of oscillator wave. The\n  available values are:\n\n  `OscillatorNode.type = type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/type`"}, onended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 133, :column 7, :end-line 133, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onended property of the `web.OscillatorNode` interface is\n  to set the event handler for the ended event, which fires when\n  tone has stopped playing.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.onended = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended`"}, :name web.OscillatorNode/onended, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onended property of the `web.OscillatorNode` interface is\n  to set the event handler for the ended event, which fires when\n  tone has stopped playing.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.onended = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended`"}, set-periodic-wave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 33, :column 7, :end-line 33, :end-column 24, :arglists (quote ([this wave])), :doc "Method.\n\n  The setPeriodicWave() method of the `web.OscillatorNode` interface\n  used to point to a `web.PeriodicWave` defining a periodic waveform\n  can be used to shape the oscillator's output, when `web.type`\n  custom.\n\n  `OscillatorNode.setPeriodicWave(wave);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave`"}, :name web.OscillatorNode/set-periodic-wave, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 24, :method-params ([this wave]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this wave])), :doc "Method.\n\n  The setPeriodicWave() method of the `web.OscillatorNode` interface\n  used to point to a `web.PeriodicWave` defining a periodic waveform\n  can be used to shape the oscillator's output, when `web.type`\n  custom.\n\n  `OscillatorNode.setPeriodicWave(wave);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/setPeriodicWave`"}, stop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 60, :column 7, :end-line 60, :end-column 11, :arglists (quote ([this when])), :doc "Method.\n\n  The following example shows basic usage of an `audio.AudioContext`\n  create an oscillator node. For an applied example, check out\n  Violent Theremin demo (see app.js for relevant code).\n\n  `oscillator.stop(when); // stop playing oscillator at when`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/stop`"}, :name web.OscillatorNode/stop, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 11, :method-params ([this when]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this when])), :doc "Method.\n\n  The following example shows basic usage of an `audio.AudioContext`\n  create an oscillator node. For an applied example, check out\n  Violent Theremin demo (see app.js for relevant code).\n\n  `oscillator.stop(when); // stop playing oscillator at when`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/stop`"}, set-frequency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 118, :column 7, :end-line 118, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // value in hertz\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency`"}, :name web.OscillatorNode/set-frequency!, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.frequency.setValueAtTime(440, audioCtx.currentTime); // value in hertz\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/frequency`"}, detune {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 73, :column 7, :end-line 73, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.detune.setValueAtTime(100, audioCtx.currentTime); // value in cents\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune`"}, :name web.OscillatorNode/detune, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.detune.setValueAtTime(100, audioCtx.currentTime); // value in cents\n\n\n  Note: though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/detune`"}, constructor {:name web.OscillatorNode/constructor, :file "src/web/OscillatorNode.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The OscillatorNode() constructor of the Web Audio API creates a new `web.OscillatorNode` object which is an `audio.AudioNode` that represents a periodic waveform, like a sine wave, optionally setting the node's properties' values to match values in a specified object.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  \\tcontext\n  \\tA reference to an `audio.AudioContext`.\n  \\toptions Optional\n  \\tAn object whose properties specify the initial values for the oscillator node's properties. Any properties omitted from the object will take on the default value as documented.\n\n  \\t\\ttype\n  \\t\\tThe shape of the wave produced by the node. Valid values are 'sine', 'square', 'sawtooth', 'triangle' and 'custom'. The default is 'sine'.\n  \\t\\tdetune\n  \\t\\tA detuning value (in cents) which will offset the frequency by the given amount. Its default is 0.\n  \\t\\tfrequency\n  \\t\\tThe frequency (in hertz) of the periodic waveform. Its default is 440.\n  \\t\\tperiodicWave\n  \\t\\tAn arbitrary period waveform described by a `web.PeriodicWave` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/OscillatorNode`", :tag js}, set-onended! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/OscillatorNode.cljs", :line 147, :column 7, :end-line 147, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onended property of the `web.OscillatorNode` interface is\n  to set the event handler for the ended event, which fires when\n  tone has stopped playing.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.onended = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended`"}, :name web.OscillatorNode/set-onended!, :variadic false, :file "src/web/OscillatorNode.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onended property of the `web.OscillatorNode` interface is\n  to set the event handler for the ended event, which fires when\n  tone has stopped playing.\n\n  `var oscillator = audioCtx.createOscillator();\n  oscillator.onended = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/OscillatorNode/onended`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The OscillatorNode interface represents a periodic waveform,\n  as a sine wave. It is an `audio.AudioScheduledSourceNode` audio-processing\n  that causes a specified frequency of a given wave to be created—in\n  a constant tone."}