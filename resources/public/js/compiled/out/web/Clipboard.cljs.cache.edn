{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Clipboard, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {read {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clipboard.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The read() method of the `web.Clipboard` interface requests a\n  of the clipboard's contents, delivering the data to the returned\n  when the promise is resolved. Unlike `web.readText()`, the read()\n  can return arbitrary data, such as images.\n\n  `var promise = navigator.clipboard.read();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read`"}, :name web.Clipboard/read, :variadic false, :file "src/web/Clipboard.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The read() method of the `web.Clipboard` interface requests a\n  of the clipboard's contents, delivering the data to the returned\n  when the promise is resolved. Unlike `web.readText()`, the read()\n  can return arbitrary data, such as images.\n\n  `var promise = navigator.clipboard.read();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/read`"}, read-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clipboard.cljs", :line 21, :column 7, :end-line 21, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Clipboard` interface's readText() method returns a `web.Promise`\n  resolves with a copy of the textual contents of the system clipboard.\n\n  `var promise = navigator.clipboard.readText()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText`"}, :name web.Clipboard/read-text, :variadic false, :file "src/web/Clipboard.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `web.Clipboard` interface's readText() method returns a `web.Promise`\n  resolves with a copy of the textual contents of the system clipboard.\n\n  `var promise = navigator.clipboard.readText()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/readText`"}, write {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clipboard.cljs", :line 33, :column 7, :end-line 33, :end-column 12, :arglists (quote ([this data-transfer])), :doc "Method.\n\n  The `web.Clipboard` method write() writes arbitrary data, such\n  images, to the clipboard.\n\n  `var promise = navigator.clipboard.write(dataTransfer)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write`"}, :name web.Clipboard/write, :variadic false, :file "src/web/Clipboard.cljs", :end-column 12, :method-params ([this data-transfer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this data-transfer])), :doc "Method.\n\n  The `web.Clipboard` method write() writes arbitrary data, such\n  images, to the clipboard.\n\n  `var promise = navigator.clipboard.write(dataTransfer)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/write`"}, write-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clipboard.cljs", :line 45, :column 7, :end-line 45, :end-column 17, :arglists (quote ([this new-clip-text])), :doc "Method.\n\n  The `web.Clipboard` interface's writeText() property writes the\n  text string to the system clipboard.\n\n  `var promise = navigator.clipboard.writeText(newClipText)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText`"}, :name web.Clipboard/write-text, :variadic false, :file "src/web/Clipboard.cljs", :end-column 17, :method-params ([this new-clip-text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this new-clip-text])), :doc "Method.\n\n  The `web.Clipboard` interface's writeText() property writes the\n  text string to the system clipboard.\n\n  `var promise = navigator.clipboard.writeText(newClipText)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clipboard/writeText`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Clipboard interface implements the Clipboard API, providing—if\n  user grants permission—both read and write access to the contents\n  the system clipboard."}