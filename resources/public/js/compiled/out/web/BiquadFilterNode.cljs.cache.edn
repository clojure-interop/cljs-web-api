{:rename-macros {}, :renames {}, :externs {BiquadFilterNode {}}, :use-macros {}, :excludes #{type}, :name web.BiquadFilterNode, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 256, :column 7, :end-line 256, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  A string (enum) representing a BiquadFilterType.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.type = 'lowpass';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type`"}, :name web.BiquadFilterNode/set-type!, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A string (enum) representing a BiquadFilterType.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.type = 'lowpass';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type`"}, q {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 211, :column 7, :end-line 211, :end-column 8, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.Q.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q`"}, :name web.BiquadFilterNode/q, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 8, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.Q.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q`"}, set-q! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 227, :column 7, :end-line 227, :end-column 13, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.Q.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q`"}, :name web.BiquadFilterNode/set-q!, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 13, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.Q.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/Q`"}, set-detune! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 131, :column 7, :end-line 131, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.detune.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune`"}, :name web.BiquadFilterNode/set-detune!, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.detune.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune`"}, frequency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 147, :column 7, :end-line 147, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.frequency.value = 3000;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency`"}, :name web.BiquadFilterNode/frequency, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.frequency.value = 3000;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 243, :column 7, :end-line 243, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  A string (enum) representing a BiquadFilterType.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.type = 'lowpass';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type`"}, :name web.BiquadFilterNode/type, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A string (enum) representing a BiquadFilterType.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.type = 'lowpass';`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/type`"}, get-frequency-response {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 104, :column 7, :end-line 104, :end-column 29, :arglists (quote ([this frequency-array mag-response-output phase-response-output])), :doc "Method.\n\n  `web.undefined`\n\n  `BiquadFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse`"}, :name web.BiquadFilterNode/get-frequency-response, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 29, :method-params ([this frequency-array mag-response-output phase-response-output]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this frequency-array mag-response-output phase-response-output])), :doc "Method.\n\n  `web.undefined`\n\n  `BiquadFilterNode.getFrequencyResponse(frequencyArray, magResponseOutput, phaseResponseOutput);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/getFrequencyResponse`"}, set-frequency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 163, :column 7, :end-line 163, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.frequency.value = 3000;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency`"}, :name web.BiquadFilterNode/set-frequency!, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.frequency.value = 3000;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/frequency`"}, detune {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 115, :column 7, :end-line 115, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.detune.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune`"}, :name web.BiquadFilterNode/detune, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An a-rate `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadFilter.detune.value = 100;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/detune`"}, gain {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 179, :column 7, :end-line 179, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.gain.value = 25;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain`"}, :name web.BiquadFilterNode/gain, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 179, :end-line 179, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.gain.value = 25;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain`"}, constructor {:name web.BiquadFilterNode/constructor, :file "src/web/BiquadFilterNode.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The BiquadFilterNode() constructor of the Web Audio API creates a new `web.BiquadFilterNode` object, which represents a simple low-order filter, and is created using the AudioContext.createBiquadFilter() method.\n\n  Inherits parameters from the `audio.AudioNodeOptions` dictionary.\n\n\n  context\n  A reference to an `audio.AudioContext`.\n  options Optional\n  Options are as follows:\n\n  type: One of \\\"lowpass\\\", \\\"highpass\\\", \\\"bandpass\\\", \\\"lowshelf\\\", \\\"highshelf\\\", \\\"peaking\\\", \\\"notch\\\", \\\"allpass\\\". The meaning of the other options depends on the value of this one. The defaults for all are as follows:\n\n  Q: 1\n  detune: 0\n  frequency: 350\n  gain: 0\n\n\n\n\n  lowpass: (Default) Allows frequencies below a cutoff frequency to pass through, and attenuates frequencies above the cutoff. This is a standard second-order resonant lowpass filter with 12dB/octave rolloff.\n\n\n  Q: Controls how peaked the response will be at the cutoff frequency. A large value makes the response more peaked. Please note that for this filter type, this value is not a traditional Q, but is a resonance value in decibels.\n  frequency: The cutoff frequency.\n  gain: Not used.\n\n\n\n  highpass: A highpass filter is the opposite of a lowpass filter. Frequencies above the cutoff frequency are passed through, but frequencies below the cutoff are attenuated. It implements a standard second-order resonant highpass filter with 12dB/octave rolloff.\n\n\n  Q: Controls how peaked the response will be at the cutoff frequency. A large value makes the response more peaked. Please note that for this filter type, this value is not a traditional Q, but is a resonance value in decibels.\n  frequency: The cutoff frequency.\n  gain: Not used.\n\n\n\n  bandpass: A bandpass filter allows a range of frequencies to pass through and attenuates the frequencies below and above this frequency range. It implements a second-order bandpass filter.\n\n\n  Q: Controls the width of the band. The width becomes narrower as the Q value increases.\n  frequency: The center of the frequency band.\n  gain: Not used.\n\n\n\n  lowshelf: The lowshelf filter allows all frequencies through, but adds a boost (or attenuation) to the lower frequencies. It implements a second-order lowshelf filter.\n\n\n  Q: Not used.\n  frequency: The upper limit of the frequences where the boost, or attenuation, is applied.\n  gain: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.\n\n\n\n  highshelf: The highshelf filter is the opposite of the lowshelf filter and allows all frequencies through, but adds a boost to the higher frequencies. It implements a second-order highshelf filter.\n\n\n  Q: Not used.\n  frequency: The lower limit of the frequences where the boost, or attenuation, is applied.\n  gain: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.\n\n\n\n  peaking: The peaking filter allows all frequencies through, adding a boost, or attenuation, to a range of frequencies.\n\n\n  Q: The width of the band of frequencies that are boosted. A large value implies a narrow width.\n  frequency: The center frequency of the boost range.\n  gain: The boost, in dB, to be applied. If the value is negative, the frequencies are attenuated.\n\n\n\n  notch: The notch filter (also known as a band-stop, or band-rejection filter) is the opposite of a bandpass filter. It allows all frequencies through, except for a set of frequencies.\n\n\n  Q: The width of the band of frequencies that are attenuated. A large value implies a narrow width.\n  frequency: The center frequency of the attenuation range.\n  gain: Not used.\n\n\n\n  allpass: An allpass filter allows all frequencies through, but changes the phase relationship between the various frequencies. It implements a second-order allpass filter.\n\n\n  Q: The sharpness of the phase transition at the center frequency. A larger value implies a sharper transition and a larger group delay.\n  frequency: The frequency where the center of the phase transition occurs. Viewed another way, this is the frequency with maximal group delay.\n  gain: Not used.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/BiquadFilterNode`", :tag js}, set-gain! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BiquadFilterNode.cljs", :line 195, :column 7, :end-line 195, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.gain.value = 25;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain`"}, :name web.BiquadFilterNode/set-gain!, :variadic false, :file "src/web/BiquadFilterNode.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioParam`.\n\n  `var audioCtx = new AudioContext();\n  var biquadFilter = audioCtx.createBiquadFilter();\n  biquadfilter.gain.value = 25;\n\n\n  Note: Though the AudioParam returned is read-only, the value it represents is not.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BiquadFilterNode/gain`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The BiquadFilterNode interface represents a simple low-order\n  and is created using the `audio.AudioContext.createBiquadFilter()`\n  It is an `audio.AudioNode` that can represent different kinds\n  filters, tone control devices, and graphic equalizers."}