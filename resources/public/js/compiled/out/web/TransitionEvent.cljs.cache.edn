{:rename-macros {}, :renames {}, :externs {TransitionEvent {}}, :use-macros {}, :excludes #{}, :name web.TransitionEvent, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.TransitionEvent/constructor, :file "src/web/TransitionEvent.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The TransitionEvent() constructor returns a newly created `web.TransitionEvent`, representing an event in relation with an transition.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/TransitionEvent`", :tag js}, init-transition-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 14, :column 7, :end-line 14, :end-column 28, :arglists (quote ([this type-arg can-bubble-arg cancelable-arg transition-name-arg elapsed-time-arg])), :doc "Method.\n\n  The TransitionEvent.initTransitionEvent() method Initializes\n  transition event created using the deprecated `web.Document.createEvent(\\\"TransitionEvent\\\")`\n\n  `transitionEvent.initTransitionEvent(typeArg, canBubbleArg, cancelableArg, transitionNameArg, elapsedTimeArg);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/initTransitionEvent`"}, :name web.TransitionEvent/init-transition-event, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 28, :method-params ([this type-arg can-bubble-arg cancelable-arg transition-name-arg elapsed-time-arg]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this type-arg can-bubble-arg cancelable-arg transition-name-arg elapsed-time-arg])), :doc "Method.\n\n  The TransitionEvent.initTransitionEvent() method Initializes\n  transition event created using the deprecated `web.Document.createEvent(\\\"TransitionEvent\\\")`\n\n  `transitionEvent.initTransitionEvent(typeArg, canBubbleArg, cancelableArg, transitionNameArg, elapsedTimeArg);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/initTransitionEvent`"}, animation-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 26, :column 7, :end-line 26, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.transitionName read-only property is a `dom.DOMString`\n  the name of the CSS property associated with the transition.\n\n  `name = TransitionEvent.transitionName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/animationName`"}, :name web.TransitionEvent/animation-name, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.transitionName read-only property is a `dom.DOMString`\n  the name of the CSS property associated with the transition.\n\n  `name = TransitionEvent.transitionName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/animationName`"}, set-animation-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 38, :column 7, :end-line 38, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.transitionName read-only property is a `dom.DOMString`\n  the name of the CSS property associated with the transition.\n\n  `name = TransitionEvent.transitionName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/animationName`"}, :name web.TransitionEvent/set-animation-name!, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.transitionName read-only property is a `dom.DOMString`\n  the name of the CSS property associated with the transition.\n\n  `name = TransitionEvent.transitionName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/animationName`"}, elapsed-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired. This value is not affected by the `web.transition-delay`\n\n  `name = TransitionEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime`"}, :name web.TransitionEvent/elapsed-time, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired. This value is not affected by the `web.transition-delay`\n\n  `name = TransitionEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime`"}, set-elapsed-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 63, :column 7, :end-line 63, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired. This value is not affected by the `web.transition-delay`\n\n  `name = TransitionEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime`"}, :name web.TransitionEvent/set-elapsed-time!, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.elapsedTime read-only property is a float\n  the amount of time the animation has been running, in seconds,\n  this event fired. This value is not affected by the `web.transition-delay`\n\n  `name = TransitionEvent.elapsedTime`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/elapsedTime`"}, pseudo-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 76, :column 7, :end-line 76, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the transition doesn't run on a pseudo-element but on\n  element, an empty string: ''.\n\n  `name = TransitionEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement`"}, :name web.TransitionEvent/pseudo-element, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The TransitionEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the transition doesn't run on a pseudo-element but on\n  element, an empty string: ''.\n\n  `name = TransitionEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement`"}, set-pseudo-element! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/TransitionEvent.cljs", :line 90, :column 7, :end-line 90, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the transition doesn't run on a pseudo-element but on\n  element, an empty string: ''.\n\n  `name = TransitionEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement`"}, :name web.TransitionEvent/set-pseudo-element!, :variadic false, :file "src/web/TransitionEvent.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The TransitionEvent.pseudoElement read-only property is a `dom.DOMString`,\n  with '::', containing the name of the pseudo-element the animation\n  on. If the transition doesn't run on a pseudo-element but on\n  element, an empty string: ''.\n\n  `name = TransitionEvent.pseudoElement`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent/pseudoElement`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The TransitionEvent interface represents events providing information\n  to transitions."}