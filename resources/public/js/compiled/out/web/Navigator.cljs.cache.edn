{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.Navigator, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-connection! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 385, :column 7, :end-line 385, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered.\n\n  `networkInformation = navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection`"}, :name web.Navigator/set-connection!, :variadic false, :file "src/web/Navigator.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 385, :end-line 385, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered.\n\n  `networkInformation = navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection`"}, vibrate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 182, :column 7, :end-line 182, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The Navigator.vibrate() method pulses the vibration hardware\n  the device, if such hardware exists. If the device doesn't support\n  this method has no effect. If a vibration pattern is already\n  progress when this method is called, the previous pattern is\n  and the new one begins instead.\n\n  `var successBool = window.navigator.vibrate(pattern);\n\n\n  pattern\n  Provides a pattern of vibration and pause intervals. Each value indicates a number of milliseconds to vibrate or pause, in alternation. You may provide either a single value (to vibrate once for that many milliseconds) or an array of values to alternately vibrate, pause, then vibrate again. See Vibration API for details.\n\n\n  Passing a value of 0, an empty array, or an array containing all zeros will cancel any currently ongoing vibration pattern.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Navigator/vibrate, :variadic true, :file "src/web/Navigator.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Navigator.vibrate() method pulses the vibration hardware\n  the device, if such hardware exists. If the device doesn't support\n  this method has no effect. If a vibration pattern is already\n  progress when this method is called, the previous pattern is\n  and the new one begins instead.\n\n  `var successBool = window.navigator.vibrate(pattern);\n\n\n  pattern\n  Provides a pattern of vibration and pause intervals. Each value indicates a number of milliseconds to vibrate or pause, in alternation. You may provide either a single value (to vibrate once for that many milliseconds) or an array of values to alternately vibrate, pause, then vibrate again. See Vibration API for details.\n\n\n  Passing a value of 0, an empty array, or an array containing all zeros will cancel any currently ongoing vibration pattern.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vibrate`"}, set-build-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 345, :column 7, :end-line 345, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the build identifier of the browser. In modern browsers\n  property now returns a fixed timestamp as a privacy measure,\n  20181001000000 in Firefox 64 onwards.\n\n  `buildID = navigator.buildID;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID`"}, :name web.Navigator/set-build-id!, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 345, :end-line 345, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the build identifier of the browser. In modern browsers\n  property now returns a fixed timestamp as a privacy measure,\n  20181001000000 in Firefox 64 onwards.\n\n  `buildID = navigator.buildID;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID`"}, webdriver {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 978, :column 7, :end-line 978, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The webdriver read-only property of the `web.navigator` interface\n  whether the user agent is controlled by automation.\n\n  `var isAutomated = navigator.webdriver`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver`"}, :name web.Navigator/webdriver, :variadic false, :file "src/web/Navigator.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 978, :end-line 978, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The webdriver read-only property of the `web.navigator` interface\n  whether the user agent is controlled by automation.\n\n  `var isAutomated = navigator.webdriver`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver`"}, max-touch-points {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 628, :column 7, :end-line 628, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The maxTouchPoints read-only property of the `web.Navigator`\n  returns the maximum number of simultaneous touch contact points\n  supported by the current device.\n\n  `touchPoints = navigator.maxTouchPoints;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints`"}, :name web.Navigator/max-touch-points, :variadic false, :file "src/web/Navigator.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 628, :end-line 628, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The maxTouchPoints read-only property of the `web.Navigator`\n  returns the maximum number of simultaneous touch contact points\n  supported by the current device.\n\n  `touchPoints = navigator.maxTouchPoints;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints`"}, languages {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 588, :column 7, :end-line 588, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.languages read-only property returns an\n  of `dom.DOMString`s representing the user's preferred languages.\n  language is described using BCP 47 language tags. In the returned\n  they are ordered by preference with the most preferred language\n\n  `preferredLanguages = globalObj.navigator.languages`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages`"}, :name web.Navigator/languages, :variadic false, :file "src/web/Navigator.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 588, :end-line 588, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.languages read-only property returns an\n  of `dom.DOMString`s representing the user's preferred languages.\n  language is described using BCP 47 language tags. In the returned\n  they are ordered by preference with the most preferred language\n\n  `preferredLanguages = globalObj.navigator.languages`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/languages`"}, set-geolocation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 533, :column 7, :end-line 533, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.geolocation read-only property returns a `web.Geolocation`\n  that gives Web content access to the location of the device.\n  allows a Web site or app to offer customized results based on\n  user's location.\n\n  `geo = navigator.geolocation`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation`"}, :name web.Navigator/set-geolocation!, :variadic false, :file "src/web/Navigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 533, :end-line 533, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.geolocation read-only property returns a `web.Geolocation`\n  that gives Web content access to the location of the device.\n  allows a Web site or app to offer customized results based on\n  user's location.\n\n  `geo = navigator.geolocation`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation`"}, send-beacon {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 146, :column 7, :end-line 146, :end-column 18, :arglists (quote ([this url data])), :doc "Method.\n\n  The navigator.sendBeacon() method can be used to asynchronously\n  a small amount of data over HTTP to a web server.\n\n  `navigator.sendBeacon(url, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon`"}, :name web.Navigator/send-beacon, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this url data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 146, :end-line 146, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this url data])), :doc "Method.\n\n  The navigator.sendBeacon() method can be used to asynchronously\n  a small amount of data over HTTP to a web server.\n\n  `navigator.sendBeacon(url, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon`"}, set-app-code-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 242, :column 7, :end-line 242, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, :name web.Navigator/set-app-code-name!, :variadic false, :file "src/web/Navigator.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, get-vr-displays {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 60, :column 7, :end-line 60, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The getVRDisplays() method of the `web.Navigator` interface returns\n  promise that resolves to an array of `vr.VRDisplay` objects representing\n  available VR displays connected to the computer.\n\n  `navigator.getVRDisplays().then(function(displays) {\n  // Do something with the available VR displays\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDisplays`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Navigator/get-vr-displays, :variadic true, :file "src/web/Navigator.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getVRDisplays() method of the `web.Navigator` interface returns\n  promise that resolves to an array of `vr.VRDisplay` objects representing\n  available VR displays connected to the computer.\n\n  `navigator.getVRDisplays().then(function(displays) {\n  // Do something with the available VR displays\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getVRDisplays`"}, connection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 371, :column 7, :end-line 371, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered.\n\n  `networkInformation = navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection`"}, :name web.Navigator/connection, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 371, :end-line 371, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.connection read-only property returns a `web.NetworkInformation`\n  containing information about the system's connection, such as\n  current bandwidth of the user's device or whether the connection\n  metered.\n\n  `networkInformation = navigator.connection`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/connection`"}, ms-launch-uri {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 87, :column 7, :end-line 87, :end-column 20, :arglists (quote ([this uri success-callback no-handler-callback])), :doc "Method.\n\n  The msLaunchUri() method is a Microsoft extension to the `web.Navigator`\n  which is used to start a service or app, such as an email client,\n  handles a given protocol. The Uniform Resource Identifier (URI)\n  the protocol for the default service or app, such as mailto://test@contoso.com.\n\n  `navigator.msLaunchUri(uri, successCallback, noHandlerCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/msLaunchUri`"}, :name web.Navigator/ms-launch-uri, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this uri success-callback no-handler-callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this uri success-callback no-handler-callback])), :doc "Method.\n\n  The msLaunchUri() method is a Microsoft extension to the `web.Navigator`\n  which is used to start a service or app, such as an email client,\n  handles a given protocol. The Uniform Resource Identifier (URI)\n  the protocol for the default service or app, such as mailto://test@contoso.com.\n\n  `navigator.msLaunchUri(uri, successCallback, noHandlerCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/msLaunchUri`"}, set-keyboard! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 561, :column 7, :end-line 561, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The keyboard read-only property of the `web.Navigator` interface\n  a `web.Keyboard` object which provides access to functions that\n  keyboard layout maps and toggle capturing of key presses from\n  physical keyboard.\n\n  `var keyboard = navigator.keyboard`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/keyboard`"}, :name web.Navigator/set-keyboard!, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 561, :end-line 561, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The keyboard read-only property of the `web.Navigator` interface\n  a `web.Keyboard` object which provides access to functions that\n  keyboard layout maps and toggle capturing of key presses from\n  physical keyboard.\n\n  `var keyboard = navigator.keyboard`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/keyboard`"}, set-credentials! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 444, :column 7, :end-line 444, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The credentials property of the `web.Navigator` interface returns\n  `web.CredentialsContainer` interface, which exposes methods to\n  The `web.CredentialsContainer` interface also notifies the user\n  when an interesting event occurs, such as a successful sign-in\n  sign-out. This interface can be used for feature detection.\n\n  `var credentialsContainer = navigator.credentials`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials`"}, :name web.Navigator/set-credentials!, :variadic false, :file "src/web/Navigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 444, :end-line 444, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The credentials property of the `web.Navigator` interface returns\n  `web.CredentialsContainer` interface, which exposes methods to\n  The `web.CredentialsContainer` interface also notifies the user\n  when an interesting event occurs, such as a successful sign-in\n  sign-out. This interface can be used for feature detection.\n\n  `var credentialsContainer = navigator.credentials`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials`"}, cookie-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 399, :column 7, :end-line 399, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  navigator.cookieEnabled returns a Boolean value that indicates\n  cookies are enabled or not.\n\n  `var cookieEnabled = navigator.cookieEnabled;\n\n\n  \\tcookieEnabled is a Boolean: true or false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled`"}, :name web.Navigator/cookie-enabled, :variadic false, :file "src/web/Navigator.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  navigator.cookieEnabled returns a Boolean value that indicates\n  cookies are enabled or not.\n\n  `var cookieEnabled = navigator.cookieEnabled;\n\n\n  \\tcookieEnabled is a Boolean: true or false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled`"}, platform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 851, :column 7, :end-line 851, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, :name web.Navigator/platform, :variadic false, :file "src/web/Navigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 851, :end-line 851, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, register-content-handler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 101, :column 7, :end-line 101, :end-column 31, :arglists (quote ([this & args])), :doc "Method.\n\n  Allows web sites to register themselves as possible handlers\n  content of a particular MIME type.\n\n  `navigator.registerContentHandler(mimeType, uri, title);\n\n\n  mimeType is the desired MIME type as a string.\n  uri is the URI to the handler as a string.\n  title is the title of the handler presented to the user as a string.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerContentHandler`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Navigator/register-content-handler, :variadic true, :file "src/web/Navigator.cljs", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Allows web sites to register themselves as possible handlers\n  content of a particular MIME type.\n\n  `navigator.registerContentHandler(mimeType, uri, title);\n\n\n  mimeType is the desired MIME type as a string.\n  uri is the URI to the handler as a string.\n  title is the title of the handler presented to the user as a string.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerContentHandler`"}, set-hardware-concurrency! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1015, :column 7, :end-line 1015, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, :name web.Navigator/set-hardware-concurrency!, :variadic false, :file "src/web/Navigator.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1015, :end-line 1015, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, mime-types {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1080, :column 7, :end-line 1080, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  Returns a `web.MimeTypeArray` object, which contains a list of\n  objects representing the MIME types recognized by the browser.\n\n  `var mimeTypes[] = navigator.mimeTypes;\n\n  mimeTypes is a MimeTypeArray object which has a length property as well as item(index) and namedItem(name) methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes`"}, :name web.Navigator/mime-types, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1080, :end-line 1080, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns a `web.MimeTypeArray` object, which contains a list of\n  objects representing the MIME types recognized by the browser.\n\n  `var mimeTypes[] = navigator.mimeTypes;\n\n  mimeTypes is a MimeTypeArray object which has a length property as well as item(index) and namedItem(name) methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes`"}, vendor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 954, :column 7, :end-line 954, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The value of the `web.Navigator` vendor property is always either\n  Inc.\\\", \\\"Apple Computer, Inc.\\\", or (in Firefox) the empty string.\n\n  `venString = window.navigator.vendor`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor`"}, :name web.Navigator/vendor, :variadic false, :file "src/web/Navigator.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 954, :end-line 954, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the `web.Navigator` vendor property is always either\n  Inc.\\\", \\\"Apple Computer, Inc.\\\", or (in Firefox) the empty string.\n\n  `venString = window.navigator.vendor`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendor`"}, set-permissions! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 838, :column 7, :end-line 838, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.permissions read-only property returns a `web.Permissions`\n  that can be used to query and update permission status of APIs\n  by the Permissions API.\n\n  `permissionsObj = globalObj.navigator.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions`"}, :name web.Navigator/set-permissions!, :variadic false, :file "src/web/Navigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 838, :end-line 838, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.permissions read-only property returns a `web.Permissions`\n  that can be used to query and update permission status of APIs\n  by the Permissions API.\n\n  `permissionsObj = globalObj.navigator.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions`"}, keyboard {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 547, :column 7, :end-line 547, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The keyboard read-only property of the `web.Navigator` interface\n  a `web.Keyboard` object which provides access to functions that\n  keyboard layout maps and toggle capturing of key presses from\n  physical keyboard.\n\n  `var keyboard = navigator.keyboard`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/keyboard`"}, :name web.Navigator/keyboard, :variadic false, :file "src/web/Navigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The keyboard read-only property of the `web.Navigator` interface\n  a `web.Keyboard` object which provides access to functions that\n  keyboard layout maps and toggle capturing of key presses from\n  physical keyboard.\n\n  `var keyboard = navigator.keyboard`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/keyboard`"}, set-java-enabled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1040, :column 7, :end-line 1040, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  This method indicates whether the current browser is Java-enabled\n  not.\n\n  `result = window.navigator.javaEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled`"}, :name web.Navigator/set-java-enabled!, :variadic false, :file "src/web/Navigator.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1040, :end-line 1040, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  This method indicates whether the current browser is Java-enabled\n  not.\n\n  `result = window.navigator.javaEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled`"}, vendor-sub {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 966, :column 7, :end-line 966, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The value of the Navigator.vendorSub property is always the empty\n  in any browser.\n\n  `venSub = window.navigator.vendorSub`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendorSub`"}, :name web.Navigator/vendor-sub, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 966, :end-line 966, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the Navigator.vendorSub property is always the empty\n  in any browser.\n\n  `venSub = window.navigator.vendorSub`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/vendorSub`"}, set-device-memory! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 475, :column 7, :end-line 475, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The deviceMemory read-only property of the `web.navigator` interface\n  the approximate amount of device memory in gigabytes. This value\n  an approximation given by rounding down to the nearest power\n  2 and dividing that number by 1024. Also, the lower and upper\n  are used to protect privacy of owners of very low- or high-end\n\n  `const memory = navigator.deviceMemory\n  console.log (\\\"This device has at least \\\"  memory  \\\"GiB of RAM.\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory`"}, :name web.Navigator/set-device-memory!, :variadic false, :file "src/web/Navigator.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 475, :end-line 475, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The deviceMemory read-only property of the `web.navigator` interface\n  the approximate amount of device memory in gigabytes. This value\n  an approximation given by rounding down to the nearest power\n  2 and dividing that number by 1024. Also, the lower and upper\n  are used to protect privacy of owners of very low- or high-end\n\n  `const memory = navigator.deviceMemory\n  console.log (\\\"This device has at least \\\"  memory  \\\"GiB of RAM.\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory`"}, set-oscpu! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 762, :column 7, :end-line 762, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.oscpu property returns a string that identifies\n  current operating system.\n\n  `oscpuInfo = window.navigator.oscpu\n\n\n  oscpuInfo is a string that takes the following form:\n\n\n\n\n\n  Operating system\n  oscpuInfo string format\n\n\n  OS/2\n  OS/2 Warp x (either 3, 4 or 4.5)\n\n\n  Windows CE\n  WindowsCE x.y1\n\n\n  Windows 64-bit (64-bit build)\n  Windows NT x.y; Win64; x64\n\n\n  Windows 64-bit (32-bit build)\n  Windows NT x.y; WOW64\n\n\n  Windows 32-bit\n  Windows NT x.y\n\n\n  Mac OS X (PPC build)\n  PPC Mac OS X x.y\n\n\n  Mac OS X (i386/x64 build)\n  Intel Mac OS X x.y\n\n\n  Linux 64-bit (32-bit build)\n  Output of uname -s plus \\\"i686 on x86_64\\\"\n\n\n  Linux\n  Output of uname -sm\n\n\n\n\n  1x.y refers to the version of the operating system`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu`"}, :name web.Navigator/set-oscpu!, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 762, :end-line 762, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.oscpu property returns a string that identifies\n  current operating system.\n\n  `oscpuInfo = window.navigator.oscpu\n\n\n  oscpuInfo is a string that takes the following form:\n\n\n\n\n\n  Operating system\n  oscpuInfo string format\n\n\n  OS/2\n  OS/2 Warp x (either 3, 4 or 4.5)\n\n\n  Windows CE\n  WindowsCE x.y1\n\n\n  Windows 64-bit (64-bit build)\n  Windows NT x.y; Win64; x64\n\n\n  Windows 64-bit (32-bit build)\n  Windows NT x.y; WOW64\n\n\n  Windows 32-bit\n  Windows NT x.y\n\n\n  Mac OS X (PPC build)\n  PPC Mac OS X x.y\n\n\n  Mac OS X (i386/x64 build)\n  Intel Mac OS X x.y\n\n\n  Linux 64-bit (32-bit build)\n  Output of uname -s plus \\\"i686 on x86_64\\\"\n\n\n  Linux\n  Output of uname -sm\n\n\n\n\n  1x.y refers to the version of the operating system`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu`"}, set-xr! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1178, :column 7, :end-line 1178, :end-column 14, :arglists (quote ([this val])), :doc "Property.\n\n  The xr read-only property of the `web.Navigator` interface returns\n  `web.XR` object which works as a gateway to the WebXR API.\n\n  `const XR = navigator.xr`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr`"}, :name web.Navigator/set-xr!, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1178, :end-line 1178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The xr read-only property of the `web.Navigator` interface returns\n  `web.XR` object which works as a gateway to the WebXR API.\n\n  `const XR = navigator.xr`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr`"}, set-mime-types! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1094, :column 7, :end-line 1094, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a `web.MimeTypeArray` object, which contains a list of\n  objects representing the MIME types recognized by the browser.\n\n  `var mimeTypes[] = navigator.mimeTypes;\n\n  mimeTypes is a MimeTypeArray object which has a length property as well as item(index) and namedItem(name) methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes`"}, :name web.Navigator/set-mime-types!, :variadic false, :file "src/web/Navigator.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1094, :end-line 1094, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a `web.MimeTypeArray` object, which contains a list of\n  objects representing the MIME types recognized by the browser.\n\n  `var mimeTypes[] = navigator.mimeTypes;\n\n  mimeTypes is a MimeTypeArray object which has a length property as well as item(index) and namedItem(name) methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/mimeTypes`"}, permissions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 825, :column 7, :end-line 825, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.permissions read-only property returns a `web.Permissions`\n  that can be used to query and update permission status of APIs\n  by the Permissions API.\n\n  `permissionsObj = globalObj.navigator.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions`"}, :name web.Navigator/permissions, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.permissions read-only property returns a `web.Permissions`\n  that can be used to query and update permission status of APIs\n  by the Permissions API.\n\n  `permissionsObj = globalObj.navigator.permissions`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/permissions`"}, geolocation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 519, :column 7, :end-line 519, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.geolocation read-only property returns a `web.Geolocation`\n  that gives Web content access to the location of the device.\n  allows a Web site or app to offer customized results based on\n  user's location.\n\n  `geo = navigator.geolocation`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation`"}, :name web.Navigator/geolocation, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 519, :end-line 519, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.geolocation read-only property returns a `web.Geolocation`\n  that gives Web content access to the location of the device.\n  allows a Web site or app to offer customized results based on\n  user's location.\n\n  `geo = navigator.geolocation`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/geolocation`"}, user-agent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 942, :column 7, :end-line 942, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorID.userAgent read-only property returns the user\n  string for the current browser.\n\n  `var ua = window.navigator.userAgent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent`"}, :name web.Navigator/user-agent, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 942, :end-line 942, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorID.userAgent read-only property returns the user\n  string for the current browser.\n\n  `var ua = window.navigator.userAgent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/userAgent`"}, can-share {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 7, :column 7, :end-line 7, :end-column 16, :arglists (quote ([this data])), :doc "Method.\n\n  The canShare() method of the `web.Navigator` interface returns\n  if a call to Navigator.share() would succeed.\n\n  `var canShare = navigator.canShare(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare`"}, :name web.Navigator/can-share, :variadic false, :file "src/web/Navigator.cljs", :end-column 16, :method-params ([this data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this data])), :doc "Method.\n\n  The canShare() method of the `web.Navigator` interface returns\n  if a call to Navigator.share() would succeed.\n\n  `var canShare = navigator.canShare(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/canShare`"}, oscpu {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 699, :column 7, :end-line 699, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.oscpu property returns a string that identifies\n  current operating system.\n\n  `oscpuInfo = window.navigator.oscpu\n\n\n  oscpuInfo is a string that takes the following form:\n\n\n\n\n\n  Operating system\n  oscpuInfo string format\n\n\n  OS/2\n  OS/2 Warp x (either 3, 4 or 4.5)\n\n\n  Windows CE\n  WindowsCE x.y1\n\n\n  Windows 64-bit (64-bit build)\n  Windows NT x.y; Win64; x64\n\n\n  Windows 64-bit (32-bit build)\n  Windows NT x.y; WOW64\n\n\n  Windows 32-bit\n  Windows NT x.y\n\n\n  Mac OS X (PPC build)\n  PPC Mac OS X x.y\n\n\n  Mac OS X (i386/x64 build)\n  Intel Mac OS X x.y\n\n\n  Linux 64-bit (32-bit build)\n  Output of uname -s plus \\\"i686 on x86_64\\\"\n\n\n  Linux\n  Output of uname -sm\n\n\n\n\n  1x.y refers to the version of the operating system`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu`"}, :name web.Navigator/oscpu, :variadic false, :file "src/web/Navigator.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 699, :end-line 699, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.oscpu property returns a string that identifies\n  current operating system.\n\n  `oscpuInfo = window.navigator.oscpu\n\n\n  oscpuInfo is a string that takes the following form:\n\n\n\n\n\n  Operating system\n  oscpuInfo string format\n\n\n  OS/2\n  OS/2 Warp x (either 3, 4 or 4.5)\n\n\n  Windows CE\n  WindowsCE x.y1\n\n\n  Windows 64-bit (64-bit build)\n  Windows NT x.y; Win64; x64\n\n\n  Windows 64-bit (32-bit build)\n  Windows NT x.y; WOW64\n\n\n  Windows 32-bit\n  Windows NT x.y\n\n\n  Mac OS X (PPC build)\n  PPC Mac OS X x.y\n\n\n  Mac OS X (i386/x64 build)\n  Intel Mac OS X x.y\n\n\n  Linux 64-bit (32-bit build)\n  Output of uname -s plus \\\"i686 on x86_64\\\"\n\n\n  Linux\n  Output of uname -sm\n\n\n\n\n  1x.y refers to the version of the operating system`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/oscpu`"}, xr {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1166, :column 7, :end-line 1166, :end-column 9, :arglists (quote ([this])), :doc "Property.\n\n  The xr read-only property of the `web.Navigator` interface returns\n  `web.XR` object which works as a gateway to the WebXR API.\n\n  `const XR = navigator.xr`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr`"}, :name web.Navigator/xr, :variadic false, :file "src/web/Navigator.cljs", :end-column 9, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1166, :end-line 1166, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The xr read-only property of the `web.Navigator` interface returns\n  `web.XR` object which works as a gateway to the WebXR API.\n\n  `const XR = navigator.xr`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/xr`"}, do-not-track {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 491, :column 7, :end-line 491, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  Returns the user's do-not-track setting. This is \\\"1\\\" if the\n  has requested not to be tracked by web sites, content, or advertising.\n\n  `dnt = navigator.doNotTrack;\n\n  The value reflects that of the do-not-track header, i.e. values of {\\\"1\\\", \\\"0\\\", \\\"unspecified\\\" }. Note: Prior to Gecko 32, Gecko used the values { \\\"yes\\\", \\\"no\\\", \\\"unspecified\\\"} (bug 887703).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack`"}, :name web.Navigator/do-not-track, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 491, :end-line 491, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the user's do-not-track setting. This is \\\"1\\\" if the\n  has requested not to be tracked by web sites, content, or advertising.\n\n  `dnt = navigator.doNotTrack;\n\n  The value reflects that of the do-not-track header, i.e. values of {\\\"1\\\", \\\"0\\\", \\\"unspecified\\\" }. Note: Prior to Gecko 32, Gecko used the values { \\\"yes\\\", \\\"no\\\", \\\"unspecified\\\"} (bug 887703).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack`"}, service-worker {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 916, :column 7, :end-line 916, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.serviceWorker read-only property returns the `web.ServiceWorkerContainer`\n  for the associated document, which provides access to registration,\n  upgrade, and communication with the `web.ServiceWorker`.\n\n  `var workerContainerInstance = navigator.serviceWorker;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker`"}, :name web.Navigator/service-worker, :variadic false, :file "src/web/Navigator.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 916, :end-line 916, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.serviceWorker read-only property returns the `web.ServiceWorkerContainer`\n  for the associated document, which provides access to registration,\n  upgrade, and communication with the `web.ServiceWorker`.\n\n  `var workerContainerInstance = navigator.serviceWorker;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker`"}, set-app-version! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 290, :column 7, :end-line 290, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, :name web.Navigator/set-app-version!, :variadic false, :file "src/web/Navigator.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 290, :end-line 290, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, locks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 602, :column 7, :end-line 602, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The locks read-only property of the `web.Navigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/locks`"}, :name web.Navigator/locks, :variadic false, :file "src/web/Navigator.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 602, :end-line 602, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The locks read-only property of the `web.Navigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/locks`"}, credentials {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 429, :column 7, :end-line 429, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The credentials property of the `web.Navigator` interface returns\n  `web.CredentialsContainer` interface, which exposes methods to\n  The `web.CredentialsContainer` interface also notifies the user\n  when an interesting event occurs, such as a successful sign-in\n  sign-out. This interface can be used for feature detection.\n\n  `var credentialsContainer = navigator.credentials`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials`"}, :name web.Navigator/credentials, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The credentials property of the `web.Navigator` interface returns\n  `web.CredentialsContainer` interface, which exposes methods to\n  The `web.CredentialsContainer` interface also notifies the user\n  when an interesting event occurs, such as a successful sign-in\n  sign-out. This interface can be used for feature detection.\n\n  `var credentialsContainer = navigator.credentials`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/credentials`"}, set-media-capabilities! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1066, :column 7, :end-line 1066, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.mediaCapabilities read-only property returns a\n  object that can expose information about the decoding and encoding\n  for a given format and output capabilities as defined by the\n  Capabilities API.\n\n  `mediaCapabilitiesObj = globalObj.navigator.mediaCapabilities`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaCapabilities`"}, :name web.Navigator/set-media-capabilities!, :variadic false, :file "src/web/Navigator.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1066, :end-line 1066, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.mediaCapabilities read-only property returns a\n  object that can expose information about the decoding and encoding\n  for a given format and output capabilities as defined by the\n  Capabilities API.\n\n  `mediaCapabilitiesObj = globalObj.navigator.mediaCapabilities`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaCapabilities`"}, product-sub {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 901, :column 7, :end-line 901, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.productSub read-only property returns the build\n  of the current browser.\n\n  `prodSub = window.navigator.productSub\n\n\n  prodSub is a string.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub`"}, :name web.Navigator/product-sub, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 901, :end-line 901, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.productSub read-only property returns the build\n  of the current browser.\n\n  `prodSub = window.navigator.productSub\n\n\n  prodSub is a string.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/productSub`"}, get-battery {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 19, :column 7, :end-line 19, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  The getBattery() method provides information about the system's\n  It returns a battery promise, which is resolved in a `web.BatteryManager`\n  providing also some new events you can handle to monitor the\n  status. This implements the Battery Status API; see that documentation\n  additional details, a guide to using the API, and sample code.\n\n  `var batteryPromise = navigator.getBattery();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery`"}, :name web.Navigator/get-battery, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getBattery() method provides information about the system's\n  It returns a battery promise, which is resolved in a `web.BatteryManager`\n  providing also some new events you can handle to monitor the\n  status. This implements the Battery Status API; see that documentation\n  additional details, a guide to using the API, and sample code.\n\n  `var batteryPromise = navigator.getBattery();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getBattery`"}, get-user-media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([this constraints success-callback error-callback])), :doc "Method.\n\n  The deprecated Navigator.getUserMedia() method prompts the user\n  permission to use up to one video input device (such as a camera\n  shared screen) and up to one audio input device (such as a microphone)\n  the source for a `media.MediaStream`.\n\n  `navigator.getUserMedia(constraints, successCallback, errorCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia`"}, :name web.Navigator/get-user-media, :variadic false, :file "src/web/Navigator.cljs", :end-column 21, :method-params ([this constraints success-callback error-callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this constraints success-callback error-callback])), :doc "Method.\n\n  The deprecated Navigator.getUserMedia() method prompts the user\n  permission to use up to one video input device (such as a camera\n  shared screen) and up to one audio input device (such as a microphone)\n  the source for a `media.MediaStream`.\n\n  `navigator.getUserMedia(constraints, successCallback, errorCallback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getUserMedia`"}, set-product! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 889, :column 7, :end-line 889, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, :name web.Navigator/set-product!, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 889, :end-line 889, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, get-gamepads {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 34, :column 7, :end-line 34, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The Navigator.getGamepads() method returns an array of `web.Gamepad`\n  one for each gamepad connected to the device.\n\n  `var gamepads = navigator.getGamepads();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads`"}, :name web.Navigator/get-gamepads, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Navigator.getGamepads() method returns an array of `web.Gamepad`\n  one for each gamepad connected to the device.\n\n  `var gamepads = navigator.getGamepads();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/getGamepads`"}, active-vr-displays {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 204, :column 7, :end-line 204, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The activeVRDisplays read-only property of the `web.Navigator`\n  returns an array containing every `vr.VRDisplay` object that\n  currently presenting (`vr.VRDisplay.ispresenting` is true).\n\n  `var myActiveDisplays = navigator.activeVRDisplays;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays`"}, :name web.Navigator/active-vr-displays, :variadic false, :file "src/web/Navigator.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The activeVRDisplays read-only property of the `web.Navigator`\n  returns an array containing every `vr.VRDisplay` object that\n  currently presenting (`vr.VRDisplay.ispresenting` is true).\n\n  `var myActiveDisplays = navigator.activeVRDisplays;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays`"}, battery {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 302, :column 7, :end-line 302, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The battery read-only property returns a `web.BatteryManager`\n  information about the system's battery charge level; provides\n  some new events you can handle to monitor the battery status.\n  implements the Battery Status API; see that documentation for\n  details, a guide to using the API, and sample code.\n\n  `var battery = navigator.battery;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/battery`"}, :name web.Navigator/battery, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The battery read-only property returns a `web.BatteryManager`\n  information about the system's battery charge level; provides\n  some new events you can handle to monitor the battery status.\n  implements the Battery Status API; see that documentation for\n  details, a guide to using the API, and sample code.\n\n  `var battery = navigator.battery;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/battery`"}, app-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 254, :column 7, :end-line 254, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, :name web.Navigator/app-name, :variadic false, :file "src/web/Navigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, set-plugins! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1124, :column 7, :end-line 1124, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a `web.PluginArray` object, listing the `web.Plugin`\n  describing the plugins installed in the application.\n\n  `var plugins = navigator.plugins;\n\n  plugins is `web.PluginArray` object used to access `web.Plugin` objects either by name or as a list of items.\n\n  The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\\\"name\\\") methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins`"}, :name web.Navigator/set-plugins!, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1124, :end-line 1124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a `web.PluginArray` object, listing the `web.Plugin`\n  describing the plugins installed in the application.\n\n  `var plugins = navigator.plugins;\n\n  plugins is `web.PluginArray` object used to access `web.Plugin` objects either by name or as a list of items.\n\n  The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\\\"name\\\") methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins`"}, set-active-vr-displays! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 217, :column 7, :end-line 217, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The activeVRDisplays read-only property of the `web.Navigator`\n  returns an array containing every `vr.VRDisplay` object that\n  currently presenting (`vr.VRDisplay.ispresenting` is true).\n\n  `var myActiveDisplays = navigator.activeVRDisplays;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays`"}, :name web.Navigator/set-active-vr-displays!, :variadic false, :file "src/web/Navigator.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The activeVRDisplays read-only property of the `web.Navigator`\n  returns an array containing every `vr.VRDisplay` object that\n  currently presenting (`vr.VRDisplay.ispresenting` is true).\n\n  `var myActiveDisplays = navigator.activeVRDisplays;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/activeVRDisplays`"}, device-memory {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 459, :column 7, :end-line 459, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The deviceMemory read-only property of the `web.navigator` interface\n  the approximate amount of device memory in gigabytes. This value\n  an approximation given by rounding down to the nearest power\n  2 and dividing that number by 1024. Also, the lower and upper\n  are used to protect privacy of owners of very low- or high-end\n\n  `const memory = navigator.deviceMemory\n  console.log (\\\"This device has at least \\\"  memory  \\\"GiB of RAM.\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory`"}, :name web.Navigator/device-memory, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 459, :end-line 459, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The deviceMemory read-only property of the `web.navigator` interface\n  the approximate amount of device memory in gigabytes. This value\n  an approximation given by rounding down to the nearest power\n  2 and dividing that number by 1024. Also, the lower and upper\n  are used to protect privacy of owners of very low- or high-end\n\n  `const memory = navigator.deviceMemory\n  console.log (\\\"This device has at least \\\"  memory  \\\"GiB of RAM.\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/deviceMemory`"}, set-service-worker! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 929, :column 7, :end-line 929, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.serviceWorker read-only property returns the `web.ServiceWorkerContainer`\n  for the associated document, which provides access to registration,\n  upgrade, and communication with the `web.ServiceWorker`.\n\n  `var workerContainerInstance = navigator.serviceWorker;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker`"}, :name web.Navigator/set-service-worker!, :variadic false, :file "src/web/Navigator.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 929, :end-line 929, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Navigator.serviceWorker read-only property returns the `web.ServiceWorkerContainer`\n  for the associated document, which provides access to registration,\n  upgrade, and communication with the `web.ServiceWorker`.\n\n  `var workerContainerInstance = navigator.serviceWorker;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/serviceWorker`"}, set-locks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 615, :column 7, :end-line 615, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The locks read-only property of the `web.Navigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/locks`"}, :name web.Navigator/set-locks!, :variadic false, :file "src/web/Navigator.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 615, :end-line 615, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The locks read-only property of the `web.Navigator` interface\n  a `web.LockManager` object which provides methods for requesting\n  new `web.Lock` object and querying for an existing Lock object.\n\n  `var lockManager = Navigator.locks`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/locks`"}, java-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1028, :column 7, :end-line 1028, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  This method indicates whether the current browser is Java-enabled\n  not.\n\n  `result = window.navigator.javaEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled`"}, :name web.Navigator/java-enabled, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1028, :end-line 1028, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  This method indicates whether the current browser is Java-enabled\n  not.\n\n  `result = window.navigator.javaEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/javaEnabled`"}, set-battery! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 317, :column 7, :end-line 317, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The battery read-only property returns a `web.BatteryManager`\n  information about the system's battery charge level; provides\n  some new events you can handle to monitor the battery status.\n  implements the Battery Status API; see that documentation for\n  details, a guide to using the API, and sample code.\n\n  `var battery = navigator.battery;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/battery`"}, :name web.Navigator/set-battery!, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The battery read-only property returns a `web.BatteryManager`\n  information about the system's battery charge level; provides\n  some new events you can handle to monitor the battery status.\n  implements the Battery Status API; see that documentation for\n  details, a guide to using the API, and sample code.\n\n  `var battery = navigator.battery;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/battery`"}, product {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 877, :column 7, :end-line 877, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, :name web.Navigator/product, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 877, :end-line 877, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.product property is always \\\"Gecko\\\",\n  any browser.\n\n  `productName = window.navigator.product`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/product`"}, app-code-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 230, :column 7, :end-line 230, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, :name web.Navigator/app-code-name, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The value of the NavigatorID.appCodeName property is always \\\"Mozilla\\\",\n  any browser. This property is kept only for compatibility purposes.\n\n  `codeName = window.navigator.appCodeName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appCodeName`"}, build-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 332, :column 7, :end-line 332, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  Returns the build identifier of the browser. In modern browsers\n  property now returns a fixed timestamp as a privacy measure,\n  20181001000000 in Firefox 64 onwards.\n\n  `buildID = navigator.buildID;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID`"}, :name web.Navigator/build-id, :variadic false, :file "src/web/Navigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the build identifier of the browser. In modern browsers\n  property now returns a fixed timestamp as a privacy measure,\n  20181001000000 in Firefox 64 onwards.\n\n  `buildID = navigator.buildID;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/buildID`"}, set-app-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 266, :column 7, :end-line 266, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, :name web.Navigator/set-app-name!, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The value of the NavigatorID.appName property is always \\\"Netscape\\\",\n  any browser.\n\n  `appName = window.navigator.appName`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appName`"}, set-platform! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 864, :column 7, :end-line 864, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, :name web.Navigator/set-platform!, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 864, :end-line 864, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a string representing the platform of the browser. The\n  allows browsers to always return the empty string, so don't rely\n  this property to get a reliable answer.\n\n  `platform = navigator.platform`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/platform`"}, request-media-key-system-access {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 130, :column 7, :end-line 130, :end-column 38, :arglists (quote ([this key-system supported-configurations])), :doc "Method.\n\n  The Navigator.requestMediaKeySystemAccess() method returns a\n  which delivers a `media.MediaKeySystemAccess` object that can\n  used to access a particular media key system, which can in turn\n  used to create keys for decrypting a media stream. This method\n  part of the Encrypted Media Extensions API, which brings support\n  encrypted media and DRM-protected video to the web.\n\n  `​Promise = Navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess`"}, :name web.Navigator/request-media-key-system-access, :variadic false, :file "src/web/Navigator.cljs", :end-column 38, :method-params ([this key-system supported-configurations]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this key-system supported-configurations])), :doc "Method.\n\n  The Navigator.requestMediaKeySystemAccess() method returns a\n  which delivers a `media.MediaKeySystemAccess` object that can\n  used to access a particular media key system, which can in turn\n  used to create keys for decrypting a media stream. This method\n  part of the Encrypted Media Extensions API, which brings support\n  encrypted media and DRM-protected video to the web.\n\n  `​Promise = Navigator.requestMediaKeySystemAccess(keySystem, supportedConfigurations);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/requestMediaKeySystemAccess`"}, on-line {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 667, :column 7, :end-line 667, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, :name web.Navigator/on-line, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 667, :end-line 667, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, moz-is-locally-available {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 75, :column 7, :end-line 75, :end-column 31, :arglists (quote ([this uri if-offline])), :doc "Method.\n\n  The Navigator.mozIsLocallyAvailable() method allows add-ons to\n  whether or not a given resource is available.\n\n  `navigator.mozIsLocallyAvailable(uri, ifOffline);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozIsLocallyAvailable`"}, :name web.Navigator/moz-is-locally-available, :variadic false, :file "src/web/Navigator.cljs", :end-column 31, :method-params ([this uri if-offline]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this uri if-offline])), :doc "Method.\n\n  The Navigator.mozIsLocallyAvailable() method allows add-ons to\n  whether or not a given resource is available.\n\n  `navigator.mozIsLocallyAvailable(uri, ifOffline);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mozIsLocallyAvailable`"}, set-cookie-enabled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 414, :column 7, :end-line 414, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  navigator.cookieEnabled returns a Boolean value that indicates\n  cookies are enabled or not.\n\n  `var cookieEnabled = navigator.cookieEnabled;\n\n\n  \\tcookieEnabled is a Boolean: true or false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled`"}, :name web.Navigator/set-cookie-enabled!, :variadic false, :file "src/web/Navigator.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 414, :end-line 414, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  navigator.cookieEnabled returns a Boolean value that indicates\n  cookies are enabled or not.\n\n  `var cookieEnabled = navigator.cookieEnabled;\n\n\n  \\tcookieEnabled is a Boolean: true or false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/cookieEnabled`"}, set-webdriver! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 990, :column 7, :end-line 990, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The webdriver read-only property of the `web.navigator` interface\n  whether the user agent is controlled by automation.\n\n  `var isAutomated = navigator.webdriver`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver`"}, :name web.Navigator/set-webdriver!, :variadic false, :file "src/web/Navigator.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 990, :end-line 990, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The webdriver read-only property of the `web.navigator` interface\n  whether the user agent is controlled by automation.\n\n  `var isAutomated = navigator.webdriver`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/webdriver`"}, share {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 158, :column 7, :end-line 158, :end-column 12, :arglists (quote ([this data])), :doc "Method.\n\n  The Navigator.share() method invokes the native sharing mechanism\n  the device as part of the Web Share API. If the Web Share API\n  unsupported, then this method will be undefined.\n\n  `var sharePromise = window.navigator.share(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share`"}, :name web.Navigator/share, :variadic false, :file "src/web/Navigator.cljs", :end-column 12, :method-params ([this data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this data])), :doc "Method.\n\n  The Navigator.share() method invokes the native sharing mechanism\n  the device as part of the Web Share API. If the Web Share API\n  unsupported, then this method will be undefined.\n\n  `var sharePromise = window.navigator.share(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share`"}, set-storage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1153, :column 7, :end-line 1153, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The NavigatorStorage.storage read-only property returns the singleton\n  object used to access the overall storage capabilities of the\n  for the current site or app.\n\n  `var storageManager = navigator.storage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage`"}, :name web.Navigator/set-storage!, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1153, :end-line 1153, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NavigatorStorage.storage read-only property returns the singleton\n  object used to access the overall storage capabilities of the\n  for the current site or app.\n\n  `var storageManager = navigator.storage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage`"}, media-devices {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 654, :column 7, :end-line 654, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.mediaDevices read-only property returns a `media.MediaDevices`\n  which provides access to connected media input devices like cameras\n  microphones, as well as screen sharing.\n\n  `var mediaDevices = navigator.mediaDevices;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`"}, :name web.Navigator/media-devices, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 654, :end-line 654, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.mediaDevices read-only property returns a `media.MediaDevices`\n  which provides access to connected media input devices like cameras\n  microphones, as well as screen sharing.\n\n  `var mediaDevices = navigator.mediaDevices;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaDevices`"}, app-version {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 278, :column 7, :end-line 278, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, :name web.Navigator/app-version, :variadic false, :file "src/web/Navigator.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns either \\\"4.0\\\" or a string representing version information\n  the browser.\n\n  `window.navigator.appVersion`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/appVersion`"}, language {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 575, :column 7, :end-line 575, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.language read-only property returns a string\n  the preferred language of the user, usually the language of the\n  UI.\n\n  `var lang = navigator.language`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language`"}, :name web.Navigator/language, :variadic false, :file "src/web/Navigator.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 575, :end-line 575, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorLanguage.language read-only property returns a string\n  the preferred language of the user, usually the language of the\n  UI.\n\n  `var lang = navigator.language`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorLanguage/language`"}, clipboard {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 358, :column 7, :end-line 358, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The Clipboard API adds to the `web.Navigator` interface the read-only\n  property, which returns the `web.Clipboard` object used to read\n  write the clipboard's contents.\n\n  `theClipboard = navigator.clipboard;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard`"}, :name web.Navigator/clipboard, :variadic false, :file "src/web/Navigator.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Clipboard API adds to the `web.Navigator` interface the read-only\n  property, which returns the `web.Clipboard` object used to read\n  write the clipboard's contents.\n\n  `theClipboard = navigator.clipboard;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/clipboard`"}, set-max-touch-points! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 641, :column 7, :end-line 641, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The maxTouchPoints read-only property of the `web.Navigator`\n  returns the maximum number of simultaneous touch contact points\n  supported by the current device.\n\n  `touchPoints = navigator.maxTouchPoints;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints`"}, :name web.Navigator/set-max-touch-points!, :variadic false, :file "src/web/Navigator.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 641, :end-line 641, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The maxTouchPoints read-only property of the `web.Navigator`\n  returns the maximum number of simultaneous touch contact points\n  supported by the current device.\n\n  `touchPoints = navigator.maxTouchPoints;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints`"}, plugins {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1108, :column 7, :end-line 1108, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  Returns a `web.PluginArray` object, listing the `web.Plugin`\n  describing the plugins installed in the application.\n\n  `var plugins = navigator.plugins;\n\n  plugins is `web.PluginArray` object used to access `web.Plugin` objects either by name or as a list of items.\n\n  The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\\\"name\\\") methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins`"}, :name web.Navigator/plugins, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1108, :end-line 1108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns a `web.PluginArray` object, listing the `web.Plugin`\n  describing the plugins installed in the application.\n\n  `var plugins = navigator.plugins;\n\n  plugins is `web.PluginArray` object used to access `web.Plugin` objects either by name or as a list of items.\n\n  The returned value is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\\\"name\\\") methods.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorPlugins/plugins`"}, register-protocol-handler {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 118, :column 7, :end-line 118, :end-column 32, :arglists (quote ([this protocol url title])), :doc "Method.\n\n  The `web.Navigator` method registerProtocolHandler() lets web\n  register themselves as possible handlers for particular protocols.\n\n  `navigator.registerProtocolHandler(protocol, url, title);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler`"}, :name web.Navigator/register-protocol-handler, :variadic false, :file "src/web/Navigator.cljs", :end-column 32, :method-params ([this protocol url title]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this protocol url title])), :doc "Method.\n\n  The `web.Navigator` method registerProtocolHandler() lets web\n  register themselves as possible handlers for particular protocols.\n\n  `navigator.registerProtocolHandler(protocol, url, title);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/registerProtocolHandler`"}, hardware-concurrency {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1002, :column 7, :end-line 1002, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, :name web.Navigator/hardware-concurrency, :variadic false, :file "src/web/Navigator.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1002, :end-line 1002, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The navigator.hardwareConcurrency read-only property returns\n  number of logical processors available to run threads on the\n  computer.\n\n  `logicalProcessors = window.navigator.hardwareConcurrency`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorConcurrentHardware/hardwareConcurrency`"}, media-capabilities {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1052, :column 7, :end-line 1052, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.mediaCapabilities read-only property returns a\n  object that can expose information about the decoding and encoding\n  for a given format and output capabilities as defined by the\n  Capabilities API.\n\n  `mediaCapabilitiesObj = globalObj.navigator.mediaCapabilities`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaCapabilities`"}, :name web.Navigator/media-capabilities, :variadic false, :file "src/web/Navigator.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1052, :end-line 1052, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Navigator.mediaCapabilities read-only property returns a\n  object that can expose information about the decoding and encoding\n  for a given format and output capabilities as defined by the\n  Capabilities API.\n\n  `mediaCapabilitiesObj = globalObj.navigator.mediaCapabilities`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/mediaCapabilities`"}, set-on-line! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 683, :column 7, :end-line 683, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, :name web.Navigator/set-on-line!, :variadic false, :file "src/web/Navigator.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 683, :end-line 683, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the online status of the browser. The property returns\n  boolean value, with true meaning online and false meaning offline.\n  property sends updates whenever the browser's ability to connect\n  the network changes. The update occurs when the user follows\n  or when a script requests a remote page. For example, the property\n  return false when users click links soon after they lose internet\n\n  `online = window.navigator.onLine;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/onLine`"}, taint-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 171, :column 7, :end-line 171, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The NavigatorID.taintEnabled() method always returns false.\n\n  `result = window.navigator.taintEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled`"}, :name web.Navigator/taint-enabled, :variadic false, :file "src/web/Navigator.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The NavigatorID.taintEnabled() method always returns false.\n\n  `result = window.navigator.taintEnabled()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorID/taintEnabled`"}, storage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 1140, :column 7, :end-line 1140, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorStorage.storage read-only property returns the singleton\n  object used to access the overall storage capabilities of the\n  for the current site or app.\n\n  `var storageManager = navigator.storage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage`"}, :name web.Navigator/storage, :variadic false, :file "src/web/Navigator.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1140, :end-line 1140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NavigatorStorage.storage read-only property returns the singleton\n  object used to access the overall storage capabilities of the\n  for the current site or app.\n\n  `var storageManager = navigator.storage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NavigatorStorage/storage`"}, set-do-not-track! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Navigator.cljs", :line 505, :column 7, :end-line 505, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the user's do-not-track setting. This is \\\"1\\\" if the\n  has requested not to be tracked by web sites, content, or advertising.\n\n  `dnt = navigator.doNotTrack;\n\n  The value reflects that of the do-not-track header, i.e. values of {\\\"1\\\", \\\"0\\\", \\\"unspecified\\\" }. Note: Prior to Gecko 32, Gecko used the values { \\\"yes\\\", \\\"no\\\", \\\"unspecified\\\"} (bug 887703).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack`"}, :name web.Navigator/set-do-not-track!, :variadic false, :file "src/web/Navigator.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 505, :end-line 505, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the user's do-not-track setting. This is \\\"1\\\" if the\n  has requested not to be tracked by web sites, content, or advertising.\n\n  `dnt = navigator.doNotTrack;\n\n  The value reflects that of the do-not-track header, i.e. values of {\\\"1\\\", \\\"0\\\", \\\"unspecified\\\" }. Note: Prior to Gecko 32, Gecko used the values { \\\"yes\\\", \\\"no\\\", \\\"unspecified\\\"} (bug 887703).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Navigator/doNotTrack`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Navigator interface represents the state and the identity\n  the user agent. It allows scripts to query it and to register\n  to carry on some activities."}