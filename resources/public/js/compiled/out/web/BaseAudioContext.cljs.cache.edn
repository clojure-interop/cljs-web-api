{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.BaseAudioContext, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {create-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 31, :column 7, :end-line 31, :end-column 20, :arglists (quote ([this num-ofchannels length sample-rate])), :doc "Method.\n\n  An `audio.AudioBuffer` configured based on the specified options.\n\n  `var buffer = baseAudioContext.createBuffer(numOfchannels, length, sampleRate);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer`"}, :name web.BaseAudioContext/create-buffer, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 20, :method-params ([this num-ofchannels length sample-rate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this num-ofchannels length sample-rate])), :doc "Method.\n\n  An `audio.AudioBuffer` configured based on the specified options.\n\n  `var buffer = baseAudioContext.createBuffer(numOfchannels, length, sampleRate);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBuffer`"}, create-periodic-wave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 182, :column 7, :end-line 182, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  The createPeriodicWave() method of the `web.BaseAudioContext`\n  is used to create a `web.PeriodicWave`, which is used to define\n  periodic waveform that can be used to shape the output of an\n\n  `var wave = AudioContext.createPeriodicWave(real, imag[, constraints]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BaseAudioContext/create-periodic-wave, :variadic true, :file "src/web/BaseAudioContext.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The createPeriodicWave() method of the `web.BaseAudioContext`\n  is used to create a `web.PeriodicWave`, which is used to define\n  periodic waveform that can be used to shape the output of an\n\n  `var wave = AudioContext.createPeriodicWave(real, imag[, constraints]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPeriodicWave`"}, create-convolver {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 89, :column 7, :end-line 89, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  A `web.ConvolverNode`.\n\n  `baseAudioContext.createConvolver();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConvolver`"}, :name web.BaseAudioContext/create-convolver, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  A `web.ConvolverNode`.\n\n  `baseAudioContext.createConvolver();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConvolver`"}, destination {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 307, :column 7, :end-line 307, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioDestinationNode`.\n\n  `baseAudioContext.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination`"}, :name web.BaseAudioContext/destination, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 307, :end-line 307, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioDestinationNode`.\n\n  `baseAudioContext.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination`"}, set-sample-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 364, :column 7, :end-line 364, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The sampleRate property of the `web.BaseAudioContext` interface\n  a floating point number representing the sample rate, in samples\n  second, used by all nodes in this audio context.\n\n  `baseAudioContext.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate`"}, :name web.BaseAudioContext/set-sample-rate!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The sampleRate property of the `web.BaseAudioContext` interface\n  a floating point number representing the sample rate, in samples\n  second, used by all nodes in this audio context.\n\n  `baseAudioContext.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate`"}, create-oscillator {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 156, :column 7, :end-line 156, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The createOscillator() method of the `web.BaseAudioContext` interface\n  an `web.OscillatorNode`, a source representing a periodic waveform.\n  basically generates a constant tone.\n\n  `var oscillatorNode = audioCtx.createOscillator();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createOscillator`"}, :name web.BaseAudioContext/create-oscillator, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The createOscillator() method of the `web.BaseAudioContext` interface\n  an `web.OscillatorNode`, a source representing a periodic waveform.\n  basically generates a constant tone.\n\n  `var oscillatorNode = audioCtx.createOscillator();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createOscillator`"}, create-constant-source {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 75, :column 7, :end-line 75, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The createConstantSource() property of the `web.BaseAudioContext`\n  creates a `web.ConstantSourceNode` object, which is an audio\n  that continuously outputs a monaural (one-channel) sound signal\n  samples all have the same value.\n\n  `var constantSourceNode = AudioContext.createConstantSource()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConstantSource`"}, :name web.BaseAudioContext/create-constant-source, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The createConstantSource() property of the `web.BaseAudioContext`\n  creates a `web.ConstantSourceNode` object, which is an audio\n  that continuously outputs a monaural (one-channel) sound signal\n  samples all have the same value.\n\n  `var constantSourceNode = AudioContext.createConstantSource()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createConstantSource`"}, create-channel-merger {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 53, :column 7, :end-line 53, :end-column 28, :arglists (quote ([this number-of-inputs])), :doc "Method.\n\n  A `web.ChannelMergerNode`.\n\n  `baseAudioContext.createChannelMerger(numberOfInputs);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelMerger`"}, :name web.BaseAudioContext/create-channel-merger, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 28, :method-params ([this number-of-inputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this number-of-inputs])), :doc "Method.\n\n  A `web.ChannelMergerNode`.\n\n  `baseAudioContext.createChannelMerger(numberOfInputs);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelMerger`"}, create-biquad-filter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 20, :column 7, :end-line 20, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  A `web.BiquadFilterNode`.\n\n  `baseAudioContext.createBiquadFilter();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter`"}, :name web.BaseAudioContext/create-biquad-filter, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  A `web.BiquadFilterNode`.\n\n  `baseAudioContext.createBiquadFilter();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBiquadFilter`"}, set-audio-worklet! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 265, :column 7, :end-line 265, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The audioWorklet read-only property of the `web.BaseAudioContext`\n  returns an instance of `audio.AudioWorklet` that can be used\n  adding `audio.AudioWorkletProcessor`-derived classes which implement\n  audio processing.\n\n  `baseAudioContextInstance.audioWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet`"}, :name web.BaseAudioContext/set-audio-worklet!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The audioWorklet read-only property of the `web.BaseAudioContext`\n  returns an instance of `audio.AudioWorklet` that can be used\n  adding `audio.AudioWorkletProcessor`-derived classes which implement\n  audio processing.\n\n  `baseAudioContextInstance.audioWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet`"}, current-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 279, :column 7, :end-line 279, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The currentTime read-only property of the `web.BaseAudioContext`\n  returns a double representing an ever-increasing hardware timestamp\n  seconds that can be used for scheduling audio playback, visualizing\n  etc. It starts at 0.\n\n  `var curTime = baseAudioContext.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime`"}, :name web.BaseAudioContext/current-time, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The currentTime read-only property of the `web.BaseAudioContext`\n  returns a double representing an ever-increasing hardware timestamp\n  seconds that can be used for scheduling audio playback, visualizing\n  etc. It starts at 0.\n\n  `var curTime = baseAudioContext.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime`"}, set-destination! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 318, :column 7, :end-line 318, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioDestinationNode`.\n\n  `baseAudioContext.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination`"}, :name web.BaseAudioContext/set-destination!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 318, :end-line 318, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioDestinationNode`.\n\n  `baseAudioContext.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/destination`"}, set-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 388, :column 7, :end-line 388, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString`. Possible values are:\n\n  `baseAudioContext.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state`"}, :name web.BaseAudioContext/set-state!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 388, :end-line 388, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `dom.DOMString`. Possible values are:\n\n  `baseAudioContext.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state`"}, onstatechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 399, :column 7, :end-line 399, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The following snippet is taken from our AudioContext states demo\n  it running live.) The onstatechange hander is used to log the\n  `web.state` to the console every time it changes.\n\n  `baseAudioContext.onstatechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange`"}, :name web.BaseAudioContext/onstatechange, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 399, :end-line 399, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The following snippet is taken from our AudioContext states demo\n  it running live.) The onstatechange hander is used to log the\n  `web.state` to the console every time it changes.\n\n  `baseAudioContext.onstatechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange`"}, create-gain {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 129, :column 7, :end-line 129, :end-column 18, :arglists (quote ([this])), :doc "Method.\n\n  A `web.GainNode` which takes as input one or more audio sources\n  outputs audio whose volume has been adjusted in gain (volume)\n  a level specified by the node's `web.GainNode.gain` a-rate parameter.\n\n  `var gainNode = AudioContext.createGain();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain`"}, :name web.BaseAudioContext/create-gain, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  A `web.GainNode` which takes as input one or more audio sources\n  outputs audio whose volume has been adjusted in gain (volume)\n  a level specified by the node's `web.GainNode.gain` a-rate parameter.\n\n  `var gainNode = AudioContext.createGain();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createGain`"}, sample-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 351, :column 7, :end-line 351, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The sampleRate property of the `web.BaseAudioContext` interface\n  a floating point number representing the sample rate, in samples\n  second, used by all nodes in this audio context.\n\n  `baseAudioContext.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate`"}, :name web.BaseAudioContext/sample-rate, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 351, :end-line 351, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The sampleRate property of the `web.BaseAudioContext` interface\n  a floating point number representing the sample rate, in samples\n  second, used by all nodes in this audio context.\n\n  `baseAudioContext.sampleRate;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/sampleRate`"}, create-analyser {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The createAnalyser() method of the `web.BaseAudioContext` interface\n  an `web.AnalyserNode`, which can be used to expose audio time\n  frequency data and create data visualisations.\n\n  `var analyserNode = baseAudioContext.createAnalyser();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser`"}, :name web.BaseAudioContext/create-analyser, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The createAnalyser() method of the `web.BaseAudioContext` interface\n  an `web.AnalyserNode`, which can be used to expose audio time\n  frequency data and create data visualisations.\n\n  `var analyserNode = baseAudioContext.createAnalyser();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createAnalyser`"}, set-listener! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 340, :column 7, :end-line 340, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioListener` object.\n\n  `baseAudioContext.listener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener`"}, :name web.BaseAudioContext/set-listener!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 340, :end-line 340, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An `audio.AudioListener` object.\n\n  `baseAudioContext.listener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener`"}, create-stereo-panner {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 206, :column 7, :end-line 206, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  A `web.StereoPannerNode`.\n\n  `baseAudioContext.createStereoPanner();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createStereoPanner`"}, :name web.BaseAudioContext/create-stereo-panner, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  A `web.StereoPannerNode`.\n\n  `baseAudioContext.createStereoPanner();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createStereoPanner`"}, set-current-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 293, :column 7, :end-line 293, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The currentTime read-only property of the `web.BaseAudioContext`\n  returns a double representing an ever-increasing hardware timestamp\n  seconds that can be used for scheduling audio playback, visualizing\n  etc. It starts at 0.\n\n  `var curTime = baseAudioContext.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime`"}, :name web.BaseAudioContext/set-current-time!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 293, :end-line 293, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The currentTime read-only property of the `web.BaseAudioContext`\n  returns a double representing an ever-increasing hardware timestamp\n  seconds that can be used for scheduling audio playback, visualizing\n  etc. It starts at 0.\n\n  `var curTime = baseAudioContext.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/currentTime`"}, state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 377, :column 7, :end-line 377, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString`. Possible values are:\n\n  `baseAudioContext.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state`"}, :name web.BaseAudioContext/state, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `dom.DOMString`. Possible values are:\n\n  `baseAudioContext.state;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/state`"}, audio-worklet {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 251, :column 7, :end-line 251, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The audioWorklet read-only property of the `web.BaseAudioContext`\n  returns an instance of `audio.AudioWorklet` that can be used\n  adding `audio.AudioWorkletProcessor`-derived classes which implement\n  audio processing.\n\n  `baseAudioContextInstance.audioWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet`"}, :name web.BaseAudioContext/audio-worklet, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The audioWorklet read-only property of the `web.BaseAudioContext`\n  returns an instance of `audio.AudioWorklet` that can be used\n  adding `audio.AudioWorkletProcessor`-derived classes which implement\n  audio processing.\n\n  `baseAudioContextInstance.audioWorklet;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/audioWorklet`"}, listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 329, :column 7, :end-line 329, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioListener` object.\n\n  `baseAudioContext.listener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener`"}, :name web.BaseAudioContext/listener, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 329, :end-line 329, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An `audio.AudioListener` object.\n\n  `baseAudioContext.listener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/listener`"}, create-buffer-source {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 42, :column 7, :end-line 42, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  An `audio.AudioBufferSourceNode`.\n\n  `var source = baseAudioContext.createBufferSource();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource`"}, :name web.BaseAudioContext/create-buffer-source, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  An `audio.AudioBufferSourceNode`.\n\n  `var source = baseAudioContext.createBufferSource();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createBufferSource`"}, set-onstatechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 412, :column 7, :end-line 412, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The following snippet is taken from our AudioContext states demo\n  it running live.) The onstatechange hander is used to log the\n  `web.state` to the console every time it changes.\n\n  `baseAudioContext.onstatechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange`"}, :name web.BaseAudioContext/set-onstatechange!, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 412, :end-line 412, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The following snippet is taken from our AudioContext states demo\n  it running live.) The onstatechange hander is used to log the\n  `web.state` to the console every time it changes.\n\n  `baseAudioContext.onstatechange = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/onstatechange`"}, create-channel-splitter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 64, :column 7, :end-line 64, :end-column 30, :arglists (quote ([this number-of-outputs])), :doc "Method.\n\n  A `web.ChannelSplitterNode`.\n\n  `baseAudioContext.createChannelSplitter(numberOfOutputs);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelSplitter`"}, :name web.BaseAudioContext/create-channel-splitter, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 30, :method-params ([this number-of-outputs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this number-of-outputs])), :doc "Method.\n\n  A `web.ChannelSplitterNode`.\n\n  `baseAudioContext.createChannelSplitter(numberOfOutputs);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createChannelSplitter`"}, create-delay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 100, :column 7, :end-line 100, :end-column 19, :arglists (quote ([this max-delay-time])), :doc "Method.\n\n  The createDelay() method of the `web.BaseAudioContext` Interface\n  used to create a `web.DelayNode`, which is used to delay the\n  audio signal by a certain amount of time.\n\n  `var delayNode = audioCtx.createDelay(maxDelayTime);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDelay`"}, :name web.BaseAudioContext/create-delay, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 19, :method-params ([this max-delay-time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this max-delay-time])), :doc "Method.\n\n  The createDelay() method of the `web.BaseAudioContext` Interface\n  used to create a `web.DelayNode`, which is used to delay the\n  audio signal by a certain amount of time.\n\n  `var delayNode = audioCtx.createDelay(maxDelayTime);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDelay`"}, decode-audio-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 228, :column 7, :end-line 228, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  This is the preferred method of creating an audio source for\n  Audio API from an audio track. This method only works on complete\n  data, not fragments of audio file data.\n\n  `Older callback syntax:\n\n\n\n  baseAudioContext.decodeAudioData(ArrayBuffer, successCallback, errorCallback);\n\n  Newer promise-based syntax:\n\n\n\n  Promise<decodedData> baseAudioContext.decodeAudioData(ArrayBuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BaseAudioContext/decode-audio-data, :variadic true, :file "src/web/BaseAudioContext.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  This is the preferred method of creating an audio source for\n  Audio API from an audio track. This method only works on complete\n  data, not fragments of audio file data.\n\n  `Older callback syntax:\n\n\n\n  baseAudioContext.decodeAudioData(ArrayBuffer, successCallback, errorCallback);\n\n  Newer promise-based syntax:\n\n\n\n  Promise<decodedData> baseAudioContext.decodeAudioData(ArrayBuffer);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/decodeAudioData`"}, create-iir-filter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 142, :column 7, :end-line 142, :end-column 24, :arglists (quote ([this feedforward feedback])), :doc "Method.\n\n  The createIIRFilter() method of the `web.BaseAudioContext` interface\n  an `web.IIRFilterNode`, which represents a general infinite impulse\n  (IIR) filter which can be configured to serve as various types\n  filter.\n\n  `var iirFilter = AudioContext.createIIRFilter(feedforward, feedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createIIRFilter`"}, :name web.BaseAudioContext/create-iir-filter, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 24, :method-params ([this feedforward feedback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this feedforward feedback])), :doc "Method.\n\n  The createIIRFilter() method of the `web.BaseAudioContext` interface\n  an `web.IIRFilterNode`, which represents a general infinite impulse\n  (IIR) filter which can be configured to serve as various types\n  filter.\n\n  `var iirFilter = AudioContext.createIIRFilter(feedforward, feedback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createIIRFilter`"}, create-dynamics-compressor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 113, :column 7, :end-line 113, :end-column 33, :arglists (quote ([this])), :doc "Method.\n\n  Compression lowers the volume of the loudest parts of the signal\n  raises the volume of the softest parts. Overall, a louder, richer,\n  fuller sound can be achieved. It is especially important in games\n  musical applications where large numbers of individual sounds\n  played simultaneously, where you want to control the overall\n  level and help avoid clipping (distorting) of the audio output.\n\n  `baseAudioCtx.createDynamicsCompressor();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDynamicsCompressor`"}, :name web.BaseAudioContext/create-dynamics-compressor, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  Compression lowers the volume of the loudest parts of the signal\n  raises the volume of the softest parts. Overall, a louder, richer,\n  fuller sound can be achieved. It is especially important in games\n  musical applications where large numbers of individual sounds\n  played simultaneously, where you want to control the overall\n  level and help avoid clipping (distorting) of the audio output.\n\n  `baseAudioCtx.createDynamicsCompressor();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createDynamicsCompressor`"}, create-script-processor {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 195, :column 7, :end-line 195, :end-column 30, :arglists (quote ([this buffer-size number-of-input-channels number-of-output-channels])), :doc "Method.\n\n  A `web.ScriptProcessorNode`.\n\n  `var scriptProcessor = audioCtx.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createScriptProcessor`"}, :name web.BaseAudioContext/create-script-processor, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 30, :method-params ([this buffer-size number-of-input-channels number-of-output-channels]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this buffer-size number-of-input-channels number-of-output-channels])), :doc "Method.\n\n  A `web.ScriptProcessorNode`.\n\n  `var scriptProcessor = audioCtx.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createScriptProcessor`"}, create-panner {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 169, :column 7, :end-line 169, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The panner node is spatialized in relation to the AudioContext's\n  (defined by the `audio.AudioContext.listener` attribute), which\n  the position and orientation of the person listening to the audio.\n\n  `baseAudioCtx.createPanner();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPanner`"}, :name web.BaseAudioContext/create-panner, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The panner node is spatialized in relation to the AudioContext's\n  (defined by the `audio.AudioContext.listener` attribute), which\n  the position and orientation of the person listening to the audio.\n\n  `baseAudioCtx.createPanner();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createPanner`"}, create-wave-shaper {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BaseAudioContext.cljs", :line 217, :column 7, :end-line 217, :end-column 25, :arglists (quote ([this])), :doc "Method.\n\n  A `web.WaveShaperNode`.\n\n  `baseAudioCtx.createWaveShaper();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createWaveShaper`"}, :name web.BaseAudioContext/create-wave-shaper, :variadic false, :file "src/web/BaseAudioContext.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  A `web.WaveShaperNode`.\n\n  `baseAudioCtx.createWaveShaper();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BaseAudioContext/createWaveShaper`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The BaseAudioContext interface of the Web Audio API acts as a\n  definition for online and offline audio-processing graphs, as\n  by `audio.AudioContext` and `web.OfflineAudioContext` respectively."}