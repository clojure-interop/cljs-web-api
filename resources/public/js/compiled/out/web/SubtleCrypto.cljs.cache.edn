{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.SubtleCrypto, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {derive-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 38, :column 7, :end-line 38, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The deriveKey() method of the `web.SubtleCrypto` interface can\n  used to derive a secret key from a master key.\n\n  `const result = crypto.subtle.deriveKey(\n  algorithm,\n  baseKey,\n  derivedKeyAlgorithm,\n  extractable,\n  keyUsages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.SubtleCrypto/derive-key, :variadic true, :file "src/web/SubtleCrypto.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The deriveKey() method of the `web.SubtleCrypto` interface can\n  used to derive a secret key from a master key.\n\n  `const result = crypto.subtle.deriveKey(\n  algorithm,\n  baseKey,\n  derivedKeyAlgorithm,\n  extractable,\n  keyUsages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveKey`"}, sign {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 128, :column 7, :end-line 128, :end-column 11, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The sign() method of the `web.SubtleCrypto` interface generates\n  digital signature.\n\n  `const signature = crypto.subtle.sign(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign`"}, :name web.SubtleCrypto/sign, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 11, :method-params ([this algorithm key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The sign() method of the `web.SubtleCrypto` interface generates\n  digital signature.\n\n  `const signature = crypto.subtle.sign(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/sign`"}, unwrap-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 140, :column 7, :end-line 140, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The unwrapKey() method of the `web.SubtleCrypto` interface \\\"unwraps\\\"\n  key. This means that it takes as its input a key that has been\n  and then encrypted (also called \\\"wrapped\\\"). It decrypts the\n  and then imports it, returning a `web.CryptoKey` object that\n  be used in the Web Crypto API.\n\n  `const result = crypto.subtle.unwrapKey(\n  format,\n  wrappedKey,\n  unwrappingKey,\n  unwrapAlgo,\n  unwrappedKeyAlgo,\n  extractable,\n  keyUsages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.SubtleCrypto/unwrap-key, :variadic true, :file "src/web/SubtleCrypto.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The unwrapKey() method of the `web.SubtleCrypto` interface \\\"unwraps\\\"\n  key. This means that it takes as its input a key that has been\n  and then encrypted (also called \\\"wrapped\\\"). It decrypts the\n  and then imports it, returning a `web.CryptoKey` object that\n  be used in the Web Crypto API.\n\n  `const result = crypto.subtle.unwrapKey(\n  format,\n  wrappedKey,\n  unwrappingKey,\n  unwrapAlgo,\n  unwrappedKeyAlgo,\n  extractable,\n  keyUsages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/unwrapKey`"}, import-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 108, :column 7, :end-line 108, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The importKey() method of the `web.SubtleCrypto` interface imports\n  key: that is, it takes as input a key in an external, portable\n  and gives you a `web.CryptoKey` object that you can use in the\n  Crypto API.\n\n  `const result = crypto.subtle.importKey(\n  format,\n  keyData,\n  algorithm,\n  extractable,\n  usages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.SubtleCrypto/import-key, :variadic true, :file "src/web/SubtleCrypto.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The importKey() method of the `web.SubtleCrypto` interface imports\n  key: that is, it takes as input a key in an external, portable\n  and gives you a `web.CryptoKey` object that you can use in the\n  Crypto API.\n\n  `const result = crypto.subtle.importKey(\n  format,\n  keyData,\n  algorithm,\n  extractable,\n  usages\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/importKey`"}, wrap-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 175, :column 7, :end-line 175, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The wrapKey() method of the `web.SubtleCrypto` interface \\\"wraps\\\"\n  key. This means that it exports the key in an external, portable\n  then encrypts the exported key. Wrapping a key helps protect\n  in untrusted environments, such as inside an otherwise unprotected\n  store or in transmission over an unprotected network.\n\n  `const result = crypto.subtle.wrapKey(\n  format,\n  key,\n  wrappingKey,\n  wrapAlgo\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.SubtleCrypto/wrap-key, :variadic true, :file "src/web/SubtleCrypto.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The wrapKey() method of the `web.SubtleCrypto` interface \\\"wraps\\\"\n  key. This means that it exports the key in an external, portable\n  then encrypts the exported key. Wrapping a key helps protect\n  in untrusted environments, such as inside an otherwise unprotected\n  store or in transmission over an unprotected network.\n\n  `const result = crypto.subtle.wrapKey(\n  format,\n  key,\n  wrappingKey,\n  wrapAlgo\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/wrapKey`"}, generate-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 95, :column 7, :end-line 95, :end-column 19, :arglists (quote ([this algorithm extractable key-usages])), :doc "Method.\n\n  Use the generateKey() method of the `web.SubtleCrypto` interface\n  generate a new key (for symmetric algorithms) or key pair (for\n  algorithms).\n\n  `const result = crypto.subtle.generateKey(algorithm, extractable, keyUsages);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey`"}, :name web.SubtleCrypto/generate-key, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 19, :method-params ([this algorithm extractable key-usages]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this algorithm extractable key-usages])), :doc "Method.\n\n  Use the generateKey() method of the `web.SubtleCrypto` interface\n  generate a new key (for symmetric algorithms) or key pair (for\n  algorithms).\n\n  `const result = crypto.subtle.generateKey(algorithm, extractable, keyUsages);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/generateKey`"}, encrypt {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 71, :column 7, :end-line 71, :end-column 14, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The encrypt() method of the `web.SubtleCrypto` interface encrypts\n\n  `const result = crypto.subtle.encrypt(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt`"}, :name web.SubtleCrypto/encrypt, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 14, :method-params ([this algorithm key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The encrypt() method of the `web.SubtleCrypto` interface encrypts\n\n  `const result = crypto.subtle.encrypt(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt`"}, digest {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 56, :column 7, :end-line 56, :end-column 13, :arglists (quote ([this algorithm data])), :doc "Method.\n\n  The digest() method of the `web.SubtleCrypto` interface generates\n  digest of the given data. A digest is a short fixed-length value\n  from some variable-length input. Cryptographic digests should\n  collision-resistance, meaning that it's hard to come up with\n  different inputs that have the same digest value.\n\n  `const digest = crypto.subtle.digest(algorithm, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest`"}, :name web.SubtleCrypto/digest, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 13, :method-params ([this algorithm data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this algorithm data])), :doc "Method.\n\n  The digest() method of the `web.SubtleCrypto` interface generates\n  digest of the given data. A digest is a short fixed-length value\n  from some variable-length input. Cryptographic digests should\n  collision-resistance, meaning that it's hard to come up with\n  different inputs that have the same digest value.\n\n  `const digest = crypto.subtle.digest(algorithm, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest`"}, derive-bits {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 22, :column 7, :end-line 22, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The deriveBits() method of the `web.SubtleCrypto` interface can\n  used to derive an array of bits from a base key.\n\n  `const result = crypto.subtle.deriveBits(\n  algorithm,\n  baseKey,\n  length\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.SubtleCrypto/derive-bits, :variadic true, :file "src/web/SubtleCrypto.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The deriveBits() method of the `web.SubtleCrypto` interface can\n  used to derive an array of bits from a base key.\n\n  `const result = crypto.subtle.deriveBits(\n  algorithm,\n  baseKey,\n  length\n  );`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/deriveBits`"}, export-key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 82, :column 7, :end-line 82, :end-column 17, :arglists (quote ([this format key])), :doc "Method.\n\n  The exportKey() method of the `web.SubtleCrypto` interface exports\n  key: that is, it takes as input a `web.CryptoKey` object and\n  you the key in an external, portable format.\n\n  `const result = crypto.subtle.exportKey(format, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey`"}, :name web.SubtleCrypto/export-key, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 17, :method-params ([this format key]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this format key])), :doc "Method.\n\n  The exportKey() method of the `web.SubtleCrypto` interface exports\n  key: that is, it takes as input a `web.CryptoKey` object and\n  you the key in an external, portable format.\n\n  `const result = crypto.subtle.exportKey(format, key);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/exportKey`"}, decrypt {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The decrypt() method of the `web.SubtleCrypto` interface decrypts\n  encrypted data. It takes as arguments a key to decrypt with,\n  optional extra parameters, and the data to decrypt (also known\n  \\\"ciphertext\\\"). It returns a `web.Promise` which will be fulfilled\n  the decrypted data (also known as \\\"plaintext\\\").\n\n  `const result = crypto.subtle.decrypt(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt`"}, :name web.SubtleCrypto/decrypt, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 14, :method-params ([this algorithm key data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this algorithm key data])), :doc "Method.\n\n  The decrypt() method of the `web.SubtleCrypto` interface decrypts\n  encrypted data. It takes as arguments a key to decrypt with,\n  optional extra parameters, and the data to decrypt (also known\n  \\\"ciphertext\\\"). It returns a `web.Promise` which will be fulfilled\n  the decrypted data (also known as \\\"plaintext\\\").\n\n  `const result = crypto.subtle.decrypt(algorithm, key, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/decrypt`"}, verify {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/SubtleCrypto.cljs", :line 163, :column 7, :end-line 163, :end-column 13, :arglists (quote ([this algorithm key signature data])), :doc "Method.\n\n  The verify() method of the `web.SubtleCrypto` interface verifies\n  digital signature.\n\n  `const result = crypto.subtle.verify(algorithm, key, signature, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify`"}, :name web.SubtleCrypto/verify, :variadic false, :file "src/web/SubtleCrypto.cljs", :end-column 13, :method-params ([this algorithm key signature data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this algorithm key signature data])), :doc "Method.\n\n  The verify() method of the `web.SubtleCrypto` interface verifies\n  digital signature.\n\n  `const result = crypto.subtle.verify(algorithm, key, signature, data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/verify`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The SubtleCrypto interface of the Web Crypto API provides a number\n  low-level cryptographic functions. It is accessed via the `web.Crypto.subtle`\n  available in a window context (via `web.Window.crypto`)."}