{:rename-macros {}, :renames {}, :externs {Worker {}}, :use-macros {}, :excludes #{}, :name web.Worker, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.Worker/constructor, :file "src/web/Worker.cljs", :line 8, :column 1, :end-line 8, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 8, :column 6, :end-line 8, :end-column 17}, :doc "Constructor.\n\n  The Worker() constructor creates a `web.Worker` object that executes the script at the specified URL. This script must obey the same-origin policy.\n\n  aURL\n  \\tA `web.USVString` representing the URL of the script the worker will execute. It must obey the same-origin policy.\n  \\toptions Optional\n  \\tAn object containing option properties that can be set when creating the object instance. Available properties are as follows:\n\n  \\t\\ttype: A `dom.DOMString` specifying the type of worker to create. The value can be classic or module. If not specified, the default used is classic.\n  \\t\\tcredentials: A `dom.DOMString` specifying the type of credentials to use for the worker. The value can be omit, same-origin, or include. If not specified, or if type is classic, the default used is omit (no credentials required).\n  \\t\\tname: A `dom.DOMString` specifying an identifying name for the `web.DedicatedWorkerGlobalScope` representing the scope of the worker, which is mainly useful for debugging purposes.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker`", :tag js}, post-message {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 25, :column 7, :end-line 25, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The postMessage() method of the `web.Worker` interface sends\n  message to the worker's inner scope. This accepts a single parameter,\n  is the data to send to the worker. The data may be any value\n  JavaScript object handled by the structured clone algorithm,\n  includes cyclical references.\n\n  `worker.postMessage(message, [transfer]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Worker/post-message, :variadic true, :file "src/web/Worker.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The postMessage() method of the `web.Worker` interface sends\n  message to the worker's inner scope. This accepts a single parameter,\n  is the data to send to the worker. The data may be any value\n  JavaScript object handled by the structured clone algorithm,\n  includes cyclical references.\n\n  `worker.postMessage(message, [transfer]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/postMessage`"}, terminate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The terminate() method of the `web.Worker` interface immediately\n  the `web.Worker`. This does not offer the worker an opportunity\n  finish its operations; it is simply stopped at once.\n\n  `myWorker.terminate();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate`"}, :name web.Worker/terminate, :variadic false, :file "src/web/Worker.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The terminate() method of the `web.Worker` interface immediately\n  the `web.Worker`. This does not offer the worker an opportunity\n  finish its operations; it is simply stopped at once.\n\n  `myWorker.terminate();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/terminate`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 53, :column 7, :end-line 53, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.Worker/onerror, :variadic false, :file "src/web/Worker.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 66, :column 7, :end-line 66, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, :name web.Worker/set-onerror!, :variadic false, :file "src/web/Worker.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 66, :end-line 66, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The AbstractWorker.onerror property of the `web.AbstractWorker`\n  represents an `web.EventHandler`, that is a function to be called\n  the error event occurs and bubbles through the `web.Worker`.\n\n  `myWorker.onerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbstractWorker/onerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 79, :column 7, :end-line 79, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.Worker` interface represents\n  `web.EventHandler`, that is a function to be called when the\n  event occurs. These events are of type `web.MessageEvent` and\n  be called when the worker's parent receives a message (i.e. from\n  `web.DedicatedWorkerGlobalScope.postMessage` method).\n\n  `myWorker.onmessage = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage`"}, :name web.Worker/onmessage, :variadic false, :file "src/web/Worker.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.Worker` interface represents\n  `web.EventHandler`, that is a function to be called when the\n  event occurs. These events are of type `web.MessageEvent` and\n  be called when the worker's parent receives a message (i.e. from\n  `web.DedicatedWorkerGlobalScope.postMessage` method).\n\n  `myWorker.onmessage = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 94, :column 7, :end-line 94, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.Worker` interface represents\n  `web.EventHandler`, that is a function to be called when the\n  event occurs. These events are of type `web.MessageEvent` and\n  be called when the worker's parent receives a message (i.e. from\n  `web.DedicatedWorkerGlobalScope.postMessage` method).\n\n  `myWorker.onmessage = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage`"}, :name web.Worker/set-onmessage!, :variadic false, :file "src/web/Worker.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.Worker` interface represents\n  `web.EventHandler`, that is a function to be called when the\n  event occurs. These events are of type `web.MessageEvent` and\n  be called when the worker's parent receives a message (i.e. from\n  `web.DedicatedWorkerGlobalScope.postMessage` method).\n\n  `myWorker.onmessage = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessage`"}, onmessageerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 109, :column 7, :end-line 109, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.Worker` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the Worker instance â€” that is,\n  it receives a message that cannot be deserialized.\n\n  `Worker.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror`"}, :name web.Worker/onmessageerror, :variadic false, :file "src/web/Worker.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.Worker` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the Worker instance â€” that is,\n  it receives a message that cannot be deserialized.\n\n  `Worker.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror`"}, set-onmessageerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Worker.cljs", :line 123, :column 7, :end-line 123, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.Worker` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the Worker instance â€” that is,\n  it receives a message that cannot be deserialized.\n\n  `Worker.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror`"}, :name web.Worker/set-onmessageerror!, :variadic false, :file "src/web/Worker.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.Worker` interface\n  an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on the Worker instance â€” that is,\n  it receives a message that cannot be deserialized.\n\n  `Worker.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Worker/onmessageerror`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Worker interface of the Web Workers API represents a background\n  that can be easily created and can send messages back to its\n  Creating a worker is as simple as calling the Worker() constructor\n  specifying a script to be run in the worker thread."}