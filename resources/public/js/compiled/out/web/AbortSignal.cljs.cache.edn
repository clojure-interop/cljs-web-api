{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.AbortSignal, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {aborted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortSignal.cljs", :line 7, :column 7, :end-line 7, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The aborted read-only property returns a `web.Boolean` that indicates\n  the DOM request(s) the signal is communicating with is/are aborted\n  or not (false).\n\n  `var isAborted = abortSignal.aborted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted`"}, :name web.AbortSignal/aborted, :variadic false, :file "src/web/AbortSignal.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The aborted read-only property returns a `web.Boolean` that indicates\n  the DOM request(s) the signal is communicating with is/are aborted\n  or not (false).\n\n  `var isAborted = abortSignal.aborted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted`"}, set-aborted! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortSignal.cljs", :line 20, :column 7, :end-line 20, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The aborted read-only property returns a `web.Boolean` that indicates\n  the DOM request(s) the signal is communicating with is/are aborted\n  or not (false).\n\n  `var isAborted = abortSignal.aborted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted`"}, :name web.AbortSignal/set-aborted!, :variadic false, :file "src/web/AbortSignal.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The aborted read-only property returns a `web.Boolean` that indicates\n  the DOM request(s) the signal is communicating with is/are aborted\n  or not (false).\n\n  `var isAborted = abortSignal.aborted;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/aborted`"}, onabort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortSignal.cljs", :line 33, :column 7, :end-line 33, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onabort read-only property of the `web.FetchSignal` interface\n  an event handler Invoked when an abort event fires, i.e. when\n  fetch request(s) the signal is communicating with is/are aborted.\n\n  `abortSignal.onabort = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/onabort`"}, :name web.AbortSignal/onabort, :variadic false, :file "src/web/AbortSignal.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onabort read-only property of the `web.FetchSignal` interface\n  an event handler Invoked when an abort event fires, i.e. when\n  fetch request(s) the signal is communicating with is/are aborted.\n\n  `abortSignal.onabort = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/onabort`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortSignal.cljs", :line 46, :column 7, :end-line 46, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort read-only property of the `web.FetchSignal` interface\n  an event handler Invoked when an abort event fires, i.e. when\n  fetch request(s) the signal is communicating with is/are aborted.\n\n  `abortSignal.onabort = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/onabort`"}, :name web.AbortSignal/set-onabort!, :variadic false, :file "src/web/AbortSignal.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort read-only property of the `web.FetchSignal` interface\n  an event handler Invoked when an abort event fires, i.e. when\n  fetch request(s) the signal is communicating with is/are aborted.\n\n  `abortSignal.onabort = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/onabort`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AbortSignal interface represents a signal object that allows\n  to communicate with a DOM request (such as a Fetch) and abort\n  if required via an `web.AbortController` object."}