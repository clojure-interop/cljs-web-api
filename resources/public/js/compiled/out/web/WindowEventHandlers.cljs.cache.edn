{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.WindowEventHandlers, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {onpopstate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 240, :column 7, :end-line 240, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, :name web.WindowEventHandlers/onpopstate, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, onunhandledrejection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 322, :column 7, :end-line 322, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, :name web.WindowEventHandlers/onunhandledrejection, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 322, :end-line 322, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, onhashchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 102, :column 7, :end-line 102, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, :name web.WindowEventHandlers/onhashchange, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, onrejectionhandled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 270, :column 7, :end-line 270, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, :name web.WindowEventHandlers/onrejectionhandled, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, set-onrejectionhandled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 284, :column 7, :end-line 284, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, :name web.WindowEventHandlers/set-onrejectionhandled!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, set-onstorage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 310, :column 7, :end-line 310, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, :name web.WindowEventHandlers/set-onstorage!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 310, :end-line 310, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, onstorage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 298, :column 7, :end-line 298, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, :name web.WindowEventHandlers/onstorage, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, onbeforeprint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 38, :column 7, :end-line 38, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onbeforeprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing beforeprint events for\n  current window. These events are raised before the print dialog\n  is opened.\n\n  `window.addEventListener(\\\"beforeprint\\\", function(event) { ... });\n  window.onbeforeprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint`"}, :name web.WindowEventHandlers/onbeforeprint, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onbeforeprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing beforeprint events for\n  current window. These events are raised before the print dialog\n  is opened.\n\n  `window.addEventListener(\\\"beforeprint\\\", function(event) { ... });\n  window.onbeforeprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint`"}, set-onpopstate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 255, :column 7, :end-line 255, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, :name web.WindowEventHandlers/set-onpopstate!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, set-onhashchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 132, :column 7, :end-line 132, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, :name web.WindowEventHandlers/set-onhashchange!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, set-onbeforeunload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 85, :column 7, :end-line 85, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onbeforeunload property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing beforeunload events.\n  events fire when a window is about to unload its resources. At\n  point, the document is still visible and the event is still cancelable.\n\n  `window.addEventListener(\\\"beforeunload\\\", function(event) { ... });\n  window.onbeforeunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the beforeunload event, instead of onbeforeunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload`"}, :name web.WindowEventHandlers/set-onbeforeunload!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onbeforeunload property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing beforeunload events.\n  events fire when a window is about to unload its resources. At\n  point, the document is still visible and the event is still cancelable.\n\n  `window.addEventListener(\\\"beforeunload\\\", function(event) { ... });\n  window.onbeforeunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the beforeunload event, instead of onbeforeunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload`"}, set-onmessageerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 226, :column 7, :end-line 226, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.WindowEventHandlers`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on a window—that is, when it receives\n  message that cannot be deserialized.\n\n  `window.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror`"}, :name web.WindowEventHandlers/set-onmessageerror!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessageerror event handler of the `web.WindowEventHandlers`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on a window—that is, when it receives\n  message that cannot be deserialized.\n\n  `window.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror`"}, onmessage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 186, :column 7, :end-line 186, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` called whenever an object receives a message\n\n  `window.addEventListener('message', function(event) { ... })\n  window.onmessage = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage`"}, :name web.WindowEventHandlers/onmessage, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessage property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` called whenever an object receives a message\n\n  `window.addEventListener('message', function(event) { ... })\n  window.onmessage = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage`"}, set-onmessage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 199, :column 7, :end-line 199, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` called whenever an object receives a message\n\n  `window.addEventListener('message', function(event) { ... })\n  window.onmessage = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage`"}, :name web.WindowEventHandlers/set-onmessage!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 199, :end-line 199, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmessage property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` called whenever an object receives a message\n\n  `window.addEventListener('message', function(event) { ... })\n  window.onmessage = function(event) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessage`"}, set-onbeforeprint! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 53, :column 7, :end-line 53, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onbeforeprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing beforeprint events for\n  current window. These events are raised before the print dialog\n  is opened.\n\n  `window.addEventListener(\\\"beforeprint\\\", function(event) { ... });\n  window.onbeforeprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint`"}, :name web.WindowEventHandlers/set-onbeforeprint!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onbeforeprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing beforeprint events for\n  current window. These events are raised before the print dialog\n  is opened.\n\n  `window.addEventListener(\\\"beforeprint\\\", function(event) { ... });\n  window.onbeforeprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeprint`"}, onunload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 348, :column 7, :end-line 348, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onunload property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing unload events. These events\n  when the window is unloading its content and resources. The resource\n  is processed after the unload event occurs.\n\n  `window.addEventListener(\\\"unload\\\", function(event) { ... });\n  window.onunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the unload event, instead of onunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload`"}, :name web.WindowEventHandlers/onunload, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 348, :end-line 348, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onunload property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing unload events. These events\n  when the window is unloading its content and resources. The resource\n  is processed after the unload event occurs.\n\n  `window.addEventListener(\\\"unload\\\", function(event) { ... });\n  window.onunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the unload event, instead of onunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload`"}, set-onafterprint! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 23, :column 7, :end-line 23, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onafterprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing afterprint events for the\n  window. These events are raised after the user prints, or if\n  abort the print dialog.\n\n  `window.addEventListener(\\\"afterprint\\\", function(event) { ... });\n  window.onafterprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint`"}, :name web.WindowEventHandlers/set-onafterprint!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onafterprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing afterprint events for the\n  window. These events are raised after the user prints, or if\n  abort the print dialog.\n\n  `window.addEventListener(\\\"afterprint\\\", function(event) { ... });\n  window.onafterprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint`"}, onmessageerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 212, :column 7, :end-line 212, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.WindowEventHandlers`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on a window—that is, when it receives\n  message that cannot be deserialized.\n\n  `window.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror`"}, :name web.WindowEventHandlers/onmessageerror, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmessageerror event handler of the `web.WindowEventHandlers`\n  is an `web.EventListener`, called whenever an `web.MessageEvent`\n  type messageerror is fired on a window—that is, when it receives\n  message that cannot be deserialized.\n\n  `window.onmessageerror = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onmessageerror`"}, set-onlanguagechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 174, :column 7, :end-line 174, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The onlanguagechange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing languagechange events.\n\n  `object.onlanguagechange = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange`"}, :name web.WindowEventHandlers/set-onlanguagechange!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 174, :end-line 174, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onlanguagechange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing languagechange events.\n\n  `object.onlanguagechange = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange`"}, onlanguagechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 162, :column 7, :end-line 162, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onlanguagechange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing languagechange events.\n\n  `object.onlanguagechange = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange`"}, :name web.WindowEventHandlers/onlanguagechange, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onlanguagechange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing languagechange events.\n\n  `object.onlanguagechange = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onlanguagechange`"}, onafterprint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 8, :column 7, :end-line 8, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The onafterprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing afterprint events for the\n  window. These events are raised after the user prints, or if\n  abort the print dialog.\n\n  `window.addEventListener(\\\"afterprint\\\", function(event) { ... });\n  window.onafterprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint`"}, :name web.WindowEventHandlers/onafterprint, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onafterprint property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing afterprint events for the\n  window. These events are raised after the user prints, or if\n  abort the print dialog.\n\n  `window.addEventListener(\\\"afterprint\\\", function(event) { ... });\n  window.onafterprint = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onafterprint`"}, set-onunhandledrejection! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 335, :column 7, :end-line 335, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, :name web.WindowEventHandlers/set-onunhandledrejection!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, onbeforeunload {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 68, :column 7, :end-line 68, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onbeforeunload property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing beforeunload events.\n  events fire when a window is about to unload its resources. At\n  point, the document is still visible and the event is still cancelable.\n\n  `window.addEventListener(\\\"beforeunload\\\", function(event) { ... });\n  window.onbeforeunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the beforeunload event, instead of onbeforeunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload`"}, :name web.WindowEventHandlers/onbeforeunload, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onbeforeunload property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing beforeunload events.\n  events fire when a window is about to unload its resources. At\n  point, the document is still visible and the event is still cancelable.\n\n  `window.addEventListener(\\\"beforeunload\\\", function(event) { ... });\n  window.onbeforeunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the beforeunload event, instead of onbeforeunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onbeforeunload`"}, set-onunload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowEventHandlers.cljs", :line 365, :column 7, :end-line 365, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onunload property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing unload events. These events\n  when the window is unloading its content and resources. The resource\n  is processed after the unload event occurs.\n\n  `window.addEventListener(\\\"unload\\\", function(event) { ... });\n  window.onunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the unload event, instead of onunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload`"}, :name web.WindowEventHandlers/set-onunload!, :variadic false, :file "src/web/WindowEventHandlers.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 365, :end-line 365, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onunload property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing unload events. These events\n  when the window is unloading its content and resources. The resource\n  is processed after the unload event occurs.\n\n  `window.addEventListener(\\\"unload\\\", function(event) { ... });\n  window.onunload = function(event) { ... };\n\n  Typically, it is better to use `web.window.addEventListener()` and the unload event, instead of onunload.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunload`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WindowEventHandlers mixin describes the event handlers common\n  several interfaces like `web.Window`, or `html.HTMLBodyElement`\n  `html.HTMLFrameSetElement`. Each of these interfaces can implement\n  specific event handlers."}