{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{get}, :name web.Clients, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {claim {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clients.cljs", :line 6, :column 7, :end-line 6, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The claim() method of the `web.Clients` allows an active service\n  to set itself as the `web.controller` for all clients within\n  `web.scope`. This triggers a \\\"controllerchange\\\" event on `web.navigator.serviceWorker`\n  any clients that become controlled by this service worker.\n\n  `await clients.claim();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim`"}, :name web.Clients/claim, :variadic false, :file "src/web/Clients.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The claim() method of the `web.Clients` allows an active service\n  to set itself as the `web.controller` for all clients within\n  `web.scope`. This triggers a \\\"controllerchange\\\" event on `web.navigator.serviceWorker`\n  any clients that become controlled by this service worker.\n\n  `await clients.claim();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/claim`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clients.cljs", :line 20, :column 7, :end-line 20, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The get() method of the `web.Clients` interface gets a service\n  client matching a given id and returns it in a `web.Promise`.\n\n  `self.clients.get(id).then(function(client) {\n  // do something with your returned client\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/get`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Clients/get, :variadic true, :file "src/web/Clients.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The get() method of the `web.Clients` interface gets a service\n  client matching a given id and returns it in a `web.Promise`.\n\n  `self.clients.get(id).then(function(client) {\n  // do something with your returned client\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/get`"}, match-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clients.cljs", :line 34, :column 7, :end-line 34, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The matchAll() method of the `web.Clients` interface returns\n  Promise for a list of service worker `web.Client` objects. Include\n  options parameter to return all service worker clients whose\n  is the same as the associated service worker's origin. If options\n  not included, the method returns only the service worker clients\n  by the service worker.\n\n  `ServiceWorkerClients.matchAll(options).then(function(clients) {\n  // do something with your clients list\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Clients/match-all, :variadic true, :file "src/web/Clients.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The matchAll() method of the `web.Clients` interface returns\n  Promise for a list of service worker `web.Client` objects. Include\n  options parameter to return all service worker clients whose\n  is the same as the associated service worker's origin. If options\n  not included, the method returns only the service worker clients\n  by the service worker.\n\n  `ServiceWorkerClients.matchAll(options).then(function(clients) {\n  // do something with your clients list\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/matchAll`"}, open-window {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Clients.cljs", :line 52, :column 7, :end-line 52, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The openWindow() method of the `web.Clients` interface creates\n  new top level browsing context and loads a given URL. If the\n  script doesn't have permission to show popups, openWindow() will\n  an InvalidAccessError.\n\n  `ServiceWorkerClients.openWindow(url).then(function(WindowClient) {\n  // Do something with your WindowClient\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Clients/open-window, :variadic true, :file "src/web/Clients.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The openWindow() method of the `web.Clients` interface creates\n  new top level browsing context and loads a given URL. If the\n  script doesn't have permission to show popups, openWindow() will\n  an InvalidAccessError.\n\n  `ServiceWorkerClients.openWindow(url).then(function(WindowClient) {\n  // Do something with your WindowClient\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Clients/openWindow`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Clients interface provides access to `web.Client` objects.\n  it via `web.self`.clients within a service worker."}