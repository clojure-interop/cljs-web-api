{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.WindowClient, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {focus {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 8, :column 7, :end-line 8, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The focus() method of the `web.WindowClient` interface gives\n  input focus to the current client and returns a `web.Promise`\n  resolves to the existing `web.WindowClient`.\n\n  `Client.focus().then(function(WindowClient) {\n  // do something with your WindowClient once it has been focused\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focus`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WindowClient/focus, :variadic true, :file "src/web/WindowClient.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The focus() method of the `web.WindowClient` interface gives\n  input focus to the current client and returns a `web.Promise`\n  resolves to the existing `web.WindowClient`.\n\n  `Client.focus().then(function(WindowClient) {\n  // do something with your WindowClient once it has been focused\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focus`"}, navigate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The navigate() method of the `web.WindowClient` interface loads\n  specified URL into a controlled client page then returns a `web.Promise`\n  resolves to the existing `web.WindowClient`.\n\n  `WindowClient.navigate(url).then(function(WindowClient) {\n  // do something with your WindowClient after navigation\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/navigate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.WindowClient/navigate, :variadic true, :file "src/web/WindowClient.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The navigate() method of the `web.WindowClient` interface loads\n  specified URL into a controlled client page then returns a `web.Promise`\n  resolves to the existing `web.WindowClient`.\n\n  `WindowClient.navigate(url).then(function(WindowClient) {\n  // do something with your WindowClient after navigation\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/navigate`"}, focused {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 38, :column 7, :end-line 38, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The focused read-only property of the `web.WindowClient` interface\n  a `web.Boolean` that indicates whether the current client has\n\n  `myFocused = WindowClient.focused;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused`"}, :name web.WindowClient/focused, :variadic false, :file "src/web/WindowClient.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The focused read-only property of the `web.WindowClient` interface\n  a `web.Boolean` that indicates whether the current client has\n\n  `myFocused = WindowClient.focused;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused`"}, set-focused! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The focused read-only property of the `web.WindowClient` interface\n  a `web.Boolean` that indicates whether the current client has\n\n  `myFocused = WindowClient.focused;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused`"}, :name web.WindowClient/set-focused!, :variadic false, :file "src/web/WindowClient.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The focused read-only property of the `web.WindowClient` interface\n  a `web.Boolean` that indicates whether the current client has\n\n  `myFocused = WindowClient.focused;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/focused`"}, visibility-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 62, :column 7, :end-line 62, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The visibilityState read-only property of the `web.WindowClient`\n  indicates the visibility of the current client. This value can\n  one of hidden, visible, prerender, or unloaded.\n\n  `myVisState = WindowClient.visibilityState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState`"}, :name web.WindowClient/visibility-state, :variadic false, :file "src/web/WindowClient.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The visibilityState read-only property of the `web.WindowClient`\n  indicates the visibility of the current client. This value can\n  one of hidden, visible, prerender, or unloaded.\n\n  `myVisState = WindowClient.visibilityState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState`"}, set-visibility-state! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/WindowClient.cljs", :line 75, :column 7, :end-line 75, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The visibilityState read-only property of the `web.WindowClient`\n  indicates the visibility of the current client. This value can\n  one of hidden, visible, prerender, or unloaded.\n\n  `myVisState = WindowClient.visibilityState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState`"}, :name web.WindowClient/set-visibility-state!, :variadic false, :file "src/web/WindowClient.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The visibilityState read-only property of the `web.WindowClient`\n  indicates the visibility of the current client. This value can\n  one of hidden, visible, prerender, or unloaded.\n\n  `myVisState = WindowClient.visibilityState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowClient/visibilityState`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The WindowClient interface of the ServiceWorker API represents\n  scope of a service worker client that is a document in a browser\n  controlled by an active worker. The service worker client independently\n  and uses a service worker for its own loading and sub-resources."}