{:rename-macros {}, :renames {}, :externs {Request {}}, :use-macros {}, :excludes #{clone}, :name web.Request, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {integrity {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 287, :column 7, :end-line 287, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The integrity read-only property of the `web.Request` interface\n  the subresource integrity value of the request.\n\n  `var myIntegrity = request.integrity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity`"}, :name web.Request/integrity, :variadic false, :file "src/web/Request.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 287, :end-line 287, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The integrity read-only property of the `web.Request` interface\n  the subresource integrity value of the request.\n\n  `var myIntegrity = request.integrity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity`"}, redirect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 363, :column 7, :end-line 363, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The redirect read-only property of the `web.Request` interface\n  the mode for how redirects are handled.\n\n  `var myRedirect = request.redirect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect`"}, :name web.Request/redirect, :variadic false, :file "src/web/Request.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 363, :end-line 363, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The redirect read-only property of the `web.Request` interface\n  the mode for how redirects are handled.\n\n  `var myRedirect = request.redirect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect`"}, set-method! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 323, :column 7, :end-line 323, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The method read-only property of the `web.Request` interface\n  the request's method (GET, POST, etc.)\n\n  `var myMethod = request.method;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/method`"}, :name web.Request/set-method!, :variadic false, :file "src/web/Request.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The method read-only property of the `web.Request` interface\n  the request's method (GET, POST, etc.)\n\n  `var myMethod = request.method;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/method`"}, json {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 96, :column 7, :end-line 96, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Request/json, :variadic true, :file "src/web/Request.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The json() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  the result of parsing the body text as `web.JSON`.\n\n  `response.json().then(data => {\n  // do something with your data\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/json`"}, body {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 127, :column 7, :end-line 127, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Request/body, :variadic false, :file "src/web/Request.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, array-buffer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 38, :column 7, :end-line 38, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Request/array-buffer, :variadic true, :file "src/web/Request.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The arrayBuffer() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  an `web.ArrayBuffer`.\n\n  `response.arrayBuffer().then(function(buffer) {\n  // do something with buffer\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/arrayBuffer`"}, set-credentials! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 238, :column 7, :end-line 238, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The credentials read-only property of the `web.Request` interface\n  whether the user agent should send cookies from the other domain\n  the case of cross-origin requests.\n\n  `var myCred = request.credentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials`"}, :name web.Request/set-credentials!, :variadic false, :file "src/web/Request.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The credentials read-only property of the `web.Request` interface\n  whether the user agent should send cookies from the other domain\n  the case of cross-origin requests.\n\n  `var myCred = request.credentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials`"}, destination {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 251, :column 7, :end-line 251, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The destination read-only property of the `web.Request` interface\n  a string describing the type of content being requested.\n\n  `var destination = request.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/destination`"}, :name web.Request/destination, :variadic false, :file "src/web/Request.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 251, :end-line 251, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The destination read-only property of the `web.Request` interface\n  a string describing the type of content being requested.\n\n  `var destination = request.destination;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/destination`"}, text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 111, :column 7, :end-line 111, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Request/text, :variadic true, :file "src/web/Request.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The text() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.USVString` object (text). The response is always decoded\n  UTF-8.\n\n  `response.text().then(function (text) {\n  // do something with the text response\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/text`"}, set-body-used! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 163, :column 7, :end-line 163, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Request/set-body-used!, :variadic false, :file "src/web/Request.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, set-context! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 213, :column 7, :end-line 213, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The deprecated context read-only property of the `web.Request`\n  contains the context of the Request (e.g., audio, image, iframe).\n\n  `var myContext = request.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/context`"}, :name web.Request/set-context!, :variadic false, :file "src/web/Request.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The deprecated context read-only property of the `web.Request`\n  contains the context of the Request (e.g., audio, image, iframe).\n\n  `var myContext = request.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/context`"}, set-headers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 275, :column 7, :end-line 275, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The headers read-only property of the `web.Request` interface\n  the `web.Headers` object associated with the request.\n\n  `var myHeaders = request.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/headers`"}, :name web.Request/set-headers!, :variadic false, :file "src/web/Request.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The headers read-only property of the `web.Request` interface\n  the `web.Headers` object associated with the request.\n\n  `var myHeaders = request.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/headers`"}, credentials {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 225, :column 7, :end-line 225, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The credentials read-only property of the `web.Request` interface\n  whether the user agent should send cookies from the other domain\n  the case of cross-origin requests.\n\n  `var myCred = request.credentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials`"}, :name web.Request/credentials, :variadic false, :file "src/web/Request.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The credentials read-only property of the `web.Request` interface\n  whether the user agent should send cookies from the other domain\n  the case of cross-origin requests.\n\n  `var myCred = request.credentials;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/credentials`"}, method {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 311, :column 7, :end-line 311, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The method read-only property of the `web.Request` interface\n  the request's method (GET, POST, etc.)\n\n  `var myMethod = request.method;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/method`"}, :name web.Request/method, :variadic false, :file "src/web/Request.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 311, :end-line 311, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The method read-only property of the `web.Request` interface\n  the request's method (GET, POST, etc.)\n\n  `var myMethod = request.method;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/method`"}, mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 335, :column 7, :end-line 335, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The mode read-only property of the `web.Request` interface contains\n  mode of the request (e.g., cors, no-cors, same-origin, or navigate.)\n  is used to determine if cross-origin requests lead to valid responses,\n  which properties of the response are readable.\n\n  `var myMode = request.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/mode`"}, :name web.Request/mode, :variadic false, :file "src/web/Request.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The mode read-only property of the `web.Request` interface contains\n  mode of the request (e.g., cors, no-cors, same-origin, or navigate.)\n  is used to determine if cross-origin requests lead to valid responses,\n  which properties of the response are readable.\n\n  `var myMode = request.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/mode`"}, set-referrer! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 400, :column 7, :end-line 400, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The referrer read-only property of the `web.Request` interface\n  set by the user agent to be the referrer of the Request. (e.g.,\n  no-referrer, or a URL.)\n\n  `var myReferrer = request.referrer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer`"}, :name web.Request/set-referrer!, :variadic false, :file "src/web/Request.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The referrer read-only property of the `web.Request` interface\n  set by the user agent to be the referrer of the Request. (e.g.,\n  no-referrer, or a URL.)\n\n  `var myReferrer = request.referrer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer`"}, form-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 80, :column 7, :end-line 80, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Request/form-data, :variadic true, :file "src/web/Request.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The formData() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.FormData` object.\n\n  `response.formData()\n  .then(function(formdata) {\n  // do something with your formdata\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/formData`"}, headers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 263, :column 7, :end-line 263, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The headers read-only property of the `web.Request` interface\n  the `web.Headers` object associated with the request.\n\n  `var myHeaders = request.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/headers`"}, :name web.Request/headers, :variadic false, :file "src/web/Request.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The headers read-only property of the `web.Request` interface\n  the `web.Headers` object associated with the request.\n\n  `var myHeaders = request.headers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/headers`"}, set-body! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 139, :column 7, :end-line 139, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, :name web.Request/set-body!, :variadic false, :file "src/web/Request.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The body read-only property of the `web.Body` mixin is a simple\n  used to expose a `web.ReadableStream` of the body contents.\n\n  `var stream = responseInstance.body;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/body`"}, referrer {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 387, :column 7, :end-line 387, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The referrer read-only property of the `web.Request` interface\n  set by the user agent to be the referrer of the Request. (e.g.,\n  no-referrer, or a URL.)\n\n  `var myReferrer = request.referrer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer`"}, :name web.Request/referrer, :variadic false, :file "src/web/Request.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 387, :end-line 387, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The referrer read-only property of the `web.Request` interface\n  set by the user agent to be the referrer of the Request. (e.g.,\n  no-referrer, or a URL.)\n\n  `var myReferrer = request.referrer;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrer`"}, set-referrer-policy! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 426, :column 7, :end-line 426, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The referrerPolicy read-only property of the `web.Request` interface\n  the referrer policy, which governs what referrer information,\n  in the `web.Referer` header, should be included with the request.\n\n  `var myReferrerPolicy = request.referrerPolicy;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy`"}, :name web.Request/set-referrer-policy!, :variadic false, :file "src/web/Request.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 426, :end-line 426, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The referrerPolicy read-only property of the `web.Request` interface\n  the referrer policy, which governs what referrer information,\n  in the `web.Referer` header, should be included with the request.\n\n  `var myReferrerPolicy = request.referrerPolicy;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy`"}, blob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 53, :column 7, :end-line 53, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Request/blob, :variadic true, :file "src/web/Request.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The blob() method of the `web.Body` mixin takes a `web.Response`\n  and reads it to completion. It returns a promise that resolves\n  a `web.Blob`.\n\n  `response.blob().then(function(myBlob) {\n  // do something with myBlob\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/blob`"}, set-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 349, :column 7, :end-line 349, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The mode read-only property of the `web.Request` interface contains\n  mode of the request (e.g., cors, no-cors, same-origin, or navigate.)\n  is used to determine if cross-origin requests lead to valid responses,\n  which properties of the response are readable.\n\n  `var myMode = request.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/mode`"}, :name web.Request/set-mode!, :variadic false, :file "src/web/Request.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The mode read-only property of the `web.Request` interface contains\n  mode of the request (e.g., cors, no-cors, same-origin, or navigate.)\n  is used to determine if cross-origin requests lead to valid responses,\n  which properties of the response are readable.\n\n  `var myMode = request.mode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/mode`"}, cache {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 175, :column 7, :end-line 175, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The cache read-only property of the `web.Request` interface contains\n  cache mode of the request. It controls how the request will interact\n  the browser's HTTP cache.\n\n  `var currentCacheMode = request.cache;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/cache`"}, :name web.Request/cache, :variadic false, :file "src/web/Request.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The cache read-only property of the `web.Request` interface contains\n  cache mode of the request. It controls how the request will interact\n  the browser's HTTP cache.\n\n  `var currentCacheMode = request.cache;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/cache`"}, referrer-policy {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 413, :column 7, :end-line 413, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The referrerPolicy read-only property of the `web.Request` interface\n  the referrer policy, which governs what referrer information,\n  in the `web.Referer` header, should be included with the request.\n\n  `var myReferrerPolicy = request.referrerPolicy;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy`"}, :name web.Request/referrer-policy, :variadic false, :file "src/web/Request.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The referrerPolicy read-only property of the `web.Request` interface\n  the referrer policy, which governs what referrer information,\n  in the `web.Referer` header, should be included with the request.\n\n  `var myReferrerPolicy = request.referrerPolicy;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/referrerPolicy`"}, clone {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 68, :column 7, :end-line 68, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `web.Request` interface creates a copy\n  the current Request object.\n\n  `var newRequest = request.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/clone`"}, :name web.Request/clone, :variadic false, :file "src/web/Request.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clone() method of the `web.Request` interface creates a copy\n  the current Request object.\n\n  `var newRequest = request.clone();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/clone`"}, body-used {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 151, :column 7, :end-line 151, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, :name web.Request/body-used, :variadic false, :file "src/web/Request.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The bodyUsed read-only property of the `web.Body` mixin contains\n  `web.Boolean` that indicates whether the body has been read yet.\n\n  `var myBodyUsed = response.bodyUsed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Body/bodyUsed`"}, set-cache! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 188, :column 7, :end-line 188, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The cache read-only property of the `web.Request` interface contains\n  cache mode of the request. It controls how the request will interact\n  the browser's HTTP cache.\n\n  `var currentCacheMode = request.cache;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/cache`"}, :name web.Request/set-cache!, :variadic false, :file "src/web/Request.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The cache read-only property of the `web.Request` interface contains\n  cache mode of the request. It controls how the request will interact\n  the browser's HTTP cache.\n\n  `var currentCacheMode = request.cache;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/cache`"}, constructor {:name web.Request/constructor, :file "src/web/Request.cljs", :line 5, :column 1, :end-line 5, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 5, :column 6, :end-line 5, :end-column 17}, :doc "Constructor.\n\n  The Request() constructor creates a new `web.Request` object.\n\n  input\n  Defines the resource that you wish to fetch. This can either be:\n\n  A `web.USVString` containing the direct URL of the resource you want to fetch.\n  A `web.Request` object, effectively creating a copy. Note the following behavioural updates to retain security while making the constructor less likely to throw exceptions:\n\n  If this object exists on another origin to the constructor call, the `web.Request.referrer` is stripped out.\n  If this object has a `web.Request.mode` of navigate, the mode value is converted to same-origin.\n\n\n\n\n  init Optional\n  An options object containing any custom settings that you want to apply to the request. The possible options are:\n\n  method: The request method, e.g., GET, POST.\n  headers: Any headers you want to add to your request, contained within a `web.Headers` object or an object literal with `web.ByteString` values.\n  body: Any body that you want to add to your request: this can be a `web.Blob`, `web.BufferSource`, `web.FormData`, `web.URLSearchParams`, `web.USVString`, or `web.ReadableStream` object. Note that a request using the GET or HEAD method cannot have a body.\n  mode: The mode you want to use for the request, e.g., cors, no-cors, same-origin, or navigate. The default is cors. In Chrome the default is no-cors before Chrome 47 and same-origin starting with Chrome 47.\n  credentials: The request credentials you want to use for the request: omit, same-origin, or include. The default is omit. In Chrome the default is same-origin before Chrome 47 and include starting with Chrome 47.\n  cache: The cache mode you want to use for the request.\n  redirect: The redirect mode to use: follow, error, or manual. In Chrome the default is follow (before Chrome 47 it defaulted to manual).\n  referrer: A `web.USVString` specifying no-referrer, client, or a URL. The default is client.\n  integrity: Contains the subresource integrity value of the request (e.g., sha256-BpfBw7ivV8q2jLiT13fxDYAe2tJllusRSZ273h2nFSE=).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/Request`", :tag js}, url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 439, :column 7, :end-line 439, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Request` interface contains\n  URL of the request.\n\n  `var myURL = request.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/url`"}, :name web.Request/url, :variadic false, :file "src/web/Request.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The url read-only property of the `web.Request` interface contains\n  URL of the request.\n\n  `var myURL = request.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/url`"}, set-integrity! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 299, :column 7, :end-line 299, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The integrity read-only property of the `web.Request` interface\n  the subresource integrity value of the request.\n\n  `var myIntegrity = request.integrity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity`"}, :name web.Request/set-integrity!, :variadic false, :file "src/web/Request.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 299, :end-line 299, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The integrity read-only property of the `web.Request` interface\n  the subresource integrity value of the request.\n\n  `var myIntegrity = request.integrity;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/integrity`"}, context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 201, :column 7, :end-line 201, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated context read-only property of the `web.Request`\n  contains the context of the Request (e.g., audio, image, iframe).\n\n  `var myContext = request.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/context`"}, :name web.Request/context, :variadic false, :file "src/web/Request.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 201, :end-line 201, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated context read-only property of the `web.Request`\n  contains the context of the Request (e.g., audio, image, iframe).\n\n  `var myContext = request.context;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/context`"}, set-redirect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 375, :column 7, :end-line 375, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The redirect read-only property of the `web.Request` interface\n  the mode for how redirects are handled.\n\n  `var myRedirect = request.redirect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect`"}, :name web.Request/set-redirect!, :variadic false, :file "src/web/Request.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 375, :end-line 375, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The redirect read-only property of the `web.Request` interface\n  the mode for how redirects are handled.\n\n  `var myRedirect = request.redirect;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/redirect`"}, set-url! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Request.cljs", :line 451, :column 7, :end-line 451, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Request` interface contains\n  URL of the request.\n\n  `var myURL = request.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/url`"}, :name web.Request/set-url!, :variadic false, :file "src/web/Request.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The url read-only property of the `web.Request` interface contains\n  URL of the request.\n\n  `var myURL = request.url;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Request/url`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Request interface of the Fetch API represents a resource"}