{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove}, :name web.CharacterData, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {after {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CharacterData/after, :variadic true, :file "src/web/CharacterData.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.after() method inserts a set of `web.Node` or `dom.DOMString`\n  in the children list of this ChildNode's parent, just after this\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.after((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/after`"}, before {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CharacterData/before, :variadic true, :file "src/web/CharacterData.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.before() method inserts a set of `web.Node` or\n  objects in the children list of this ChildNode's parent, just\n  this ChildNode. `dom.DOMString` objects are inserted as equivalent\n  nodes.\n\n  `[Throws, Unscopable]\n  void ChildNode.before((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/before`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, :name web.CharacterData/remove, :variadic false, :file "src/web/CharacterData.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The ChildNode.remove() method removes the object from the tree\n  belongs to.\n\n  `node.remove();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/remove`"}, replace-with {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 50, :column 7, :end-line 50, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CharacterData/replace-with, :variadic true, :file "src/web/CharacterData.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The ChildNode.replaceWith() method replaces this ChildNode in\n  children list of its parent with a set of `web.Node` or `dom.DOMString`\n  `dom.DOMString` objects are inserted as equivalent `web.Text`\n\n  `[Throws, Unscopable]\n  void ChildNode.replaceWith((Node or DOMString)... nodes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ChildNode/replaceWith`"}, next-element-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 64, :column 7, :end-line 64, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, :name web.CharacterData/next-element-sibling, :variadic false, :file "src/web/CharacterData.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, set-next-element-sibling! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 77, :column 7, :end-line 77, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, :name web.CharacterData/set-next-element-sibling!, :variadic false, :file "src/web/CharacterData.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The NonDocumentTypeChildNode.nextElementSibling read-only property\n  the element immediately following the specified one in its parent's\n  list, or null if the specified element is the last one in the\n\n  `var nextNode = elementNodeReference.nextElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/nextElementSibling`"}, previous-element-sibling {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CharacterData.cljs", :line 90, :column 7, :end-line 90, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.previousElementSibling read-only\n  returns the `web.Element` immediately prior to the specified\n  in its parent's children list, or null if the specified element\n  the first one in the list.\n\n  `prevNode = elementNodeReference.previousElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling`"}, :name web.CharacterData/previous-element-sibling, :variadic false, :file "src/web/CharacterData.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The NonDocumentTypeChildNode.previousElementSibling read-only\n  returns the `web.Element` immediately prior to the specified\n  in its parent's children list, or null if the specified element\n  the first one in the list.\n\n  `prevNode = elementNodeReference.previousElementSibling;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/NonDocumentTypeChildNode/previousElementSibling`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CharacterData abstract interface represents a `web.Node`\n  that contains characters. This is an abstract interface, meaning\n  aren't any object of type CharacterData: it is implemented by\n  interfaces, like `web.Text`, `web.Comment`, or `web.ProcessingInstruction`\n  aren't abstract."}