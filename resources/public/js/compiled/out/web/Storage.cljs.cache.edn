{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{key}, :name web.Storage, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {clear {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The clear() method of the `web.Storage` interface clears all\n  stored in a given Storage object.\n\n  `storage.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear`"}, :name web.Storage/clear, :variadic false, :file "src/web/Storage.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The clear() method of the `web.Storage` interface clears all\n  stored in a given Storage object.\n\n  `storage.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/clear`"}, get-item {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 19, :column 7, :end-line 19, :end-column 15, :arglists (quote ([this key-name])), :doc "Method.\n\n  The getItem() method of the `web.Storage` interface, when passed\n  key name, will return that key's value, or null if the key does\n  exist, in the given Storage object.\n\n  `var aValue = storage.getItem(keyName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem`"}, :name web.Storage/get-item, :variadic false, :file "src/web/Storage.cljs", :end-column 15, :method-params ([this key-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key-name])), :doc "Method.\n\n  The getItem() method of the `web.Storage` interface, when passed\n  key name, will return that key's value, or null if the key does\n  exist, in the given Storage object.\n\n  `var aValue = storage.getItem(keyName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/getItem`"}, key {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 32, :column 7, :end-line 32, :end-column 10, :arglists (quote ([this index])), :doc "Method.\n\n  The key() method of the `web.Storage` interface, when passed\n  number n, returns the name of the nth key in a given Storage\n  The order of keys is user-agent defined, so you should not rely\n  it.\n\n  `var aKeyName = storage.key(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/key`"}, :name web.Storage/key, :variadic false, :file "src/web/Storage.cljs", :end-column 10, :method-params ([this index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index])), :doc "Method.\n\n  The key() method of the `web.Storage` interface, when passed\n  number n, returns the name of the nth key in a given Storage\n  The order of keys is user-agent defined, so you should not rely\n  it.\n\n  `var aKeyName = storage.key(index);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/key`"}, remove-item {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 46, :column 7, :end-line 46, :end-column 18, :arglists (quote ([this key-name])), :doc "Method.\n\n  The removeItem() method of the `web.Storage` interface, when\n  a key name, will remove that key from the given Storage object\n  it exists. If there is no item associated with the given key,\n  method will do nothing.\n\n  `storage.removeItem(keyName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem`"}, :name web.Storage/remove-item, :variadic false, :file "src/web/Storage.cljs", :end-column 18, :method-params ([this key-name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this key-name])), :doc "Method.\n\n  The removeItem() method of the `web.Storage` interface, when\n  a key name, will remove that key from the given Storage object\n  it exists. If there is no item associated with the given key,\n  method will do nothing.\n\n  `storage.removeItem(keyName);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/removeItem`"}, set-item {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 60, :column 7, :end-line 60, :end-column 15, :arglists (quote ([this key-name key-value])), :doc "Method.\n\n  The setItem() method of the `web.Storage` interface, when passed\n  key name and value, will add that key to the given Storage object,\n  update that key's value if it already exists.\n\n  `storage.setItem(keyName, keyValue);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem`"}, :name web.Storage/set-item, :variadic false, :file "src/web/Storage.cljs", :end-column 15, :method-params ([this key-name key-value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this key-name key-value])), :doc "Method.\n\n  The setItem() method of the `web.Storage` interface, when passed\n  key name and value, will add that key to the given Storage object,\n  update that key's value if it already exists.\n\n  `storage.setItem(keyName, keyValue);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/setItem`"}, length {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Storage.cljs", :line 73, :column 7, :end-line 73, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The length read-only property of the `web.Storage` interface\n  the number of data items stored in a given Storage object.\n\n  `var aLength = storage.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/length`"}, :name web.Storage/length, :variadic false, :file "src/web/Storage.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The length read-only property of the `web.Storage` interface\n  the number of data items stored in a given Storage object.\n\n  `var aLength = storage.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Storage/length`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Storage interface of the Web Storage API provides access\n  a particular domain's session or local storage. It allows, for\n  the addition, modification, or deletion of stored data items."}