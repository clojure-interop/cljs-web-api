{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.BatteryManager, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-onchargingtimechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 205, :column 7, :end-line 205, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive chargingtimechange events.\n  events occur when the battery `web.chargingTime` is updated.\n\n  `battery.onchargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange`"}, :name web.BatteryManager/set-onchargingtimechange!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive chargingtimechange events.\n  events occur when the battery `web.chargingTime` is updated.\n\n  `battery.onchargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange`"}, set-charging! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 65, :column 7, :end-line 65, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  A Boolean value indicating whether or not the device's battery\n  currently being charged.\n\n  `var charging = battery.charging\n\n  On return, charging indicates whether or not the battery, which is a `web.BatteryManager` object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging`"}, :name web.BatteryManager/set-charging!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A Boolean value indicating whether or not the device's battery\n  currently being charged.\n\n  `var charging = battery.charging\n\n  On return, charging indicates whether or not the battery, which is a `web.BatteryManager` object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging`"}, set-onchargingchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 177, :column 7, :end-line 177, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive chargingchange events.\n  events occur when the battery `web.charging` state is updated.\n\n  `battery.onchargingchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange`"}, :name web.BatteryManager/set-onchargingchange!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive chargingchange events.\n  events occur when the battery `web.charging` state is updated.\n\n  `battery.onchargingchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange`"}, ondischargingtimechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 219, :column 7, :end-line 219, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive dischargingtimechange\n  These events occur when the battery `web.dischargingTime` is\n\n  `battery.ondischargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the dischargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange`"}, :name web.BatteryManager/ondischargingtimechange, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive dischargingtimechange\n  These events occur when the battery `web.dischargingTime` is\n\n  `battery.ondischargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the dischargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange`"}, set-onlevelchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 262, :column 7, :end-line 262, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The BatteryManager.onlevelchange property specifies an event\n  to receive levelchange events. These events occur when the battery\n  is updated.\n\n  `navigator.battery.onlevelchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the levelchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange`"}, :name web.BatteryManager/set-onlevelchange!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 262, :end-line 262, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The BatteryManager.onlevelchange property specifies an event\n  to receive levelchange events. These events occur when the battery\n  is updated.\n\n  `navigator.battery.onlevelchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the levelchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange`"}, onchargingchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 163, :column 7, :end-line 163, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive chargingchange events.\n  events occur when the battery `web.charging` state is updated.\n\n  `battery.onchargingchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange`"}, :name web.BatteryManager/onchargingchange, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive chargingchange events.\n  events occur when the battery `web.charging` state is updated.\n\n  `battery.onchargingchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingchange`"}, remove-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 20, :column 7, :end-line 20, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BatteryManager/remove-event-listener, :variadic true, :file "src/web/BatteryManager.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The EventTarget.removeEventListener() method removes from the\n  an event listener previously registered with `web.EventTarget.addEventListener()`.\n  event listener to be removed is identified using a combination\n  the event type, the event listener function itself, and various\n  options that may affect the matching process; see Matching event\n  for removal\n\n  `target.removeEventListener(type, listener[, options]);\n  target.removeEventListener(type, listener[, useCapture]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener`"}, onlevelchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 247, :column 7, :end-line 247, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The BatteryManager.onlevelchange property specifies an event\n  to receive levelchange events. These events occur when the battery\n  is updated.\n\n  `navigator.battery.onlevelchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the levelchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange`"}, :name web.BatteryManager/onlevelchange, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The BatteryManager.onlevelchange property specifies an event\n  to receive levelchange events. These events occur when the battery\n  is updated.\n\n  `navigator.battery.onlevelchange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the levelchange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onlevelchange`"}, charging {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 51, :column 7, :end-line 51, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  A Boolean value indicating whether or not the device's battery\n  currently being charged.\n\n  `var charging = battery.charging\n\n  On return, charging indicates whether or not the battery, which is a `web.BatteryManager` object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging`"}, :name web.BatteryManager/charging, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A Boolean value indicating whether or not the device's battery\n  currently being charged.\n\n  `var charging = battery.charging\n\n  On return, charging indicates whether or not the battery, which is a `web.BatteryManager` object, is currently being charged; if the battery is charging, this value is true. Otherwise, the value is false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/charging`"}, onchargingtimechange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 191, :column 7, :end-line 191, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive chargingtimechange events.\n  events occur when the battery `web.chargingTime` is updated.\n\n  `battery.onchargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange`"}, :name web.BatteryManager/onchargingtimechange, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Specifies an event listener to receive chargingtimechange events.\n  events occur when the battery `web.chargingTime` is updated.\n\n  `battery.onchargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the chargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/onchargingtimechange`"}, add-event-listener {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 6, :column 7, :end-line 6, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.BatteryManager/add-event-listener, :variadic true, :file "src/web/BatteryManager.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.EventTarget` method addEventListener() sets up a function\n  will be called whenever the specified event is delivered to the\n\n  `target.addEventListener(type, listener[, options]);\n  target.addEventListener(type, listener[, useCapture]);\n  target.addEventListener(type, listener[, useCapture, wantsUntrusted  ]); // Gecko/Mozilla only`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener`"}, set-level! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 149, :column 7, :end-line 149, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the current battery charge level as a value between\n  and 1.0.\n\n  `var level = battery.level\n\n  On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a `web.BatteryManager` object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level`"}, :name web.BatteryManager/set-level!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the current battery charge level as a value between\n  and 1.0.\n\n  `var level = battery.level\n\n  On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a `web.BatteryManager` object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level`"}, set-discharging-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 121, :column 7, :end-line 121, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remains until\n  battery is fully discharged.\n\n  `var time = battery.dischargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime`"}, :name web.BatteryManager/set-discharging-time!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 121, :end-line 121, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remains until\n  battery is fully discharged.\n\n  `var time = battery.dischargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime`"}, set-ondischargingtimechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 233, :column 7, :end-line 233, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive dischargingtimechange\n  These events occur when the battery `web.dischargingTime` is\n\n  `battery.ondischargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the dischargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange`"}, :name web.BatteryManager/set-ondischargingtimechange!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive dischargingtimechange\n  These events occur when the battery `web.dischargingTime` is\n\n  `battery.ondischargingtimechange = funcRef\n\n  Where battery is a `web.BatteryManager` object, and funcRef is a function to be called when the dischargingtimechange event occurs.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/ondischargingtimechange`"}, level {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 135, :column 7, :end-line 135, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the current battery charge level as a value between\n  and 1.0.\n\n  `var level = battery.level\n\n  On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a `web.BatteryManager` object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level`"}, :name web.BatteryManager/level, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the current battery charge level as a value between\n  and 1.0.\n\n  `var level = battery.level\n\n  On return, level is a number representing the system's battery charge level scaled to a value between 0.0 and 1.0. A value of 0 means the battery, which is a `web.BatteryManager` object, is empty and the system is about to be suspended. A value of 1.0 means the battery is full. A value of 1.0 is also returned if the implementation isn't able to determine the battery charge level or if the system is not battery-powered.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/level`"}, charging-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 79, :column 7, :end-line 79, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remain until the\n  is fully charged.\n\n  `var time = battery.chargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime`"}, :name web.BatteryManager/charging-time, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remain until the\n  is fully charged.\n\n  `var time = battery.chargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime`"}, set-charging-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 93, :column 7, :end-line 93, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remain until the\n  is fully charged.\n\n  `var time = battery.chargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime`"}, :name web.BatteryManager/set-charging-time!, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remain until the\n  is fully charged.\n\n  `var time = battery.chargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully charged, or 0 if the battery is already fully charged. If the battery is currently discharging, this value is Infinity.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/chargingTime`"}, discharging-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 107, :column 7, :end-line 107, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remains until\n  battery is fully discharged.\n\n  `var time = battery.dischargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime`"}, :name web.BatteryManager/discharging-time, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Indicates the amount of time, in seconds, that remains until\n  battery is fully discharged.\n\n  `var time = battery.dischargingTime\n\n  On return, time is the remaining time in seconds until the battery, which is a `web.BatteryManager` object, is fully discharged and the system will suspend. This value is Infinity if the battery is currently charging rather than discharging, or if the system is unable to report the remaining discharging time.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/BatteryManager/dischargingTime`"}, dispatch-event {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/BatteryManager.cljs", :line 37, :column 7, :end-line 37, :end-column 21, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}, :name web.BatteryManager/dispatch-event, :variadic false, :file "src/web/BatteryManager.cljs", :end-column 21, :method-params ([this event]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this event])), :doc "Method.\n\n  Dispatches an `web.Event` at the specified `web.EventTarget`,\n  invoking the affected `web.EventListener`s in the appropriate\n  The normal event processing rules (including the capturing and\n  bubbling phase) also apply to events dispatched manually with\n\n  `cancelled = !target.dispatchEvent(event)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The BatteryManager interface provides ways to get information\n  the system's battery charge level."}