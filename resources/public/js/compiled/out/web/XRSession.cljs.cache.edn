{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.XRSession, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {update-render-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/XRSession.cljs", :line 6, :column 7, :end-line 6, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The updateRenderState method of `web.XRSession` interface of\n  API submits a new `web.XRRenderState`.\n\n  `XRSession.updateRenderState(...)\n\n\n  Note: Set `web.inlineVerticalFieldOfView` if and only if the `web.XRSession` is \\\"inline\\\".`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/updateRenderState`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.XRSession/update-render-state, :variadic true, :file "src/web/XRSession.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The updateRenderState method of `web.XRSession` interface of\n  API submits a new `web.XRRenderState`.\n\n  `XRSession.updateRenderState(...)\n\n\n  Note: Set `web.inlineVerticalFieldOfView` if and only if the `web.XRSession` is \\\"inline\\\".`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/updateRenderState`"}, request-animation-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/XRSession.cljs", :line 21, :column 7, :end-line 21, :end-column 30, :arglists (quote ([this & args])), :doc "Method.\n\n  The requestAnimationFrame method of `web.XRSession` is the primary\n  to run the application logic to update the scene during the XR\n  The method will take a callback you provide and schedule it to\n  run before the next repaint (once).\n\n  `function onXRAnimationFrame(DOMHighResTimeStamp, XRFrame) { ... }\n  XRSession.requestAnimationFrame(onXRAnimationFrame)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestAnimationFrame`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.XRSession/request-animation-frame, :variadic true, :file "src/web/XRSession.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The requestAnimationFrame method of `web.XRSession` is the primary\n  to run the application logic to update the scene during the XR\n  The method will take a callback you provide and schedule it to\n  run before the next repaint (once).\n\n  `function onXRAnimationFrame(DOMHighResTimeStamp, XRFrame) { ... }\n  XRSession.requestAnimationFrame(onXRAnimationFrame)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/requestAnimationFrame`"}, cancel-animation-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/XRSession.cljs", :line 36, :column 7, :end-line 36, :end-column 29, :arglists (quote ([this handle])), :doc "Method.\n\n  The XRSession.cancelAnimationFrame method cancels an animation\n  previously requested via a call to `web.XRSession.requestAnimationFrame`.\n\n  `XRSession.cancelAnimationFrame(handle)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/cancelAnimationFrame`"}, :name web.XRSession/cancel-animation-frame, :variadic false, :file "src/web/XRSession.cljs", :end-column 29, :method-params ([this handle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this handle])), :doc "Method.\n\n  The XRSession.cancelAnimationFrame method cancels an animation\n  previously requested via a call to `web.XRSession.requestAnimationFrame`.\n\n  `XRSession.cancelAnimationFrame(handle)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/cancelAnimationFrame`"}, end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/XRSession.cljs", :line 48, :column 7, :end-line 48, :end-column 10, :arglists (quote ([this])), :doc "Method.\n\n  The end method of `web.XRSession` shuts down the XR session that\n  is invoked on and returns a promise.\n\n  `XRSession.end()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/end`"}, :name web.XRSession/end, :variadic false, :file "src/web/XRSession.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The end method of `web.XRSession` shuts down the XR session that\n  is invoked on and returns a promise.\n\n  `XRSession.end()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/XRSession/end`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The XRSession is a WebVR API interface that enables interactions\n  XR hardware."}