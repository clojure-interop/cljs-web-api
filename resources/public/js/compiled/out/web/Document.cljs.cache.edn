{:rename-macros {}, :renames {}, :externs {Document {}}, :use-macros {}, :excludes #{drop}, :name web.Document, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {oncanplaythrough {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2012, :column 7, :end-line 2012, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name web.Document/oncanplaythrough, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2012, :end-line 2012, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-fonts! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4026, :column 7, :end-line 4026, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The fonts property of the `web.Document` interface returns the\n  interface of the document.\n\n  `let fontFaceSet = document.fonts;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts`"}, :name web.Document/set-fonts!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4026, :end-line 4026, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The fonts property of the `web.Document` interface returns the\n  interface of the document.\n\n  `let fontFaceSet = document.fonts;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts`"}, onemptied {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4372, :column 7, :end-line 4372, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onemptied property sets and returns the event handler for\n  emptied event.\n\n  `element.onemptied = handlerFunction;\n  var handlerFunction = element.onemptied;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied`"}, :name web.Document/onemptied, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4372, :end-line 4372, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onemptied property sets and returns the event handler for\n  emptied event.\n\n  `element.onemptied = handlerFunction;\n  var handlerFunction = element.onemptied;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onemptied`"}, set-popup-node! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3575, :column 7, :end-line 3575, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  When a popup attached via the popup or context attributes is\n  the XUL document's popupNode property is set to the node that\n  clicked on. This will be the target of the mouse event that activated\n  popup. If the popup was opened via the keyboard, the popup node\n  be set to null. Typically, this property will be checked during\n  popupshowing event handler for a context menu to initialize the\n  based on the context.\n\n  `var node = document.popupNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/popupNode`"}, :name web.Document/set-popup-node!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3575, :end-line 3575, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  When a popup attached via the popup or context attributes is\n  the XUL document's popupNode property is set to the node that\n  clicked on. This will be the target of the mouse event that activated\n  popup. If the popup was opened via the keyboard, the popup node\n  be set to null. Typically, this property will be checked during\n  popupshowing event handler for a context menu to initialize the\n  based on the context.\n\n  `var node = document.popupNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/popupNode`"}, set-fg-color! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1360, :column 7, :end-line 1360, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  fgColor gets/sets the foreground color, or text color, of the\n  document.\n\n  `var color = document.fgColor;\n  document.fgColor = color;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor`"}, :name web.Document/set-fg-color!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1360, :end-line 1360, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  fgColor gets/sets the foreground color, or text color, of the\n  document.\n\n  `var color = document.fgColor;\n  document.fgColor = color;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor`"}, domain {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1277, :column 7, :end-line 1277, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The domain property of the `web.Document` interface gets/sets\n  domain portion of the origin of the current document, as used\n  the same origin policy.\n\n  `var domainString = document.domain;\n  document.domain = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/domain`"}, :name web.Document/domain, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1277, :end-line 1277, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The domain property of the `web.Document` interface gets/sets\n  domain portion of the origin of the current document, as used\n  the same origin policy.\n\n  `var domainString = document.domain;\n  document.domain = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/domain`"}, set-onselectionchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3302, :column 7, :end-line 3302, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name web.Document/set-onselectionchange!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3302, :end-line 3302, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, timeline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3792, :column 7, :end-line 3792, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The timeline readonly property of the `web.Document` interface\n  the default timeline of the current document. This timeline is\n  special instance of `web.DocumentTimeline` that is automatically\n  on page load.\n\n  `var pageTimeline = document.timeline;\n  var thisMoment = pageTimeline.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline`"}, :name web.Document/timeline, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3792, :end-line 3792, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The timeline readonly property of the `web.Document` interface\n  the default timeline of the current document. This timeline is\n  special instance of `web.DocumentTimeline` that is automatically\n  on page load.\n\n  `var pageTimeline = document.timeline;\n  var thisMoment = pageTimeline.currentTime;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/timeline`"}, caret-position-from-point {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 772, :column 7, :end-line 772, :end-column 32, :arglists (quote ([this & args])), :doc "Method.\n\n  The caretPositionFromPoint() property of the `web.DocumentOrShadowRoot`\n  returns a `web.CaretPosition` object, containing the DOM node,\n  with the caret and caret's character offset within that node.\n\n  `var caretPosition = document.caretPositionFromPoint(float x, float y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/caretPositionFromPoint`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Document/caret-position-from-point, :variadic true, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 32, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 772, :end-line 772, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The caretPositionFromPoint() property of the `web.DocumentOrShadowRoot`\n  returns a `web.CaretPosition` object, containing the DOM node,\n  with the caret and caret's character offset within that node.\n\n  `var caretPosition = document.caretPositionFromPoint(float x, float y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/caretPositionFromPoint`"}, set-onmouseenter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2711, :column 7, :end-line 2711, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, :name web.Document/set-onmouseenter!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2711, :end-line 2711, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, oncanplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1982, :column 7, :end-line 1982, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, :name web.Document/oncanplay, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1982, :end-line 1982, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, onscroll {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3242, :column 7, :end-line 3242, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name web.Document/onscroll, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3242, :end-line 3242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, set-ondrop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4361, :column 7, :end-line 4361, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the drop event.\n\n  `var dropHandler = targetElement.ondrop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop`"}, :name web.Document/set-ondrop!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4361, :end-line 4361, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the drop event.\n\n  `var dropHandler = targetElement.ondrop;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondrop`"}, scrolling-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3698, :column 7, :end-line 3698, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The scrollingElement read-only property of the `web.Document`\n  returns a reference to the `web.Element` that scrolls the document.\n  standards mode, this is the root element of the document, `web.document.documentElement`.\n\n  `var element = document.scrollingElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement`"}, :name web.Document/scrolling-element, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3698, :end-line 3698, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The scrollingElement read-only property of the `web.Document`\n  returns a reference to the `web.Element` that scrolls the document.\n  standards mode, this is the root element of the document, `web.document.documentElement`.\n\n  `var element = document.scrollingElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/scrollingElement`"}, set-onpointermove! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3096, :column 7, :end-line 3096, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, :name web.Document/set-onpointermove!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3096, :end-line 3096, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, compat-mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1015, :column 7, :end-line 1015, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Document.compatMode property indicates whether the document\n  rendered in Quirks mode or Standards mode.\n\n  `mode = document.compatMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode`"}, :name web.Document/compat-mode, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1015, :end-line 1015, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.compatMode property indicates whether the document\n  rendered in Quirks mode or Standards mode.\n\n  `mode = document.compatMode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/compatMode`"}, onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2900, :column 7, :end-line 2900, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name web.Document/onpause, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2900, :end-line 2900, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, onsubmit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3338, :column 7, :end-line 3338, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name web.Document/onsubmit, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3338, :end-line 3338, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, caret-range-from-point {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 44, :column 7, :end-line 44, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The caretRangeFromPoint() method of the `web.Document` interface\n  a `web.Range` object for the document fragment under the specified\n\n  `var range = document.caretRangeFromPoint(float x, float y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Document/caret-range-from-point, :variadic true, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The caretRangeFromPoint() method of the `web.Document` interface\n  a `web.Range` object for the document fragment under the specified\n\n  `var range = document.caretRangeFromPoint(float x, float y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/caretRangeFromPoint`"}, onmousemove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2756, :column 7, :end-line 2756, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, :name web.Document/onmousemove, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2756, :end-line 2756, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, set-xml-version! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4004, :column 7, :end-line 4004, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the version number as specified in the XML declaration\n  <?xml version=\\\"1.0\\\"?>) or \\\"1.0\\\" if the declaration is absent.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlVersion`"}, :name web.Document/set-xml-version!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4004, :end-line 4004, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the version number as specified in the XML declaration\n  <?xml version=\\\"1.0\\\"?>) or \\\"1.0\\\" if the declaration is absent.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlVersion`"}, set-onpointerdown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3004, :column 7, :end-line 3004, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, :name web.Document/set-onpointerdown!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3004, :end-line 3004, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, body {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 915, :column 7, :end-line 915, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The Document.body property represents the `web.<body>` or `web.<frameset>`\n  of the current document, or null if no such element exists.\n\n  `var objRef = document.body;\n  document.body = objRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/body`"}, :name web.Document/body, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 915, :end-line 915, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.body property represents the `web.<body>` or `web.<frameset>`\n  of the current document, or null if no such element exists.\n\n  `var objRef = document.body;\n  document.body = objRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/body`"}, set-onkeyup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2494, :column 7, :end-line 2494, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name web.Document/set-onkeyup!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2494, :end-line 2494, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, set-onfullscreenchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2317, :column 7, :end-line 2317, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Document` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired immediately\n  a document transitions into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange`"}, :name web.Document/set-onfullscreenchange!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2317, :end-line 2317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Document` interface's onfullscreenchange property is\n  event handler for the fullscreenchange event that is fired immediately\n  a document transitions into or out of full-screen mode.\n\n  `targetDocument.onfullscreenchange = fullscreenChangeHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenchange`"}, ondragenter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4238, :column 7, :end-line 4238, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragenter event.\n\n  `var dragenterHandler = targetElement.ondragenter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter`"}, :name web.Document/ondragenter, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4238, :end-line 4238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragenter event.\n\n  `var dragenterHandler = targetElement.ondragenter;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragenter`"}, set-onpointerout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3124, :column 7, :end-line 3124, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, :name web.Document/set-onpointerout!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3124, :end-line 3124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, bg-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 889, :column 7, :end-line 889, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated bgColor property gets or sets the background color\n  the current document.\n\n  `color = document.bgColor\n  document.bgColor =color`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor`"}, :name web.Document/bg-color, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 889, :end-line 889, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The deprecated bgColor property gets or sets the background color\n  the current document.\n\n  `color = document.bgColor\n  document.bgColor =color`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/bgColor`"}, set-moz-synthetic-document! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1721, :column 7, :end-line 1721, :end-column 34, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.mozSyntheticDocument property indicates whether\n  not the document is a synthetic one; that is, a document representing\n  standalone image, video, audio, or the like.\n\n  `var isSynthetic = document.mozSyntheticDocument;\n\n  On return, isSynthetic is true if the document is a synthetic one; otherwise it's false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument`"}, :name web.Document/set-moz-synthetic-document!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 34, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1721, :end-line 1721, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.mozSyntheticDocument property indicates whether\n  not the document is a synthetic one; that is, a document representing\n  standalone image, video, audio, or the like.\n\n  `var isSynthetic = document.mozSyntheticDocument;\n\n  On return, isSynthetic is true if the document is a synthetic one; otherwise it's false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/mozSyntheticDocument`"}, create-cdata-section {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 94, :column 7, :end-line 94, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  createCDATASection() creates a new CDATA section node, and returns\n\n  `var CDATASectionNode = document.createCDATASection(data);\n\n\n  CDATASectionNode is a CDATA Section node.\n  data is a string containing the data to be added to the CDATA Section.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Document/create-cdata-section, :variadic true, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  createCDATASection() creates a new CDATA section node, and returns\n\n  `var CDATASectionNode = document.createCDATASection(data);\n\n\n  CDATASectionNode is a CDATA Section node.\n  data is a string containing the data to be added to the CDATA Section.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createCDATASection`"}, create-expression {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 186, :column 7, :end-line 186, :end-column 24, :arglists (quote ([this xpath-text namespace-url-mapper])), :doc "Method.\n\n  This method compiles an `web.XPathExpression` which can then\n  used for (repeated) evaluations.\n\n  `xpathExpr = document.createExpression(xpathText, namespaceURLMapper);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression`"}, :name web.Document/create-expression, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this xpath-text namespace-url-mapper]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this xpath-text namespace-url-mapper])), :doc "Method.\n\n  This method compiles an `web.XPathExpression` which can then\n  used for (repeated) evaluations.\n\n  `xpathExpr = document.createExpression(xpathText, namespaceURLMapper);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createExpression`"}, create-comment {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 109, :column 7, :end-line 109, :end-column 21, :arglists (quote ([this data])), :doc "Method.\n\n  createComment() creates a new comment node, and returns it.\n\n  `CommentNode = document.createComment(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment`"}, :name web.Document/create-comment, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 109, :end-line 109, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this data])), :doc "Method.\n\n  createComment() creates a new comment node, and returns it.\n\n  `CommentNode = document.createComment(data);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createComment`"}, exit-pointer-lock {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 364, :column 7, :end-line 364, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The exitPointerLock() method asynchronously releases a pointer\n  previously requested through `web.Element.requestPointerLock`.\n\n  `document.exitPointerLock();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock`"}, :name web.Document/exit-pointer-lock, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The exitPointerLock() method asynchronously releases a pointer\n  previously requested through `web.Element.requestPointerLock`.\n\n  `document.exitPointerLock();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/exitPointerLock`"}, onanimationend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1820, :column 7, :end-line 1820, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name web.Document/onanimationend, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1820, :end-line 1820, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, get-selection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 733, :column 7, :end-line 733, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The getSelection() property of the `web.DocumentOrShadowRoot`\n  returns a `web.Selection` object representing the range of text\n  by the user, or the current position of the caret.\n\n  `var selection = documentOrShadowRootInstance.getSelection()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection`"}, :name web.Document/get-selection, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 733, :end-line 733, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getSelection() property of the `web.DocumentOrShadowRoot`\n  returns a `web.Selection` object representing the range of text\n  by the user, or the current position of the caret.\n\n  `var selection = documentOrShadowRootInstance.getSelection()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/getSelection`"}, onfullscreenerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2330, :column 7, :end-line 2330, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The Document.onfullscreenerror property is an event handler for\n  fullscreenerror event that is sent to the document when it fails\n  transition into full-screen mode after a prior call to `web.Element.requestFullscreen()`.\n\n  `targetDocument.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror`"}, :name web.Document/onfullscreenerror, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2330, :end-line 2330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.onfullscreenerror property is an event handler for\n  fullscreenerror event that is sent to the document when it fails\n  transition into full-screen mode after a prior call to `web.Element.requestFullscreen()`.\n\n  `targetDocument.onfullscreenerror = fullscreenErrorHandler;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onfullscreenerror`"}, set-onoffline! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2863, :column 7, :end-line 2863, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.onoffline event handler is called when an offline\n  fired on the `web.<body>` element and bubbles up, when `web.navigator.onLine`\n  changes and becomes false.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onoffline`"}, :name web.Document/set-onoffline!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2863, :end-line 2863, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.onoffline event handler is called when an offline\n  fired on the `web.<body>` element and bubbles up, when `web.navigator.onLine`\n  changes and becomes false.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onoffline`"}, set-style-sheets! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4155, :column 7, :end-line 4155, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The styleSheets read-only property of the `web.DocumentOrShadowRoot`\n  returns a `web.StyleSheetList` of `css.CSSStyleSheet` objects,\n  stylesheets explicitly linked into or embedded in a document.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets`"}, :name web.Document/set-style-sheets!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4155, :end-line 4155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The styleSheets read-only property of the `web.DocumentOrShadowRoot`\n  returns a `web.StyleSheetList` of `css.CSSStyleSheet` objects,\n  stylesheets explicitly linked into or embedded in a document.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/styleSheets`"}, location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1692, :column 7, :end-line 1692, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Document.location read-only property returns a `web.Location`\n  which contains information about the URL of the document and\n  methods for changing that URL and loading another URL.\n\n  `locationObj = document.location\n  document.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org'`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/location`"}, :name web.Document/location, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1692, :end-line 1692, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.location read-only property returns a `web.Location`\n  which contains information about the URL of the document and\n  methods for changing that URL and loading another URL.\n\n  `locationObj = document.location\n  document.location = 'http://www.mozilla.org' // Equivalent to document.location.href = 'http://www.mozilla.org'`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/location`"}, release-capture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 668, :column 7, :end-line 668, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The releaseCapture() method releases mouse capture if it's currently\n  on an element within this document. Enabling mouse capture on\n  element is done by calling `web.element.setCapture()`.\n\n  `document.releaseCapture();\n\n  Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Document/release-capture, :variadic true, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 668, :end-line 668, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The releaseCapture() method releases mouse capture if it's currently\n  on an element within this document. Enabling mouse capture on\n  element is done by calling `web.element.setCapture()`.\n\n  `document.releaseCapture();\n\n  Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/releaseCapture`"}, tooltip-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3862, :column 7, :end-line 3862, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Document.tooltipNode property returns the node which is the\n  of the current <xul:tooltip>.\n\n  `document.tooltipNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/tooltipNode`"}, :name web.Document/tooltip-node, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3862, :end-line 3862, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.tooltipNode property returns the node which is the\n  of the current <xul:tooltip>.\n\n  `document.tooltipNode;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/tooltipNode`"}, doctype {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1171, :column 7, :end-line 1171, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Document Type Declaration (DTD) associated with current\n  The returned object implements the `web.DocumentType` interface.\n  `dom.DOMImplementation.createDocumentType()` to create a DocumentType.\n\n  `doctype = document.doctype;\n\n\n  doctype is a read-only property.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype`"}, :name web.Document/doctype, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1171, :end-line 1171, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the Document Type Declaration (DTD) associated with current\n  The returned object implements the `web.DocumentType` interface.\n  `dom.DOMImplementation.createDocumentType()` to create a DocumentType.\n\n  `doctype = document.doctype;\n\n\n  doctype is a read-only property.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/doctype`"}, implementation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1532, :column 7, :end-line 1532, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Document.implementation property returns a `dom.DOMImplementation`\n  associated with the current document.\n\n  `DOMImpObj = document.implementation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation`"}, :name web.Document/implementation, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1532, :end-line 1532, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.implementation property returns a `dom.DOMImplementation`\n  associated with the current document.\n\n  `DOMImpObj = document.implementation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation`"}, set-last-element-child! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1568, :column 7, :end-line 1568, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, :name web.Document/set-last-element-child!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1568, :end-line 1568, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ParentNode.lastElementChild read-only property returns the\n  last child `web.Element` or null if there are no child elements.\n\n  `var element = node.lastElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/lastElementChild`"}, vlink-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3924, :column 7, :end-line 3924, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Document.vlinkColor property gets/sets the color of links\n  the user has visited in the document.\n\n  `color = document.vlinkColor\n  document.vlinkColor = color`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/vlinkColor`"}, :name web.Document/vlink-color, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3924, :end-line 3924, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.vlinkColor property gets/sets the color of links\n  the user has visited in the document.\n\n  `color = document.vlinkColor\n  document.vlinkColor = color`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/vlinkColor`"}, fg-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1347, :column 7, :end-line 1347, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  fgColor gets/sets the foreground color, or text color, of the\n  document.\n\n  `var color = document.fgColor;\n  document.fgColor = color;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor`"}, :name web.Document/fg-color, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1347, :end-line 1347, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  fgColor gets/sets the foreground color, or text color, of the\n  document.\n\n  `var color = document.fgColor;\n  document.fgColor = color;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fgColor`"}, ondragstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4328, :column 7, :end-line 4328, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragstart event.\n\n  `var dragstartHandler = targetElement.ondragstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart`"}, :name web.Document/ondragstart, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4328, :end-line 4328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragstart event.\n\n  `var dragstartHandler = targetElement.ondragstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart`"}, onselectstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3314, :column 7, :end-line 3314, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name web.Document/onselectstart, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3314, :end-line 3314, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, document-uri-object {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1253, :column 7, :end-line 1253, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The Document.documentURIObject read-only property returns an\n  object representing the URI of the document.\n\n  `var uri = document.documentURIObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURIObject`"}, :name web.Document/document-uri-object, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1253, :end-line 1253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.documentURIObject read-only property returns an\n  object representing the URI of the document.\n\n  `var uri = document.documentURIObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/documentURIObject`"}, set-onselect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3278, :column 7, :end-line 3278, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name web.Document/set-onselect!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3278, :end-line 3278, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3962, :column 7, :end-line 3962, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the width of the `web.<body>` element of the current\n  in pixels.\n\n  `pixels = document.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/width`"}, :name web.Document/set-width!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3962, :end-line 3962, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the width of the `web.<body>` element of the current\n  in pixels.\n\n  `pixels = document.width;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/width`"}, set-onselectstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3326, :column 7, :end-line 3326, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name web.Document/set-onselectstart!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3326, :end-line 3326, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, links {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1666, :column 7, :end-line 1666, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The links read-only property of the `web.Document` interface\n  a collection of all `web.<area>` elements and `web.<a>` elements\n  a document with a value for the href attribute.\n\n  `nodeList = document.links`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/links`"}, :name web.Document/links, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1666, :end-line 1666, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The links read-only property of the `web.Document` interface\n  a collection of all `web.<area>` elements and `web.<a>` elements\n  a document with a value for the href attribute.\n\n  `nodeList = document.links`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/links`"}, onplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2930, :column 7, :end-line 2930, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name web.Document/onplay, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2930, :end-line 2930, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, onloadstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2620, :column 7, :end-line 2620, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name web.Document/onloadstart, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2620, :end-line 2620, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1472, :column 7, :end-line 1472, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  Returns the height of the `web.document` object. In most cases,\n  is equal to the `web.<body>` element of the current document.\n\n  `pixels = document.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/height`"}, :name web.Document/height, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1472, :end-line 1472, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the height of the `web.document` object. In most cases,\n  is equal to the `web.<body>` element of the current document.\n\n  `pixels = document.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/height`"}, set-onloadstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2634, :column 7, :end-line 2634, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name web.Document/set-onloadstart!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2634, :end-line 2634, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, first-element-child {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1373, :column 7, :end-line 1373, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, :name web.Document/first-element-child, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1373, :end-line 1373, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ParentNode.firstElementChild read-only property returns the\n  first child `web.Element`, or null if there are no child elements.\n\n  `var element = node.firstElementChild;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/firstElementChild`"}, forms {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1397, :column 7, :end-line 1397, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The forms read-only property of the `web.Document` interface\n  an `html.HTMLCollection` listing all the `web.<form>` elements\n  in the document.\n\n  `collection = document.forms;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/forms`"}, :name web.Document/forms, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1397, :end-line 1397, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The forms read-only property of the `web.Document` interface\n  an `html.HTMLCollection` listing all the `web.<form>` elements\n  in the document.\n\n  `collection = document.forms;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/forms`"}, fonts {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4014, :column 7, :end-line 4014, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The fonts property of the `web.Document` interface returns the\n  interface of the document.\n\n  `let fontFaceSet = document.fonts;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts`"}, :name web.Document/fonts, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4014, :end-line 4014, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The fonts property of the `web.Document` interface returns the\n  interface of the document.\n\n  `let fontFaceSet = document.fonts;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/fonts`"}, clear {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 56, :column 7, :end-line 56, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The Document.clear() method clears the whole specified document\n  early (pre-1.0) versions of Mozilla.\n\n  `document.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/clear`"}, :name web.Document/clear, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Document.clear() method clears the whole specified document\n  early (pre-1.0) versions of Mozilla.\n\n  `document.clear();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/clear`"}, onpointercancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2960, :column 7, :end-line 2960, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name web.Document/onpointercancel, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2960, :end-line 2960, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, set-onscroll! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3254, :column 7, :end-line 3254, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name web.Document/set-onscroll!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3254, :end-line 3254, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, onpointerleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3048, :column 7, :end-line 3048, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, :name web.Document/onpointerleave, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3048, :end-line 3048, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2106, :column 7, :end-line 2106, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, :name web.Document/set-onclose!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2106, :end-line 2106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 567, :column 7, :end-line 567, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The Document.open() method opens a document for writing.\n\n  `document.open();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/open`"}, :name web.Document/open, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 567, :end-line 567, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Document.open() method opens a document for writing.\n\n  `document.open();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/open`"}, set-images! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1520, :column 7, :end-line 1520, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The images read-only property of the `web.Document` interface\n  a collection of the images in the current HTML document.\n\n  `var imageCollection = document.images;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/images`"}, :name web.Document/set-images!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1520, :end-line 1520, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The images read-only property of the `web.Document` interface\n  a collection of the images in the current HTML document.\n\n  `var imageCollection = document.images;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/images`"}, onmouseup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2828, :column 7, :end-line 2828, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, :name web.Document/onmouseup, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2828, :end-line 2828, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, request-storage-access {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 683, :column 7, :end-line 683, :end-column 29, :arglists (quote ([this])), :doc "Method.\n\n  The requestStorageAccess() method of the `web.Document` interface\n  a `web.Promise` that resolves if the access to first-party storage\n  granted, and rejects if access was denied.\n\n  `Promise<void> requestStorageAccess()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccess`"}, :name web.Document/request-storage-access, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 29, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 683, :end-line 683, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The requestStorageAccess() method of the `web.Document` interface\n  a `web.Promise` that resolves if the access to first-party storage\n  granted, and rejects if access was denied.\n\n  `Promise<void> requestStorageAccess()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/requestStorageAccess`"}, onselectionchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3290, :column 7, :end-line 3290, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name web.Document/onselectionchange, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3290, :end-line 3290, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, set-oninput! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2394, :column 7, :end-line 2394, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, :name web.Document/set-oninput!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2394, :end-line 2394, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, set-ontouchend! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4443, :column 7, :end-line 4443, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the touchend event.\n\n  `var endHandler = targetElement.ontouchend;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend`"}, :name web.Document/set-ontouchend!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4443, :end-line 4443, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the touchend event.\n\n  `var endHandler = targetElement.ontouchend;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchend`"}, set-ondragstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4339, :column 7, :end-line 4339, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the dragstart event.\n\n  `var dragstartHandler = targetElement.ondragstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart`"}, :name web.Document/set-ondragstart!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4339, :end-line 4339, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  A `web.global event handler` for the dragstart event.\n\n  `var dragstartHandler = targetElement.ondragstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragstart`"}, onloadedmetadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2562, :column 7, :end-line 2562, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, :name web.Document/onloadedmetadata, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2562, :end-line 2562, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, set-last-style-sheet-set! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1623, :column 7, :end-line 1623, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.lastStyleSheetSet property returns the last enabled\n  sheet set. This property's value changes whenever the `web.document.selectedStyleSheetSet`\n  is changed.\n\n  `var lastStyleSheetSet = document.lastStyleSheetSet\n\n  On return, lastStyleSheetSet indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting `web.document.selectedStyleSheetSet`, the returned value is null.\n\n  Note: This value doesn't change when `web.document.enableStyleSheetsForSet()` is called.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet`"}, :name web.Document/set-last-style-sheet-set!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1623, :end-line 1623, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.lastStyleSheetSet property returns the last enabled\n  sheet set. This property's value changes whenever the `web.document.selectedStyleSheetSet`\n  is changed.\n\n  `var lastStyleSheetSet = document.lastStyleSheetSet\n\n  On return, lastStyleSheetSet indicates the style sheet set that was most recently set. If the current style sheet set has not been changed by setting `web.document.selectedStyleSheetSet`, the returned value is null.\n\n  Note: This value doesn't change when `web.document.enableStyleSheetsForSet()` is called.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/lastStyleSheetSet`"}, ontouchcancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3362, :column 7, :end-line 3362, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name web.Document/ontouchcancel, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3362, :end-line 3362, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, pointer-lock-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4116, :column 7, :end-line 4116, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The pointerLockElement property of the `web.Document` and `web.ShadowRoot`\n  provides the element set as the target for mouse events while\n  pointer is locked. It is null if lock is pending, pointer is\n  or the target is in another document.\n\n  `var element = document.pointerLockElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement`"}, :name web.Document/pointer-lock-element, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4116, :end-line 4116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The pointerLockElement property of the `web.Document` and `web.ShadowRoot`\n  provides the element set as the target for mouse events while\n  pointer is locked. It is null if lock is pending, pointer is\n  or the target is in another document.\n\n  `var element = document.pointerLockElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/pointerLockElement`"}, set-onpointercancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2974, :column 7, :end-line 2974, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name web.Document/set-onpointercancel!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2974, :end-line 2974, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, current-script {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1053, :column 7, :end-line 1053, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The Document.currentScript property returns the `web.<script>`\n  whose script is currently being processed and isn't a JavaScript\n  for modules use instead import.meta.\n\n  `var curScriptElement = document.currentScript;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript`"}, :name web.Document/current-script, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1053, :end-line 1053, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.currentScript property returns the `web.<script>`\n  whose script is currently being processed and isn't a JavaScript\n  for modules use instead import.meta.\n\n  `var curScriptElement = document.currentScript;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/currentScript`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2042, :column 7, :end-line 2042, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name web.Document/onchange, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2042, :end-line 2042, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, selected-style-sheet-set {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3724, :column 7, :end-line 3724, :end-column 31, :arglists (quote ([this])), :doc "Property.\n\n  The selectedStyleSheetSet property indicates the name of the\n  sheet set that's currently in use.\n\n  `currentStyleSheetSet = document.selectedStyleSheetSet;\n\n  document.selectedStyleSheet = newStyleSheetSet;\n\n  On return, currentStyleSheetSet indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property.\n\n  Setting the value of this property is equivalent to calling `web.document.enableStyleSheetsForSet()` with the value of currentStyleSheetSet, then setting the value of lastStyleSheetSet to that value as well.\n\n  Note: This attribute's value is live; directly changing the disabled attribute on style sheets will affect the value of this attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet`"}, :name web.Document/selected-style-sheet-set, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 31, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3724, :end-line 3724, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The selectedStyleSheetSet property indicates the name of the\n  sheet set that's currently in use.\n\n  `currentStyleSheetSet = document.selectedStyleSheetSet;\n\n  document.selectedStyleSheet = newStyleSheetSet;\n\n  On return, currentStyleSheetSet indicates the name of the style sheet set currently in use. You can also set the current style sheet set using this property.\n\n  Setting the value of this property is equivalent to calling `web.document.enableStyleSheetsForSet()` with the value of currentStyleSheetSet, then setting the value of lastStyleSheetSet to that value as well.\n\n  Note: This attribute's value is live; directly changing the disabled attribute on style sheets will affect the value of this attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/selectedStyleSheetSet`"}, set-xml-encoding! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3984, :column 7, :end-line 3984, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the encoding as determined by the XML declaration. Should\n  null if unspecified or unknown.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding`"}, :name web.Document/set-xml-encoding!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3984, :end-line 3984, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the encoding as determined by the XML declaration. Should\n  null if unspecified or unknown.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding`"}, ondragend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 4216, :column 7, :end-line 4216, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragend event.\n\n  `var dragendHandler = targetElement.ondragend;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend`"}, :name web.Document/ondragend, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4216, :end-line 4216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  A `web.global event handler` for the dragend event.\n\n  `var dragendHandler = targetElement.ondragend;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondragend`"}, document-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1203, :column 7, :end-line 1203, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  Document.documentElement returns the `web.Element` that is the\n  element of the `web.document` (for example, the `web.<html>`\n  for HTML documents).\n\n  `var element = document.documentElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement`"}, :name web.Document/document-element, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1203, :end-line 1203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Document.documentElement returns the `web.Element` that is the\n  element of the `web.document` (for example, the `web.<html>`\n  for HTML documents).\n\n  `var element = document.documentElement;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/documentElement`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1484, :column 7, :end-line 1484, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the height of the `web.document` object. In most cases,\n  is equal to the `web.<body>` element of the current document.\n\n  `pixels = document.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/height`"}, :name web.Document/set-height!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1484, :end-line 1484, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the height of the `web.document` object. In most cases,\n  is equal to the `web.<body>` element of the current document.\n\n  `pixels = document.height`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/height`"}, onafterscriptexecute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1760, :column 7, :end-line 1760, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The Document.onafterscriptexecute property references a function\n  fires when a static `web.<script>` element finishes executing\n  script. It does not fire if the element is added dynamically,\n  as with `web.appendChild()`.\n\n  `document.onafterscriptexecute = funcRef;\n\n  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the `web.<script>` element that just finished executing.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute`"}, :name web.Document/onafterscriptexecute, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1760, :end-line 1760, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Document.onafterscriptexecute property references a function\n  fires when a static `web.<script>` element finishes executing\n  script. It does not fire if the element is added dynamically,\n  as with `web.appendChild()`.\n\n  `document.onafterscriptexecute = funcRef;\n\n  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the `web.<script>` element that just finished executing.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onafterscriptexecute`"}, set-implementation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1544, :column 7, :end-line 1544, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.implementation property returns a `dom.DOMImplementation`\n  associated with the current document.\n\n  `DOMImpObj = document.implementation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation`"}, :name web.Document/set-implementation!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1544, :end-line 1544, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Document.implementation property returns a `dom.DOMImplementation`\n  associated with the current document.\n\n  `DOMImpObj = document.implementation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/implementation`"}, ontransitionend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3438, :column 7, :end-line 3438, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, :name web.Document/ontransitionend, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3438, :end-line 3438, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, children {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 989, :column 7, :end-line 989, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, :name web.Document/children, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 989, :end-line 989, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.ParentNode` property children is a read-only property\n  returns a live `html.HTMLCollection` which contains all of the\n  `web.elements` of the node upon which it was called.\n\n  `var children = node.children;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ParentNode/children`"}, set-links! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1679, :column 7, :end-line 1679, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The links read-only property of the `web.Document` interface\n  a collection of all `web.<area>` elements and `web.<a>` elements\n  a document with a value for the href attribute.\n\n  `nodeList = document.links`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/links`"}, :name web.Document/set-links!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1679, :end-line 1679, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The links read-only property of the `web.Document` interface\n  a collection of all `web.<area>` elements and `web.<a>` elements\n  a document with a value for the href attribute.\n\n  `nodeList = document.links`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/links`"}, get-elements-by-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 437, :column 7, :end-line 437, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  The getElementsByName() method of the `web.Document` object returns\n  `web.NodeList` Collection of elements with a given `web.name`\n  the document.\n\n  `var elements = document.getElementsByName(name);\n\n\n  elements is a live `web.NodeList` Collection, meaning it automatically updates as new elements with the same name are added to/removed from the document.\n  name is the value of the name attribute of the element(s).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Document/get-elements-by-name, :variadic true, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 437, :end-line 437, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The getElementsByName() method of the `web.Document` object returns\n  `web.NodeList` Collection of elements with a given `web.name`\n  the document.\n\n  `var elements = document.getElementsByName(name);\n\n\n  elements is a live `web.NodeList` Collection, meaning it automatically updates as new elements with the same name are added to/removed from the document.\n  name is the value of the name attribute of the element(s).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByName`"}, set-onwheel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3508, :column 7, :end-line 3508, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, :name web.Document/set-onwheel!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3508, :end-line 3508, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, onresize {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3218, :column 7, :end-line 3218, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, :name web.Document/onresize, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3218, :end-line 3218, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, ongotpointercapture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 2356, :column 7, :end-line 2356, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, :name web.Document/ongotpointercapture, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2356, :end-line 2356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, onbeforescriptexecute {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1900, :column 7, :end-line 1900, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  Fired when the code in a `web.<script>` element declared in an\n  document is about to start executing. Does not fire if the element\n  added dynamically, eg with appendChild().\n\n  `document.onbeforescriptexecute = funcRef;\n\n  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the script `web.Element` that is about to be executed.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute`"}, :name web.Document/onbeforescriptexecute, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1900, :end-line 1900, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Fired when the code in a `web.<script>` element declared in an\n  document is about to start executing. Does not fire if the element\n  added dynamically, eg with appendChild().\n\n  `document.onbeforescriptexecute = funcRef;\n\n  funcRef is a function reference, called when the event is fired. The event's target attribute is set to the script `web.Element` that is about to be executed.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/onbeforescriptexecute`"}, onreset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3194, :column 7, :end-line 3194, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name web.Document/onreset, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3194, :end-line 3194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, onblur {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1930, :column 7, :end-line 1930, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, :name web.Document/onblur, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1930, :end-line 1930, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, set-onreset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3206, :column 7, :end-line 3206, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name web.Document/set-onreset!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3206, :end-line 3206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 1748, :column 7, :end-line 1748, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, :name web.Document/set-onabort!, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1748, :end-line 1748, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, xml-encoding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :line 3974, :column 7, :end-line 3974, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  Returns the encoding as determined by the XML declaration. Should\n  null if unspecified or unknown.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding`"}, :name web.Document/xml-encoding, :variadic false, :file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Document.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3974, :end-line 3974, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Returns the encoding as determined by the XML declaration. Should\n  null if unspecified or unknown.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/xmlEncoding`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Document interface represents any web page loaded in the\n  and serves as an entry point into the web page's content, which\n  the DOM tree."}