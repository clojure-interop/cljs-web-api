{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{get}, :name web.CustomElementRegistry, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {shadow-root {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 94, :column 7, :end-line 94, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, :name web.CustomElementRegistry/shadow-root, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, set-is-connected! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 200, :column 7, :end-line 200, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, :name web.CustomElementRegistry/set-is-connected!, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, attach-shadow {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 20, :column 7, :end-line 20, :end-column 20, :arglists (quote ([this shadow-root-init])), :doc "Method.\n\n  The Element.attachShadow() method attaches a shadow DOM tree\n  the specified element and returns a reference to its `web.ShadowRoot`.\n\n  `var shadowroot = element.attachShadow(shadowRootInit);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow`"}, :name web.CustomElementRegistry/attach-shadow, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 20, :method-params ([this shadow-root-init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this shadow-root-init])), :doc "Method.\n\n  The Element.attachShadow() method attaches a shadow DOM tree\n  the specified element and returns a reference to its `web.ShadowRoot`.\n\n  `var shadowroot = element.attachShadow(shadowRootInit);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/attachShadow`"}, custom-elements {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 215, :column 7, :end-line 215, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The customElements read-only property of the `web.Window` interface\n  a reference to the `web.CustomElementRegistry` object, which\n  be used to register new custom elements and get information about\n  registered custom elements.\n\n  `let customElementRegistry = window.customElements;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements`"}, :name web.CustomElementRegistry/custom-elements, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The customElements read-only property of the `web.Window` interface\n  a reference to the `web.CustomElementRegistry` object, which\n  be used to register new custom elements and get information about\n  registered custom elements.\n\n  `let customElementRegistry = window.customElements;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 57, :column 7, :end-line 57, :end-column 10, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.CustomElementRegistry` interface\n  the constructor for a previously-defined custom element.\n\n  `constructor = customElements.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/get`"}, :name web.CustomElementRegistry/get, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 10, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.CustomElementRegistry` interface\n  the constructor for a previously-defined custom element.\n\n  `constructor = customElements.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/get`"}, slot {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 118, :column 7, :end-line 118, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, :name web.CustomElementRegistry/slot, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 118, :end-line 118, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, set-slot! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 131, :column 7, :end-line 131, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, :name web.CustomElementRegistry/set-slot!, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The slot property of the `web.Element` interface returns the\n  of the shadow DOM slot the element is inserted in.\n\n  `var aString = element.slot\n  element.slot = aString`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/slot`"}, composed-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 157, :column 7, :end-line 157, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, :name web.CustomElementRegistry/composed-path, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 157, :end-line 157, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, set-custom-elements! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 229, :column 7, :end-line 229, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The customElements read-only property of the `web.Window` interface\n  a reference to the `web.CustomElementRegistry` object, which\n  be used to register new custom elements and get information about\n  registered custom elements.\n\n  `let customElementRegistry = window.customElements;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements`"}, :name web.CustomElementRegistry/set-custom-elements!, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 229, :end-line 229, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The customElements read-only property of the `web.Window` interface\n  a reference to the `web.CustomElementRegistry` object, which\n  be used to register new custom elements and get information about\n  registered custom elements.\n\n  `let customElementRegistry = window.customElements;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/customElements`"}, get-root-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 32, :column 7, :end-line 32, :end-column 20, :arglists (quote ([this options])), :doc "Method.\n\n  The getRootNode() method of the `web.Node` interface returns\n  context object's root, which optionally includes the shadow root\n  it is available.\n\n  `var root = node.getRootNode(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode`"}, :name web.CustomElementRegistry/get-root-node, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 20, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The getRootNode() method of the `web.Node` interface returns\n  context object's root, which optionally includes the shadow root\n  it is available.\n\n  `var root = node.getRootNode(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode`"}, set-shadow-root! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 106, :column 7, :end-line 106, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, :name web.CustomElementRegistry/set-shadow-root!, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Element.shadowRoot read-only property represents the shadow\n  hosted by the element.\n\n  `var shadowroot = element.shadowRoot;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Element/shadowRoot`"}, when-defined {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 82, :column 7, :end-line 82, :end-column 19, :arglists (quote ([this name])), :doc "Method.\n\n  The whenDefined() method of the `web.CustomElementRegistry` interface\n  a `web.Promise` that resolves when the named element is defined.\n\n  `Promise<> customElements.whenDefined(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined`"}, :name web.CustomElementRegistry/when-defined, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 19, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The whenDefined() method of the `web.CustomElementRegistry` interface\n  a `web.Promise` that resolves when the named element is defined.\n\n  `Promise<> customElements.whenDefined(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/whenDefined`"}, define {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 45, :column 7, :end-line 45, :end-column 13, :arglists (quote ([this name constructor options])), :doc "Method.\n\n  The define() method of the `web.CustomElementRegistry` interface\n  a new custom element.\n\n  `customElements.define(name, constructor, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define`"}, :name web.CustomElementRegistry/define, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 13, :method-params ([this name constructor options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this name constructor options])), :doc "Method.\n\n  The define() method of the `web.CustomElementRegistry` interface\n  a new custom element.\n\n  `customElements.define(name, constructor, options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define`"}, upgrade {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 69, :column 7, :end-line 69, :end-column 14, :arglists (quote ([this root])), :doc "Method.\n\n  The upgrade() method of the `web.CustomElementRegistry` interface\n  all shadow-containing custom elements in a `web.Node` subtree,\n  before they are connected to the main document.\n\n  `customElements.upgrade(root);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/upgrade`"}, :name web.CustomElementRegistry/upgrade, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 14, :method-params ([this root]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this root])), :doc "Method.\n\n  The upgrade() method of the `web.CustomElementRegistry` interface\n  all shadow-containing custom elements in a `web.Node` subtree,\n  before they are connected to the main document.\n\n  `customElements.upgrade(root);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/upgrade`"}, is-connected {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 185, :column 7, :end-line 185, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, :name web.CustomElementRegistry/is-connected, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `web.Node` interface\n  a boolean indicating whether the node is connected (directly\n  indirectly) to the context object, for example the `web.Document`\n  in the case of the normal DOM, or the `web.ShadowRoot` in the\n  of a shadow DOM.\n\n  `var isItConnected = nodeObjectInstance.isConnected`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Node/isConnected`"}, set-composed-path! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 171, :column 7, :end-line 171, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, :name web.CustomElementRegistry/set-composed-path!, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The composedPath() method of the `web.Event` interface returns\n  event’s path which is an array of the objects on which listeners\n  be invoked. This does not include nodes in shadow trees if the\n  root was created with its `web.ShadowRoot.mode` closed.\n\n  `var composed = Event.composedPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composedPath`"}, composed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 144, :column 7, :end-line 144, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}, :name web.CustomElementRegistry/composed, :variadic false, :file "src/web/CustomElementRegistry.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only composed property of the `web.Event` interface\n  a `web.Boolean` which indicates whether or not the event will\n  across the shadow DOM boundary into the standard DOM.\n\n  `var composed = Event.composed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Event/composed`"}, create-element {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CustomElementRegistry.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  In an HTML document, the document.createElement() method creates\n  HTML element specified by tagName, or an `html.HTMLUnknownElement`\n  tagName isn't recognized.\n\n  `var element = document.createElement(tagName[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CustomElementRegistry/create-element, :variadic true, :file "src/web/CustomElementRegistry.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  In an HTML document, the document.createElement() method creates\n  HTML element specified by tagName, or an `html.HTMLUnknownElement`\n  tagName isn't recognized.\n\n  `var element = document.createElement(tagName[, options]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CustomElementRegistry interface provides methods for registering\n  elements and querying registered elements. To get an instance\n  it, use the `web.window.customElements` property."}