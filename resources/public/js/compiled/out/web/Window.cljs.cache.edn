{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{load find name print}, :name web.Window, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {oncanplaythrough {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2004, :column 7, :end-line 2004, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name web.Window/oncanplaythrough, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2004, :end-line 2004, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-onmozbeforepaint! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3171, :column 7, :end-line 3171, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the MozBeforePaint event. This is used in\n  with the `web.window.mozRequestAnimationFrame()` method to perform\n  synchronized animations from JavaScript code.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint`"}, :name web.Window/set-onmozbeforepaint!, :variadic false, :file "src/web/Window.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3171, :end-line 3171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the MozBeforePaint event. This is used in\n  with the `web.window.mozRequestAnimationFrame()` method to perform\n  synchronized animations from JavaScript code.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint`"}, moz-inner-screen-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1541, :column 7, :end-line 1541, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  Gets the Y coordinate of the top-left corner of the window's\n  in screen coordinates.\n\n  `screenY = window.mozInnerScreenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY`"}, :name web.Window/moz-inner-screen-y, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1541, :end-line 1541, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Gets the Y coordinate of the top-left corner of the window's\n  in screen coordinates.\n\n  `screenY = window.mozInnerScreenY;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenY`"}, match-media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 368, :column 7, :end-line 368, :end-column 18, :arglists (quote ([this media-query-string])), :doc "Method.\n\n  The `web.Window` interface's matchMedia() method returns a new\n  object representing the parsed results of the specified media\n  string. The returned MediaQueryList can then be used to determine\n  the `web.Document` matches the media query, or to monitor a document\n  detect when it matches or stops matching the media query.\n\n  `mqList = window.matchMedia(mediaQueryString)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia`"}, :name web.Window/match-media, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this media-query-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-query-string])), :doc "Method.\n\n  The `web.Window` interface's matchMedia() method returns a new\n  object representing the parsed results of the specified media\n  string. The returned MediaQueryList can then be used to determine\n  the `web.Document` matches the media query, or to monitor a document\n  detect when it matches or stops matching the media query.\n\n  `mqList = window.matchMedia(mediaQueryString)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia`"}, set-speech-synthesis! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4777, :column 7, :end-line 4777, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The speechSynthesis read-only property of the Window object returns\n  `speech.SpeechSynthesis` object, which is the entry point into\n  Web Speech API speech synthesis functionality.\n\n  `var synth = window.speechSynthesis;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis`"}, :name web.Window/set-speech-synthesis!, :variadic false, :file "src/web/Window.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4777, :end-line 4777, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The speechSynthesis read-only property of the Window object returns\n  `speech.SpeechSynthesis` object, which is the entry point into\n  Web Speech API speech synthesis functionality.\n\n  `var synth = window.speechSynthesis;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis`"}, set-origin! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4250, :column 7, :end-line 4250, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, :name web.Window/set-origin!, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4250, :end-line 4250, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The origin read-only property of the `web.WindowOrWorkerGlobalScope`\n  returns the origin of the global scope, serialized as a string.\n\n  `var myOrigin = self.origin; // or just origin`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/origin`"}, onpopstate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3504, :column 7, :end-line 3504, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, :name web.Window/onpopstate, :variadic false, :file "src/web/Window.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3504, :end-line 3504, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpopstate property of the `web.WindowEventHandlers` mixin\n  the `web.EventHandler` for processing popstate events on the\n\n  `window.onpopstate = funcRef;\n\n\n  funcRef is a handler function.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate`"}, set-onselectionchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3670, :column 7, :end-line 3670, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name web.Window/set-onselectionchange!, :variadic false, :file "src/web/Window.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3670, :end-line 3670, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, speech-synthesis {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4764, :column 7, :end-line 4764, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The speechSynthesis read-only property of the Window object returns\n  `speech.SpeechSynthesis` object, which is the entry point into\n  Web Speech API speech synthesis functionality.\n\n  `var synth = window.speechSynthesis;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis`"}, :name web.Window/speech-synthesis, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4764, :end-line 4764, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The speechSynthesis read-only property of the Window object returns\n  `speech.SpeechSynthesis` object, which is the entry point into\n  Web Speech API speech synthesis functionality.\n\n  `var synth = window.speechSynthesis;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/speechSynthesis`"}, onmozbeforepaint {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3160, :column 7, :end-line 3160, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for the MozBeforePaint event. This is used in\n  with the `web.window.mozRequestAnimationFrame()` method to perform\n  synchronized animations from JavaScript code.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint`"}, :name web.Window/onmozbeforepaint, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3160, :end-line 3160, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for the MozBeforePaint event. This is used in\n  with the `web.window.mozRequestAnimationFrame()` method to perform\n  synchronized animations from JavaScript code.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onmozbeforepaint`"}, onunhandledrejection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3858, :column 7, :end-line 3858, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, :name web.Window/onunhandledrejection, :variadic false, :file "src/web/Window.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3858, :end-line 3858, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onunhandledrejection property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing unhandledrejection events.\n  events are raised for unhandled `web.Promise` rejections.\n\n  `window.onunhandledrejection = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onunhandledrejection`"}, console {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 937, :column 7, :end-line 937, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The Window.console property returns a reference to the `web.Console`\n  which provides methods for logging information to the browser's\n  These methods are intended for debugging purposes only and should\n  be relied on for presenting information to end users.\n\n  `var consoleObj = window.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/console`"}, :name web.Window/console, :variadic false, :file "src/web/Window.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 937, :end-line 937, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.console property returns a reference to the `web.Console`\n  which provides methods for logging information to the browser's\n  These methods are intended for debugging purposes only and should\n  be relied on for presenting information to end users.\n\n  `var consoleObj = window.console;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/console`"}, menubar {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1467, :column 7, :end-line 1467, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The Window.menubar property returns the menubar object, whose\n  can be checked.\n\n  `objRef = window.menubar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar`"}, :name web.Window/menubar, :variadic false, :file "src/web/Window.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1467, :end-line 1467, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.menubar property returns the menubar object, whose\n  can be checked.\n\n  `objRef = window.menubar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar`"}, set-onmouseenter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3019, :column 7, :end-line 3019, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, :name web.Window/set-onmouseenter!, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3019, :end-line 3019, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, oncanplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1974, :column 7, :end-line 1974, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, :name web.Window/oncanplay, :variadic false, :file "src/web/Window.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1974, :end-line 1974, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, onscroll {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3610, :column 7, :end-line 3610, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name web.Window/onscroll, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3610, :end-line 3610, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, release-events {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 521, :column 7, :end-line 521, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  Releases the window from trapping events of a specific type.\n\n  `window.releaseEvents(eventType)\n\n  eventType is a combination of the following values: Event.ABORT, Event.BLUR, Event.CLICK, Event.CHANGE, Event.DBLCLICK, Event.DRAGDDROP, Event.ERROR, Event.FOCUS, Event.KEYDOWN, Event.KEYPRESS, Event.KEYUP, Event.LOAD, Event.MOUSEDOWN, Event.MOUSEMOVE, Event.MOUSEOUT, Event.MOUSEOVER, Event.MOUSEUP, Event.MOVE, Event.RESET, Event.RESIZE, Event.SELECT, Event.SUBMIT, Event.UNLOAD.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/release-events, :variadic true, :file "src/web/Window.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 521, :end-line 521, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Releases the window from trapping events of a specific type.\n\n  `window.releaseEvents(eventType)\n\n  eventType is a combination of the following values: Event.ABORT, Event.BLUR, Event.CLICK, Event.CHANGE, Event.DBLCLICK, Event.DRAGDDROP, Event.ERROR, Event.FOCUS, Event.KEYDOWN, Event.KEYPRESS, Event.KEYUP, Event.LOAD, Event.MOUSEDOWN, Event.MOUSEMOVE, Event.MOUSEOUT, Event.MOUSEOVER, Event.MOUSEUP, Event.MOVE, Event.RESET, Event.RESIZE, Event.SELECT, Event.SUBMIT, Event.UNLOAD.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/releaseEvents`"}, set-onpointermove! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3406, :column 7, :end-line 3406, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, :name web.Window/set-onpointermove!, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3406, :end-line 3406, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, set-onappinstalled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1787, :column 7, :end-line 1787, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onappinstalled attribute of the `web.Window` object serves\n  an event handler for the appinstalled event, which is dispatched\n  the web application is successfully installed as a progressive\n  app. The event that is fired is a \\\"simple event\\\" that implements\n  `web.Event` interface.\n\n  `window.onappinstalled = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled`"}, :name web.Window/set-onappinstalled!, :variadic false, :file "src/web/Window.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1787, :end-line 1787, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onappinstalled attribute of the `web.Window` object serves\n  an event handler for the appinstalled event, which is dispatched\n  the web application is successfully installed as a progressive\n  app. The event that is fired is a \\\"simple event\\\" that implements\n  `web.Event` interface.\n\n  `window.onappinstalled = function(event) { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onappinstalled`"}, onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3210, :column 7, :end-line 3210, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name web.Window/onpause, :variadic false, :file "src/web/Window.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3210, :end-line 3210, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, set-crypto! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 997, :column 7, :end-line 997, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Window.crypto` property returns the `web.Crypto` object\n  to the global object. This object allows web pages access to\n  cryptographic related services. Although the `web.Window.crypto`\n  iteself is read-only, all of its methods (and the methods of\n  child object, `web.SubtleCrypto`) are not read-only, and therefore\n  to attack by polyfill.\n\n  `var cryptoObj = window.crypto || window.msCrypto; // for IE 11`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto`"}, :name web.Window/set-crypto!, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 997, :end-line 997, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.Window.crypto` property returns the `web.Crypto` object\n  to the global object. This object allows web pages access to\n  cryptographic related services. Although the `web.Window.crypto`\n  iteself is read-only, all of its methods (and the methods of\n  child object, `web.SubtleCrypto`) are not read-only, and therefore\n  to attack by polyfill.\n\n  `var cryptoObj = window.crypto || window.msCrypto; // for IE 11`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/crypto`"}, onsubmit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3730, :column 7, :end-line 3730, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name web.Window/onsubmit, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3730, :end-line 3730, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, onhashchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2550, :column 7, :end-line 2550, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, :name web.Window/onhashchange, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2550, :end-line 2550, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The WindowEventHandlers.onhashchange property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing hashchange events.\n\n  `Using an event handler:\n\n\n\n  window.onhashchange = funcRef;\n\n  Using an HTML event handler:\n\n\n\n  <body onhashchange=\\\"funcRef();\\\">\n\n  Using an event listener:\n\n  To add an event listener, use `web.addEventListener()`:\n\n\n\n  window.addEventListener(\\\"hashchange\\\", funcRef, false);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onhashchange`"}, set-scroll-max-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4607, :column 7, :end-line 4607, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.scrollMaxY read-only property returns the maximum\n  of pixels that the document can be scrolled vertically.\n\n  `yMax = window.scrollMaxY\n\n\n  yMax is the number of pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY`"}, :name web.Window/set-scroll-max-y!, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4607, :end-line 4607, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.scrollMaxY read-only property returns the maximum\n  of pixels that the document can be scrolled vertically.\n\n  `yMax = window.scrollMaxY\n\n\n  yMax is the number of pixels.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollMaxY`"}, onmousemove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3064, :column 7, :end-line 3064, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, :name web.Window/onmousemove, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3064, :end-line 3064, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, set-ondevicelight! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2203, :column 7, :end-line 2203, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive devicelight events. These\n  occur when the device's light level sensor detects a change in\n  intensity of the ambient light level.\n\n  `window.ondevicelight = funcRef\n\n  Where funcRef is a function to be called when the devicelight event occurs. These events are of type `web.DeviceLightEvent`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight`"}, :name web.Window/set-ondevicelight!, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2203, :end-line 2203, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Specifies an event listener to receive devicelight events. These\n  occur when the device's light level sensor detects a change in\n  intensity of the ambient light level.\n\n  `window.ondevicelight = funcRef\n\n  Where funcRef is a function to be called when the devicelight event occurs. These events are of type `web.DeviceLightEvent`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondevicelight`"}, request-animation-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 534, :column 7, :end-line 534, :end-column 30, :arglists (quote ([this callback])), :doc "Method.\n\n  The window.requestAnimationFrame() method tells the browser that\n  wish to perform an animation and requests that the browser call\n  specified function to update an animation before the next repaint.\n  method takes a callback as an argument to be invoked before the\n\n  `window.requestAnimationFrame(callback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame`"}, :name web.Window/request-animation-frame, :variadic false, :file "src/web/Window.cljs", :end-column 30, :method-params ([this callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this callback])), :doc "Method.\n\n  The window.requestAnimationFrame() method tells the browser that\n  wish to perform an animation and requests that the browser call\n  specified function to update an animation before the next repaint.\n  method takes a callback as an argument to be invoked before the\n\n  `window.requestAnimationFrame(callback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame`"}, screen-top {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4499, :column 7, :end-line 4499, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Window.screenTop read-only property returns the vertical\n  in CSS pixels, from the top border of the user's browser viewport\n  the top side of the screen.\n\n  `topWindowPos = window.screenTop`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/screenTop`"}, :name web.Window/screen-top, :variadic false, :file "src/web/Window.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4499, :end-line 4499, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.screenTop read-only property returns the vertical\n  in CSS pixels, from the top border of the user's browser viewport\n  the top side of the screen.\n\n  `topWindowPos = window.screenTop`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/screenTop`"}, set-length! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1391, :column 7, :end-line 1391, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the number of frames (either `web.<frame>` or `web.<iframe>`\n  in the window.\n\n  `framesCount = window.length;\n\n\n  framesCount is the number of frames.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/length`"}, :name web.Window/set-length!, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1391, :end-line 1391, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the number of frames (either `web.<frame>` or `web.<iframe>`\n  in the window.\n\n  `framesCount = window.length;\n\n\n  framesCount is the number of frames.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/length`"}, set-onpointerdown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3314, :column 7, :end-line 3314, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, :name web.Window/set-onpointerdown!, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3314, :end-line 3314, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, set-onkeyup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2724, :column 7, :end-line 2724, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name web.Window/set-onkeyup!, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2724, :end-line 2724, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, set-onpointerout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3434, :column 7, :end-line 3434, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, :name web.Window/set-onpointerout!, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3434, :end-line 3434, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, onvrdisplaypointerunrestricted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4136, :column 7, :end-line 4136, :end-column 37, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplaypointerunrestricted property of the `web.Window`\n  represents an event handler that will run when the VR display's\n  input is no longer restricted to consumption via a pointerlocked\n\n  `window.onvrdisplaypointerunrestricted = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypointerunrestricted`"}, :name web.Window/onvrdisplaypointerunrestricted, :variadic false, :file "src/web/Window.cljs", :end-column 37, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4136, :end-line 4136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplaypointerunrestricted property of the `web.Window`\n  represents an event handler that will run when the VR display's\n  input is no longer restricted to consumption via a pointerlocked\n\n  `window.onvrdisplaypointerunrestricted = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplaypointerunrestricted`"}, screen-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4525, :column 7, :end-line 4525, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Window.screenY read-only property returns the vertical distance,\n  CSS pixels, of the top border of the user's browser viewport\n  the top edge of the screen.\n\n  `topWindowPos = window.screenY`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY`"}, :name web.Window/screen-y, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4525, :end-line 4525, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.screenY read-only property returns the vertical distance,\n  CSS pixels, of the top border of the user's browser viewport\n  the top edge of the screen.\n\n  `topWindowPos = window.screenY`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/screenY`"}, dump {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 219, :column 7, :end-line 219, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  Window.dump() prints messages to the (native) console.\n\n  `window.dump(message);\n\n  dump(message);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/dump`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/dump, :variadic true, :file "src/web/Window.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Window.dump() prints messages to the (native) console.\n\n  `window.dump(message);\n\n  dump(message);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/dump`"}, onanimationend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1716, :column 7, :end-line 1716, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name web.Window/onanimationend, :variadic false, :file "src/web/Window.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1716, :end-line 1716, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, set-directories! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1111, :column 7, :end-line 1111, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returned the window personalbar toolbar object. Use the `web.window.personalbar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/directories`"}, :name web.Window/set-directories!, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1111, :end-line 1111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returned the window personalbar toolbar object. Use the `web.window.personalbar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/directories`"}, local-storage {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1406, :column 7, :end-line 1406, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The read-only localStorage property allows you to access a `web.Storage`\n  for the `web.Document`'s origin; the stored data is saved across\n  sessions.\n\n  `myStorage = window.localStorage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage`"}, :name web.Window/local-storage, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1406, :end-line 1406, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only localStorage property allows you to access a `web.Storage`\n  for the `web.Document`'s origin; the stored data is saved across\n  sessions.\n\n  `myStorage = window.localStorage;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage`"}, get-selection {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 344, :column 7, :end-line 344, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The Window.getSelection() method returns a `web.Selection` object\n  the range of text selected by the user or the current position\n  the caret.\n\n  `selection = window.getSelection();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection`"}, :name web.Window/get-selection, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 344, :end-line 344, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Window.getSelection() method returns a `web.Selection` object\n  the range of text selected by the user or the current position\n  the caret.\n\n  `selection = window.getSelection();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/getSelection`"}, set-ondragdrop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2347, :column 7, :end-line 2347, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for drag and drop events sent to the window.\n\n  `window.ondragdrop = funcRef;\n  window.addEventListener(\\\"dragdrop\\\", funcRef, useCapturing);\n\n\n  funcRef\n  The event handler function to be registered.\n\n\n  The window.ondragdrop property and the ondragdrop attribute are not implemented in Gecko (bug 112288), you have to use addEventListener. See addEventListener for details.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragdrop`"}, :name web.Window/set-ondragdrop!, :variadic false, :file "src/web/Window.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2347, :end-line 2347, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for drag and drop events sent to the window.\n\n  `window.ondragdrop = funcRef;\n  window.addEventListener(\\\"dragdrop\\\", funcRef, useCapturing);\n\n\n  funcRef\n  The event handler function to be registered.\n\n\n  The window.ondragdrop property and the ondragdrop attribute are not implemented in Gecko (bug 112288), you have to use addEventListener. See addEventListener for details.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragdrop`"}, request-file-system {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 548, :column 7, :end-line 548, :end-column 26, :arglists (quote ([this & args])), :doc "Method.\n\n  The non-standard `web.Window` method requestFileSystem() method\n  a Google Chrome-specific method which lets a web site or app\n  access to a sandboxed file system for its own use. The returned\n  is then available for use with the other file system APIs.\n\n  `This method is prefixed with webkit in all browsers that implement it (that is, Google Chrome).\n\n\n\n\n  window.requestFileSystem(type, size, successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/requestFileSystem`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/request-file-system, :variadic true, :file "src/web/Window.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 548, :end-line 548, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The non-standard `web.Window` method requestFileSystem() method\n  a Google Chrome-specific method which lets a web site or app\n  access to a sandboxed file system for its own use. The returned\n  is then available for use with the other file system APIs.\n\n  `This method is prefixed with webkit in all browsers that implement it (that is, Google Chrome).\n\n\n\n\n  window.requestFileSystem(type, size, successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/requestFileSystem`"}, set-moz-inner-screen-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1529, :column 7, :end-line 1529, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  Gets the X coordinate of the top-left corner of the window's\n  in screen coordinates.\n\n  `screenX = window.mozInnerScreenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX`"}, :name web.Window/set-moz-inner-screen-x!, :variadic false, :file "src/web/Window.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1529, :end-line 1529, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Gets the X coordinate of the top-left corner of the window's\n  in screen coordinates.\n\n  `screenX = window.mozInnerScreenX;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/mozInnerScreenX`"}, fetch {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 232, :column 7, :end-line 232, :end-column 12, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, :name web.Window/fetch, :variadic false, :file "src/web/Window.cljs", :end-column 12, :method-params ([this resource init]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this resource init])), :doc "Method.\n\n  The fetch() method of the `web.WindowOrWorkerGlobalScope` mixin\n  the process of fetching a resource from the network, returning\n  promise which is fulfilled once the response is available.\n\n  `fetchResponsePromise = fetch(resource, init);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch`"}, default-status {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1041, :column 7, :end-line 1041, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  Gets/sets the status bar text for the given window.\n\n  `var sMsg = window.defaultStatus;\n  window.defaultStatus = sMsg;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/defaultStatus`"}, :name web.Window/default-status, :variadic false, :file "src/web/Window.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1041, :end-line 1041, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Gets/sets the status bar text for the given window.\n\n  `var sMsg = window.defaultStatus;\n  window.defaultStatus = sMsg;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/defaultStatus`"}, ondragdrop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2328, :column 7, :end-line 2328, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for drag and drop events sent to the window.\n\n  `window.ondragdrop = funcRef;\n  window.addEventListener(\\\"dragdrop\\\", funcRef, useCapturing);\n\n\n  funcRef\n  The event handler function to be registered.\n\n\n  The window.ondragdrop property and the ondragdrop attribute are not implemented in Gecko (bug 112288), you have to use addEventListener. See addEventListener for details.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragdrop`"}, :name web.Window/ondragdrop, :variadic false, :file "src/web/Window.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2328, :end-line 2328, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  An event handler for drag and drop events sent to the window.\n\n  `window.ondragdrop = funcRef;\n  window.addEventListener(\\\"dragdrop\\\", funcRef, useCapturing);\n\n\n  funcRef\n  The event handler function to be registered.\n\n\n  The window.ondragdrop property and the ondragdrop attribute are not implemented in Gecko (bug 112288), you have to use addEventListener. See addEventListener for details.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondragdrop`"}, location {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1419, :column 7, :end-line 1419, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The Window.location read-only property returns a `web.Location`\n  with information about the current location of the document.\n\n  `var oldLocation = location;\n  location = newLocation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/location`"}, :name web.Window/location, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1419, :end-line 1419, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.location read-only property returns a `web.Location`\n  with information about the current location of the document.\n\n  `var oldLocation = location;\n  location = newLocation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/location`"}, outer-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4262, :column 7, :end-line 4262, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Window.outerHeight read-only property returns the height\n  pixels of the whole browser window, including any sidebar, window\n  and window-resizing borders/handles.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight`"}, :name web.Window/outer-height, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4262, :end-line 4262, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.outerHeight read-only property returns the height\n  pixels of the whole browser window, including any sidebar, window\n  and window-resizing borders/handles.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight`"}, set-ondeviceorientation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2257, :column 7, :end-line 2257, :end-column 31, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the deviceorientation event, which contains\n  about a relative device orientation change.\n\n  `window.ondeviceorientation = function(event) { ... };\n  window.addEventListener('deviceorientation', function(event) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation`"}, :name web.Window/set-ondeviceorientation!, :variadic false, :file "src/web/Window.cljs", :end-column 31, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2257, :end-line 2257, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  An event handler for the deviceorientation event, which contains\n  about a relative device orientation change.\n\n  `window.ondeviceorientation = function(event) { ... };\n  window.addEventListener('deviceorientation', function(event) { ... });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ondeviceorientation`"}, is-secure-context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1352, :column 7, :end-line 1352, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The window.isSecureContext read-only property indicates whether\n  context is capable of using features that require secure contexts.\n\n  `var isSecure = window.isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext`"}, :name web.Window/is-secure-context, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1352, :end-line 1352, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The window.isSecureContext read-only property indicates whether\n  context is capable of using features that require secure contexts.\n\n  `var isSecure = window.isSecureContext`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/isSecureContext`"}, onvrdisplayconnect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4004, :column 7, :end-line 4004, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplayconnect property of the `web.Window` interface\n  an event handler that will run when a compatible VR display has\n  connected to the computer (when the vrdisplayconnect event fires).\n\n  `window.onvrdisplayconnect = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect`"}, :name web.Window/onvrdisplayconnect, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4004, :end-line 4004, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplayconnect property of the `web.Window` interface\n  an event handler that will run when a compatible VR display has\n  connected to the computer (when the vrdisplayconnect event fires).\n\n  `window.onvrdisplayconnect = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayconnect`"}, onrejectionhandled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3534, :column 7, :end-line 3534, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, :name web.Window/onrejectionhandled, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3534, :end-line 3534, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, set-onrejectionhandled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3548, :column 7, :end-line 3548, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, :name web.Window/set-onrejectionhandled!, :variadic false, :file "src/web/Window.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3548, :end-line 3548, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onrejectionhandled property of the `web.WindowEventHandlers`\n  is the `web.EventHandler` for processing rejectionhandled events.\n  events are raised when `web.Promise`s are rejected.\n\n  `window.addEventListener(\\\"rejectionhandled\\\", function(event) { ... });\n  window.onrejectionhandled = function(event) { ...};`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onrejectionhandled`"}, self {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4676, :column 7, :end-line 4676, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The Window.self read-only property returns the window itself,\n  a `web.WindowProxy`. It can be used with dot notation on a window\n  (that is, window.self) or standalone (self). The advantage of\n  standalone notation is that a similar notation exists for non-window\n  such as in Web Workers. By using self, you can refer to the global\n  in a way that will work not only in a window context (self will\n  to window.self) but also in a worker context (self will then\n  to `web.WorkerGlobalScope.self`).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/self`"}, :name web.Window/self, :variadic false, :file "src/web/Window.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4676, :end-line 4676, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.self read-only property returns the window itself,\n  a `web.WindowProxy`. It can be used with dot notation on a window\n  (that is, window.self) or standalone (self). The advantage of\n  standalone notation is that a similar notation exists for non-window\n  such as in Web Workers. By using self, you can refer to the global\n  in a way that will work not only in a window context (self will\n  to window.self) but also in a worker context (self will then\n  to `web.WorkerGlobalScope.self`).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/self`"}, onvrdisplayactivate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3946, :column 7, :end-line 3946, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplayactivate property of the `web.Window` interface\n  an event handler that will run when a display is able to be presented\n  (when the vrdisplayactivate event fires), for example if an HMD\n  been moved to bring it out of standby, or woken up by being put\n\n  `window.onvrdisplayactivate = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate`"}, :name web.Window/onvrdisplayactivate, :variadic false, :file "src/web/Window.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3946, :end-line 3946, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onvrdisplayactivate property of the `web.Window` interface\n  an event handler that will run when a display is able to be presented\n  (when the vrdisplayactivate event fires), for example if an HMD\n  been moved to bring it out of standby, or woken up by being put\n\n  `window.onvrdisplayactivate = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/onvrdisplayactivate`"}, onselectstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3682, :column 7, :end-line 3682, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name web.Window/onselectstart, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3682, :end-line 3682, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, set-pkcs-11! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4445, :column 7, :end-line 4445, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the pkcs11 object, which is used to install drivers and\n  software associated with the pkcs11 protocol. If pkcs11 isn't\n  this property returns null.\n\n  `objRef = window.pkcs11`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pkcs11`"}, :name web.Window/set-pkcs-11!, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4445, :end-line 4445, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the pkcs11 object, which is used to install drivers and\n  software associated with the pkcs11 protocol. If pkcs11 isn't\n  this property returns null.\n\n  `objRef = window.pkcs11`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pkcs11`"}, set-onselect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3646, :column 7, :end-line 3646, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name web.Window/set-onselect!, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3646, :end-line 3646, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, move-by {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 392, :column 7, :end-line 392, :end-column 14, :arglists (quote ([this delta-x delta-y])), :doc "Method.\n\n  The moveBy() method of the `web.Window` interface moves the current\n  by a specified amount.\n\n  `window.moveBy(deltaX, deltaY)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy`"}, :name web.Window/move-by, :variadic false, :file "src/web/Window.cljs", :end-column 14, :method-params ([this delta-x delta-y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this delta-x delta-y])), :doc "Method.\n\n  The moveBy() method of the `web.Window` interface moves the current\n  by a specified amount.\n\n  `window.moveBy(deltaX, deltaY)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/moveBy`"}, open-dialog {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 430, :column 7, :end-line 430, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  window.openDialog() is an extension to `web.window.open()`. It\n  the same, except that it can optionally take one or more parameters\n  windowFeatures, and windowFeatures itself is treated a little\n\n  `newWindow = openDialog(url, name, features, arg1, arg2, ...)\n\n\n  newWindow\n  The opened window\n  url\n  The URL to be loaded in the newly opened window.\n  name\n  The window name (optional). See `web.window.open()` description for detailed information.\n  features\n  See `web.window.open()` for details.\n  arg1, arg2, ...\n  The arguments to be passed to the new window (optional).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/open-dialog, :variadic true, :file "src/web/Window.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 430, :end-line 430, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  window.openDialog() is an extension to `web.window.open()`. It\n  the same, except that it can optionally take one or more parameters\n  windowFeatures, and windowFeatures itself is treated a little\n\n  `newWindow = openDialog(url, name, features, arg1, arg2, ...)\n\n\n  newWindow\n  The opened window\n  url\n  The URL to be loaded in the newly opened window.\n  name\n  The window name (optional). See `web.window.open()` description for detailed information.\n  features\n  See `web.window.open()` for details.\n  arg1, arg2, ...\n  The arguments to be passed to the new window (optional).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/openDialog`"}, convert-point-from-node-to-page {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 175, :column 7, :end-line 175, :end-column 38, :arglists (quote ([this node node-point])), :doc "Method.\n\n  Given a `web.Point` specified in a particular DOM `web.Node`'s\n  system, the `web.Window` method convertPointFromNodeToPage()\n  a Point which specifies the same position in the page's coordinate\n  This method is non-standard and should not be used.\n\n  `Point = Window.convertPointFromNodeToPage(node, nodePoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromNodeToPage`"}, :name web.Window/convert-point-from-node-to-page, :variadic false, :file "src/web/Window.cljs", :end-column 38, :method-params ([this node node-point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 175, :end-line 175, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this node node-point])), :doc "Method.\n\n  Given a `web.Point` specified in a particular DOM `web.Node`'s\n  system, the `web.Window` method convertPointFromNodeToPage()\n  a Point which specifies the same position in the page's coordinate\n  This method is non-standard and should not be used.\n\n  `Point = Window.convertPointFromNodeToPage(node, nodePoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromNodeToPage`"}, set-menubar! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1479, :column 7, :end-line 1479, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.menubar property returns the menubar object, whose\n  can be checked.\n\n  `objRef = window.menubar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar`"}, :name web.Window/set-menubar!, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1479, :end-line 1479, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.menubar property returns the menubar object, whose\n  can be checked.\n\n  `objRef = window.menubar`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/menubar`"}, resize-by {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 584, :column 7, :end-line 584, :end-column 16, :arglists (quote ([this x-delta y-delta])), :doc "Method.\n\n  The Window.resizeBy() method resizes the current window by a\n  amount.\n\n  `window.resizeBy(xDelta, yDelta)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy`"}, :name web.Window/resize-by, :variadic false, :file "src/web/Window.cljs", :end-column 16, :method-params ([this x-delta y-delta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 584, :end-line 584, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x-delta y-delta])), :doc "Method.\n\n  The Window.resizeBy() method resizes the current window by a\n  amount.\n\n  `window.resizeBy(xDelta, yDelta)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/resizeBy`"}, get-computed-style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 309, :column 7, :end-line 309, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The Window.getComputedStyle() method returns an object containing\n  values of all CSS properties of an element, after applying active\n  and resolving any basic computation those values may contain.\n\n  `var style = window.getComputedStyle(element [, pseudoElt]);\n\n\n  element\n  The `web.Element` for which to get the computed style.\n  pseudoEltOptional\n  A string specifying the pseudo-element to match. Omitted (or null) for real elements.\n\n\n  The returned style is a live `css.CSSStyleDeclaration` object, which updates automatically when the element's styles are changed.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/get-computed-style, :variadic true, :file "src/web/Window.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Window.getComputedStyle() method returns an object containing\n  values of all CSS properties of an element, after applying active\n  and resolving any basic computation those values may contain.\n\n  `var style = window.getComputedStyle(element [, pseudoElt]);\n\n\n  element\n  The `web.Element` for which to get the computed style.\n  pseudoEltOptional\n  A string specifying the pseudo-element to match. Omitted (or null) for real elements.\n\n\n  The returned style is a live `css.CSSStyleDeclaration` object, which updates automatically when the element's styles are changed.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle`"}, set-onselectstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3694, :column 7, :end-line 3694, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name web.Window/set-onselectstart!, :variadic false, :file "src/web/Window.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3694, :end-line 3694, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, scroll-by-pages {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 665, :column 7, :end-line 665, :end-column 22, :arglists (quote ([this pages])), :doc "Method.\n\n  The Window.scrollByPages() method scrolls the current document\n  the specified number of pages.\n\n  `window.scrollByPages(pages)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages`"}, :name web.Window/scroll-by-pages, :variadic false, :file "src/web/Window.cljs", :end-column 22, :method-params ([this pages]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 665, :end-line 665, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this pages])), :doc "Method.\n\n  The Window.scrollByPages() method scrolls the current document\n  the specified number of pages.\n\n  `window.scrollByPages(pages)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByPages`"}, set-ongamepadconnected! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2487, :column 7, :end-line 2487, :end-column 30, :arglists (quote ([this val])), :doc "Property.\n\n  The ongamepadconnected property of the `web.Window` interface\n  an event handler that will run when a gamepad is connected (when\n  gamepadconnected event fires).\n\n  `window.ongamepadconnected = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ongamepadconnected`"}, :name web.Window/set-ongamepadconnected!, :variadic false, :file "src/web/Window.cljs", :end-column 30, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2487, :end-line 2487, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ongamepadconnected property of the `web.Window` interface\n  an event handler that will run when a gamepad is connected (when\n  gamepadconnected event fires).\n\n  `window.ongamepadconnected = function() { ... };`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/ongamepadconnected`"}, scroll-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 677, :column 7, :end-line 677, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  Window.scrollTo() scrolls to a particular set of coordinates\n  the document.\n\n  `window.scrollTo(x-coord, y-coord)\n  window.scrollTo(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/scroll-to, :variadic true, :file "src/web/Window.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 677, :end-line 677, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Window.scrollTo() scrolls to a particular set of coordinates\n  the document.\n\n  `window.scrollTo(x-coord, y-coord)\n  window.scrollTo(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo`"}, onplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3240, :column 7, :end-line 3240, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name web.Window/onplay, :variadic false, :file "src/web/Window.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3240, :end-line 3240, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, show-modal-dialog {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 749, :column 7, :end-line 749, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The Window.showModalDialog() creates and displays a modal dialog\n  containing a specified HTML document.\n\n  `returnVal = window.showModalDialog(uri[, arguments][, options]);\n\n  where\n\n\n  returnVal is a variant, indicating the returnValue property as set by the window of the document specified by uri.\n  uri is the URI of the document to display in the dialog box.\n  arguments is an optional variant that contains values that should be passed to the dialog box; these are made available in the window object's window.dialogArguments property.\n  options an optional string that specifies window ornamentation for the dialog box, using one or more semicolon delimited values:\n\n\n\n\n\n  Syntax\n  Description\n\n\n  center: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window is centered on the desktop; otherwise it's hidden. The default value is yes.\n\n\n  dialogheight: height\n  Specifies the height of the dialog box; by default, the size is specified in pixels.\n\n\n  dialogleft: left\n  Specifies the horizontal position of the dialog box in relation to the upper-left corner of the desktop.\n\n\n  dialogwidth: width\n  Specifies the width of the dialog box; by default, the size is specified in pixels.\n\n\n  dialogtop: top\n  Specifies the vertical position of the dialog box in relation to the upper-left corner of the desktop.\n\n\n  resizable: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window can be resized by the user; otherwise its size is fixed. The default value is no.\n\n\n  scroll: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window has scroll bars; otherwise its size is fixed. The default value is no.\n\n\n\n\n  Note: Firefox does not implement the dialogHide, edge, status, or unadorned arguments.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/show-modal-dialog, :variadic true, :file "src/web/Window.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 749, :end-line 749, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Window.showModalDialog() creates and displays a modal dialog\n  containing a specified HTML document.\n\n  `returnVal = window.showModalDialog(uri[, arguments][, options]);\n\n  where\n\n\n  returnVal is a variant, indicating the returnValue property as set by the window of the document specified by uri.\n  uri is the URI of the document to display in the dialog box.\n  arguments is an optional variant that contains values that should be passed to the dialog box; these are made available in the window object's window.dialogArguments property.\n  options an optional string that specifies window ornamentation for the dialog box, using one or more semicolon delimited values:\n\n\n\n\n\n  Syntax\n  Description\n\n\n  center: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window is centered on the desktop; otherwise it's hidden. The default value is yes.\n\n\n  dialogheight: height\n  Specifies the height of the dialog box; by default, the size is specified in pixels.\n\n\n  dialogleft: left\n  Specifies the horizontal position of the dialog box in relation to the upper-left corner of the desktop.\n\n\n  dialogwidth: width\n  Specifies the width of the dialog box; by default, the size is specified in pixels.\n\n\n  dialogtop: top\n  Specifies the vertical position of the dialog box in relation to the upper-left corner of the desktop.\n\n\n  resizable: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window can be resized by the user; otherwise its size is fixed. The default value is no.\n\n\n  scroll: {on | off | yes | no | 1 | 0 }\n  If this argument's value is on, yes, or 1, the dialog window has scroll bars; otherwise its size is fixed. The default value is no.\n\n\n\n\n  Note: Firefox does not implement the dialogHide, edge, status, or unadorned arguments.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/showModalDialog`"}, onloadstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2874, :column 7, :end-line 2874, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name web.Window/onloadstart, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2874, :end-line 2874, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, set-outer-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4273, :column 7, :end-line 4273, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.outerHeight read-only property returns the height\n  pixels of the whole browser window, including any sidebar, window\n  and window-resizing borders/handles.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight`"}, :name web.Window/set-outer-height!, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4273, :end-line 4273, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.outerHeight read-only property returns the height\n  pixels of the whole browser window, including any sidebar, window\n  and window-resizing borders/handles.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/outerHeight`"}, set-onloadstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2888, :column 7, :end-line 2888, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name web.Window/set-onloadstart!, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2888, :end-line 2888, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, set-orientation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4984, :column 7, :end-line 4984, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the orientation in degrees (in 90-degree increments)\n  the viewport relative to the device's natural orientation.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation`"}, :name web.Window/set-orientation!, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4984, :end-line 4984, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the orientation in degrees (in 90-degree increments)\n  the viewport relative to the device's natural orientation.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/orientation`"}, update-commands {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 835, :column 7, :end-line 835, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  Updates the state of commands of the current chrome window (UI).\n\n  `window.updateCommands(\\\"sCommandName\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/update-commands, :variadic true, :file "src/web/Window.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 835, :end-line 835, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  Updates the state of commands of the current chrome window (UI).\n\n  `window.updateCommands(\\\"sCommandName\\\")`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/updateCommands`"}, convert-point-from-page-to-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 189, :column 7, :end-line 189, :end-column 38, :arglists (quote ([this node page-point])), :doc "Method.\n\n  Given a `web.Point` specified in the page's coordinate system,\n  `web.Window` method convertPointFromPageToNode() returns a Point\n  specifying the same location in the coordinate system of the\n  DOM `web.Node`.\n\n  `Point = Window.convertPointFromPageToNode(node, pagePoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromPageToNode`"}, :name web.Window/convert-point-from-page-to-node, :variadic false, :file "src/web/Window.cljs", :end-column 38, :method-params ([this node page-point]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this node page-point])), :doc "Method.\n\n  Given a `web.Point` specified in the page's coordinate system,\n  `web.Window` method convertPointFromPageToNode() returns a Point\n  specifying the same location in the coordinate system of the\n  DOM `web.Node`.\n\n  `Point = Window.convertPointFromPageToNode(node, pagePoint);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/convertPointFromPageToNode`"}, scroll-by-lines {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 653, :column 7, :end-line 653, :end-column 22, :arglists (quote ([this lines])), :doc "Method.\n\n  The Window.scrollByLines() method scrolls the document by the\n  number of lines.\n\n  `window.scrollByLines(lines)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines`"}, :name web.Window/scroll-by-lines, :variadic false, :file "src/web/Window.cljs", :end-column 22, :method-params ([this lines]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this lines])), :doc "Method.\n\n  The Window.scrollByLines() method scrolls the document by the\n  number of lines.\n\n  `window.scrollByLines(lines)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollByLines`"}, page-x-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4306, :column 7, :end-line 4306, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.Window` property pageXOffset is an alias for\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset`"}, :name web.Window/page-x-offset, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4306, :end-line 4306, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `web.Window` property pageXOffset is an alias for\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/pageXOffset`"}, set-frames! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1215, :column 7, :end-line 1215, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the window itself, which is an array-like object, listing\n  direct sub-frames of the current window.\n\n  `frameList = window.frames;\n\n\n  frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation.\n  frameList === window evaluates to true.\n  Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[0] is the same thing as document.getElementsByTagName(\\\"iframe\\\")[0].contentWindow).\n  For more details about the returned value, refer to this thread on mozilla.dev.platform [dead link].`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/frames`"}, :name web.Window/set-frames!, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1215, :end-line 1215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns the window itself, which is an array-like object, listing\n  direct sub-frames of the current window.\n\n  `frameList = window.frames;\n\n\n  frameList is a list of frame objects. It is similar to an array in that it has a length property and its items can be accessed using the [i] notation.\n  frameList === window evaluates to true.\n  Each item in the window.frames pseudo-array represents the window object corresponding to the given <frame>'s or <iframe>'s content, not the (i)frame DOM element (i.e., window.frames[0] is the same thing as document.getElementsByTagName(\\\"iframe\\\")[0].contentWindow).\n  For more details about the returned value, refer to this thread on mozilla.dev.platform [dead link].`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/frames`"}, set-scrollbars! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4550, :column 7, :end-line 4550, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.scrollbars property returns the scrollbars object,\n  visibility can be checked.\n\n  `objRef = window.scrollbars`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars`"}, :name web.Window/set-scrollbars!, :variadic false, :file "src/web/Window.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4550, :end-line 4550, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Window.scrollbars property returns the scrollbars object,\n  visibility can be checked.\n\n  `objRef = window.scrollbars`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollbars`"}, inner-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1304, :column 7, :end-line 1304, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  Height (in pixels) of the browser window viewport including,\n  rendered, the horizontal scrollbar.\n\n  `var intViewportHeight = window.innerHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight`"}, :name web.Window/inner-height, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1304, :end-line 1304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Height (in pixels) of the browser window viewport including,\n  rendered, the horizontal scrollbar.\n\n  `var intViewportHeight = window.innerHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/innerHeight`"}, set-inner-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1340, :column 7, :end-line 1340, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  Width (in pixels) of the browser window viewport including, if\n  the vertical scrollbar.\n\n  `var intViewportWidth = window.innerWidth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth`"}, :name web.Window/set-inner-width!, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1340, :end-line 1340, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Width (in pixels) of the browser window viewport including, if\n  the vertical scrollbar.\n\n  `var intViewportWidth = window.innerWidth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/innerWidth`"}, onpointercancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3270, :column 7, :end-line 3270, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name web.Window/onpointercancel, :variadic false, :file "src/web/Window.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3270, :end-line 3270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, set-onscroll! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3622, :column 7, :end-line 3622, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name web.Window/set-onscroll!, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3622, :end-line 3622, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, onpointerleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3358, :column 7, :end-line 3358, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, :name web.Window/onpointerleave, :variadic false, :file "src/web/Window.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3358, :end-line 3358, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2098, :column 7, :end-line 2098, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, :name web.Window/set-onclose!, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2098, :end-line 2098, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, open {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 416, :column 7, :end-line 416, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.Window` interface's open() method loads the specified\n  into the browsing context (window, `web.<iframe>` or tab) with\n  specified name. If the name doesn't exist, then a new window\n  opened and the specified resource is loaded into its browsing\n\n  `var window = window.open(url, windowName, [windowFeatures]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/open`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/open, :variadic true, :file "src/web/Window.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 416, :end-line 416, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.Window` interface's open() method loads the specified\n  into the browsing context (window, `web.<iframe>` or tab) with\n  specified name. If the name doesn't exist, then a new window\n  opened and the specified resource is loaded into its browsing\n\n  `var window = window.open(url, windowName, [windowFeatures]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/open`"}, onmouseup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3136, :column 7, :end-line 3136, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, :name web.Window/onmouseup, :variadic false, :file "src/web/Window.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3136, :end-line 3136, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, find {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 245, :column 7, :end-line 245, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The Window.find() method finds a string in a window.\n\n  `window.find(aString, aCaseSensitive, aBackwards, aWrapAround,\n  aWholeWord, aSearchInFrames, aShowDialog);\n\n\n  aString\n  The text string for which to search.\n  aCaseSensitive\n  `web.Boolean`. If true, specifies a case-sensitive search.\n  aBackwards\n  `web.Boolean`. If true, specifies a backward search.\n  aWrapAround\n  `web.Boolean`. If true, specifies a wrap around search.\n  aWholeWord Unimplemented\n  `web.Boolean`. If true, specifies a whole word search. This is not implemented; see bug 481513.\n  aSearchInFrames\n  `web.Boolean`. If true, specifies a search in frames.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/find`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/find, :variadic true, :file "src/web/Window.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Window.find() method finds a string in a window.\n\n  `window.find(aString, aCaseSensitive, aBackwards, aWrapAround,\n  aWholeWord, aSearchInFrames, aShowDialog);\n\n\n  aString\n  The text string for which to search.\n  aCaseSensitive\n  `web.Boolean`. If true, specifies a case-sensitive search.\n  aBackwards\n  `web.Boolean`. If true, specifies a backward search.\n  aWrapAround\n  `web.Boolean`. If true, specifies a wrap around search.\n  aWholeWord Unimplemented\n  `web.Boolean`. If true, specifies a whole word search. This is not implemented; see bug 481513.\n  aSearchInFrames\n  `web.Boolean`. If true, specifies a search in frames.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/find`"}, onselectionchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3658, :column 7, :end-line 3658, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name web.Window/onselectionchange, :variadic false, :file "src/web/Window.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3658, :end-line 3658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, controllers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 951, :column 7, :end-line 951, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The controllers property of the `web.Window` interface returns\n  XUL controllers of the chrome window.\n\n  `controllers = window.controllers\n\n\n  controllers is an object of type `web.XULControllers` (`web.nsIControllers`).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers`"}, :name web.Window/controllers, :variadic false, :file "src/web/Window.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 951, :end-line 951, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The controllers property of the `web.Window` interface returns\n  XUL controllers of the chrome window.\n\n  `controllers = window.controllers\n\n\n  controllers is an object of type `web.XULControllers` (`web.nsIControllers`).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/controllers`"}, set-oninput! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2624, :column 7, :end-line 2624, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, :name web.Window/set-oninput!, :variadic false, :file "src/web/Window.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2624, :end-line 2624, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, confirm {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 159, :column 7, :end-line 159, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The Window.confirm() method displays a modal dialog with an optional\n  and two buttons: OK and Cancel.\n\n  `result = window.confirm(message);\n\n\n  message is an optional string to display in the dialog.\n  result is a boolean indicating whether OK (true) or Cancel (false) was selected. If a browser is ignoring in-page dialogs, then result is always false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Window/confirm, :variadic true, :file "src/web/Window.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 159, :end-line 159, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Window.confirm() method displays a modal dialog with an optional\n  and two buttons: OK and Cancel.\n\n  `result = window.confirm(message);\n\n\n  message is an optional string to display in the dialog.\n  result is a boolean indicating whether OK (true) or Cancel (false) was selected. If a browser is ignoring in-page dialogs, then result is always false.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/confirm`"}, set-top! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 4877, :column 7, :end-line 4877, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a reference to the topmost window in the window hierarchy.\n\n  `var topWindow = window.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/top`"}, :name web.Window/set-top!, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4877, :end-line 4877, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Returns a reference to the topmost window in the window hierarchy.\n\n  `var topWindow = window.top;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/top`"}, set-onstorage! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3718, :column 7, :end-line 3718, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, :name web.Window/set-onstorage!, :variadic false, :file "src/web/Window.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3718, :end-line 3718, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onstorage property of the `web.WindowEventHandlers` mixin\n  an `web.EventHandler` for processing storage events.\n\n  `window.onstorage = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onstorage`"}, onloadedmetadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2816, :column 7, :end-line 2816, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, :name web.Window/onloadedmetadata, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2816, :end-line 2816, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, ontouchcancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3754, :column 7, :end-line 3754, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name web.Window/ontouchcancel, :variadic false, :file "src/web/Window.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3754, :end-line 3754, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, set-onpointercancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 3284, :column 7, :end-line 3284, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name web.Window/set-onpointercancel!, :variadic false, :file "src/web/Window.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3284, :end-line 3284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, closed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 913, :column 7, :end-line 913, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The Window.closed read-only property indicates whether the referenced\n  is closed or not.\n\n  `isClosed = windowRef.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/closed`"}, :name web.Window/closed, :variadic false, :file "src/web/Window.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Window.closed read-only property indicates whether the referenced\n  is closed or not.\n\n  `isClosed = windowRef.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/closed`"}, set-full-screen! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 1248, :column 7, :end-line 1248, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The fullScreen property of the Window interface indicates whether\n  window is displayed in full screen mode or not. It is only reliable\n  Gecko 1.9 (Firefox 3) and later; see the Notes below.\n\n  `isInFullScreen = windowRef.fullScreen;\n\n  With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen`"}, :name web.Window/set-full-screen!, :variadic false, :file "src/web/Window.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1248, :end-line 1248, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The fullScreen property of the Window interface indicates whether\n  window is displayed in full screen mode or not. It is only reliable\n  Gecko 1.9 (Firefox 3) and later; see the Notes below.\n\n  `isInFullScreen = windowRef.fullScreen;\n\n  With chrome privileges, the property is read-write, otherwise it is read-only. Bear in mind that if you try to set this property without chrome privileges, it will not throw an exception and instead just silently fail. This is to prevent scripts designed to set this property in Internet Explorer from breaking.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Window/fullScreen`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Window.cljs", :line 2034, :column 7, :end-line 2034, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name web.Window/onchange, :variadic false, :file "src/web/Window.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2034, :end-line 2034, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Window interface represents a window containing a DOM document;\n  document property points to the DOM document loaded in that window."}