{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name web.Selection, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {collapse-to-end {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 31, :column 7, :end-line 31, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.collapseToEnd() method collapses the selection\n  the end of the last range in the selection. If the content of\n  selection is focused and editable, the caret will blink there.\n\n  `sel.collapseToEnd()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd`"}, :name web.Selection/collapse-to-end, :variadic false, :file "src/web/Selection.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.collapseToEnd() method collapses the selection\n  the end of the last range in the selection. If the content of\n  selection is focused and editable, the caret will blink there.\n\n  `sel.collapseToEnd()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToEnd`"}, remove-all-ranges {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 119, :column 7, :end-line 119, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.removeAllRanges() method removes all ranges from\n  selection, leaving the `web.anchorNode` and `web.focusNode` properties\n  to null and leaving nothing selected.\n\n  `sel.removeAllRanges();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges`"}, :name web.Selection/remove-all-ranges, :variadic false, :file "src/web/Selection.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.removeAllRanges() method removes all ranges from\n  selection, leaving the `web.anchorNode` and `web.focusNode` properties\n  to null and leaving nothing selected.\n\n  `sel.removeAllRanges();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeAllRanges`"}, modify {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([this alter direction granularity])), :doc "Method.\n\n  The Selection.modify() method applies a change to the current\n  or cursor position, using simple textual commands.\n\n  `sel.modify(alter, direction, granularity)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/modify`"}, :name web.Selection/modify, :variadic false, :file "src/web/Selection.cljs", :end-column 13, :method-params ([this alter direction granularity]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this alter direction granularity])), :doc "Method.\n\n  The Selection.modify() method applies a change to the current\n  or cursor position, using simple textual commands.\n\n  `sel.modify(alter, direction, granularity)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/modify`"}, set-base-and-extent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 155, :column 7, :end-line 155, :end-column 26, :arglists (quote ([this anchor-node anchor-offset focus-node focus-offset])), :doc "Method.\n\n  The setBaseAndExtent() method of the `web.Selection` interface\n  the selection to be a range including all or parts of two specified\n  nodes, and any content located between them.\n\n  `sel.setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/setBaseAndExtent`"}, :name web.Selection/set-base-and-extent, :variadic false, :file "src/web/Selection.cljs", :end-column 26, :method-params ([this anchor-node anchor-offset focus-node focus-offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this anchor-node anchor-offset focus-node focus-offset])), :doc "Method.\n\n  The setBaseAndExtent() method of the `web.Selection` interface\n  the selection to be a range including all or parts of two specified\n  nodes, and any content located between them.\n\n  `sel.setBaseAndExtent(anchorNode,anchorOffset,focusNode,focusOffset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/setBaseAndExtent`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 266, :column 7, :end-line 266, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Selection` interface\n  a `dom.DOMString` describing the type of the current selection.\n\n  `value = sel.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/type`"}, :name web.Selection/set-type!, :variadic false, :file "src/web/Selection.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.Selection` interface\n  a `dom.DOMString` describing the type of the current selection.\n\n  `value = sel.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/type`"}, anchor-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 192, :column 7, :end-line 192, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.anchorOffset read-only property returns the number\n  characters that the selection's anchor is offset within the `web.Selection.anchorNode`.\n\n  `number = sel.anchorOffset`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset`"}, :name web.Selection/anchor-offset, :variadic false, :file "src/web/Selection.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 192, :end-line 192, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.anchorOffset read-only property returns the number\n  characters that the selection's anchor is offset within the `web.Selection.anchorNode`.\n\n  `number = sel.anchorOffset`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorOffset`"}, range-count {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 242, :column 7, :end-line 242, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.rangeCount read-only property returns the number\n  ranges in the selection.\n\n  `value = sel.rangeCount`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount`"}, :name web.Selection/range-count, :variadic false, :file "src/web/Selection.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.rangeCount read-only property returns the number\n  ranges in the selection.\n\n  `value = sel.rangeCount`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/rangeCount`"}, focus-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 216, :column 7, :end-line 216, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.focusOffset read-only property returns the number\n  characters that the selection's focus is offset within the `web.Selection.focusNode`.\n\n  `offset = sel.focusOffset`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset`"}, :name web.Selection/focus-offset, :variadic false, :file "src/web/Selection.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.focusOffset read-only property returns the number\n  characters that the selection's focus is offset within the `web.Selection.focusNode`.\n\n  `offset = sel.focusOffset`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusOffset`"}, remove-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 132, :column 7, :end-line 132, :end-column 19, :arglists (quote ([this range])), :doc "Method.\n\n  The Selection.removeRange() method removes a range from a selection.\n\n  `sel.removeRange(range)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange`"}, :name web.Selection/remove-range, :variadic false, :file "src/web/Selection.cljs", :end-column 19, :method-params ([this range]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this range])), :doc "Method.\n\n  The Selection.removeRange() method removes a range from a selection.\n\n  `sel.removeRange(range)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/removeRange`"}, extend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 81, :column 7, :end-line 81, :end-column 13, :arglists (quote ([this node offset])), :doc "Method.\n\n  The Selection.extend() method moves the focus of the selection\n  a specified point. The anchor of the selection does not move.\n  selection will be from the anchor to the new focus, regardless\n  direction.\n\n  `sel.extend(node, offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/extend`"}, :name web.Selection/extend, :variadic false, :file "src/web/Selection.cljs", :end-column 13, :method-params ([this node offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this node offset])), :doc "Method.\n\n  The Selection.extend() method moves the focus of the selection\n  a specified point. The anchor of the selection does not move.\n  selection will be from the anchor to the new focus, regardless\n  direction.\n\n  `sel.extend(node, offset)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/extend`"}, to-string {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 168, :column 7, :end-line 168, :end-column 16, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.toString() method returns a string currently being\n  by the selection object, i.e. the currently selected text.\n\n  `sel.toString()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/toString`"}, :name web.Selection/to-string, :variadic false, :file "src/web/Selection.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.toString() method returns a string currently being\n  by the selection object, i.e. the currently selected text.\n\n  `sel.toString()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/toString`"}, add-range {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 7, :column 7, :end-line 7, :end-column 16, :arglists (quote ([this range])), :doc "Method.\n\n  The Selection.addRange() method adds a `web.Range` to a `web.Selection`.\n\n  `selection.addRange(range);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange`"}, :name web.Selection/add-range, :variadic false, :file "src/web/Selection.cljs", :end-column 16, :method-params ([this range]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this range])), :doc "Method.\n\n  The Selection.addRange() method adds a `web.Range` to a `web.Selection`.\n\n  `selection.addRange(range);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/addRange`"}, contains-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 57, :column 7, :end-line 57, :end-column 20, :arglists (quote ([this node partial-containment])), :doc "Method.\n\n  The Selection.containsNode() method indicates whether a specfied\n  is part of the selection.\n\n  `sel.containsNode(node, partialContainment)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode`"}, :name web.Selection/contains-node, :variadic false, :file "src/web/Selection.cljs", :end-column 20, :method-params ([this node partial-containment]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this node partial-containment])), :doc "Method.\n\n  The Selection.containsNode() method indicates whether a specfied\n  is part of the selection.\n\n  `sel.containsNode(node, partialContainment)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/containsNode`"}, select-all-children {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 143, :column 7, :end-line 143, :end-column 26, :arglists (quote ([this parent-node])), :doc "Method.\n\n  The Selection.selectAllChildren() method adds all the children\n  the specified node to the selection. Previous selection is lost.\n\n  `sel.selectAllChildren(parentNode)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren`"}, :name web.Selection/select-all-children, :variadic false, :file "src/web/Selection.cljs", :end-column 26, :method-params ([this parent-node]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this parent-node])), :doc "Method.\n\n  The Selection.selectAllChildren() method adds all the children\n  the specified node to the selection. Previous selection is lost.\n\n  `sel.selectAllChildren(parentNode)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/selectAllChildren`"}, is-collapsed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 228, :column 7, :end-line 228, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.isCollapsed read-only property returns a `web.Boolean`\n  indicates whether or not there is currently any text selected.\n  text is selected when the selection's start and end points are\n  the same position in the content.\n\n  `bool = sel.isCollapsed`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed`"}, :name web.Selection/is-collapsed, :variadic false, :file "src/web/Selection.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 228, :end-line 228, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.isCollapsed read-only property returns a `web.Boolean`\n  indicates whether or not there is currently any text selected.\n  text is selected when the selection's start and end points are\n  the same position in the content.\n\n  `bool = sel.isCollapsed`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/isCollapsed`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 254, :column 7, :end-line 254, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Selection` interface\n  a `dom.DOMString` describing the type of the current selection.\n\n  `value = sel.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/type`"}, :name web.Selection/type, :variadic false, :file "src/web/Selection.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.Selection` interface\n  a `dom.DOMString` describing the type of the current selection.\n\n  `value = sel.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/type`"}, delete-from-document {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 69, :column 7, :end-line 69, :end-column 27, :arglists (quote ([this])), :doc "Method.\n\n  The deleteFromDocument() method of the `web.Selection` interface\n  the selected text from the document's DOM.\n\n  `sel.deleteFromDocument()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument`"}, :name web.Selection/delete-from-document, :variadic false, :file "src/web/Selection.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 69, :end-line 69, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The deleteFromDocument() method of the `web.Selection` interface\n  the selected text from the document's DOM.\n\n  `sel.deleteFromDocument()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/deleteFromDocument`"}, get-range-at {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 95, :column 7, :end-line 95, :end-column 19, :arglists (quote ([this index])), :doc "Method.\n\n  The Selection.getRangeAt() method returns a range object representing\n  of the ranges currently selected.\n\n  `range = sel.getRangeAt(index)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt`"}, :name web.Selection/get-range-at, :variadic false, :file "src/web/Selection.cljs", :end-column 19, :method-params ([this index]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this index])), :doc "Method.\n\n  The Selection.getRangeAt() method returns a range object representing\n  of the ranges currently selected.\n\n  `range = sel.getRangeAt(index)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/getRangeAt`"}, focus-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 204, :column 7, :end-line 204, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.focusNode read-only property returns the `web.Node`\n  which the selection ends.\n\n  `node = sel.focusNode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode`"}, :name web.Selection/focus-node, :variadic false, :file "src/web/Selection.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 204, :end-line 204, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.focusNode read-only property returns the `web.Node`\n  which the selection ends.\n\n  `node = sel.focusNode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/focusNode`"}, anchor-node {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 180, :column 7, :end-line 180, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.anchorNode read-only property returns the `web.Node`\n  which the selection begins.\n\n  `node = sel.anchorNode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode`"}, :name web.Selection/anchor-node, :variadic false, :file "src/web/Selection.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Selection.anchorNode read-only property returns the `web.Node`\n  which the selection begins.\n\n  `node = sel.anchorNode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/anchorNode`"}, collapse-to-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 44, :column 7, :end-line 44, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.collapseToStart() method collapses the selection\n  the start of the first range in the selection. If the content\n  the selection is focused and editable, the caret will blink there.\n\n  `sel.collapseToStart()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart`"}, :name web.Selection/collapse-to-start, :variadic false, :file "src/web/Selection.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Selection.collapseToStart() method collapses the selection\n  the start of the first range in the selection. If the content\n  the selection is focused and editable, the caret will blink there.\n\n  `sel.collapseToStart()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapseToStart`"}, collapse {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Selection.cljs", :line 18, :column 7, :end-line 18, :end-column 15, :arglists (quote ([this node offset])), :doc "Method.\n\n  The Selection.collapse() method collapses the current selection\n  a single point. The document is not modified. If the content\n  focused and editable, the caret will blink there.\n\n  `sel.collapse(node, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse`"}, :name web.Selection/collapse, :variadic false, :file "src/web/Selection.cljs", :end-column 15, :method-params ([this node offset]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this node offset])), :doc "Method.\n\n  The Selection.collapse() method collapses the current selection\n  a single point. The document is not modified. If the content\n  focused and editable, the caret will blink there.\n\n  `sel.collapse(node, offset);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Selection/collapse`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "A Selection object represents the range of text selected by the\n  or the current position of the caret. To obtain a Selection object\n  examination or manipulation, call `web.Window.getSelection()`."}