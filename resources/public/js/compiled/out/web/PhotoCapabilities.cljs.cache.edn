{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name web.PhotoCapabilities, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {fill-light-mode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The fillLightMode read-only property of the `web.PhotoCapabilities`\n  returns an array of available fill light options. Options may\n  auto, off, or flash.\n\n  `var lightModes[] = photoCapabilities.fillLightMode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/fillLightMode`"}, :name web.PhotoCapabilities/fill-light-mode, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The fillLightMode read-only property of the `web.PhotoCapabilities`\n  returns an array of available fill light options. Options may\n  auto, off, or flash.\n\n  `var lightModes[] = photoCapabilities.fillLightMode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/fillLightMode`"}, set-fill-light-mode! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 20, :column 7, :end-line 20, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The fillLightMode read-only property of the `web.PhotoCapabilities`\n  returns an array of available fill light options. Options may\n  auto, off, or flash.\n\n  `var lightModes[] = photoCapabilities.fillLightMode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/fillLightMode`"}, :name web.PhotoCapabilities/set-fill-light-mode!, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The fillLightMode read-only property of the `web.PhotoCapabilities`\n  returns an array of available fill light options. Options may\n  auto, off, or flash.\n\n  `var lightModes[] = photoCapabilities.fillLightMode`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/fillLightMode`"}, image-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 33, :column 7, :end-line 33, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The imageHeight read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageHeight`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageHeight`"}, :name web.PhotoCapabilities/image-height, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The imageHeight read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageHeight`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageHeight`"}, set-image-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 46, :column 7, :end-line 46, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The imageHeight read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageHeight`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageHeight`"}, :name web.PhotoCapabilities/set-image-height!, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The imageHeight read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageHeight`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageHeight`"}, image-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 59, :column 7, :end-line 59, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The imageWidth read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageWidth`"}, :name web.PhotoCapabilities/image-width, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The imageWidth read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageWidth`"}, set-image-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 72, :column 7, :end-line 72, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The imageWidth read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageWidth`"}, :name web.PhotoCapabilities/set-image-width!, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The imageWidth read-only property of the `web.PhotoCapabilities`\n  returns a `media.MediaSettingsRange` object indicating the image\n  range supported by the user agent.\n\n  `var mediaSettingsRange = photoCapabilities.imageWidth`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/imageWidth`"}, red-eye-reduction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 85, :column 7, :end-line 85, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The redEyeReduction read-only property of the `web.PhotoCapabilities`\n  returns a `web.RedEyeReduction` object indicating the red-eye\n  capability of the source.\n\n  `var redEyeReduction = photoCapabilities.redEyeReduction`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/redEyeReduction`"}, :name web.PhotoCapabilities/red-eye-reduction, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The redEyeReduction read-only property of the `web.PhotoCapabilities`\n  returns a `web.RedEyeReduction` object indicating the red-eye\n  capability of the source.\n\n  `var redEyeReduction = photoCapabilities.redEyeReduction`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/redEyeReduction`"}, set-red-eye-reduction! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/PhotoCapabilities.cljs", :line 98, :column 7, :end-line 98, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The redEyeReduction read-only property of the `web.PhotoCapabilities`\n  returns a `web.RedEyeReduction` object indicating the red-eye\n  capability of the source.\n\n  `var redEyeReduction = photoCapabilities.redEyeReduction`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/redEyeReduction`"}, :name web.PhotoCapabilities/set-red-eye-reduction!, :variadic false, :file "src/web/PhotoCapabilities.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The redEyeReduction read-only property of the `web.PhotoCapabilities`\n  returns a `web.RedEyeReduction` object indicating the red-eye\n  capability of the source.\n\n  `var redEyeReduction = photoCapabilities.redEyeReduction`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/PhotoCapabilities/redEyeReduction`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The PhotoCapabilities interface of the the MediaStream Image\n  API provides available configuration options for an attached\n  device. A PhotoCapabilities object is retrieved by calling `web.ImageCapture.getPhotoCapabilities()`."}