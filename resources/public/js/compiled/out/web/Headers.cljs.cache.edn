{:rename-macros {}, :renames {}, :externs {Headers {}}, :use-macros {}, :excludes #{set get keys}, :name web.Headers, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 113, :column 7, :end-line 113, :end-column 10, :arglists (quote ([this name value])), :doc "Method.\n\n  The set() method of the `web.Headers` interface sets a new value\n  an existing header inside a Headers object, or adds the header\n  it does not already exist.\n\n  `myHeaders.set(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/set`"}, :name web.Headers/set, :variadic false, :file "src/web/Headers.cljs", :end-column 10, :method-params ([this name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name value])), :doc "Method.\n\n  The set() method of the `web.Headers` interface sets a new value\n  an existing header inside a Headers object, or adds the header\n  it does not already exist.\n\n  `myHeaders.set(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/set`"}, get {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 60, :column 7, :end-line 60, :end-column 10, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.Headers` interface returns a byte\n  of all the values of a header within a Headers object with a\n  name. If the requested header doesn't exist in the Headers object,\n  returns null.\n\n  `myHeaders.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/get`"}, :name web.Headers/get, :variadic false, :file "src/web/Headers.cljs", :end-column 10, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The get() method of the `web.Headers` interface returns a byte\n  of all the values of a header within a Headers object with a\n  name. If the requested header doesn't exist in the Headers object,\n  returns null.\n\n  `myHeaders.get(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/get`"}, entries {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 47, :column 7, :end-line 47, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.entries() method returns an `web.iterator` allowing\n  go through all key/value pairs contained in this object. The\n  the key and value of each pairs are `web.ByteString` objects.\n\n  `headers.entries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/entries`"}, :name web.Headers/entries, :variadic false, :file "src/web/Headers.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.entries() method returns an `web.iterator` allowing\n  go through all key/value pairs contained in this object. The\n  the key and value of each pairs are `web.ByteString` objects.\n\n  `headers.entries();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/entries`"}, append {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 22, :column 7, :end-line 22, :end-column 13, :arglists (quote ([this name value])), :doc "Method.\n\n  The append() method of the `web.Headers` interface appends a\n  value onto an existing header inside a Headers object, or adds\n  header if it does not already exist.\n\n  `myHeaders.append(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/append`"}, :name web.Headers/append, :variadic false, :file "src/web/Headers.cljs", :end-column 13, :method-params ([this name value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name value])), :doc "Method.\n\n  The append() method of the `web.Headers` interface appends a\n  value onto an existing header inside a Headers object, or adds\n  header if it does not already exist.\n\n  `myHeaders.append(name, value);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/append`"}, delete {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 35, :column 7, :end-line 35, :end-column 13, :arglists (quote ([this name])), :doc "Method.\n\n  The delete() method of the `web.Headers` interface deletes a\n  from the current Headers object.\n\n  `myHeaders.delete(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete`"}, :name web.Headers/delete, :variadic false, :file "src/web/Headers.cljs", :end-column 13, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The delete() method of the `web.Headers` interface deletes a\n  from the current Headers object.\n\n  `myHeaders.delete(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/delete`"}, keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 101, :column 7, :end-line 101, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.keys() method returns an `web.iterator` allowing\n  go through all keys contained in this object. The keys are `web.ByteString`\n\n  `headers.keys();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/keys`"}, :name web.Headers/keys, :variadic false, :file "src/web/Headers.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.keys() method returns an `web.iterator` allowing\n  go through all keys contained in this object. The keys are `web.ByteString`\n\n  `headers.keys();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/keys`"}, values {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 126, :column 7, :end-line 126, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.values() method returns an `web.iterator` allowing\n  go through all values contained in this object. The values are\n  objects.\n\n  `headers.values();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/values`"}, :name web.Headers/values, :variadic false, :file "src/web/Headers.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The Headers.values() method returns an `web.iterator` allowing\n  go through all values contained in this object. The values are\n  objects.\n\n  `headers.values();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/values`"}, get-all {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 74, :column 7, :end-line 74, :end-column 14, :arglists (quote ([this name])), :doc "Method.\n\n  The getAll() method of the `web.Headers` interface used to return\n  array of all the values of a header within a Headers object with\n  given name; in newer versions of the Fetch spec, it has been\n  and `web.Headers.get()` has been updated to fetch all header\n  instead of only the first one.\n\n  `myHeaders.getAll(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/getAll`"}, :name web.Headers/get-all, :variadic false, :file "src/web/Headers.cljs", :end-column 14, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The getAll() method of the `web.Headers` interface used to return\n  array of all the values of a header within a Headers object with\n  given name; in newer versions of the Fetch spec, it has been\n  and `web.Headers.get()` has been updated to fetch all header\n  instead of only the first one.\n\n  `myHeaders.getAll(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/getAll`"}, constructor {:name web.Headers/constructor, :file "src/web/Headers.cljs", :line 11, :column 1, :end-line 11, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 11, :column 6, :end-line 11, :end-column 17}, :doc "Constructor.\n\n  The Headers() constructor creates a new `web.Headers` object.\n\n  init Optional\n  An object containing any HTTP headers that you want to pre-populate your Headers object with. This can be a simple object literal with `web.ByteString` values; or an existing Headers object. In the last case, the new Headers object inherits its data from the existing Headers object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers`", :tag js}, has {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Headers.cljs", :line 89, :column 7, :end-line 89, :end-column 10, :arglists (quote ([this name])), :doc "Method.\n\n  The has() method of the `web.Headers` interface returns a boolean\n  whether a Headers object contains a certain header.\n\n  `myHeaders.has(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/has`"}, :name web.Headers/has, :variadic false, :file "src/web/Headers.cljs", :end-column 10, :method-params ([this name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this name])), :doc "Method.\n\n  The has() method of the `web.Headers` interface returns a boolean\n  whether a Headers object contains a certain header.\n\n  `myHeaders.has(name);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Headers/has`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Headers interface of the Fetch API allows you to perform\n  actions on HTTP request and response headers. These actions include\n  setting, adding to, and removing. A Headers object has an associated\n  list, which is initially empty and consists of zero or more name\n  value pairs. You can add to this using methods like `web.append()`\n  Examples.) In all methods of this interface, header names are\n  by case-insensitive byte sequence."}