{:rename-macros {}, :renames {}, :externs {AbortController {}}, :use-macros {}, :excludes #{}, :name web.AbortController, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.AbortController/constructor, :file "src/web/AbortController.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortController.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The AbortController() constructor creates a new AbortController object instance.\n\n  None.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/AbortController`", :tag js}, abort {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortController.cljs", :line 16, :column 7, :end-line 16, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `web.AbortController` interface aborts\n  DOM request (e.g. a Fetch request) before it has completed. This\n  able to abort fetch requests, consumption of any response `web.Body`,\n  streams.\n\n  `controller.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort`"}, :name web.AbortController/abort, :variadic false, :file "src/web/AbortController.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 16, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The abort() method of the `web.AbortController` interface aborts\n  DOM request (e.g. a Fetch request) before it has completed. This\n  able to abort fetch requests, consumption of any response `web.Body`,\n  streams.\n\n  `controller.abort();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort`"}, signal {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortController.cljs", :line 30, :column 7, :end-line 30, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The signal read-only property of the `web.AbortController` interface\n  an `web.AbortSignal` object instance, which can be used to communicate\n  a DOM request as desired.\n\n  `var signal = abortController.signal;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal`"}, :name web.AbortController/signal, :variadic false, :file "src/web/AbortController.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The signal read-only property of the `web.AbortController` interface\n  an `web.AbortSignal` object instance, which can be used to communicate\n  a DOM request as desired.\n\n  `var signal = abortController.signal;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal`"}, set-signal! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/AbortController.cljs", :line 43, :column 7, :end-line 43, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The signal read-only property of the `web.AbortController` interface\n  an `web.AbortSignal` object instance, which can be used to communicate\n  a DOM request as desired.\n\n  `var signal = abortController.signal;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal`"}, :name web.AbortController/set-signal!, :variadic false, :file "src/web/AbortController.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The signal read-only property of the `web.AbortController` interface\n  an `web.AbortSignal` object instance, which can be used to communicate\n  a DOM request as desired.\n\n  `var signal = abortController.signal;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/AbortController/signal`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The AbortController interface represents a controller object\n  allows you to abort one or more DOM requests as and when desired."}