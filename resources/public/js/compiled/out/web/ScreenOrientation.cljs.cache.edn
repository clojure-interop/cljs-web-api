{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name web.ScreenOrientation, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {lock {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 6, :column 7, :end-line 6, :end-column 11, :arglists (quote ([this orientation])), :doc "Method.\n\n  The lock() property of the `web.ScreenOrientation` interface\n  the orientation of the containing document to its default orientation.\n\n  `ScreenOrientation.lock(orientation)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/lock`"}, :name web.ScreenOrientation/lock, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 11, :method-params ([this orientation]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this orientation])), :doc "Method.\n\n  The lock() property of the `web.ScreenOrientation` interface\n  the orientation of the containing document to its default orientation.\n\n  `ScreenOrientation.lock(orientation)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/lock`"}, unlock {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The unlock() property of the `web.ScreenOrientation` interface\n  the orientation of the containing document from its default orientation.\n\n  `ScreenOrientation.unlock()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/unlock`"}, :name web.ScreenOrientation/unlock, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The unlock() property of the `web.ScreenOrientation` interface\n  the orientation of the containing document from its default orientation.\n\n  `ScreenOrientation.unlock()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/unlock`"}, angle {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 30, :column 7, :end-line 30, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The angle read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation angle.\n\n  `angle = ScreenOrientation.angle`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle`"}, :name web.ScreenOrientation/angle, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The angle read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation angle.\n\n  `angle = ScreenOrientation.angle`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle`"}, set-angle! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The angle read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation angle.\n\n  `angle = ScreenOrientation.angle`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle`"}, :name web.ScreenOrientation/set-angle!, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The angle read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation angle.\n\n  `angle = ScreenOrientation.angle`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/angle`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 54, :column 7, :end-line 54, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.ScreenOrientation` is an event\n  fired whenever is the `web.EventHandler` called when the screen\n  orientation.\n\n  `ScreenOrientation.addEventListener('change', function(e) { ... })\n  ScreenOrientation.onchange = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/onchange`"}, :name web.ScreenOrientation/onchange, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.ScreenOrientation` is an event\n  fired whenever is the `web.EventHandler` called when the screen\n  orientation.\n\n  `ScreenOrientation.addEventListener('change', function(e) { ... })\n  ScreenOrientation.onchange = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/onchange`"}, set-onchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 68, :column 7, :end-line 68, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.ScreenOrientation` is an event\n  fired whenever is the `web.EventHandler` called when the screen\n  orientation.\n\n  `ScreenOrientation.addEventListener('change', function(e) { ... })\n  ScreenOrientation.onchange = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/onchange`"}, :name web.ScreenOrientation/set-onchange!, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.ScreenOrientation` is an event\n  fired whenever is the `web.EventHandler` called when the screen\n  orientation.\n\n  `ScreenOrientation.addEventListener('change', function(e) { ... })\n  ScreenOrientation.onchange = function(e) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/onchange`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 82, :column 7, :end-line 82, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation type, one of \\\"portrait-primary\\\",\n  \\\"landscape-primary\\\", or \\\"landscape-secondary\\\".\n\n  `type = ScreenOrientation.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type`"}, :name web.ScreenOrientation/type, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The type read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation type, one of \\\"portrait-primary\\\",\n  \\\"landscape-primary\\\", or \\\"landscape-secondary\\\".\n\n  `type = ScreenOrientation.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type`"}, set-type! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ScreenOrientation.cljs", :line 95, :column 7, :end-line 95, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation type, one of \\\"portrait-primary\\\",\n  \\\"landscape-primary\\\", or \\\"landscape-secondary\\\".\n\n  `type = ScreenOrientation.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type`"}, :name web.ScreenOrientation/set-type!, :variadic false, :file "src/web/ScreenOrientation.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The type read-only property of the `web.ScreenOrientation` interface\n  the document's current orientation type, one of \\\"portrait-primary\\\",\n  \\\"landscape-primary\\\", or \\\"landscape-secondary\\\".\n\n  `type = ScreenOrientation.type`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ScreenOrientation/type`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ScreenOrientation interface of the the Screen Orientation\n  provides information about the current orientation of the document."}