{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{filter}, :name web.CanvasRenderingContext2D, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-image-smoothing-quality! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 901, :column 7, :end-line 901, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The imageSmoothingQuality property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, lets you set the quality of image smoothing.\n\n  `ctx.imageSmoothingQuality = \\\"low\\\" || \\\"medium\\\" || \\\"high\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality`"}, :name web.CanvasRenderingContext2D/set-image-smoothing-quality!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 901, :end-line 901, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The imageSmoothingQuality property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, lets you set the quality of image smoothing.\n\n  `ctx.imageSmoothingQuality = \\\"low\\\" || \\\"medium\\\" || \\\"high\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality`"}, begin-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 47, :column 7, :end-line 47, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.beginPath() method of the Canvas\n  API starts a new path by emptying the list of sub-paths. Call\n  method when you want to create a new path.\n\n  `void ctx.beginPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath`"}, :name web.CanvasRenderingContext2D/begin-path, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.beginPath() method of the Canvas\n  API starts a new path by emptying the list of sub-paths. Call\n  method when you want to create a new path.\n\n  `void ctx.beginPath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath`"}, set-line-dash-offset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 953, :column 7, :end-line 953, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineDashOffset property of the Canvas\n  API sets the line dash offset, or \\\"phase.\\\"\n\n  `ctx.lineDashOffset = value;\n\n\n  value\n  A float specifying the amount of the line dash offset. The default value is 0.0.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset`"}, :name web.CanvasRenderingContext2D/set-line-dash-offset!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 953, :end-line 953, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineDashOffset property of the Canvas\n  API sets the line dash offset, or \\\"phase.\\\"\n\n  `ctx.lineDashOffset = value;\n\n\n  value\n  A float specifying the amount of the line dash offset. The default value is 0.0.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset`"}, line-cap {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 913, :column 7, :end-line 913, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineCap property of the Canvas 2D\n  determines the shape used to draw the end points of lines.\n\n  `ctx.lineCap = \\\"butt\\\" || \\\"round\\\" || \\\"square\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap`"}, :name web.CanvasRenderingContext2D/line-cap, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 913, :end-line 913, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineCap property of the Canvas 2D\n  determines the shape used to draw the end points of lines.\n\n  `ctx.lineCap = \\\"butt\\\" || \\\"round\\\" || \\\"square\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap`"}, create-linear-gradient {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 145, :column 7, :end-line 145, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.createLinearGradient() method of\n  Canvas 2D API creates a gradient along the line connecting two\n  coordinates.\n\n  `CanvasGradient ctx.createLinearGradient(x0, y0, x1, y1);\n\n  The createLinearGradient() method is specified by four parameters defining the start and end points of the gradient line.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/create-linear-gradient, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.createLinearGradient() method of\n  Canvas 2D API creates a gradient along the line connecting two\n  coordinates.\n\n  `CanvasGradient ctx.createLinearGradient(x0, y0, x1, y1);\n\n  The createLinearGradient() method is specified by four parameters defining the start and end points of the gradient line.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createLinearGradient`"}, rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 425, :column 7, :end-line 425, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.rect() method of the Canvas 2D API\n  a rectangle to the current path.\n\n  `void ctx.rect(x, y, width, height);\n\n  The rect() method creates a rectangular path whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/rect, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 425, :end-line 425, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.rect() method of the Canvas 2D API\n  a rectangle to the current path.\n\n  `void ctx.rect(x, y, width, height);\n\n  The rect() method creates a rectangular path whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect`"}, arc-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 33, :column 7, :end-line 33, :end-column 13, :arglists (quote ([this x-1 y-1 x-2 y-2 radius])), :doc "Method.\n\n  The CanvasRenderingContext2D.arcTo() method of the Canvas 2D\n  adds a circular arc to the current sub-path, using the given\n  points and radius. The arc is automatically connected to the\n  latest point with a straight line, if necessary for the specified\n\n  `void ctx.arcTo(x1, y1, x2, y2, radius);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo`"}, :name web.CanvasRenderingContext2D/arc-to, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 13, :method-params ([this x-1 y-1 x-2 y-2 radius]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this x-1 y-1 x-2 y-2 radius])), :doc "Method.\n\n  The CanvasRenderingContext2D.arcTo() method of the Canvas 2D\n  adds a circular arc to the current sub-path, using the given\n  points and radius. The arc is automatically connected to the\n  latest point with a straight line, if necessary for the specified\n\n  `void ctx.arcTo(x1, y1, x2, y2, radius);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo`"}, set-shadow-color! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1093, :column 7, :end-line 1093, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowColor property of the Canvas\n  API specifies the color of shadows.\n\n  `ctx.shadowColor = color;\n\n\n  color\n  A `dom.DOMString` parsed as a CSS `web.<color>` value. The default value is fully-transparent black.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor`"}, :name web.CanvasRenderingContext2D/set-shadow-color!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1093, :end-line 1093, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowColor property of the Canvas\n  API specifies the color of shadows.\n\n  `ctx.shadowColor = color;\n\n\n  color\n  A `dom.DOMString` parsed as a CSS `web.<color>` value. The default value is fully-transparent black.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor`"}, image-smoothing-quality {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 889, :column 7, :end-line 889, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The imageSmoothingQuality property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, lets you set the quality of image smoothing.\n\n  `ctx.imageSmoothingQuality = \\\"low\\\" || \\\"medium\\\" || \\\"high\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality`"}, :name web.CanvasRenderingContext2D/image-smoothing-quality, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 889, :end-line 889, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The imageSmoothingQuality property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, lets you set the quality of image smoothing.\n\n  `ctx.imageSmoothingQuality = \\\"low\\\" || \\\"medium\\\" || \\\"high\\\"`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality`"}, set-transform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 543, :column 7, :end-line 543, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.setTransform() method of the Canvas\n  API resets (overrides) the current transformation to the identity\n  and then invokes a transformation described by the arguments\n  this method. This lets you scale, rotate, translate (move), and\n  the context.\n\n  `void ctx.setTransform(a, b, c, d, e, f);\n\n  The transformation matrix is described by: [acebdf001]\\\\left[ \\\\begin{array}{ccc} a & c & e \\\\\\\\ b & d & f \\\\\\\\ 0 & 0 & 1 \\\\end{array} \\\\right]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/set-transform, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 543, :end-line 543, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.setTransform() method of the Canvas\n  API resets (overrides) the current transformation to the identity\n  and then invokes a transformation described by the arguments\n  this method. This lets you scale, rotate, translate (move), and\n  the context.\n\n  `void ctx.setTransform(a, b, c, d, e, f);\n\n  The transformation matrix is described by: [acebdf001]\\\\left[ \\\\begin{array}{ccc} a & c & e \\\\\\\\ b & d & f \\\\\\\\ 0 & 0 & 1 \\\\end{array} \\\\right]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setTransform`"}, set-shadow-blur! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1060, :column 7, :end-line 1060, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowBlur property of the Canvas\n  API specifies the amount of blur applied to shadows. The default\n  0 (no blur).\n\n  `ctx.shadowBlur = level;\n\n\n  level\n  A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels, and is not affected by the current transformation matrix. The default value is 0. Negative, `web.Infinity`, and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur`"}, :name web.CanvasRenderingContext2D/set-shadow-blur!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1060, :end-line 1060, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowBlur property of the Canvas\n  API specifies the amount of blur applied to shadows. The default\n  0 (no blur).\n\n  `ctx.shadowBlur = level;\n\n\n  level\n  A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels, and is not affected by the current transformation matrix. The default value is 0. Negative, `web.Infinity`, and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur`"}, direction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 697, :column 7, :end-line 697, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.direction property of the Canvas\n  API specifies the current text direction used to draw text.\n\n  `ctx.direction = \\\"ltr\\\" || \\\"rtl\\\" || \\\"inherit\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction`"}, :name web.CanvasRenderingContext2D/direction, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 697, :end-line 697, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.direction property of the Canvas\n  API specifies the current text direction used to draw text.\n\n  `ctx.direction = \\\"ltr\\\" || \\\"rtl\\\" || \\\"inherit\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction`"}, clear-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 88, :column 7, :end-line 88, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.clearRect() method of the Canvas\n  API erases the pixels in a rectangular area by setting them to\n  black.\n\n  `void ctx.clearRect(x, y, width, height);\n\n  The clearRect() method sets the pixels in a rectangular area to transparent black (rgba(0,0,0,0)). The rectangle's corner is at (x, y), and its size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/clear-rect, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.clearRect() method of the Canvas\n  API erases the pixels in a rectangular area by setting them to\n  black.\n\n  `void ctx.clearRect(x, y, width, height);\n\n  The clearRect() method sets the pixels in a rectangular area to transparent black (rgba(0,0,0,0)). The rectangle's corner is at (x, y), and its size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearRect`"}, reset-transform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 451, :column 7, :end-line 451, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.resetTransform() method of the Canvas\n  API resets the current transform to the identity matrix.\n\n  `void ctx.resetTransform();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform`"}, :name web.CanvasRenderingContext2D/reset-transform, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 451, :end-line 451, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.resetTransform() method of the Canvas\n  API resets the current transform to the identity matrix.\n\n  `void ctx.resetTransform();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/resetTransform`"}, is-point-in-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 327, :column 7, :end-line 327, :end-column 23, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.isPointInPath() method of the Canvas\n  API reports whether or not the specified point is contained in\n  current path.\n\n  `ctx.isPointInPath(x, y [, fillRule]);\n  ctx.isPointInPath(path, x, y [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/is-point-in-path, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.isPointInPath() method of the Canvas\n  API reports whether or not the specified point is contained in\n  current path.\n\n  `ctx.isPointInPath(x, y [, fillRule]);\n  ctx.isPointInPath(path, x, y [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInPath`"}, get-line-dash {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 315, :column 7, :end-line 315, :end-column 20, :arglists (quote ([this])), :doc "Method.\n\n  The getLineDash() method of the Canvas 2D API's `web.CanvasRenderingContext2D`\n  gets the current line dash pattern.\n\n  `ctx.getLineDash();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash`"}, :name web.CanvasRenderingContext2D/get-line-dash, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 315, :end-line 315, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getLineDash() method of the Canvas 2D API's `web.CanvasRenderingContext2D`\n  gets the current line dash pattern.\n\n  `ctx.getLineDash();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getLineDash`"}, bezier-curve-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 60, :column 7, :end-line 60, :end-column 22, :arglists (quote ([this cp-1x cp-1y cp-2x cp-2y x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas\n  API adds a cubic Bézier curve to the current sub-path. It requires\n  points: the first two are control points and the third one is\n  end point. The starting point is the latest point in the current\n  which can be changed using `web.moveTo()` before creating the\n  curve.\n\n  `void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo`"}, :name web.CanvasRenderingContext2D/bezier-curve-to, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this cp-1x cp-1y cp-2x cp-2y x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this cp-1x cp-1y cp-2x cp-2y x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas\n  API adds a cubic Bézier curve to the current sub-path. It requires\n  points: the first two are control points and the third one is\n  end point. The starting point is the latest point in the current\n  which can be changed using `web.moveTo()` before creating the\n  curve.\n\n  `void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo`"}, text-baseline {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1227, :column 7, :end-line 1227, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.textBaseline property of the Canvas\n  API specifies the current text baseline used when drawing text.\n\n  `ctx.textBaseline = \\\"top\\\" || \\\"hanging\\\" || \\\"middle\\\" || \\\"alphabetic\\\" || \\\"ideographic\\\" || \\\"bottom\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline`"}, :name web.CanvasRenderingContext2D/text-baseline, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1227, :end-line 1227, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.textBaseline property of the Canvas\n  API specifies the current text baseline used when drawing text.\n\n  `ctx.textBaseline = \\\"top\\\" || \\\"hanging\\\" || \\\"middle\\\" || \\\"alphabetic\\\" || \\\"ideographic\\\" || \\\"bottom\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline`"}, set-font! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 792, :column 7, :end-line 792, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.font property of the Canvas 2D API\n  the current text style to use when drawing text. This string\n  the same syntax as the CSS font specifier.\n\n  `ctx.font = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font`"}, :name web.CanvasRenderingContext2D/set-font!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 792, :end-line 792, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.font property of the Canvas 2D API\n  the current text style to use when drawing text. This string\n  the same syntax as the CSS font specifier.\n\n  `ctx.font = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font`"}, draw-focus-if-needed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 188, :column 7, :end-line 188, :end-column 27, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.drawFocusIfNeeded() method of the\n  2D API draws a focus ring around the current or given path, if\n  specified element is focused.\n\n  `void ctx.drawFocusIfNeeded(element);\n  void ctx.drawFocusIfNeeded(path, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/draw-focus-if-needed, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 27, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 188, :end-line 188, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.drawFocusIfNeeded() method of the\n  2D API draws a focus ring around the current or given path, if\n  specified element is focused.\n\n  `void ctx.drawFocusIfNeeded(element);\n  void ctx.drawFocusIfNeeded(path, element);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded`"}, quadratic-curve-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 409, :column 7, :end-line 409, :end-column 25, :arglists (quote ([this cpx cpy x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.quadraticCurveTo() method of the\n  2D API adds a quadratic Bézier curve to the current sub-path.\n  requires two points: the first one is a control point and the\n  one is the end point. The starting point is the latest point\n  the current path, which can be changed using `web.moveTo()` before\n  the quadratic Bézier curve.\n\n  `void ctx.quadraticCurveTo(cpx, cpy, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo`"}, :name web.CanvasRenderingContext2D/quadratic-curve-to, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 25, :method-params ([this cpx cpy x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 409, :end-line 409, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this cpx cpy x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.quadraticCurveTo() method of the\n  2D API adds a quadratic Bézier curve to the current sub-path.\n  requires two points: the first one is a control point and the\n  one is the end point. The starting point is the latest point\n  the current path, which can be changed using `web.moveTo()` before\n  the quadratic Bézier curve.\n\n  `void ctx.quadraticCurveTo(cpx, cpy, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo`"}, fill-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 286, :column 7, :end-line 286, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method fillText(), part of\n  Canvas 2D API, draws a text string at the specified coordinates,\n  the string's characters with the current `web.fillStyle`. An\n  parameter allows specifying a maximum width for the rendered\n  which the user agent will achieve by condensing the text or by\n  a lower font size.\n\n  `CanvasRenderingContext2D.fillText(text, x, y [, maxWidth]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/fill-text, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 286, :end-line 286, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method fillText(), part of\n  Canvas 2D API, draws a text string at the specified coordinates,\n  the string's characters with the current `web.fillStyle`. An\n  parameter allows specifying a maximum width for the rendered\n  which the user agent will achieve by condensing the text or by\n  a lower font size.\n\n  `CanvasRenderingContext2D.fillText(text, x, y [, maxWidth]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillText`"}, add-hit-region {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 7, :column 7, :end-line 7, :end-column 21, :arglists (quote ([this options])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method addHitRegion() adds\n  hit region to the bitmap.\n\n  `void ctx.addHitRegion(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion`"}, :name web.CanvasRenderingContext2D/add-hit-region, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method addHitRegion() adds\n  hit region to the bitmap.\n\n  `void ctx.addHitRegion(options);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/addHitRegion`"}, set-shadow-offset-y! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1157, :column 7, :end-line 1157, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetY property of the Canvas\n  API specifies the distance that shadows will be offset vertically.\n\n  `ctx.shadowOffsetY = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative are up. The default value is 0 (no vertical offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY`"}, :name web.CanvasRenderingContext2D/set-shadow-offset-y!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1157, :end-line 1157, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetY property of the Canvas\n  API specifies the distance that shadows will be offset vertically.\n\n  `ctx.shadowOffsetY = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative are up. The default value is 0 (no vertical offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY`"}, set-global-composite-operation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 846, :column 7, :end-line 846, :end-column 38, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalCompositeOperation property\n  the Canvas 2D API sets the type of compositing operation to apply\n  drawing new shapes.\n\n  `ctx.globalCompositeOperation = type;\n\n  type is a `web.String` identifying which of the compositing or blending mode operations to use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation`"}, :name web.CanvasRenderingContext2D/set-global-composite-operation!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 38, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 846, :end-line 846, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalCompositeOperation property\n  the Canvas 2D API sets the type of compositing operation to apply\n  drawing new shapes.\n\n  `ctx.globalCompositeOperation = type;\n\n  type is a `web.String` identifying which of the compositing or blending mode operations to use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation`"}, shadow-color {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1077, :column 7, :end-line 1077, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowColor property of the Canvas\n  API specifies the color of shadows.\n\n  `ctx.shadowColor = color;\n\n\n  color\n  A `dom.DOMString` parsed as a CSS `web.<color>` value. The default value is fully-transparent black.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor`"}, :name web.CanvasRenderingContext2D/shadow-color, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1077, :end-line 1077, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowColor property of the Canvas\n  API specifies the color of shadows.\n\n  `ctx.shadowColor = color;\n\n\n  color\n  A `dom.DOMString` parsed as a CSS `web.<color>` value. The default value is fully-transparent black.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowColor`"}, stroke {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 560, :column 7, :end-line 560, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.stroke() method of the Canvas 2D\n  strokes (outlines) the current or given path with the current\n  style.\n\n  `void ctx.stroke();\n  void ctx.stroke(path);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/stroke, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 560, :end-line 560, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.stroke() method of the Canvas 2D\n  strokes (outlines) the current or given path with the current\n  style.\n\n  `void ctx.stroke();\n  void ctx.stroke(path);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/stroke`"}, clip {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 103, :column 7, :end-line 103, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.clip() method of the Canvas 2D API\n  the current or given path into the current clipping region. It\n  any previous clipping region.\n\n  `void ctx.clip([fillRule]);\n  void ctx.clip(path [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/clip, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.clip() method of the Canvas 2D API\n  the current or given path into the current clipping region. It\n  any previous clipping region.\n\n  `void ctx.clip([fillRule]);\n  void ctx.clip(path [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clip`"}, transform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 605, :column 7, :end-line 605, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.transform() method of the Canvas\n  API multiplies the current transformation with the matrix described\n  the arguments of this method. This lets you scale, rotate, translate\n  and skew the context.\n\n  `void ctx.transform(a, b, c, d, e, f);\n\n  The transformation matrix is described by: [acebdf001]\\\\left[ \\\\begin{array}{ccc} a & c & e \\\\\\\\ b & d & f \\\\\\\\ 0 & 0 & 1 \\\\end{array} \\\\right]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/transform, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 605, :end-line 605, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.transform() method of the Canvas\n  API multiplies the current transformation with the matrix described\n  the arguments of this method. This lets you scale, rotate, translate\n  and skew the context.\n\n  `void ctx.transform(a, b, c, d, e, f);\n\n  The transformation matrix is described by: [acebdf001]\\\\left[ \\\\begin{array}{ccc} a & c & e \\\\\\\\ b & d & f \\\\\\\\ 0 & 0 & 1 \\\\end{array} \\\\right]`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/transform`"}, stroke-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 589, :column 7, :end-line 589, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method strokeText(), part\n  the Canvas 2D API, strokes — that is, draws the outlines of —\n  characters of a text string at the specified coordinates. An\n  parameter allows specifying a maximum width for the rendered\n  which the user agent will achieve by condensing the text or by\n  a lower font size.\n\n  `CanvasRenderingContext2D.strokeText(text, x, y [, maxWidth]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/stroke-text, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 589, :end-line 589, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method strokeText(), part\n  the Canvas 2D API, strokes — that is, draws the outlines of —\n  characters of a text string at the specified coordinates. An\n  parameter allows specifying a maximum width for the rendered\n  which the user agent will achieve by condensing the text or by\n  a lower font size.\n\n  `CanvasRenderingContext2D.strokeText(text, x, y [, maxWidth]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeText`"}, set-line-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1007, :column 7, :end-line 1007, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineWidth property of the Canvas\n  API sets the thickness of lines.\n\n  `ctx.lineWidth = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth`"}, :name web.CanvasRenderingContext2D/set-line-width!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1007, :end-line 1007, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineWidth property of the Canvas\n  API sets the thickness of lines.\n\n  `ctx.lineWidth = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth`"}, line-join {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 969, :column 7, :end-line 969, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineJoin property of the Canvas\n  API determines the shape used to join two line segments where\n  meet.\n\n  `ctx.lineJoin = \\\"bevel\\\" || \\\"round\\\" || \\\"miter\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin`"}, :name web.CanvasRenderingContext2D/line-join, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 969, :end-line 969, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineJoin property of the Canvas\n  API determines the shape used to join two line segments where\n  meet.\n\n  `ctx.lineJoin = \\\"bevel\\\" || \\\"round\\\" || \\\"miter\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin`"}, shadow-offset-y {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1141, :column 7, :end-line 1141, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetY property of the Canvas\n  API specifies the distance that shadows will be offset vertically.\n\n  `ctx.shadowOffsetY = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative are up. The default value is 0 (no vertical offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY`"}, :name web.CanvasRenderingContext2D/shadow-offset-y, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1141, :end-line 1141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetY property of the Canvas\n  API specifies the distance that shadows will be offset vertically.\n\n  `ctx.shadowOffsetY = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset vertically. Positive values are down, and negative are up. The default value is 0 (no vertical offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY`"}, arc {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 19, :column 7, :end-line 19, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.arc() method of the Canvas 2D API\n  a circular arc to the current sub-path.\n\n  `void ctx.arc(x, y, radius, startAngle, endAngle [, anticlockwise]);\n\n  The arc() method creates a circular arc centered at (x, y) with a radius of radius. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/arc, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.arc() method of the Canvas 2D API\n  a circular arc to the current sub-path.\n\n  `void ctx.arc(x, y, radius, startAngle, endAngle [, anticlockwise]);\n\n  The arc() method creates a circular arc centered at (x, y) with a radius of radius. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc`"}, shadow-offset-x {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1109, :column 7, :end-line 1109, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetX property of the Canvas\n  API specifies the distance that shadows will be offset horizontally.\n\n  `ctx.shadowOffsetX = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left. The default value is 0 (no horizontal offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX`"}, :name web.CanvasRenderingContext2D/shadow-offset-x, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1109, :end-line 1109, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetX property of the Canvas\n  API specifies the distance that shadows will be offset horizontally.\n\n  `ctx.shadowOffsetX = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left. The default value is 0 (no horizontal offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX`"}, text-align {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1203, :column 7, :end-line 1203, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.textAlign property of the Canvas\n  API specifies the current text alignment used when drawing text.\n\n  `ctx.textAlign = \\\"left\\\" || \\\"right\\\" || \\\"center\\\" || \\\"start\\\" || \\\"end\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign`"}, :name web.CanvasRenderingContext2D/text-align, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1203, :end-line 1203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.textAlign property of the Canvas\n  API specifies the current text alignment used when drawing text.\n\n  `ctx.textAlign = \\\"left\\\" || \\\"right\\\" || \\\"center\\\" || \\\"start\\\" || \\\"end\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign`"}, shadow-blur {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1043, :column 7, :end-line 1043, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowBlur property of the Canvas\n  API specifies the amount of blur applied to shadows. The default\n  0 (no blur).\n\n  `ctx.shadowBlur = level;\n\n\n  level\n  A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels, and is not affected by the current transformation matrix. The default value is 0. Negative, `web.Infinity`, and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur`"}, :name web.CanvasRenderingContext2D/shadow-blur, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1043, :end-line 1043, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowBlur property of the Canvas\n  API specifies the amount of blur applied to shadows. The default\n  0 (no blur).\n\n  `ctx.shadowBlur = level;\n\n\n  level\n  A non-negative float specifying the level of shadow blur, where 0 represents no blur and larger numbers represent increasingly more blur. This value doesn't correspond to a number of pixels, and is not affected by the current transformation matrix. The default value is 0. Negative, `web.Infinity`, and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowBlur`"}, set-text-baseline! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1239, :column 7, :end-line 1239, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.textBaseline property of the Canvas\n  API specifies the current text baseline used when drawing text.\n\n  `ctx.textBaseline = \\\"top\\\" || \\\"hanging\\\" || \\\"middle\\\" || \\\"alphabetic\\\" || \\\"ideographic\\\" || \\\"bottom\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline`"}, :name web.CanvasRenderingContext2D/set-text-baseline!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1239, :end-line 1239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.textBaseline property of the Canvas\n  API specifies the current text baseline used when drawing text.\n\n  `ctx.textBaseline = \\\"top\\\" || \\\"hanging\\\" || \\\"middle\\\" || \\\"alphabetic\\\" || \\\"ideographic\\\" || \\\"bottom\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textBaseline`"}, set-text-align! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1215, :column 7, :end-line 1215, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.textAlign property of the Canvas\n  API specifies the current text alignment used when drawing text.\n\n  `ctx.textAlign = \\\"left\\\" || \\\"right\\\" || \\\"center\\\" || \\\"start\\\" || \\\"end\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign`"}, :name web.CanvasRenderingContext2D/set-text-align!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1215, :end-line 1215, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.textAlign property of the Canvas\n  API specifies the current text alignment used when drawing text.\n\n  `ctx.textAlign = \\\"left\\\" || \\\"right\\\" || \\\"center\\\" || \\\"start\\\" || \\\"end\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/textAlign`"}, stroke-style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1173, :column 7, :end-line 1173, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.strokeStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use for the\n  (outlines) around shapes. The default is #000 (black).\n\n  `ctx.strokeStyle = color;\n  ctx.strokeStyle = gradient;\n  ctx.strokeStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle`"}, :name web.CanvasRenderingContext2D/stroke-style, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1173, :end-line 1173, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.strokeStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use for the\n  (outlines) around shapes. The default is #000 (black).\n\n  `ctx.strokeStyle = color;\n  ctx.strokeStyle = gradient;\n  ctx.strokeStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle`"}, close-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 117, :column 7, :end-line 117, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.closePath() method of the Canvas\n  API attempts to add a straight line from the current point to\n  start of the current sub-path. If the shape has already been\n  or has only one point, this function does nothing.\n\n  `void ctx.closePath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath`"}, :name web.CanvasRenderingContext2D/close-path, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.closePath() method of the Canvas\n  API attempts to add a straight line from the current point to\n  start of the current sub-path. If the shape has already been\n  or has only one point, this function does nothing.\n\n  `void ctx.closePath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath`"}, line-dash-offset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 937, :column 7, :end-line 937, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineDashOffset property of the Canvas\n  API sets the line dash offset, or \\\"phase.\\\"\n\n  `ctx.lineDashOffset = value;\n\n\n  value\n  A float specifying the amount of the line dash offset. The default value is 0.0.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset`"}, :name web.CanvasRenderingContext2D/line-dash-offset, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 937, :end-line 937, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineDashOffset property of the Canvas\n  API sets the line dash offset, or \\\"phase.\\\"\n\n  `ctx.lineDashOffset = value;\n\n\n  value\n  A float specifying the amount of the line dash offset. The default value is 0.0.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineDashOffset`"}, measure-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 368, :column 7, :end-line 368, :end-column 19, :arglists (quote ([this text])), :doc "Method.\n\n  The CanvasRenderingContext2D.measureText() method returns a `web.TextMetrics`\n  that contains information about the measured text (such as its\n  for example).\n\n  `ctx.measureText(text);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText`"}, :name web.CanvasRenderingContext2D/measure-text, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 19, :method-params ([this text]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 368, :end-line 368, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this text])), :doc "Method.\n\n  The CanvasRenderingContext2D.measureText() method returns a `web.TextMetrics`\n  that contains information about the measured text (such as its\n  for example).\n\n  `ctx.measureText(text);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/measureText`"}, image-smoothing-enabled {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 861, :column 7, :end-line 861, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The imageSmoothingEnabled property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, determines whether scaled images are\n  (true, default) or not (false). On getting the imageSmoothingEnabled\n  the last value it was set to is returned.\n\n  `ctx.imageSmoothingEnabled = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled`"}, :name web.CanvasRenderingContext2D/image-smoothing-enabled, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :end-line 861, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The imageSmoothingEnabled property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, determines whether scaled images are\n  (true, default) or not (false). On getting the imageSmoothingEnabled\n  the last value it was set to is returned.\n\n  `ctx.imageSmoothingEnabled = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled`"}, current-transform {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 663, :column 7, :end-line 663, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.currentTransform property of the\n  2D API returns or sets a `dom.DOMMatrix` (current specification)\n  `svg.SVGMatrix` (old specification) object for the current transformation\n\n  `ctx.currentTransform [= value];\n\n\n  value\n  A `dom.DOMMatrix` or `svg.SVGMatrix`   object to use as the current transformation matrix.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform`"}, :name web.CanvasRenderingContext2D/current-transform, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 663, :end-line 663, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.currentTransform property of the\n  2D API returns or sets a `dom.DOMMatrix` (current specification)\n  `svg.SVGMatrix` (old specification) object for the current transformation\n\n  `ctx.currentTransform [= value];\n\n\n  value\n  A `dom.DOMMatrix` or `svg.SVGMatrix`   object to use as the current transformation matrix.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform`"}, scale {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 502, :column 7, :end-line 502, :end-column 12, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.scale() method of the Canvas 2D\n  adds a scaling transformation to the canvas units horizontally\n  vertically.\n\n  `void ctx.scale(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale`"}, :name web.CanvasRenderingContext2D/scale, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 12, :method-params ([this x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 502, :end-line 502, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.scale() method of the Canvas 2D\n  adds a scaling transformation to the canvas units horizontally\n  vertically.\n\n  `void ctx.scale(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scale`"}, restore {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 463, :column 7, :end-line 463, :end-column 14, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.restore() method of the Canvas 2D\n  restores the most recently saved canvas state by popping the\n  entry in the drawing state stack. If there is no saved state,\n  method does nothing.\n\n  `void ctx.restore();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore`"}, :name web.CanvasRenderingContext2D/restore, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 463, :end-line 463, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.restore() method of the Canvas 2D\n  restores the most recently saved canvas state by popping the\n  entry in the drawing state stack. If there is no saved state,\n  method does nothing.\n\n  `void ctx.restore();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/restore`"}, get-image-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 302, :column 7, :end-line 302, :end-column 21, :arglists (quote ([this sx sy sw sh])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method getImageData() of the\n  2D API returns an `web.ImageData` object representing the underlying\n  data for a specified portion of the canvas.\n\n  `ctx.getImageData(sx, sy, sw, sh);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData`"}, :name web.CanvasRenderingContext2D/get-image-data, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :method-params ([this sx sy sw sh]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 302, :end-line 302, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this sx sy sw sh])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method getImageData() of the\n  2D API returns an `web.ImageData` object representing the underlying\n  data for a specified portion of the canvas.\n\n  `ctx.getImageData(sx, sy, sw, sh);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData`"}, create-radial-gradient {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 173, :column 7, :end-line 173, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.createRadialGradient() method of\n  Canvas 2D API creates a radial gradient using the size and coordinates\n  two circles.\n\n  `CanvasGradient ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\n  The createRadialGradient() method is specified by six parameters, three defining the gradient's start circle, and three defining the end circle.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/create-radial-gradient, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.createRadialGradient() method of\n  Canvas 2D API creates a radial gradient using the size and coordinates\n  two circles.\n\n  `CanvasGradient ctx.createRadialGradient(x0, y0, r0, x1, y1, r1);\n\n  The createRadialGradient() method is specified by six parameters, three defining the gradient's start circle, and three defining the end circle.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createRadialGradient`"}, set-stroke-style! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1188, :column 7, :end-line 1188, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.strokeStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use for the\n  (outlines) around shapes. The default is #000 (black).\n\n  `ctx.strokeStyle = color;\n  ctx.strokeStyle = gradient;\n  ctx.strokeStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle`"}, :name web.CanvasRenderingContext2D/set-stroke-style!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1188, :end-line 1188, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.strokeStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use for the\n  (outlines) around shapes. The default is #000 (black).\n\n  `ctx.strokeStyle = color;\n  ctx.strokeStyle = gradient;\n  ctx.strokeStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeStyle`"}, move-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 381, :column 7, :end-line 381, :end-column 14, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.moveTo() method of the Canvas 2D\n  begins a new sub-path at the point specified by the given (x,\n  coordinates.\n\n  `void ctx.moveTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo`"}, :name web.CanvasRenderingContext2D/move-to, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 14, :method-params ([this x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 381, :end-line 381, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.moveTo() method of the Canvas 2D\n  begins a new sub-path at the point specified by the given (x,\n  coordinates.\n\n  `void ctx.moveTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo`"}, scroll-path-into-view {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 515, :column 7, :end-line 515, :end-column 28, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.scrollPathIntoView() method of the\n  2D API scrolls the current or given path into view. It is similar\n  `web.Element.scrollIntoView()`.\n\n  `void ctx.scrollPathIntoView();\n  void ctx.scrollPathIntoView(path);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/scroll-path-into-view, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 28, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 515, :end-line 515, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.scrollPathIntoView() method of the\n  2D API scrolls the current or given path into view. It is similar\n  `web.Element.scrollIntoView()`.\n\n  `void ctx.scrollPathIntoView();\n  void ctx.scrollPathIntoView(path);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/scrollPathIntoView`"}, fill {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 259, :column 7, :end-line 259, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.fill() method of the Canvas 2D API\n  the current or given path with the current `web.fillStyle`.\n\n  `void ctx.fill([fillRule]);\n  void ctx.fill(path [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/fill, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 259, :end-line 259, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.fill() method of the Canvas 2D API\n  the current or given path with the current `web.fillStyle`.\n\n  `void ctx.fill([fillRule]);\n  void ctx.fill(path [, fillRule]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill`"}, set-fill-style! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 736, :column 7, :end-line 736, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.fillStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use inside shapes.\n  default style is #000 (black).\n\n  `ctx.fillStyle = color;\n  ctx.fillStyle = gradient;\n  ctx.fillStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle`"}, :name web.CanvasRenderingContext2D/set-fill-style!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 736, :end-line 736, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.fillStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use inside shapes.\n  default style is #000 (black).\n\n  `ctx.fillStyle = color;\n  ctx.fillStyle = gradient;\n  ctx.fillStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle`"}, set-filter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 765, :column 7, :end-line 765, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.filter property of the Canvas 2D\n  provides filter effects such as blurring and grayscaling. It\n  similar to the CSS `web.filter` property and accepts the same\n\n  `ctx.filter = \\\"<filter-function1> [<filter-function2>] [<filter-functionN>]\\\";\n  ctx.filter = \\\"none\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter`"}, :name web.CanvasRenderingContext2D/set-filter!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 765, :end-line 765, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.filter property of the Canvas 2D\n  provides filter effects such as blurring and grayscaling. It\n  similar to the CSS `web.filter` property and accepts the same\n\n  `ctx.filter = \\\"<filter-function1> [<filter-function2>] [<filter-functionN>]\\\";\n  ctx.filter = \\\"none\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter`"}, create-pattern {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 160, :column 7, :end-line 160, :end-column 21, :arglists (quote ([this image repetition])), :doc "Method.\n\n  The CanvasRenderingContext2D.createPattern() method of the Canvas\n  API creates a pattern using the specified image and repetition.\n  method returns a `web.CanvasPattern`.\n\n  `CanvasPattern ctx.createPattern(image, repetition);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern`"}, :name web.CanvasRenderingContext2D/create-pattern, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :method-params ([this image repetition]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this image repetition])), :doc "Method.\n\n  The CanvasRenderingContext2D.createPattern() method of the Canvas\n  API creates a pattern using the specified image and repetition.\n  method returns a `web.CanvasPattern`.\n\n  `CanvasPattern ctx.createPattern(image, repetition);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createPattern`"}, global-alpha {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 805, :column 7, :end-line 805, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalAlpha property of the Canvas\n  API specifies the alpha (transparency) value that is applied\n  shapes and images before they are drawn onto the canvas.\n\n  `ctx.globalAlpha = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha`"}, :name web.CanvasRenderingContext2D/global-alpha, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 805, :end-line 805, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalAlpha property of the Canvas\n  API specifies the alpha (transparency) value that is applied\n  shapes and images before they are drawn onto the canvas.\n\n  `ctx.globalAlpha = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha`"}, line-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 355, :column 7, :end-line 355, :end-column 14, :arglists (quote ([this x y])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method lineTo(), part of the\n  2D API, adds a straight line to the current sub-path by connecting\n  sub-path's last point to the specified (x, y) coordinates.\n\n  `ctx.lineTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo`"}, :name web.CanvasRenderingContext2D/line-to, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 14, :method-params ([this x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 355, :end-line 355, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x y])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method lineTo(), part of the\n  2D API, adds a straight line to the current sub-path by connecting\n  sub-path's last point to the specified (x, y) coordinates.\n\n  `ctx.lineTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo`"}, set-current-transform! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 680, :column 7, :end-line 680, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.currentTransform property of the\n  2D API returns or sets a `dom.DOMMatrix` (current specification)\n  `svg.SVGMatrix` (old specification) object for the current transformation\n\n  `ctx.currentTransform [= value];\n\n\n  value\n  A `dom.DOMMatrix` or `svg.SVGMatrix`   object to use as the current transformation matrix.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform`"}, :name web.CanvasRenderingContext2D/set-current-transform!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 680, :end-line 680, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.currentTransform property of the\n  2D API returns or sets a `dom.DOMMatrix` (current specification)\n  `svg.SVGMatrix` (old specification) object for the current transformation\n\n  `ctx.currentTransform [= value];\n\n\n  value\n  A `dom.DOMMatrix` or `svg.SVGMatrix`   object to use as the current transformation matrix.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/currentTransform`"}, draw-image {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 202, :column 7, :end-line 202, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.drawImage() method of the Canvas\n  API provides different ways to draw an image onto the canvas.\n\n  `void ctx.drawImage(image, dx, dy);\n  void ctx.drawImage(image, dx, dy, dWidth, dHeight);\n  void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/draw-image, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.drawImage() method of the Canvas\n  API provides different ways to draw an image onto the canvas.\n\n  `void ctx.drawImage(image, dx, dy);\n  void ctx.drawImage(image, dx, dy, dWidth, dHeight);\n  void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage`"}, clear-hit-regions {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 76, :column 7, :end-line 76, :end-column 24, :arglists (quote ([this])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method clearHitRegions() removes\n  hit regions from the canvas.\n\n  `void ctx.clearHitRegions();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions`"}, :name web.CanvasRenderingContext2D/clear-hit-regions, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method clearHitRegions() removes\n  hit regions from the canvas.\n\n  `void ctx.clearHitRegions();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/clearHitRegions`"}, set-miter-limit! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1031, :column 7, :end-line 1031, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.miterLimit property of the Canvas\n  API sets the miter limit ratio.\n\n  `ctx.miterLimit = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit`"}, :name web.CanvasRenderingContext2D/set-miter-limit!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1031, :end-line 1031, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.miterLimit property of the Canvas\n  API sets the miter limit ratio.\n\n  `ctx.miterLimit = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit`"}, save {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 489, :column 7, :end-line 489, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.save() method of the Canvas 2D API\n  the entire state of the canvas by pushing the current state onto\n  stack.\n\n  `void ctx.save();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save`"}, :name web.CanvasRenderingContext2D/save, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 489, :end-line 489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.save() method of the Canvas 2D API\n  the entire state of the canvas by pushing the current state onto\n  stack.\n\n  `void ctx.save();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/save`"}, put-image-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 394, :column 7, :end-line 394, :end-column 21, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.putImageData() method of the Canvas\n  API paints data from the given `web.ImageData` object onto the\n  If a dirty rectangle is provided, only the pixels from that rectangle\n  painted. This method is not affected by the canvas transformation\n\n  `void ctx.putImageData(imageData, dx, dy);\n  void ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/put-image-data, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 394, :end-line 394, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.putImageData() method of the Canvas\n  API paints data from the given `web.ImageData` object onto the\n  If a dirty rectangle is provided, only the pixels from that rectangle\n  painted. This method is not affected by the canvas transformation\n\n  `void ctx.putImageData(imageData, dx, dy);\n  void ctx.putImageData(imageData, dx, dy, dirtyX, dirtyY, dirtyWidth, dirtyHeight);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/putImageData`"}, set-line-dash {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 529, :column 7, :end-line 529, :end-column 20, :arglists (quote ([this segments])), :doc "Method.\n\n  The setLineDash() method of the Canvas 2D API's `web.CanvasRenderingContext2D`\n  sets the line dash pattern used when stroking lines. It uses\n  array of values that specify alternating lengths of lines and\n  which describe the pattern.\n\n  `ctx.setLineDash(segments);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash`"}, :name web.CanvasRenderingContext2D/set-line-dash, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 20, :method-params ([this segments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 529, :end-line 529, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this segments])), :doc "Method.\n\n  The setLineDash() method of the Canvas 2D API's `web.CanvasRenderingContext2D`\n  sets the line dash pattern used when stroking lines. It uses\n  array of values that specify alternating lengths of lines and\n  which describe the pattern.\n\n  `ctx.setLineDash(segments);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash`"}, stroke-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 574, :column 7, :end-line 574, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.strokeRect() method of the Canvas\n  API draws a rectangle that is stroked (outlined) according to\n  current `web.strokeStyle` and other context settings.\n\n  `void ctx.strokeRect(x, y, width, height);\n\n  The strokeRect() method draws a stroked rectangle whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/stroke-rect, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 574, :end-line 574, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.strokeRect() method of the Canvas\n  API draws a rectangle that is stroked (outlined) according to\n  current `web.strokeStyle` and other context settings.\n\n  `void ctx.strokeRect(x, y, width, height);\n\n  The strokeRect() method draws a stroked rectangle whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/strokeRect`"}, canvas {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 635, :column 7, :end-line 635, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.canvas property, part of the Canvas\n  is a read-only reference to the `html.HTMLCanvasElement` object\n  is associated with a given context. It might be `web.null` if\n  is no associated `web.<canvas>` element.\n\n  `ctx.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas`"}, :name web.CanvasRenderingContext2D/canvas, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 635, :end-line 635, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.canvas property, part of the Canvas\n  is a read-only reference to the `html.HTMLCanvasElement` object\n  is associated with a given context. It might be `web.null` if\n  is no associated `web.<canvas>` element.\n\n  `ctx.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas`"}, font {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 779, :column 7, :end-line 779, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.font property of the Canvas 2D API\n  the current text style to use when drawing text. This string\n  the same syntax as the CSS font specifier.\n\n  `ctx.font = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font`"}, :name web.CanvasRenderingContext2D/font, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 779, :end-line 779, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.font property of the Canvas 2D API\n  the current text style to use when drawing text. This string\n  the same syntax as the CSS font specifier.\n\n  `ctx.font = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font`"}, set-line-join! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 982, :column 7, :end-line 982, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineJoin property of the Canvas\n  API determines the shape used to join two line segments where\n  meet.\n\n  `ctx.lineJoin = \\\"bevel\\\" || \\\"round\\\" || \\\"miter\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin`"}, :name web.CanvasRenderingContext2D/set-line-join!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 982, :end-line 982, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineJoin property of the Canvas\n  API determines the shape used to join two line segments where\n  meet.\n\n  `ctx.lineJoin = \\\"bevel\\\" || \\\"round\\\" || \\\"miter\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineJoin`"}, create-image-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 131, :column 7, :end-line 131, :end-column 24, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.createImageData() method of the\n  2D API creates a new, blank `web.ImageData` object with the specified\n  All of the pixels in the new object are transparent black.\n\n  `ImageData ctx.createImageData(width, height);\n  ImageData ctx.createImageData(imagedata);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/create-image-data, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 131, :end-line 131, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.createImageData() method of the\n  2D API creates a new, blank `web.ImageData` object with the specified\n  All of the pixels in the new object are transparent black.\n\n  `ImageData ctx.createImageData(width, height);\n  ImageData ctx.createImageData(imagedata);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/createImageData`"}, set-direction! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 709, :column 7, :end-line 709, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.direction property of the Canvas\n  API specifies the current text direction used to draw text.\n\n  `ctx.direction = \\\"ltr\\\" || \\\"rtl\\\" || \\\"inherit\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction`"}, :name web.CanvasRenderingContext2D/set-direction!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 709, :end-line 709, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.direction property of the Canvas\n  API specifies the current text direction used to draw text.\n\n  `ctx.direction = \\\"ltr\\\" || \\\"rtl\\\" || \\\"inherit\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/direction`"}, draw-window {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 231, :column 7, :end-line 231, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The non-standard and internal only CanvasRenderingContext2D.drawWindow()\n  of the Canvas 2D API renders a region of a window into the canvas.\n  contents of the window's viewport are rendered, ignoring viewport\n  and scrolling.\n\n  `void ctx.drawWindow(window, x, y, w, h, bgColor [, flags]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/draw-window, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The non-standard and internal only CanvasRenderingContext2D.drawWindow()\n  of the Canvas 2D API renders a region of a window into the canvas.\n  contents of the window's viewport are rendered, ignoring viewport\n  and scrolling.\n\n  `void ctx.drawWindow(window, x, y, w, h, bgColor [, flags]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWindow`"}, filter {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 751, :column 7, :end-line 751, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.filter property of the Canvas 2D\n  provides filter effects such as blurring and grayscaling. It\n  similar to the CSS `web.filter` property and accepts the same\n\n  `ctx.filter = \\\"<filter-function1> [<filter-function2>] [<filter-functionN>]\\\";\n  ctx.filter = \\\"none\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter`"}, :name web.CanvasRenderingContext2D/filter, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 751, :end-line 751, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.filter property of the Canvas 2D\n  provides filter effects such as blurring and grayscaling. It\n  similar to the CSS `web.filter` property and accepts the same\n\n  `ctx.filter = \\\"<filter-function1> [<filter-function2>] [<filter-functionN>]\\\";\n  ctx.filter = \\\"none\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/filter`"}, miter-limit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1019, :column 7, :end-line 1019, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.miterLimit property of the Canvas\n  API sets the miter limit ratio.\n\n  `ctx.miterLimit = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit`"}, :name web.CanvasRenderingContext2D/miter-limit, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1019, :end-line 1019, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.miterLimit property of the Canvas\n  API sets the miter limit ratio.\n\n  `ctx.miterLimit = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/miterLimit`"}, set-shadow-offset-x! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 1125, :column 7, :end-line 1125, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetX property of the Canvas\n  API specifies the distance that shadows will be offset horizontally.\n\n  `ctx.shadowOffsetX = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left. The default value is 0 (no horizontal offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX`"}, :name web.CanvasRenderingContext2D/set-shadow-offset-x!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1125, :end-line 1125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.shadowOffsetX property of the Canvas\n  API specifies the distance that shadows will be offset horizontally.\n\n  `ctx.shadowOffsetX = offset;\n\n\n  offset\n  A float specifying the distance that shadows will be offset horizontally. Positive values are to the right, and negative to the left. The default value is 0 (no horizontal offset). `web.Infinity` and `web.NaN` values are ignored.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX`"}, set-global-alpha! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 818, :column 7, :end-line 818, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalAlpha property of the Canvas\n  API specifies the alpha (transparency) value that is applied\n  shapes and images before they are drawn onto the canvas.\n\n  `ctx.globalAlpha = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha`"}, :name web.CanvasRenderingContext2D/set-global-alpha!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 818, :end-line 818, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalAlpha property of the Canvas\n  API specifies the alpha (transparency) value that is applied\n  shapes and images before they are drawn onto the canvas.\n\n  `ctx.globalAlpha = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalAlpha`"}, line-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 995, :column 7, :end-line 995, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineWidth property of the Canvas\n  API sets the thickness of lines.\n\n  `ctx.lineWidth = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth`"}, :name web.CanvasRenderingContext2D/line-width, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 995, :end-line 995, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineWidth property of the Canvas\n  API sets the thickness of lines.\n\n  `ctx.lineWidth = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineWidth`"}, is-point-in-stroke {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 341, :column 7, :end-line 341, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.isPointInStroke() method of the\n  2D API reports whether or not the specified point is inside the\n  contained by the stroking of a path.\n\n  `ctx.isPointInStroke(x, y);\n  ctx.isPointInStroke(path, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/is-point-in-stroke, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 341, :end-line 341, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.isPointInStroke() method of the\n  2D API reports whether or not the specified point is inside the\n  contained by the stroking of a path.\n\n  `ctx.isPointInStroke(x, y);\n  ctx.isPointInStroke(path, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/isPointInStroke`"}, global-composite-operation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 831, :column 7, :end-line 831, :end-column 33, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalCompositeOperation property\n  the Canvas 2D API sets the type of compositing operation to apply\n  drawing new shapes.\n\n  `ctx.globalCompositeOperation = type;\n\n  type is a `web.String` identifying which of the compositing or blending mode operations to use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation`"}, :name web.CanvasRenderingContext2D/global-composite-operation, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 831, :end-line 831, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.globalCompositeOperation property\n  the Canvas 2D API sets the type of compositing operation to apply\n  drawing new shapes.\n\n  `ctx.globalCompositeOperation = type;\n\n  type is a `web.String` identifying which of the compositing or blending mode operations to use.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation`"}, remove-hit-region {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 439, :column 7, :end-line 439, :end-column 24, :arglists (quote ([this id])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method removeHitRegion() removes\n  given hit region from the canvas.\n\n  `void ctx.removeHitRegion(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion`"}, :name web.CanvasRenderingContext2D/remove-hit-region, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 24, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 439, :end-line 439, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method removeHitRegion() removes\n  given hit region from the canvas.\n\n  `void ctx.removeHitRegion(id);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/removeHitRegion`"}, set-image-smoothing-enabled! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 875, :column 7, :end-line 875, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The imageSmoothingEnabled property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, determines whether scaled images are\n  (true, default) or not (false). On getting the imageSmoothingEnabled\n  the last value it was set to is returned.\n\n  `ctx.imageSmoothingEnabled = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled`"}, :name web.CanvasRenderingContext2D/set-image-smoothing-enabled!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 875, :end-line 875, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The imageSmoothingEnabled property of the `web.CanvasRenderingContext2D`\n  part of the Canvas API, determines whether scaled images are\n  (true, default) or not (false). On getting the imageSmoothingEnabled\n  the last value it was set to is returned.\n\n  `ctx.imageSmoothingEnabled = value;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled`"}, ellipse {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 245, :column 7, :end-line 245, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.ellipse() method of the Canvas 2D\n  adds an elliptical arc to the current sub-path.\n\n  `void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\n\n  The ellipse() method creates an elliptical arc centered at (x, y) with the radii radiusX and radiusY. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/ellipse, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 245, :end-line 245, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.ellipse() method of the Canvas 2D\n  adds an elliptical arc to the current sub-path.\n\n  `void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\n\n  The ellipse() method creates an elliptical arc centered at (x, y) with the radii radiusX and radiusY. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse`"}, fill-style {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 721, :column 7, :end-line 721, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.fillStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use inside shapes.\n  default style is #000 (black).\n\n  `ctx.fillStyle = color;\n  ctx.fillStyle = gradient;\n  ctx.fillStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle`"}, :name web.CanvasRenderingContext2D/fill-style, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 721, :end-line 721, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The CanvasRenderingContext2D.fillStyle property of the Canvas\n  API specifies the color, gradient, or pattern to use inside shapes.\n  default style is #000 (black).\n\n  `ctx.fillStyle = color;\n  ctx.fillStyle = gradient;\n  ctx.fillStyle = pattern;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillStyle`"}, set-canvas! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 649, :column 7, :end-line 649, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.canvas property, part of the Canvas\n  is a read-only reference to the `html.HTMLCanvasElement` object\n  is associated with a given context. It might be `web.null` if\n  is no associated `web.<canvas>` element.\n\n  `ctx.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas`"}, :name web.CanvasRenderingContext2D/set-canvas!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 649, :end-line 649, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.canvas property, part of the Canvas\n  is a read-only reference to the `html.HTMLCanvasElement` object\n  is associated with a given context. It might be `web.null` if\n  is no associated `web.<canvas>` element.\n\n  `ctx.canvas;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/canvas`"}, rotate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 477, :column 7, :end-line 477, :end-column 13, :arglists (quote ([this angle])), :doc "Method.\n\n  The CanvasRenderingContext2D.rotate() method of the Canvas 2D\n  adds a rotation to the transformation matrix.\n\n  `void ctx.rotate(angle);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate`"}, :name web.CanvasRenderingContext2D/rotate, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 13, :method-params ([this angle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 477, :end-line 477, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this angle])), :doc "Method.\n\n  The CanvasRenderingContext2D.rotate() method of the Canvas 2D\n  adds a rotation to the transformation matrix.\n\n  `void ctx.rotate(angle);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rotate`"}, draw-widget-as-on-screen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 216, :column 7, :end-line 216, :end-column 31, :arglists (quote ([this window])), :doc "Method.\n\n  The non-standard and internal only CanvasRenderingContext2D.drawWidgetAsOnScreen()\n  of the Canvas 2D API renders the root widget of a window into\n  canvas. Unlike `web.drawWindow()`, this API uses the operating\n  to snapshot the widget on-screen, rather than reading from Gecko's\n  compositor.\n\n  `void ctx.drawWidgetAsOnScreen(window);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWidgetAsOnScreen`"}, :name web.CanvasRenderingContext2D/draw-widget-as-on-screen, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 31, :method-params ([this window]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 216, :end-line 216, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this window])), :doc "Method.\n\n  The non-standard and internal only CanvasRenderingContext2D.drawWidgetAsOnScreen()\n  of the Canvas 2D API renders the root widget of a window into\n  canvas. Unlike `web.drawWindow()`, this API uses the operating\n  to snapshot the widget on-screen, rather than reading from Gecko's\n  compositor.\n\n  `void ctx.drawWidgetAsOnScreen(window);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawWidgetAsOnScreen`"}, translate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 621, :column 7, :end-line 621, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.translate() method of the Canvas\n  API adds a translation transformation to the current matrix.\n\n  `void ctx.translate(x, y);\n\n  The translate() method adds a translation transformation to the current matrix by moving the canvas and its origin x units horizontally and y units vertically on the grid.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/translate, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 621, :end-line 621, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.translate() method of the Canvas\n  API adds a translation transformation to the current matrix.\n\n  `void ctx.translate(x, y);\n\n  The translate() method adds a translation transformation to the current matrix by moving the canvas and its origin x units horizontally and y units vertically on the grid.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/translate`"}, fill-rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 272, :column 7, :end-line 272, :end-column 16, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.fillRect() method of the Canvas\n  API draws a rectangle that is filled according to the current\n\n  `void ctx.fillRect(x, y, width, height);\n\n  The fillRect() method draws a filled rectangle whose starting point is at (x, y) and whose size is specified by width and height. The fill style is determined by the current fillStyle attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.CanvasRenderingContext2D/fill-rect, :variadic true, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 272, :end-line 272, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.fillRect() method of the Canvas\n  API draws a rectangle that is filled according to the current\n\n  `void ctx.fillRect(x, y, width, height);\n\n  The fillRect() method draws a filled rectangle whose starting point is at (x, y) and whose size is specified by width and height. The fill style is determined by the current fillStyle attribute.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect`"}, set-line-cap! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/CanvasRenderingContext2D.cljs", :line 925, :column 7, :end-line 925, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineCap property of the Canvas 2D\n  determines the shape used to draw the end points of lines.\n\n  `ctx.lineCap = \\\"butt\\\" || \\\"round\\\" || \\\"square\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap`"}, :name web.CanvasRenderingContext2D/set-line-cap!, :variadic false, :file "src/web/CanvasRenderingContext2D.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 925, :end-line 925, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The CanvasRenderingContext2D.lineCap property of the Canvas 2D\n  determines the shape used to draw the end points of lines.\n\n  `ctx.lineCap = \\\"butt\\\" || \\\"round\\\" || \\\"square\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineCap`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The CanvasRenderingContext2D interface, part of the Canvas API,\n  the 2D rendering context for the drawing surface of a `web.<canvas>`\n  It is used for drawing shapes, text, images, and other objects."}