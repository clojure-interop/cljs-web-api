{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{delay}, :name web.EffectTiming, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-fill! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 206, :column 7, :end-line 206, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The Web Animations API's `web.EffectTiming` dictionary's fill\n  specifies a fill mode, which defines how the element to which\n  animation is applied should look when the animation sequence\n  not actively running, such as before the time specified by `web.iterationStart`\n  after animation's end time.\n\n  `var timingProperties = {\n  fill: \\\"none\\\" | \\\"forwards\\\" | \\\"backwards\\\" | \\\"both\\\" | \\\"auto\\\"\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill`"}, :name web.EffectTiming/set-fill!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Web Animations API's `web.EffectTiming` dictionary's fill\n  specifies a fill mode, which defines how the element to which\n  animation is applied should look when the animation sequence\n  not actively running, such as before the time specified by `web.iterationStart`\n  after animation's end time.\n\n  `var timingProperties = {\n  fill: \\\"none\\\" | \\\"forwards\\\" | \\\"backwards\\\" | \\\"both\\\" | \\\"auto\\\"\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill`"}, direction {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 43, :column 7, :end-line 43, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The direction property of the Web Animations API dictionary `web.EffectTiming`\n  an animation's playback direction along its timeline, as well\n  its behavior when it reaches the end of an interation\n\n  `var timingProperties = {\n  direction: \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\"\n  };\n\n  timingProperties.direction = \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction`"}, :name web.EffectTiming/direction, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 43, :end-line 43, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The direction property of the Web Animations API dictionary `web.EffectTiming`\n  an animation's playback direction along its timeline, as well\n  its behavior when it reaches the end of an interation\n\n  `var timingProperties = {\n  direction: \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\"\n  };\n\n  timingProperties.direction = \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction`"}, delay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 9, :column 7, :end-line 9, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's delay property in the Web\n  API represents the number of milliseconds to delay the start\n  the animation.\n\n  `var timingProperties = {\n  delay: delayInMilliseconds\n  };\n\n  timingProperties.delay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay`"}, :name web.EffectTiming/delay, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's delay property in the Web\n  API represents the number of milliseconds to delay the start\n  the animation.\n\n  `var timingProperties = {\n  delay: delayInMilliseconds\n  };\n\n  timingProperties.delay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay`"}, set-delay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 26, :column 7, :end-line 26, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's delay property in the Web\n  API represents the number of milliseconds to delay the start\n  the animation.\n\n  `var timingProperties = {\n  delay: delayInMilliseconds\n  };\n\n  timingProperties.delay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay`"}, :name web.EffectTiming/set-delay!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's delay property in the Web\n  API represents the number of milliseconds to delay the start\n  the animation.\n\n  `var timingProperties = {\n  delay: delayInMilliseconds\n  };\n\n  timingProperties.delay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/delay`"}, set-iterations! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 242, :column 7, :end-line 242, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The Web Animations API dictionary `web.EffectTiming`'s iterations\n  specifies the number of times the animation should repeat. The\n  value is 1, indicating that it should only play once, but you\n  set it to any floating-point value (including positive `web.Infinity`\n  to 1, and can also take a value of Infinity to make it loop infinitely.\n\n  `var timingProperties = {\n  iterations: numberOfIterations\n  };\n\n  timingProperties.iterations = numberOfIterations;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations`"}, :name web.EffectTiming/set-iterations!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The Web Animations API dictionary `web.EffectTiming`'s iterations\n  specifies the number of times the animation should repeat. The\n  value is 1, indicating that it should only play once, but you\n  set it to any floating-point value (including positive `web.Infinity`\n  to 1, and can also take a value of Infinity to make it loop infinitely.\n\n  `var timingProperties = {\n  iterations: numberOfIterations\n  };\n\n  timingProperties.iterations = numberOfIterations;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations`"}, end-delay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 147, :column 7, :end-line 147, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The endDelay property of the `web.EffectTiming` dictionary (part\n  the Web Animations API) indicates the number of milliseconds\n  delay after the active period of an animation sequence. The animation's\n  time—the time at which an iteration is considered to have finished—is\n  time at which the animation finishes an iteration (its initial\n  `web.AnimationEffectTimingReadOnly.delay`, plus its duration,`web.duration`,\n  its end delay.\n\n  `var timingProperties = {\n  endDelay: delayInMilliseconds\n  }\n\n  timingProperties.endDelay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay`"}, :name web.EffectTiming/end-delay, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The endDelay property of the `web.EffectTiming` dictionary (part\n  the Web Animations API) indicates the number of milliseconds\n  delay after the active period of an animation sequence. The animation's\n  time—the time at which an iteration is considered to have finished—is\n  time at which the animation finishes an iteration (its initial\n  `web.AnimationEffectTimingReadOnly.delay`, plus its duration,`web.duration`,\n  its end delay.\n\n  `var timingProperties = {\n  endDelay: delayInMilliseconds\n  }\n\n  timingProperties.endDelay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay`"}, set-duration! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 95, :column 7, :end-line 95, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property of the dictionary `web.EffectTiming` in\n  Web Animations API specifies the duration in milliseconds that\n  single iteration (from beginning to end) the animation should\n  to complete.\n\n  `var timingProperties = {\n  duration: durationInMilliseconds | \\\"auto\\\"\n  };\n\n  timingProperties.duration = durationInMilliseconds | \\\"auto\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration`"}, :name web.EffectTiming/set-duration!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The duration property of the dictionary `web.EffectTiming` in\n  Web Animations API specifies the duration in milliseconds that\n  single iteration (from beginning to end) the animation should\n  to complete.\n\n  `var timingProperties = {\n  duration: durationInMilliseconds | \\\"auto\\\"\n  };\n\n  timingProperties.duration = durationInMilliseconds | \\\"auto\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration`"}, set-iteration-start! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 278, :column 7, :end-line 278, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  Web Animations API's `web.EffectTiming` dictionary's iterationStart\n  specifies the repetition number which repetition the animation\n  at and its progress through it.\n\n  `var timingProperties = {\n  iterationStart = iterationNumber\n  };\n\n  timingProperties.iterationStart = iterationNumber;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart`"}, :name web.EffectTiming/set-iteration-start!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  Web Animations API's `web.EffectTiming` dictionary's iterationStart\n  specifies the repetition number which repetition the animation\n  at and its progress through it.\n\n  `var timingProperties = {\n  iterationStart = iterationNumber\n  };\n\n  timingProperties.iterationStart = iterationNumber;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart`"}, fill {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 189, :column 7, :end-line 189, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The Web Animations API's `web.EffectTiming` dictionary's fill\n  specifies a fill mode, which defines how the element to which\n  animation is applied should look when the animation sequence\n  not actively running, such as before the time specified by `web.iterationStart`\n  after animation's end time.\n\n  `var timingProperties = {\n  fill: \\\"none\\\" | \\\"forwards\\\" | \\\"backwards\\\" | \\\"both\\\" | \\\"auto\\\"\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill`"}, :name web.EffectTiming/fill, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 189, :end-line 189, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Web Animations API's `web.EffectTiming` dictionary's fill\n  specifies a fill mode, which defines how the element to which\n  animation is applied should look when the animation sequence\n  not actively running, such as before the time specified by `web.iterationStart`\n  after animation's end time.\n\n  `var timingProperties = {\n  fill: \\\"none\\\" | \\\"forwards\\\" | \\\"backwards\\\" | \\\"both\\\" | \\\"auto\\\"\n  }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/fill`"}, set-easing! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 130, :column 7, :end-line 130, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's easing property in the Web\n  API specifies the timing function used to scale the time to produce\n  effects, where easing is the rate of the animation's change over\n\n  `var timingProperties = {\n  easing: single-transition-timing-function\n  }\n\n  timingProperties.easing = single-transition-timing-function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing`"}, :name web.EffectTiming/set-easing!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 130, :end-line 130, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's easing property in the Web\n  API specifies the timing function used to scale the time to produce\n  effects, where easing is the rate of the animation's change over\n\n  `var timingProperties = {\n  easing: single-transition-timing-function\n  }\n\n  timingProperties.easing = single-transition-timing-function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing`"}, easing {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 113, :column 7, :end-line 113, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's easing property in the Web\n  API specifies the timing function used to scale the time to produce\n  effects, where easing is the rate of the animation's change over\n\n  `var timingProperties = {\n  easing: single-transition-timing-function\n  }\n\n  timingProperties.easing = single-transition-timing-function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing`"}, :name web.EffectTiming/easing, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `web.EffectTiming` dictionary's easing property in the Web\n  API specifies the timing function used to scale the time to produce\n  effects, where easing is the rate of the animation's change over\n\n  `var timingProperties = {\n  easing: single-transition-timing-function\n  }\n\n  timingProperties.easing = single-transition-timing-function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/easing`"}, duration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 77, :column 7, :end-line 77, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The duration property of the dictionary `web.EffectTiming` in\n  Web Animations API specifies the duration in milliseconds that\n  single iteration (from beginning to end) the animation should\n  to complete.\n\n  `var timingProperties = {\n  duration: durationInMilliseconds | \\\"auto\\\"\n  };\n\n  timingProperties.duration = durationInMilliseconds | \\\"auto\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration`"}, :name web.EffectTiming/duration, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The duration property of the dictionary `web.EffectTiming` in\n  Web Animations API specifies the duration in milliseconds that\n  single iteration (from beginning to end) the animation should\n  to complete.\n\n  `var timingProperties = {\n  duration: durationInMilliseconds | \\\"auto\\\"\n  };\n\n  timingProperties.duration = durationInMilliseconds | \\\"auto\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/duration`"}, iteration-start {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 261, :column 7, :end-line 261, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  Web Animations API's `web.EffectTiming` dictionary's iterationStart\n  specifies the repetition number which repetition the animation\n  at and its progress through it.\n\n  `var timingProperties = {\n  iterationStart = iterationNumber\n  };\n\n  timingProperties.iterationStart = iterationNumber;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart`"}, :name web.EffectTiming/iteration-start, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 261, :end-line 261, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  Web Animations API's `web.EffectTiming` dictionary's iterationStart\n  specifies the repetition number which repetition the animation\n  at and its progress through it.\n\n  `var timingProperties = {\n  iterationStart = iterationNumber\n  };\n\n  timingProperties.iterationStart = iterationNumber;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterationStart`"}, set-direction! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 60, :column 7, :end-line 60, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The direction property of the Web Animations API dictionary `web.EffectTiming`\n  an animation's playback direction along its timeline, as well\n  its behavior when it reaches the end of an interation\n\n  `var timingProperties = {\n  direction: \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\"\n  };\n\n  timingProperties.direction = \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction`"}, :name web.EffectTiming/set-direction!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 60, :end-line 60, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The direction property of the Web Animations API dictionary `web.EffectTiming`\n  an animation's playback direction along its timeline, as well\n  its behavior when it reaches the end of an interation\n\n  `var timingProperties = {\n  direction: \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\"\n  };\n\n  timingProperties.direction = \\\"normal\\\" | \\\"reverse\\\" | \\\"alternate\\\" | \\\"alternate-reverse\\\";`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/direction`"}, set-end-delay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 168, :column 7, :end-line 168, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The endDelay property of the `web.EffectTiming` dictionary (part\n  the Web Animations API) indicates the number of milliseconds\n  delay after the active period of an animation sequence. The animation's\n  time—the time at which an iteration is considered to have finished—is\n  time at which the animation finishes an iteration (its initial\n  `web.AnimationEffectTimingReadOnly.delay`, plus its duration,`web.duration`,\n  its end delay.\n\n  `var timingProperties = {\n  endDelay: delayInMilliseconds\n  }\n\n  timingProperties.endDelay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay`"}, :name web.EffectTiming/set-end-delay!, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The endDelay property of the `web.EffectTiming` dictionary (part\n  the Web Animations API) indicates the number of milliseconds\n  delay after the active period of an animation sequence. The animation's\n  time—the time at which an iteration is considered to have finished—is\n  time at which the animation finishes an iteration (its initial\n  `web.AnimationEffectTimingReadOnly.delay`, plus its duration,`web.duration`,\n  its end delay.\n\n  `var timingProperties = {\n  endDelay: delayInMilliseconds\n  }\n\n  timingProperties.endDelay = delayInMilliseconds;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/endDelay`"}, iterations {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/EffectTiming.cljs", :line 223, :column 7, :end-line 223, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The Web Animations API dictionary `web.EffectTiming`'s iterations\n  specifies the number of times the animation should repeat. The\n  value is 1, indicating that it should only play once, but you\n  set it to any floating-point value (including positive `web.Infinity`\n  to 1, and can also take a value of Infinity to make it loop infinitely.\n\n  `var timingProperties = {\n  iterations: numberOfIterations\n  };\n\n  timingProperties.iterations = numberOfIterations;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations`"}, :name web.EffectTiming/iterations, :variadic false, :file "src/web/EffectTiming.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The Web Animations API dictionary `web.EffectTiming`'s iterations\n  specifies the number of times the animation should repeat. The\n  value is 1, indicating that it should only play once, but you\n  set it to any floating-point value (including positive `web.Infinity`\n  to 1, and can also take a value of Infinity to make it loop infinitely.\n\n  `var timingProperties = {\n  iterations: numberOfIterations\n  };\n\n  timingProperties.iterations = numberOfIterations;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/EffectTiming/iterations`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The EffectTiming dictionary, part of the Web Animations API,\n  used by `web.Element.animate()`, `web.KeyframeEffectReadOnly()`,\n  `web.KeyframeEffect()` to describe timing properties for animation\n  These properties are all optional, although without setting a\n  the animation will not play."}