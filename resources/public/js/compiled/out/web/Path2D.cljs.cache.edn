{:rename-macros {}, :renames {}, :externs {Path2D {}}, :use-macros {}, :excludes #{}, :name web.Path2D, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {rect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 148, :column 7, :end-line 148, :end-column 11, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.rect() method of the Canvas 2D API\n  a rectangle to the current path.\n\n  `void ctx.rect(x, y, width, height);\n\n  The rect() method creates a rectangular path whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Path2D/rect, :variadic true, :file "src/web/Path2D.cljs", :end-column 11, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 148, :end-line 148, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.rect() method of the Canvas 2D API\n  a rectangle to the current path.\n\n  `void ctx.rect(x, y, width, height);\n\n  The rect() method creates a rectangular path whose starting point is at (x, y) and whose size is specified by width and height.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/rect`"}, arc-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 120, :column 7, :end-line 120, :end-column 13, :arglists (quote ([this x-1 y-1 x-2 y-2 radius])), :doc "Method.\n\n  The CanvasRenderingContext2D.arcTo() method of the Canvas 2D\n  adds a circular arc to the current sub-path, using the given\n  points and radius. The arc is automatically connected to the\n  latest point with a straight line, if necessary for the specified\n\n  `void ctx.arcTo(x1, y1, x2, y2, radius);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo`"}, :name web.Path2D/arc-to, :variadic false, :file "src/web/Path2D.cljs", :end-column 13, :method-params ([this x-1 y-1 x-2 y-2 radius]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 6, :fn-var true, :arglists (quote ([this x-1 y-1 x-2 y-2 radius])), :doc "Method.\n\n  The CanvasRenderingContext2D.arcTo() method of the Canvas 2D\n  adds a circular arc to the current sub-path, using the given\n  points and radius. The arc is automatically connected to the\n  latest point with a straight line, if necessary for the specified\n\n  `void ctx.arcTo(x1, y1, x2, y2, radius);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arcTo`"}, bezier-curve-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 74, :column 7, :end-line 74, :end-column 22, :arglists (quote ([this cp-1x cp-1y cp-2x cp-2y x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas\n  API adds a cubic Bézier curve to the current sub-path. It requires\n  points: the first two are control points and the third one is\n  end point. The starting point is the latest point in the current\n  which can be changed using `web.moveTo()` before creating the\n  curve.\n\n  `void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo`"}, :name web.Path2D/bezier-curve-to, :variadic false, :file "src/web/Path2D.cljs", :end-column 22, :method-params ([this cp-1x cp-1y cp-2x cp-2y x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 74, :end-line 74, :max-fixed-arity 7, :fn-var true, :arglists (quote ([this cp-1x cp-1y cp-2x cp-2y x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.bezierCurveTo() method of the Canvas\n  API adds a cubic Bézier curve to the current sub-path. It requires\n  points: the first two are control points and the third one is\n  end point. The starting point is the latest point in the current\n  which can be changed using `web.moveTo()` before creating the\n  curve.\n\n  `void ctx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo`"}, quadratic-curve-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 90, :column 7, :end-line 90, :end-column 25, :arglists (quote ([this cpx cpy x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.quadraticCurveTo() method of the\n  2D API adds a quadratic Bézier curve to the current sub-path.\n  requires two points: the first one is a control point and the\n  one is the end point. The starting point is the latest point\n  the current path, which can be changed using `web.moveTo()` before\n  the quadratic Bézier curve.\n\n  `void ctx.quadraticCurveTo(cpx, cpy, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo`"}, :name web.Path2D/quadratic-curve-to, :variadic false, :file "src/web/Path2D.cljs", :end-column 25, :method-params ([this cpx cpy x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 5, :fn-var true, :arglists (quote ([this cpx cpy x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.quadraticCurveTo() method of the\n  2D API adds a quadratic Bézier curve to the current sub-path.\n  requires two points: the first one is a control point and the\n  one is the end point. The starting point is the latest point\n  the current path, which can be changed using `web.moveTo()` before\n  the quadratic Bézier curve.\n\n  `void ctx.quadraticCurveTo(cpx, cpy, x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo`"}, arc {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 106, :column 7, :end-line 106, :end-column 10, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.arc() method of the Canvas 2D API\n  a circular arc to the current sub-path.\n\n  `void ctx.arc(x, y, radius, startAngle, endAngle [, anticlockwise]);\n\n  The arc() method creates a circular arc centered at (x, y) with a radius of radius. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Path2D/arc, :variadic true, :file "src/web/Path2D.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 106, :end-line 106, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.arc() method of the Canvas 2D API\n  a circular arc to the current sub-path.\n\n  `void ctx.arc(x, y, radius, startAngle, endAngle [, anticlockwise]);\n\n  The arc() method creates a circular arc centered at (x, y) with a radius of radius. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/arc`"}, close-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 34, :column 7, :end-line 34, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.closePath() method of the Canvas\n  API attempts to add a straight line from the current point to\n  start of the current sub-path. If the shape has already been\n  or has only one point, this function does nothing.\n\n  `void ctx.closePath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath`"}, :name web.Path2D/close-path, :variadic false, :file "src/web/Path2D.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The CanvasRenderingContext2D.closePath() method of the Canvas\n  API attempts to add a straight line from the current point to\n  start of the current sub-path. If the shape has already been\n  or has only one point, this function does nothing.\n\n  `void ctx.closePath();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath`"}, move-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 48, :column 7, :end-line 48, :end-column 14, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.moveTo() method of the Canvas 2D\n  begins a new sub-path at the point specified by the given (x,\n  coordinates.\n\n  `void ctx.moveTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo`"}, :name web.Path2D/move-to, :variadic false, :file "src/web/Path2D.cljs", :end-column 14, :method-params ([this x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x y])), :doc "Method.\n\n  The CanvasRenderingContext2D.moveTo() method of the Canvas 2D\n  begins a new sub-path at the point specified by the given (x,\n  coordinates.\n\n  `void ctx.moveTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/moveTo`"}, line-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 61, :column 7, :end-line 61, :end-column 14, :arglists (quote ([this x y])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method lineTo(), part of the\n  2D API, adds a straight line to the current sub-path by connecting\n  sub-path's last point to the specified (x, y) coordinates.\n\n  `ctx.lineTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo`"}, :name web.Path2D/line-to, :variadic false, :file "src/web/Path2D.cljs", :end-column 14, :method-params ([this x y]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this x y])), :doc "Method.\n\n  The `web.CanvasRenderingContext2D` method lineTo(), part of the\n  2D API, adds a straight line to the current sub-path by connecting\n  sub-path's last point to the specified (x, y) coordinates.\n\n  `ctx.lineTo(x, y);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/lineTo`"}, add-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 22, :column 7, :end-line 22, :end-column 15, :arglists (quote ([this & args])), :doc "Method.\n\n  The Path2D.addPath() method of the Canvas 2D API adds one `web.Path2D`\n  to another Path2D object.\n\n  `void path.addPath(path [, transform]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Path2D/add-path, :variadic true, :file "src/web/Path2D.cljs", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The Path2D.addPath() method of the Canvas 2D API adds one `web.Path2D`\n  to another Path2D object.\n\n  `void path.addPath(path [, transform]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Path2D/addPath`"}, constructor {:name web.Path2D/constructor, :file "src/web/Path2D.cljs", :line 9, :column 1, :end-line 9, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 9, :column 6, :end-line 9, :end-column 17}, :doc "Constructor.\n\n  The Path2D() constructor returns a newly instantiated Path2D object, optionally with another path as an argument (creates a copy), or optionally with a string consisting of SVG path data.\n\n  path Optional\n  When invoked with another Path2D object, a copy of the path argument is created.\n  d Optional\n  When invoked with a string consisting of SVG path data, a new path is created from that description.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/Path2D/Path2D`", :tag js}, ellipse {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/Path2D.cljs", :line 134, :column 7, :end-line 134, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The CanvasRenderingContext2D.ellipse() method of the Canvas 2D\n  adds an elliptical arc to the current sub-path.\n\n  `void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\n\n  The ellipse() method creates an elliptical arc centered at (x, y) with the radii radiusX and radiusY. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name web.Path2D/ellipse, :variadic true, :file "src/web/Path2D.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 134, :end-line 134, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The CanvasRenderingContext2D.ellipse() method of the Canvas 2D\n  adds an elliptical arc to the current sub-path.\n\n  `void ctx.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle [, anticlockwise]);\n\n  The ellipse() method creates an elliptical arc centered at (x, y) with the radii radiusX and radiusY. The path starts at startAngle and ends at endAngle, and travels in the direction given by anticlockwise (defaulting to clockwise).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The Path2D interface of the Canvas 2D API is used to declare\n  path that can then be used on a `web.CanvasRenderingContext2D`\n  The path methods of the CanvasRenderingContext2D interface are\n  present on this interface, which gives you the convenience of\n  able to retain and replay your path whenever desired."}