{:rename-macros {}, :renames {}, :externs {ReadableStreamBYOBReader {}}, :use-macros {}, :excludes #{}, :name web.ReadableStreamBYOBReader, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name web.ReadableStreamBYOBReader/constructor, :file "src/web/ReadableStreamBYOBReader.cljs", :line 7, :column 1, :end-line 7, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 7, :column 6, :end-line 7, :end-column 17}, :doc "Constructor.\n\n  The ReadableStreamBYOBReader() constructor creates and returns a ReadableStreamBYOBReader() object instance.\n\n  stream\n  The `web.ReadableStream` to be read.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/ReadableStreamBYOBReader`", :tag js}, cancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 18, :column 7, :end-line 18, :end-column 13, :arglists (quote ([this reason])), :doc "Method.\n\n  The cancel() method of the `web.ReadableStreamBYOBReader` interface\n  the stream, signaling a loss of interest in the stream by a consumer.\n  supplied reason argument will be given to the underlying source,\n  may or may not use it.\n\n  `Promise<reason> readableStreamBYOBReaderInstance.cancel(reason);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/cancel`"}, :name web.ReadableStreamBYOBReader/cancel, :variadic false, :file "src/web/ReadableStreamBYOBReader.cljs", :end-column 13, :method-params ([this reason]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this reason])), :doc "Method.\n\n  The cancel() method of the `web.ReadableStreamBYOBReader` interface\n  the stream, signaling a loss of interest in the stream by a consumer.\n  supplied reason argument will be given to the underlying source,\n  may or may not use it.\n\n  `Promise<reason> readableStreamBYOBReaderInstance.cancel(reason);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/cancel`"}, read {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 32, :column 7, :end-line 32, :end-column 11, :arglists (quote ([this view])), :doc "Method.\n\n  The read() method of the `web.ReadableStreamBYOBReader` interface\n  a promise providing access to the next chunk in the byte stream's\n  queue.\n\n  `Promise<result> readableStreamBYOBReaderInstance.read(view);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/read`"}, :name web.ReadableStreamBYOBReader/read, :variadic false, :file "src/web/ReadableStreamBYOBReader.cljs", :end-column 11, :method-params ([this view]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this view])), :doc "Method.\n\n  The read() method of the `web.ReadableStreamBYOBReader` interface\n  a promise providing access to the next chunk in the byte stream's\n  queue.\n\n  `Promise<result> readableStreamBYOBReaderInstance.read(view);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/read`"}, release-lock {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 45, :column 7, :end-line 45, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The releaseLock() method of the `web.ReadableStreamBYOBReader`\n  releases the reader's lock on the stream. After the lock is released,\n  reader is no longer active.\n\n  `readableStreamBYOBReaderInstance.releaseLock();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/releaseLock`"}, :name web.ReadableStreamBYOBReader/release-lock, :variadic false, :file "src/web/ReadableStreamBYOBReader.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The releaseLock() method of the `web.ReadableStreamBYOBReader`\n  releases the reader's lock on the stream. After the lock is released,\n  reader is no longer active.\n\n  `readableStreamBYOBReaderInstance.releaseLock();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/releaseLock`"}, closed {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The closed getter property of the `web.ReadableStreamBYOBReader`\n  returns a promise that fulfills if the stream becomes closed\n  the reader's lock is released, or rejects if the stream errors.\n\n  `var closed = readableStreamBYOBReaderInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/closed`"}, :name web.ReadableStreamBYOBReader/closed, :variadic false, :file "src/web/ReadableStreamBYOBReader.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The closed getter property of the `web.ReadableStreamBYOBReader`\n  returns a promise that fulfills if the stream becomes closed\n  the reader's lock is released, or rejects if the stream errors.\n\n  `var closed = readableStreamBYOBReaderInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/closed`"}, set-closed! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/web/ReadableStreamBYOBReader.cljs", :line 71, :column 7, :end-line 71, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The closed getter property of the `web.ReadableStreamBYOBReader`\n  returns a promise that fulfills if the stream becomes closed\n  the reader's lock is released, or rejects if the stream errors.\n\n  `var closed = readableStreamBYOBReaderInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/closed`"}, :name web.ReadableStreamBYOBReader/set-closed!, :variadic false, :file "src/web/ReadableStreamBYOBReader.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The closed getter property of the `web.ReadableStreamBYOBReader`\n  returns a promise that fulfills if the stream becomes closed\n  the reader's lock is released, or rejects if the stream errors.\n\n  `var closed = readableStreamBYOBReaderInstance.closed;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/ReadableStreamBYOBReader/closed`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The ReadableStreamDefaultReader interface of the Streams API\n  a BYOB (\\\"bring your own buffer\\\") reader that can be used to\n  stream data supplied by the developer (e.g. a custom `web.ReadableStream.ReadableStream()`"}