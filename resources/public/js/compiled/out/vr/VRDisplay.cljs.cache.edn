{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name vr.VRDisplay, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-capabilities! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 181, :column 7, :end-line 181, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The capabilities read-only property of the `vr.VRDisplay` interface\n  a `vr.VRDisplayCapabilities` object that indicates the various\n  of the VRDisplay.\n\n  `var myCapabilities = vrDisplayInstance.capabilities;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/capabilities`"}, :name vr.VRDisplay/set-capabilities!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The capabilities read-only property of the `vr.VRDisplay` interface\n  a `vr.VRDisplayCapabilities` object that indicates the various\n  of the VRDisplay.\n\n  `var myCapabilities = vrDisplayInstance.capabilities;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/capabilities`"}, request-animation-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 100, :column 7, :end-line 100, :end-column 30, :arglists (quote ([this callback])), :doc "Method.\n\n  The requestAnimationFrame() method of the `vr.VRDisplay` interface\n  a special implementation of `web.Window.requestAnimationFrame`\n  a callback function that will be called every time a new frame\n  the VRDisplay presentation is rendered:\n\n  `var handle = vrDisplayInstance.requestAnimationFrame(callback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame`"}, :name vr.VRDisplay/request-animation-frame, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 30, :method-params ([this callback]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 100, :end-line 100, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this callback])), :doc "Method.\n\n  The requestAnimationFrame() method of the `vr.VRDisplay` interface\n  a special implementation of `web.Window.requestAnimationFrame`\n  a callback function that will be called every time a new frame\n  the VRDisplay presentation is rendered:\n\n  `var handle = vrDisplayInstance.requestAnimationFrame(callback);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestAnimationFrame`"}, get-eye-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 36, :column 7, :end-line 36, :end-column 25, :arglists (quote ([this which-eye])), :doc "Method.\n\n  The getEyeParameters() method of the `vr.VRDisplay` interface\n  the `vr.VREyeParameters` object containing the eye parameters\n  the specified eye.\n\n  `var myEyeParameters = vrDisplayInstance.getEyeParameters(whichEye);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getEyeParameters`"}, :name vr.VRDisplay/get-eye-parameters, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 25, :method-params ([this which-eye]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this which-eye])), :doc "Method.\n\n  The getEyeParameters() method of the `vr.VRDisplay` interface\n  the `vr.VREyeParameters` object containing the eye parameters\n  the specified eye.\n\n  `var myEyeParameters = vrDisplayInstance.getEyeParameters(whichEye);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getEyeParameters`"}, set-is-connected! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 317, :column 7, :end-line 317, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is connected\n  the computer.\n\n  `var isItConnected = vrDisplayInstance.isConnected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isConnected`"}, :name vr.VRDisplay/set-is-connected!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isConnected read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is connected\n  the computer.\n\n  `var isItConnected = vrDisplayInstance.isConnected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isConnected`"}, request-present {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 114, :column 7, :end-line 114, :end-column 22, :arglists (quote ([this & args])), :doc "Method.\n\n  The requestPresent() method of the `vr.VRDisplay` interface starts\n  VRDisplay presenting a scene.\n\n  `vrDisplayInstance.requestPresent(layers).then(function() {\n  // Do something after the presentation has begun\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestPresent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name vr.VRDisplay/request-present, :variadic true, :file "src/vr/VRDisplay.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The requestPresent() method of the `vr.VRDisplay` interface starts\n  VRDisplay presenting a scene.\n\n  `vrDisplayInstance.requestPresent(layers).then(function() {\n  // Do something after the presentation has begun\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/requestPresent`"}, hardware-unit-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 154, :column 7, :end-line 154, :end-column 23, :arglists (quote ([this])), :doc "Method.\n\n  The hardwareUnitId read-only property of the `vr.VRDevice` interface\n  the distinct hardware ID for the overall hardware unit that this\n  is a part of. All devices that are part of the same physical\n  of hardware will have the same hardwareUnitId.\n\n  `var hardwareID = VRDevice.hardwareUnitId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/hardwareUnitId`"}, :name vr.VRDisplay/hardware-unit-id, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The hardwareUnitId read-only property of the `vr.VRDevice` interface\n  the distinct hardware ID for the overall hardware unit that this\n  is a part of. All devices that are part of the same physical\n  of hardware will have the same hardwareUnitId.\n\n  `var hardwareID = VRDevice.hardwareUnitId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/hardwareUnitId`"}, display-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 254, :column 7, :end-line 254, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The displayId read-only property of the `vr.VRDisplay` interface\n  an identifier for this particular VRDisplay, which is also used\n  an association point in the Gamepad API (see `web.Gamepad.displayId`).\n\n  `var myDisplayID = vrDisplayInstance.displayId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayId`"}, :name vr.VRDisplay/display-id, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 254, :end-line 254, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The displayId read-only property of the `vr.VRDisplay` interface\n  an identifier for this particular VRDisplay, which is also used\n  an association point in the Gamepad API (see `web.Gamepad.displayId`).\n\n  `var myDisplayID = vrDisplayInstance.displayId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayId`"}, is-presenting {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 330, :column 7, :end-line 330, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The isPresenting read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is currently\n  content presented through it.\n\n  `var isItPresenting = vrDisplayInstance.isPresenting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isPresenting`"}, :name vr.VRDisplay/is-presenting, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 330, :end-line 330, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isPresenting read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is currently\n  content presented through it.\n\n  `var isItPresenting = vrDisplayInstance.isPresenting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isPresenting`"}, submit-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 141, :column 7, :end-line 141, :end-column 19, :arglists (quote ([this])), :doc "Method.\n\n  The submitFrame() method of the `vr.VRDisplay` interface captures\n  current state of the `vr.VRLayerInit` currently being presented\n  displays it on the VRDisplay.\n\n  `vrDisplayInstance.submitFrame();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/submitFrame`"}, :name vr.VRDisplay/submit-frame, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The submitFrame() method of the `vr.VRDisplay` interface captures\n  current state of the `vr.VRLayerInit` currently being presented\n  displays it on the VRDisplay.\n\n  `vrDisplayInstance.submitFrame();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/submitFrame`"}, set-stage-parameters! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 369, :column 7, :end-line 369, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The stageParameters read-only property of the `vr.VRDisplay`\n  returns a `vr.VRStageParameters` object containing room-scale\n  if the VRDisplay is capable of supporting room-scale experiences.\n\n  `var myStageParameters = vrDisplayInstance.stageParameters;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/stageParameters`"}, :name vr.VRDisplay/set-stage-parameters!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 369, :end-line 369, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The stageParameters read-only property of the `vr.VRDisplay`\n  returns a `vr.VRStageParameters` object containing room-scale\n  if the VRDisplay is capable of supporting room-scale experiences.\n\n  `var myStageParameters = vrDisplayInstance.stageParameters;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/stageParameters`"}, capabilities {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 168, :column 7, :end-line 168, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The capabilities read-only property of the `vr.VRDisplay` interface\n  a `vr.VRDisplayCapabilities` object that indicates the various\n  of the VRDisplay.\n\n  `var myCapabilities = vrDisplayInstance.capabilities;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/capabilities`"}, :name vr.VRDisplay/capabilities, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The capabilities read-only property of the `vr.VRDisplay` interface\n  a `vr.VRDisplayCapabilities` object that indicates the various\n  of the VRDisplay.\n\n  `var myCapabilities = vrDisplayInstance.capabilities;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/capabilities`"}, stage-parameters {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 356, :column 7, :end-line 356, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The stageParameters read-only property of the `vr.VRDisplay`\n  returns a `vr.VRStageParameters` object containing room-scale\n  if the VRDisplay is capable of supporting room-scale experiences.\n\n  `var myStageParameters = vrDisplayInstance.stageParameters;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/stageParameters`"}, :name vr.VRDisplay/stage-parameters, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 356, :end-line 356, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The stageParameters read-only property of the `vr.VRDisplay`\n  returns a `vr.VRStageParameters` object containing room-scale\n  if the VRDisplay is capable of supporting room-scale experiences.\n\n  `var myStageParameters = vrDisplayInstance.stageParameters;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/stageParameters`"}, get-pose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 87, :column 7, :end-line 87, :end-column 15, :arglists (quote ([this])), :doc "Method.\n\n  The getPose() method of the `vr.VRDisplay` interface returns\n  `vr.VRPose` object defining the future predicted pose of the\n  as it will be when the current frame is actually presented.\n\n  `var myPose = vrDisplayInstance.getPose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getPose`"}, :name vr.VRDisplay/get-pose, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getPose() method of the `vr.VRDisplay` interface returns\n  `vr.VRPose` object defining the future predicted pose of the\n  as it will be when the current frame is actually presented.\n\n  `var myPose = vrDisplayInstance.getPose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getPose`"}, get-frame-data {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 49, :column 7, :end-line 49, :end-column 21, :arglists (quote ([this frame-data])), :doc "Method.\n\n  The getFrameData() method of the `vr.VRDisplay` interface accepts\n  `vr.VRFrameData` object and populates it with the information\n  to render the current frame.\n\n  `vrDisplayInstance.getFrameData(frameData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getFrameData`"}, :name vr.VRDisplay/get-frame-data, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 21, :method-params ([this frame-data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this frame-data])), :doc "Method.\n\n  The getFrameData() method of the `vr.VRDisplay` interface accepts\n  `vr.VRFrameData` object and populates it with the information\n  to render the current frame.\n\n  `vrDisplayInstance.getFrameData(frameData);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getFrameData`"}, get-layers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 75, :column 7, :end-line 75, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The getLayers() method of the `vr.VRDisplay` interface returns\n  layers currently being presented by the VRDisplay.\n\n  `var myLayers = vrDisplayInstance.getLayers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getLayers`"}, :name vr.VRDisplay/get-layers, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getLayers() method of the `vr.VRDisplay` interface returns\n  layers currently being presented by the VRDisplay.\n\n  `var myLayers = vrDisplayInstance.getLayers();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getLayers`"}, set-display-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 292, :column 7, :end-line 292, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The displayName read-only property of the `vr.VRDisplay` interface\n  a human-readable name to identify the VRDisplay.\n\n  `var myDisplayName = vrDisplayInstance.displayName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayName`"}, :name vr.VRDisplay/set-display-name!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 292, :end-line 292, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The displayName read-only property of the `vr.VRDisplay` interface\n  a human-readable name to identify the VRDisplay.\n\n  `var myDisplayName = vrDisplayInstance.displayName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayName`"}, set-display-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 267, :column 7, :end-line 267, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The displayId read-only property of the `vr.VRDisplay` interface\n  an identifier for this particular VRDisplay, which is also used\n  an association point in the Gamepad API (see `web.Gamepad.displayId`).\n\n  `var myDisplayID = vrDisplayInstance.displayId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayId`"}, :name vr.VRDisplay/set-display-id!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 267, :end-line 267, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The displayId read-only property of the `vr.VRDisplay` interface\n  an identifier for this particular VRDisplay, which is also used\n  an association point in the Gamepad API (see `web.Gamepad.displayId`).\n\n  `var myDisplayID = vrDisplayInstance.displayId;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayId`"}, set-depth-near! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 239, :column 7, :end-line 239, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The depthNear property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the near plane of the eye view frustum,\n  the nearest viewable boundary of the scene.\n\n  `var mydepthNear = vrDisplayInstance.depthNear;\n\n  vrDisplayInstance.depthNear = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthNear`"}, :name vr.VRDisplay/set-depth-near!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 239, :end-line 239, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The depthNear property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the near plane of the eye view frustum,\n  the nearest viewable boundary of the scene.\n\n  `var mydepthNear = vrDisplayInstance.depthNear;\n\n  vrDisplayInstance.depthNear = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthNear`"}, get-immediate-pose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 62, :column 7, :end-line 62, :end-column 25, :arglists (quote ([this])), :doc "Method.\n\n  The getImmediatePose() method of the `vr.VRDisplay` interface\n  a `vr.VRPose` object defining the current pose of the VRDisplay,\n  no prediction applied.\n\n  `var myImmediatePose = vrDisplayInstance.getImmediatePose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getImmediatePose`"}, :name vr.VRDisplay/get-immediate-pose, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The getImmediatePose() method of the `vr.VRDisplay` interface\n  a `vr.VRPose` object defining the current pose of the VRDisplay,\n  no prediction applied.\n\n  `var myImmediatePose = vrDisplayInstance.getImmediatePose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/getImmediatePose`"}, cancel-animation-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 9, :column 7, :end-line 9, :end-column 29, :arglists (quote ([this handle])), :doc "Method.\n\n  The cancelAnimationFrame() method of the `vr.VRDisplay` interface\n  a special implementation of `web.Window.cancelAnimationFrame`\n  unregisters callbacks registered with `vr.VRDisplay.requestAnimationFrame()`.\n\n  `vrDisplayInstance.cancelAnimationFrame(handle);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/cancelAnimationFrame`"}, :name vr.VRDisplay/cancel-animation-frame, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 29, :method-params ([this handle]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this handle])), :doc "Method.\n\n  The cancelAnimationFrame() method of the `vr.VRDisplay` interface\n  a special implementation of `web.Window.cancelAnimationFrame`\n  unregisters callbacks registered with `vr.VRDisplay.requestAnimationFrame()`.\n\n  `vrDisplayInstance.cancelAnimationFrame(handle);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/cancelAnimationFrame`"}, exit-present {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 22, :column 7, :end-line 22, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The exitPresent() method of the `vr.VRDisplay` interface stops\n  VRDisplay presenting a scene.\n\n  `vrDisplayInstance.exitPresent().then(function() {\n  // Do something after the presentation has ended\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/exitPresent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name vr.VRDisplay/exit-present, :variadic true, :file "src/vr/VRDisplay.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The exitPresent() method of the `vr.VRDisplay` interface stops\n  VRDisplay presenting a scene.\n\n  `vrDisplayInstance.exitPresent().then(function() {\n  // Do something after the presentation has ended\n  });`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/exitPresent`"}, depth-far {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 194, :column 7, :end-line 194, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The depthFar property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the far plane of the eye view frustum, i.e.\n  furthest viewable boundary of the scene.\n\n  `var mydepthFar = vrDisplayInstance.depthFar;\n\n  vrDisplayInstance.depthFar = 7500.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthFar`"}, :name vr.VRDisplay/depth-far, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The depthFar property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the far plane of the eye view frustum, i.e.\n  furthest viewable boundary of the scene.\n\n  `var mydepthFar = vrDisplayInstance.depthFar;\n\n  vrDisplayInstance.depthFar = 7500.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthFar`"}, depth-near {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 224, :column 7, :end-line 224, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The depthNear property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the near plane of the eye view frustum,\n  the nearest viewable boundary of the scene.\n\n  `var mydepthNear = vrDisplayInstance.depthNear;\n\n  vrDisplayInstance.depthNear = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthNear`"}, :name vr.VRDisplay/depth-near, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 224, :end-line 224, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The depthNear property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the near plane of the eye view frustum,\n  the nearest viewable boundary of the scene.\n\n  `var mydepthNear = vrDisplayInstance.depthNear;\n\n  vrDisplayInstance.depthNear = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthNear`"}, is-connected {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 304, :column 7, :end-line 304, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is connected\n  the computer.\n\n  `var isItConnected = vrDisplayInstance.isConnected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isConnected`"}, :name vr.VRDisplay/is-connected, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 304, :end-line 304, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The isConnected read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is connected\n  the computer.\n\n  `var isItConnected = vrDisplayInstance.isConnected;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isConnected`"}, set-depth-far! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 209, :column 7, :end-line 209, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The depthFar property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the far plane of the eye view frustum, i.e.\n  furthest viewable boundary of the scene.\n\n  `var mydepthFar = vrDisplayInstance.depthFar;\n\n  vrDisplayInstance.depthFar = 7500.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthFar`"}, :name vr.VRDisplay/set-depth-far!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 209, :end-line 209, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The depthFar property of the `vr.VRDisplay` interface gets and\n  the z-depth defining the far plane of the eye view frustum, i.e.\n  furthest viewable boundary of the scene.\n\n  `var mydepthFar = vrDisplayInstance.depthFar;\n\n  vrDisplayInstance.depthFar = 7500.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/depthFar`"}, reset-pose {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 128, :column 7, :end-line 128, :end-column 17, :arglists (quote ([this])), :doc "Method.\n\n  The resetPose() method of the `vr.VRDisplay` interface resets\n  pose for the VRDisplay, treating its current `vr.VRPose.position`\n  `vr.VRPose.orientation` as the \\\"origin/zero\\\" values.\n\n  `vrDisplayInstance.resetPose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose`"}, :name vr.VRDisplay/reset-pose, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The resetPose() method of the `vr.VRDisplay` interface resets\n  pose for the VRDisplay, treating its current `vr.VRPose.position`\n  `vr.VRPose.orientation` as the \\\"origin/zero\\\" values.\n\n  `vrDisplayInstance.resetPose();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/resetPose`"}, display-name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 280, :column 7, :end-line 280, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The displayName read-only property of the `vr.VRDisplay` interface\n  a human-readable name to identify the VRDisplay.\n\n  `var myDisplayName = vrDisplayInstance.displayName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayName`"}, :name vr.VRDisplay/display-name, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 280, :end-line 280, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The displayName read-only property of the `vr.VRDisplay` interface\n  a human-readable name to identify the VRDisplay.\n\n  `var myDisplayName = vrDisplayInstance.displayName;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/displayName`"}, set-is-presenting! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplay.cljs", :line 343, :column 7, :end-line 343, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The isPresenting read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is currently\n  content presented through it.\n\n  `var isItPresenting = vrDisplayInstance.isPresenting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isPresenting`"}, :name vr.VRDisplay/set-is-presenting!, :variadic false, :file "src/vr/VRDisplay.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 343, :end-line 343, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The isPresenting read-only property of the `vr.VRDisplay` interface\n  a `web.Boolean` indicating whether the VRDisplay is currently\n  content presented through it.\n\n  `var isItPresenting = vrDisplayInstance.isPresenting;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplay/isPresenting`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The VRDisplay interface of the WebVR API represents any VR device\n  by this API. It includes generic information such as device IDs\n  descriptions, as well as methods for starting to present a VR\n  retrieving eye parameters and display capabilities, and other\n  functionality."}