{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name vr.VRDisplayCapabilities, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {has-external-display {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 33, :column 7, :end-line 33, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  The hasExternalDisplay read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is separate\n  the device's primary display.\n\n  `var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasExternalDisplay`"}, :name vr.VRDisplayCapabilities/has-external-display, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The hasExternalDisplay read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is separate\n  the device's primary display.\n\n  `var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasExternalDisplay`"}, set-max-layers! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 125, :column 7, :end-line 125, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The maxLayers read-only property of the `vr.VRDisplayCapabilities`\n  returns a number indicating the maximum number of `vr.VRLayer`s\n  the VR display can present at once (e.g. the maximum length of\n  array that `web.Display.requestPresent()` can accept.)\n\n  `var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/maxLayers`"}, :name vr.VRDisplayCapabilities/set-max-layers!, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The maxLayers read-only property of the `vr.VRDisplayCapabilities`\n  returns a number indicating the maximum number of `vr.VRLayer`s\n  the VR display can present at once (e.g. the maximum length of\n  array that `web.Display.requestPresent()` can accept.)\n\n  `var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/maxLayers`"}, set-has-position! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 98, :column 7, :end-line 98, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The hasPosition read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return position information.\n\n  `var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasPosition`"}, :name vr.VRDisplayCapabilities/set-has-position!, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The hasPosition read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return position information.\n\n  `var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasPosition`"}, has-orientation {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 59, :column 7, :end-line 59, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The hasOrientation read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return orientation information.\n\n  `var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasOrientation`"}, :name vr.VRDisplayCapabilities/has-orientation, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The hasOrientation read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return orientation information.\n\n  `var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasOrientation`"}, set-has-external-display! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 46, :column 7, :end-line 46, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The hasExternalDisplay read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is separate\n  the device's primary display.\n\n  `var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasExternalDisplay`"}, :name vr.VRDisplayCapabilities/set-has-external-display!, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The hasExternalDisplay read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is separate\n  the device's primary display.\n\n  `var hasAnExternalDisplay = vrDisplayCapabilitiesInstance.hasExternalDisplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasExternalDisplay`"}, set-can-present! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 20, :column 7, :end-line 20, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The canPresent read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is capable\n  presenting content (e.g. through an HMD).\n\n  `var canIPresent = vrDisplayCapabilitiesInstance.canPresent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/canPresent`"}, :name vr.VRDisplayCapabilities/set-can-present!, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The canPresent read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is capable\n  presenting content (e.g. through an HMD).\n\n  `var canIPresent = vrDisplayCapabilitiesInstance.canPresent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/canPresent`"}, can-present {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 7, :column 7, :end-line 7, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The canPresent read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is capable\n  presenting content (e.g. through an HMD).\n\n  `var canIPresent = vrDisplayCapabilitiesInstance.canPresent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/canPresent`"}, :name vr.VRDisplayCapabilities/can-present, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The canPresent read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display is capable\n  presenting content (e.g. through an HMD).\n\n  `var canIPresent = vrDisplayCapabilitiesInstance.canPresent;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/canPresent`"}, max-layers {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 111, :column 7, :end-line 111, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The maxLayers read-only property of the `vr.VRDisplayCapabilities`\n  returns a number indicating the maximum number of `vr.VRLayer`s\n  the VR display can present at once (e.g. the maximum length of\n  array that `web.Display.requestPresent()` can accept.)\n\n  `var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/maxLayers`"}, :name vr.VRDisplayCapabilities/max-layers, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The maxLayers read-only property of the `vr.VRDisplayCapabilities`\n  returns a number indicating the maximum number of `vr.VRLayer`s\n  the VR display can present at once (e.g. the maximum length of\n  array that `web.Display.requestPresent()` can accept.)\n\n  `var maximumLayers = vrDisplayCapabilitiesInstance.maxLayers;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/maxLayers`"}, has-position {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 85, :column 7, :end-line 85, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The hasPosition read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return position information.\n\n  `var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasPosition`"}, :name vr.VRDisplayCapabilities/has-position, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The hasPosition read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return position information.\n\n  `var hasItGotPosition = vrDisplayCapabilitiesInstance.hasPosition;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasPosition`"}, set-has-orientation! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/vr/VRDisplayCapabilities.cljs", :line 72, :column 7, :end-line 72, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The hasOrientation read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return orientation information.\n\n  `var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasOrientation`"}, :name vr.VRDisplayCapabilities/set-has-orientation!, :variadic false, :file "src/vr/VRDisplayCapabilities.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The hasOrientation read-only property of the `vr.VRDisplayCapabilities`\n  returns a `web.Boolean` stating whether the VR display can track\n  return orientation information.\n\n  `var hasItGotOrientation = vrDisplayCapabilitiesInstance.hasOrientation;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/VRDisplayCapabilities/hasOrientation`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The VRDisplayCapabilities interface of the WebVR API describes\n  capabilities of a `vr.VRDisplay` — its features can be used to\n  VR device capability tests, for example can it return position"}