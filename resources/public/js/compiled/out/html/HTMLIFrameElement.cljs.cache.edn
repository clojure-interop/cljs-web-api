{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLIFrameElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-srcdoc! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 200, :column 7, :end-line 200, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The srcdoc property of the `html.HTMLIFrameElement` specifies\n  content of the page.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc`"}, :name html.HTMLIFrameElement/set-srcdoc!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The srcdoc property of the `html.HTMLIFrameElement` specifies\n  content of the page.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc`"}, csp {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 58, :column 7, :end-line 58, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The csp property of the `html.HTMLIFrameElement` interface specifies\n  Content Security Policy that an embedded document must agree\n  enforce upon itself.\n\n  `var csp = HTMLIFrameElement.csp\n  HTMLIFrameElement.csp = csp`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp`"}, :name html.HTMLIFrameElement/csp, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The csp property of the `html.HTMLIFrameElement` interface specifies\n  Content Security Policy that an embedded document must agree\n  enforce upon itself.\n\n  `var csp = HTMLIFrameElement.csp\n  HTMLIFrameElement.csp = csp`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp`"}, srcdoc {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 190, :column 7, :end-line 190, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The srcdoc property of the `html.HTMLIFrameElement` specifies\n  content of the page.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc`"}, :name html.HTMLIFrameElement/srcdoc, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The srcdoc property of the `html.HTMLIFrameElement` specifies\n  content of the page.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/srcdoc`"}, allow-payment-request {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 20, :column 7, :end-line 20, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The allowPaymentRequest property of the `html.HTMLIFrameElement`\n  returns a `web.Boolean` indicating whether the Payment Request\n  may be invoked on a cross-origin iframe.\n\n  `var allow = htmlIFrameElement.allowPaymentRequest`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest`"}, :name html.HTMLIFrameElement/allow-payment-request, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The allowPaymentRequest property of the `html.HTMLIFrameElement`\n  returns a `web.Boolean` indicating whether the Payment Request\n  may be invoked on a cross-origin iframe.\n\n  `var allow = htmlIFrameElement.allowPaymentRequest`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest`"}, set-feature-policy! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 99, :column 7, :end-line 99, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The featurePolicy read-only property of the `html.HTMLIFrameElement`\n  returns the `web.FeaturePolicy` interface which provides a simple\n  for introspecting the feature policies applied to a specific\n\n  `var policy = HTMLIFrameElement.featurePolicy`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/featurePolicy`"}, :name html.HTMLIFrameElement/set-feature-policy!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The featurePolicy read-only property of the `html.HTMLIFrameElement`\n  returns the `web.FeaturePolicy` interface which provides a simple\n  for introspecting the feature policies applied to a specific\n\n  `var policy = HTMLIFrameElement.featurePolicy`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/featurePolicy`"}, content-window {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 46, :column 7, :end-line 46, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The contentWindow property returns the Window object of an <iframe>\n  You can use this Window object to access the iframe's document\n  its internal DOM. This attribute is read-only, but its properties\n  be manipulated like the global Window object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow`"}, :name html.HTMLIFrameElement/content-window, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The contentWindow property returns the Window object of an <iframe>\n  You can use this Window object to access the iframe's document\n  its internal DOM. This attribute is read-only, but its properties\n  be manipulated like the global Window object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentWindow`"}, set-nfc-focus {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 8, :column 7, :end-line 8, :end-column 20, :arglists (quote ([this & args])), :doc "Method.\n\n  The setNfcFocus() method of the `html.HTMLIFrameElement` interface\n  whether an `web.<iframe>` can receive an NFC event.\n\n  `myIFrame.setNfcFocus(true);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setNfcFocus`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name html.HTMLIFrameElement/set-nfc-focus, :variadic true, :file "src/html/HTMLIFrameElement.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The setNfcFocus() method of the `html.HTMLIFrameElement` interface\n  whether an `web.<iframe>` can receive an NFC event.\n\n  `myIFrame.setNfcFocus(true);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/setNfcFocus`"}, src {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 162, :column 7, :end-line 162, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLIFrameElement.src property reflects the HTML referrerpolicy\n  of the `web.<iframe>` element defining which referrer is sent\n  fetching the resource.\n\n  `refStr = iframeElt.src;\n  iframeElt.src= refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src`"}, :name html.HTMLIFrameElement/src, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 162, :end-line 162, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLIFrameElement.src property reflects the HTML referrerpolicy\n  of the `web.<iframe>` element defining which referrer is sent\n  fetching the resource.\n\n  `refStr = iframeElt.src;\n  iframeElt.src= refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src`"}, feature-policy {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 86, :column 7, :end-line 86, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The featurePolicy read-only property of the `html.HTMLIFrameElement`\n  returns the `web.FeaturePolicy` interface which provides a simple\n  for introspecting the feature policies applied to a specific\n\n  `var policy = HTMLIFrameElement.featurePolicy`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/featurePolicy`"}, :name html.HTMLIFrameElement/feature-policy, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The featurePolicy read-only property of the `html.HTMLIFrameElement`\n  returns the `web.FeaturePolicy` interface which provides a simple\n  for introspecting the feature policies applied to a specific\n\n  `var policy = HTMLIFrameElement.featurePolicy`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/featurePolicy`"}, set-allow-payment-request! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 33, :column 7, :end-line 33, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The allowPaymentRequest property of the `html.HTMLIFrameElement`\n  returns a `web.Boolean` indicating whether the Payment Request\n  may be invoked on a cross-origin iframe.\n\n  `var allow = htmlIFrameElement.allowPaymentRequest`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest`"}, :name html.HTMLIFrameElement/set-allow-payment-request!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The allowPaymentRequest property of the `html.HTMLIFrameElement`\n  returns a `web.Boolean` indicating whether the Payment Request\n  may be invoked on a cross-origin iframe.\n\n  `var allow = htmlIFrameElement.allowPaymentRequest`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/allowPaymentRequest`"}, set-referrer-policy! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 126, :column 7, :end-line 126, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLIFrameElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<iframe>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = iframeElt.referrerPolicy;\n  iframeElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy`"}, :name html.HTMLIFrameElement/set-referrer-policy!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 126, :end-line 126, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLIFrameElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<iframe>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = iframeElt.referrerPolicy;\n  iframeElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy`"}, set-src! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 176, :column 7, :end-line 176, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLIFrameElement.src property reflects the HTML referrerpolicy\n  of the `web.<iframe>` element defining which referrer is sent\n  fetching the resource.\n\n  `refStr = iframeElt.src;\n  iframeElt.src= refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src`"}, :name html.HTMLIFrameElement/set-src!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLIFrameElement.src property reflects the HTML referrerpolicy\n  of the `web.<iframe>` element defining which referrer is sent\n  fetching the resource.\n\n  `refStr = iframeElt.src;\n  iframeElt.src= refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/src`"}, referrer-policy {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 112, :column 7, :end-line 112, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLIFrameElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<iframe>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = iframeElt.referrerPolicy;\n  iframeElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy`"}, :name html.HTMLIFrameElement/referrer-policy, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLIFrameElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<iframe>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = iframeElt.referrerPolicy;\n  iframeElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/referrerPolicy`"}, content-document {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 140, :column 7, :end-line 140, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  If the iframe and the iframe's parent document are Same Origin,\n  a Document (that is, the active document in the inline frame's\n  browsing context), else returns null.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument`"}, :name html.HTMLIFrameElement/content-document, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  If the iframe and the iframe's parent document are Same Origin,\n  a Document (that is, the active document in the inline frame's\n  browsing context), else returns null.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument`"}, set-content-document! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 151, :column 7, :end-line 151, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  If the iframe and the iframe's parent document are Same Origin,\n  a Document (that is, the active document in the inline frame's\n  browsing context), else returns null.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument`"}, :name html.HTMLIFrameElement/set-content-document!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  If the iframe and the iframe's parent document are Same Origin,\n  a Document (that is, the active document in the inline frame's\n  browsing context), else returns null.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/contentDocument`"}, set-csp! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLIFrameElement.cljs", :line 72, :column 7, :end-line 72, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The csp property of the `html.HTMLIFrameElement` interface specifies\n  Content Security Policy that an embedded document must agree\n  enforce upon itself.\n\n  `var csp = HTMLIFrameElement.csp\n  HTMLIFrameElement.csp = csp`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp`"}, :name html.HTMLIFrameElement/set-csp!, :variadic false, :file "src/html/HTMLIFrameElement.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 72, :end-line 72, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The csp property of the `html.HTMLIFrameElement` interface specifies\n  Content Security Policy that an embedded document must agree\n  enforce upon itself.\n\n  `var csp = HTMLIFrameElement.csp\n  HTMLIFrameElement.csp = csp`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement/csp`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLIFrameElement interface provides special properties and\n  (beyond those of the `html.HTMLElement` interface it also has\n  to it by inheritance) for manipulating the layout and presentation\n  inline frame elements."}