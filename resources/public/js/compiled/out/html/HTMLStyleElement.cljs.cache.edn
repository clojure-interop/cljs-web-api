{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{type}, :name html.HTMLStyleElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {media {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLStyleElement.cljs", :line 7, :column 7, :end-line 7, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.media property specifies the intended destination\n  for style information.\n\n  `medium = style.media\n  style.media = medium`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media`"}, :name html.HTMLStyleElement/media, :variadic false, :file "src/html/HTMLStyleElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.media property specifies the intended destination\n  for style information.\n\n  `medium = style.media\n  style.media = medium`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media`"}, set-media! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLStyleElement.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLStyleElement.media property specifies the intended destination\n  for style information.\n\n  `medium = style.media\n  style.media = medium`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media`"}, :name html.HTMLStyleElement/set-media!, :variadic false, :file "src/html/HTMLStyleElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLStyleElement.media property specifies the intended destination\n  for style information.\n\n  `medium = style.media\n  style.media = medium`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/media`"}, scoped {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLStyleElement.cljs", :line 33, :column 7, :end-line 33, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.scoped property is a Boolean value indicating\n  the element applies to the whole document (false) or only to\n  parent's sub-tree (true).\n\n  `value = style.scoped;\n  style.scoped = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped`"}, :name html.HTMLStyleElement/scoped, :variadic false, :file "src/html/HTMLStyleElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.scoped property is a Boolean value indicating\n  the element applies to the whole document (false) or only to\n  parent's sub-tree (true).\n\n  `value = style.scoped;\n  style.scoped = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped`"}, set-scoped! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLStyleElement.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLStyleElement.scoped property is a Boolean value indicating\n  the element applies to the whole document (false) or only to\n  parent's sub-tree (true).\n\n  `value = style.scoped;\n  style.scoped = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped`"}, :name html.HTMLStyleElement/set-scoped!, :variadic false, :file "src/html/HTMLStyleElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLStyleElement.scoped property is a Boolean value indicating\n  the element applies to the whole document (false) or only to\n  parent's sub-tree (true).\n\n  `value = style.scoped;\n  style.scoped = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/scoped`"}, type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLStyleElement.cljs", :line 61, :column 7, :end-line 61, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.type read-only property returns the type\n  the current style.\n\n  `string = style.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type`"}, :name html.HTMLStyleElement/type, :variadic false, :file "src/html/HTMLStyleElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLStyleElement.type read-only property returns the type\n  the current style.\n\n  `string = style.type;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLStyleElement/type`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLStyleElement interface represents a `web.<style>` element.\n  inherits properties and methods from its parent, `html.HTMLElement`,\n  from `web.LinkStyle`."}