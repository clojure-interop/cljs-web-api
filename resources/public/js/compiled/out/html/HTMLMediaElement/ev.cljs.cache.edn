{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLMediaElement.ev, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {play {:name html.HTMLMediaElement.ev/play, :file "src/html/HTMLMediaElement/ev.cljs", :line 57, :column 1, :end-line 57, :end-column 10, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 57, :column 6, :end-line 57, :end-column 10}, :doc "Event.\n\n  The play event is fired when the paused property is changed from\n  to false, as a result of the play method, or the autoplay attribute.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play_event`", :tag string}, seeked {:name html.HTMLMediaElement.ev/seeked, :file "src/html/HTMLMediaElement/ev.cljs", :line 187, :column 1, :end-line 187, :end-column 12, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 187, :column 6, :end-line 187, :end-column 12}, :doc "Event.\n\n  The seeked event is fired when a seek operation completed, the\n  playback position has changed, and the Boolean seeking attribute\n  changed to false.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeked_event`", :tag string}, progress {:name html.HTMLMediaElement.ev/progress, :file "src/html/HTMLMediaElement/ev.cljs", :line 77, :column 1, :end-line 77, :end-column 14, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 77, :column 6, :end-line 77, :end-column 14}, :doc "Event.\n\n  The progress event is fired periodically as the browser loads\n  resource.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/progress_event`", :tag string}, volumechange {:name html.HTMLMediaElement.ev/volumechange, :file "src/html/HTMLMediaElement/ev.cljs", :line 97, :column 1, :end-line 97, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 97, :column 6, :end-line 97, :end-column 18}, :doc "Event.\n\n  The volumechange event is fired when the volume has changed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volumechange_event`", :tag string}, stalled {:name html.HTMLMediaElement.ev/stalled, :file "src/html/HTMLMediaElement/ev.cljs", :line 209, :column 1, :end-line 209, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 209, :column 6, :end-line 209, :end-column 13}, :doc "Event.\n\n  The stalled event is fired when the user agent is trying to fetch\n  data, but data is unexpectedly not forthcoming.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/stalled_event`", :tag string}, emptied {:name html.HTMLMediaElement.ev/emptied, :file "src/html/HTMLMediaElement/ev.cljs", :line 137, :column 1, :end-line 137, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 137, :column 6, :end-line 137, :end-column 13}, :doc "Event.\n\n  The emptied event is fired when the media has become empty; for\n  this event is sent if the media has already been loaded (or partially\n  and the load() method is called to reload it.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/emptied_event`", :tag string}, canplaythrough {:name html.HTMLMediaElement.ev/canplaythrough, :file "src/html/HTMLMediaElement/ev.cljs", :line 15, :column 1, :end-line 15, :end-column 20, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 15, :column 6, :end-line 15, :end-column 20}, :doc "Event.\n\n  The canplaythrough event is fired when the user agent can play\n  media, and estimates that enough data has been loaded to play\n  media up to its end without having to stop for further buffering\n  content.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplaythrough_event`", :tag string}, durationchange {:name html.HTMLMediaElement.ev/durationchange, :file "src/html/HTMLMediaElement/ev.cljs", :line 127, :column 1, :end-line 127, :end-column 20, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 127, :column 6, :end-line 127, :end-column 20}, :doc "Event.\n\n  The durationchange event is fired when the duration attribute\n  been updated.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/durationchange_event`", :tag string}, seeking {:name html.HTMLMediaElement.ev/seeking, :file "src/html/HTMLMediaElement/ev.cljs", :line 198, :column 1, :end-line 198, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 198, :column 6, :end-line 198, :end-column 13}, :doc "Event.\n\n  The seeking event is fired when a seek operation starts, meaning\n  Boolean seeking attribute has changed to true and the media is\n  a new position.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seeking_event`", :tag string}, loadeddata {:name html.HTMLMediaElement.ev/loadeddata, :file "src/html/HTMLMediaElement/ev.cljs", :line 37, :column 1, :end-line 37, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 37, :column 6, :end-line 37, :end-column 16}, :doc "Event.\n\n  The loadeddata event is fired when the frame at the current playback\n  of the media has finished loading; often the first frame.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadeddata_event`", :tag string}, ended {:name html.HTMLMediaElement.ev/ended, :file "src/html/HTMLMediaElement/ev.cljs", :line 148, :column 1, :end-line 148, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 148, :column 6, :end-line 148, :end-column 11}, :doc "Event.\n\n  The ended event is fired when playback or streaming has stopped\n  the end of the media was reached or because no further data is\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended_event`", :tag string}, loadedmetadata {:name html.HTMLMediaElement.ev/loadedmetadata, :file "src/html/HTMLMediaElement/ev.cljs", :line 158, :column 1, :end-line 158, :end-column 20, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 158, :column 6, :end-line 158, :end-column 20}, :doc "Event.\n\n  The loadedmetadata event is fired when the metadata has been\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadedmetadata_event`", :tag string}, ratechange {:name html.HTMLMediaElement.ev/ratechange, :file "src/html/HTMLMediaElement/ev.cljs", :line 178, :column 1, :end-line 178, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 178, :column 6, :end-line 178, :end-column 16}, :doc "Event.\n\n  The ratechange event is fired when the playback rate has changed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ratechange_event`", :tag string}, abort {:name html.HTMLMediaElement.ev/abort, :file "src/html/HTMLMediaElement/ev.cljs", :line 5, :column 1, :end-line 5, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 5, :column 6, :end-line 5, :end-column 11}, :doc "Event.\n\n  The abort event is fired when the resource was not fully loaded,\n  not as the result of an error.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/abort_event`", :tag string}, timeupdate {:name html.HTMLMediaElement.ev/timeupdate, :file "src/html/HTMLMediaElement/ev.cljs", :line 87, :column 1, :end-line 87, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 87, :column 6, :end-line 87, :end-column 16}, :doc "Event.\n\n  The timeupdate event is fired when the time indicated by the\n  attribute has been updated.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/timeupdate_event`", :tag string}, waiting {:name html.HTMLMediaElement.ev/waiting, :file "src/html/HTMLMediaElement/ev.cljs", :line 106, :column 1, :end-line 106, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 106, :column 6, :end-line 106, :end-column 13}, :doc "Event.\n\n  The waiting event is fired when playback has stopped because\n  a temporary lack of data.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/waiting_event`", :tag string}, suspend {:name html.HTMLMediaElement.ev/suspend, :file "src/html/HTMLMediaElement/ev.cljs", :line 219, :column 1, :end-line 219, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 219, :column 6, :end-line 219, :end-column 13}, :doc "Event.\n\n  The suspend event is fired when media data loading has been suspended.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/suspend_event`", :tag string}, loadstart {:name html.HTMLMediaElement.ev/loadstart, :file "src/html/HTMLMediaElement/ev.cljs", :line 47, :column 1, :end-line 47, :end-column 15, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 47, :column 6, :end-line 47, :end-column 15}, :doc "Event.\n\n  The loadstart event is fired when the browser has started to\n  a resource.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loadstart_event`", :tag string}, canplay {:name html.HTMLMediaElement.ev/canplay, :file "src/html/HTMLMediaElement/ev.cljs", :line 116, :column 1, :end-line 116, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 116, :column 6, :end-line 116, :end-column 13}, :doc "Event.\n\n  The canplay event is fired when the user agent can play the media,\n  estimates that not enough data has been loaded to play the media\n  to its end without having to stop for further buffering of content.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canplay_event`", :tag string}, playing {:name html.HTMLMediaElement.ev/playing, :file "src/html/HTMLMediaElement/ev.cljs", :line 67, :column 1, :end-line 67, :end-column 13, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 67, :column 6, :end-line 67, :end-column 13}, :doc "Event.\n\n  The playing event is fired when playback is ready to start after\n  been paused or delayed due to lack of data.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playing_event`", :tag string}, pause {:name html.HTMLMediaElement.ev/pause, :file "src/html/HTMLMediaElement/ev.cljs", :line 167, :column 1, :end-line 167, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 167, :column 6, :end-line 167, :end-column 11}, :doc "Event.\n\n  The pause event is sent when a request to pause an activity is\n  and the activity has entered its paused state, most commonly\n  the media has been paused through a call to the element's `web.pause()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause_event`", :tag string}, error {:name html.HTMLMediaElement.ev/error, :file "src/html/HTMLMediaElement/ev.cljs", :line 27, :column 1, :end-line 27, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement/ev.cljs", :line 27, :column 6, :end-line 27, :end-column 11}, :doc "Event.\n\n  The error event is fired when the resource could not be loaded\n  to an error (for example, a network connectivity problem).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error_event`", :tag string}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "HTMLMediaElement Events."}