{:rename-macros {}, :renames {}, :externs {Image {}}, :use-macros {}, :excludes #{}, :name html.HTMLImageElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {constructor {:name html.HTMLImageElement/constructor, :file "src/html/HTMLImageElement.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 6, :column 6, :end-line 6, :end-column 17}, :doc "Constructor.\n\n  The Image() constructor creates a new `html.HTMLImageElement` instance. It is functionally equivalent to `web.document.createElement('img')`.\n\n  Note: The entire bitmap is loaded regardless of the sizes specified in the constructor. The size specified in the constructor is reflected through the properties `html.HTMLImageElement.width` and `html.HTMLImageElement.height` of the resulting instance. The intrinsic width and height of the image in CSS pixels is reflected through the properties `html.HTMLImageElement.naturalWidth` and `html.HTMLImageElement.naturalHeight`. If no size is specified in the constructor both pairs of properties have the same values.\n\n\n\n  width\n  The width of the image (i.e., the value for the width attribute).\n  height\n  The height of the image (i.e., the value for the height attribute).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/Image`", :tag js}, decode {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 23, :column 7, :end-line 23, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The decode() method of the `html.HTMLImageElement` interface\n  a `web.Promise` that resolves when the image is decoded and it\n  safe to append the image to the DOM.\n\n  `var promise = HTMLImageElement.decode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode`"}, :name html.HTMLImageElement/decode, :variadic false, :file "src/html/HTMLImageElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The decode() method of the `html.HTMLImageElement` interface\n  a `web.Promise` that resolves when the image is decoded and it\n  safe to append the image to the DOM.\n\n  `var promise = HTMLImageElement.decode();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode`"}, decoding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 36, :column 7, :end-line 36, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The decoding property of the `html.HTMLImageElement` interface\n  a hint given to the browser on how it should decode the image.\n\n  `refStr = imgElem.decoding;\n  imgElem.decoding = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding`"}, :name html.HTMLImageElement/decoding, :variadic false, :file "src/html/HTMLImageElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The decoding property of the `html.HTMLImageElement` interface\n  a hint given to the browser on how it should decode the image.\n\n  `refStr = imgElem.decoding;\n  imgElem.decoding = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding`"}, set-decoding! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 49, :column 7, :end-line 49, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The decoding property of the `html.HTMLImageElement` interface\n  a hint given to the browser on how it should decode the image.\n\n  `refStr = imgElem.decoding;\n  imgElem.decoding = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding`"}, :name html.HTMLImageElement/set-decoding!, :variadic false, :file "src/html/HTMLImageElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The decoding property of the `html.HTMLImageElement` interface\n  a hint given to the browser on how it should decode the image.\n\n  `refStr = imgElem.decoding;\n  imgElem.decoding = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding`"}, referrer-policy {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 62, :column 7, :end-line 62, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLImageElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<img>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = imgElt.referrerPolicy;\n  imgElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy`"}, :name html.HTMLImageElement/referrer-policy, :variadic false, :file "src/html/HTMLImageElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLImageElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<img>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = imgElt.referrerPolicy;\n  imgElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy`"}, set-referrer-policy! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLImageElement.cljs", :line 76, :column 7, :end-line 76, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLImageElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<img>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = imgElt.referrerPolicy;\n  imgElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy`"}, :name html.HTMLImageElement/set-referrer-policy!, :variadic false, :file "src/html/HTMLImageElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLImageElement.referrerPolicy property reflects the HTML\n  attribute of the `web.<img>` element defining which referrer\n  sent when fetching the resource.\n\n  `refStr = imgElt.referrerPolicy;\n  imgElt.referrerPolicy = refStr;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLImageElement interface provides special properties and\n  for manipulating `web.<img>` elements."}