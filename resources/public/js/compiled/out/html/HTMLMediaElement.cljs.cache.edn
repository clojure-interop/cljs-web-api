{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{load loop}, :name html.HTMLMediaElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-default-muted! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 364, :column 7, :end-line 364, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.defaultMuted property reflects the muted\n  attribute, which indicates whether the media element's audio\n  should be muted by default. This property has no dynamic effect.\n  mute and unmute the audio output, use the `web.muted` property.\n\n  `var dMuted = video.defaultMuted;\n  audio.defaultMuted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted`"}, :name html.HTMLMediaElement/set-default-muted!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 364, :end-line 364, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.defaultMuted property reflects the muted\n  attribute, which indicates whether the media element's audio\n  should be muted by default. This property has no dynamic effect.\n  mute and unmute the audio output, use the `web.muted` property.\n\n  `var dMuted = video.defaultMuted;\n  audio.defaultMuted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted`"}, autoplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 163, :column 7, :end-line 163, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.autoplay property reflects the autoplay\n  attribute, indicating whether playback should automatically begin\n  soon as enough media is available to do so without interruption.\n\n  `HTMLMediaElement.autoplay = true | false;\n\n  var autoplay = HTMLMediaElement.autoplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay`"}, :name html.HTMLMediaElement/autoplay, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.autoplay property reflects the autoplay\n  attribute, indicating whether playback should automatically begin\n  soon as enough media is available to do so without interruption.\n\n  `HTMLMediaElement.autoplay = true | false;\n\n  var autoplay = HTMLMediaElement.autoplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay`"}, play {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 84, :column 7, :end-line 84, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLMediaElement` method play() attempts to begin playback\n  the media. It returns a `web.Promise` which is resolved when\n  has been successfully started.\n\n  `var promise = HTMLMediaElement.play();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play`"}, :name html.HTMLMediaElement/play, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLMediaElement` method play() attempts to begin playback\n  the media. It returns a `web.Promise` which is resolved when\n  has been successfully started.\n\n  `var promise = HTMLMediaElement.play();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/play`"}, set-cross-origin! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 298, :column 7, :end-line 298, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.crossOrigin property is the CORS setting\n  this image element. See CORS settings attributes for details.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin`"}, :name html.HTMLMediaElement/set-cross-origin!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 298, :end-line 298, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.crossOrigin property is the CORS setting\n  this image element. See CORS settings attributes for details.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin`"}, controls-list {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 258, :column 7, :end-line 258, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The controlsList property of the `html.HTMLMediaElement` interface\n  a DOMTokenList that helps the user agent select what controls\n  show on the media element whenever the user agent shows its own\n  of controls. The DOMTokenList takes one or more of three possible\n  nodownload, nofullscreen, and noremoteplayback.\n\n  `var domTokenList = HTMLMediaElement.controlsList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList`"}, :name html.HTMLMediaElement/controls-list, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The controlsList property of the `html.HTMLMediaElement` interface\n  a DOMTokenList that helps the user agent select what controls\n  show on the media element whenever the user agent shows its own\n  of controls. The DOMTokenList takes one or more of three possible\n  nodownload, nofullscreen, and noremoteplayback.\n\n  `var domTokenList = HTMLMediaElement.controlsList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList`"}, disable-remote-playback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 820, :column 7, :end-line 820, :end-column 30, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.disableRemotePlayback property determines\n  the media element is allowed to have a remote playback UI.\n\n  `var remotePlaybackState ​= element.disableRemotePlayback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback`"}, :name html.HTMLMediaElement/disable-remote-playback, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 30, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 820, :end-line 820, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.disableRemotePlayback property determines\n  the media element is allowed to have a remote playback UI.\n\n  `var remotePlaybackState ​= element.disableRemotePlayback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback`"}, set-audio-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 150, :column 7, :end-line 150, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only audioTracks property on `html.HTMLMediaElement`\n  returns an `audio.AudioTrackList` object listing all of the `audio.AudioTrack`\n  representing the media element's audio tracks.\n\n  `var audioTracks = mediaElement.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks`"}, :name html.HTMLMediaElement/set-audio-tracks!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 150, :end-line 150, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only audioTracks property on `html.HTMLMediaElement`\n  returns an `audio.AudioTrackList` object listing all of the `audio.AudioTrack`\n  representing the media element's audio tracks.\n\n  `var audioTracks = mediaElement.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks`"}, text-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 744, :column 7, :end-line 744, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The read-only textTracks property on `html.HTMLMediaElement`\n  returns a `web.TextTrackList` object listing all of the `web.TextTrack`\n  representing the media element's text tracks\n\n  `var textTracks = mediaElement.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks`"}, :name html.HTMLMediaElement/text-tracks, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 744, :end-line 744, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only textTracks property on `html.HTMLMediaElement`\n  returns a `web.TextTrackList` object listing all of the `web.TextTrack`\n  representing the media element's text tracks\n\n  `var textTracks = mediaElement.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks`"}, set-controls-list! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 273, :column 7, :end-line 273, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The controlsList property of the `html.HTMLMediaElement` interface\n  a DOMTokenList that helps the user agent select what controls\n  show on the media element whenever the user agent shows its own\n  of controls. The DOMTokenList takes one or more of three possible\n  nodownload, nofullscreen, and noremoteplayback.\n\n  `var domTokenList = HTMLMediaElement.controlsList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList`"}, :name html.HTMLMediaElement/set-controls-list!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 273, :end-line 273, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The controlsList property of the `html.HTMLMediaElement` interface\n  a DOMTokenList that helps the user agent select what controls\n  show on the media element whenever the user agent shows its own\n  of controls. The DOMTokenList takes one or more of three possible\n  nodownload, nofullscreen, and noremoteplayback.\n\n  `var domTokenList = HTMLMediaElement.controlsList;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controlsList`"}, can-play-type {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 7, :column 7, :end-line 7, :end-column 20, :arglists (quote ([this media-type])), :doc "Method.\n\n  The `html.HTMLMediaElement` method canPlayType() reports how\n  it is that the current browser will be able to play media of\n  given MIME type.\n\n  `canPlayResponse = audioOrVideo.canPlayType(mediaType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType`"}, :name html.HTMLMediaElement/can-play-type, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this media-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-type])), :doc "Method.\n\n  The `html.HTMLMediaElement` method canPlayType() reports how\n  it is that the current browser will be able to play media of\n  given MIME type.\n\n  `canPlayResponse = audioOrVideo.canPlayType(mediaType);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/canPlayType`"}, set-loop! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 470, :column 7, :end-line 470, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.loop property reflects the loop HTML attribute,\n  controls whether the media element should start over when it\n  the end.\n\n  `var loop = video.loop;\n  audio.loop = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop`"}, :name html.HTMLMediaElement/set-loop!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 470, :end-line 470, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.loop property reflects the loop HTML attribute,\n  controls whether the media element should start over when it\n  the end.\n\n  `var loop = video.loop;\n  audio.loop = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop`"}, load {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 45, :column 7, :end-line 45, :end-column 11, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLMediaElement` method load() resets the media element\n  its initial state and begins the process of selecting a media\n  and loading the media in preparation for playback to begin at\n  beginning.\n\n  `mediaElement.load();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load`"}, :name html.HTMLMediaElement/load, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLMediaElement` method load() resets the media element\n  its initial state and begins the process of selecting a media\n  and loading the media in preparation for playback to begin at\n  beginning.\n\n  `mediaElement.load();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/load`"}, paused {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 570, :column 7, :end-line 570, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The read-only HTMLMediaElement.paused property tells whether\n  media element is paused.\n\n  `var isPaused = audioOrVideo.paused`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused`"}, :name html.HTMLMediaElement/paused, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 570, :end-line 570, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only HTMLMediaElement.paused property tells whether\n  media element is paused.\n\n  `var isPaused = audioOrVideo.paused`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/paused`"}, set-playback-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 600, :column 7, :end-line 600, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.playbackRate property sets the rate at which\n  media is being played back. This is used to implement user controls\n  fast forward, slow motion, and so forth. The normal playback\n  is multiplied by this value to obtain the current rate, so a\n  of 1.0 indicates normal speed.\n\n  `// video\n  video.playbackRate = 1.5;\n  // audio\n  audio.playbackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate`"}, :name html.HTMLMediaElement/set-playback-rate!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 600, :end-line 600, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.playbackRate property sets the rate at which\n  media is being played back. This is used to implement user controls\n  fast forward, slow motion, and so forth. The normal playback\n  is multiplied by this value to obtain the current rate, so a\n  of 1.0 indicates normal speed.\n\n  `// video\n  video.playbackRate = 1.5;\n  // audio\n  audio.playbackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate`"}, set-disable-remote-playback! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 832, :column 7, :end-line 832, :end-column 35, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.disableRemotePlayback property determines\n  the media element is allowed to have a remote playback UI.\n\n  `var remotePlaybackState ​= element.disableRemotePlayback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback`"}, :name html.HTMLMediaElement/set-disable-remote-playback!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 35, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 832, :end-line 832, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.disableRemotePlayback property determines\n  the media element is allowed to have a remote playback UI.\n\n  `var remotePlaybackState ​= element.disableRemotePlayback();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/disableRemotePlayback`"}, set-controller! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 218, :column 7, :end-line 218, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.controller property represents the media\n  assigned to the element.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller`"}, :name html.HTMLMediaElement/set-controller!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.controller property represents the media\n  assigned to the element.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller`"}, buffered {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 193, :column 7, :end-line 193, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.buffered read-only property returns a new\n  object that indicates the ranges of the media source that the\n  has buffered (if any) at the moment the buffered property is\n\n  `var timeRange = audioObject.buffered`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered`"}, :name html.HTMLMediaElement/buffered, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.buffered read-only property returns a new\n  object that indicates the ranges of the media source that the\n  has buffered (if any) at the moment the buffered property is\n\n  `var timeRange = audioObject.buffered`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/buffered`"}, current-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 323, :column 7, :end-line 323, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLMediaElement` interface's currentTime property\n  the current playback time in seconds.\n\n  `var currentTime = htmlMediaElement.currentTime;\n  htmlMediaElement.currentTime = 35;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime`"}, :name html.HTMLMediaElement/current-time, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 323, :end-line 323, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLMediaElement` interface's currentTime property\n  the current playback time in seconds.\n\n  `var currentTime = htmlMediaElement.currentTime;\n  htmlMediaElement.currentTime = 35;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime`"}, ready-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 618, :column 7, :end-line 618, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.readyState property indicates the readiness\n  of the media.\n\n  `var readyState = audioOrVideo.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState`"}, :name html.HTMLMediaElement/ready-state, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 618, :end-line 618, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.readyState property indicates the readiness\n  of the media.\n\n  `var readyState = audioOrVideo.readyState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/readyState`"}, controller {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 206, :column 7, :end-line 206, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.controller property represents the media\n  assigned to the element.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller`"}, :name html.HTMLMediaElement/controller, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.controller property represents the media\n  assigned to the element.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controller`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 558, :column 7, :end-line 558, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `html.HTMLMediaElement` interface\n  the `web.EventHandler` for processing error events.\n\n  `HTMLMediaElement.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onerror`"}, :name html.HTMLMediaElement/set-onerror!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 558, :end-line 558, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `html.HTMLMediaElement` interface\n  the `web.EventHandler` for processing error events.\n\n  `HTMLMediaElement.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onerror`"}, muted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 510, :column 7, :end-line 510, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.muted indicates whether the media element\n\n  `var isMuted = audioOrVideo.muted\n  audio.muted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted`"}, :name html.HTMLMediaElement/muted, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 510, :end-line 510, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.muted indicates whether the media element\n\n  `var isMuted = audioOrVideo.muted\n  audio.muted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted`"}, network-state {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 534, :column 7, :end-line 534, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.networkState property indicates the current\n  of the fetching of media over the network.\n\n  `var networkState = audioOrVideo.networkState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState`"}, :name html.HTMLMediaElement/network-state, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 534, :end-line 534, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.networkState property indicates the current\n  of the fetching of media over the network.\n\n  `var networkState = audioOrVideo.networkState;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/networkState`"}, set-controls! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 244, :column 7, :end-line 244, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.controls property reflects the controls\n  attribute, which controls whether user interface controls for\n  the media item will be displayed.\n\n  `var ctrls = video.controls;\n  audio.controls = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls`"}, :name html.HTMLMediaElement/set-controls!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 244, :end-line 244, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.controls property reflects the controls\n  attribute, which controls whether user interface controls for\n  the media item will be displayed.\n\n  `var ctrls = video.controls;\n  audio.controls = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls`"}, set-media-group! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 497, :column 7, :end-line 497, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.mediaGroup property reflects the mediagroup\n  attribute, which indicates the name of the group of elements\n  belongs to. A group of media elements shares a common controller.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup`"}, :name html.HTMLMediaElement/set-media-group!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 497, :end-line 497, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.mediaGroup property reflects the mediagroup\n  attribute, which indicates the name of the group of elements\n  belongs to. A group of media elements shares a common controller.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup`"}, set-autoplay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 178, :column 7, :end-line 178, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.autoplay property reflects the autoplay\n  attribute, indicating whether playback should automatically begin\n  soon as enough media is available to do so without interruption.\n\n  `HTMLMediaElement.autoplay = true | false;\n\n  var autoplay = HTMLMediaElement.autoplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay`"}, :name html.HTMLMediaElement/set-autoplay!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 178, :end-line 178, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.autoplay property reflects the autoplay\n  attribute, indicating whether playback should automatically begin\n  soon as enough media is available to do so without interruption.\n\n  `HTMLMediaElement.autoplay = true | false;\n\n  var autoplay = HTMLMediaElement.autoplay;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/autoplay`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 546, :column 7, :end-line 546, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `html.HTMLMediaElement` interface\n  the `web.EventHandler` for processing error events.\n\n  `HTMLMediaElement.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onerror`"}, :name html.HTMLMediaElement/onerror, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 546, :end-line 546, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `html.HTMLMediaElement` interface\n  the `web.EventHandler` for processing error events.\n\n  `HTMLMediaElement.onerror = EventListener;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onerror`"}, ended {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 417, :column 7, :end-line 417, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.ended indicates whether the media element\n  ended playback.\n\n  `var isEnded = HTMLMediaElement.ended`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended`"}, :name html.HTMLMediaElement/ended, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 417, :end-line 417, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.ended indicates whether the media element\n  ended playback.\n\n  `var isEnded = HTMLMediaElement.ended`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/ended`"}, set-sink-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 124, :column 7, :end-line 124, :end-column 18, :arglists (quote ([this sink-id])), :doc "Method.\n\n  The HTMLMediaElement.setSinkId() method sets the ID of the audio\n  to use for output and returns a Promise. This only works when\n  application is authorized to use the specified device.\n\n  `HTMLMediaElement.setSinkId(sinkId).then(function() { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId`"}, :name html.HTMLMediaElement/set-sink-id, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this sink-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this sink-id])), :doc "Method.\n\n  The HTMLMediaElement.setSinkId() method sets the ID of the audio\n  to use for output and returns a Promise. This only works when\n  application is authorized to use the specified device.\n\n  `HTMLMediaElement.setSinkId(sinkId).then(function() { ... })`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId`"}, set-volume! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 808, :column 7, :end-line 808, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.volume property sets the volume at which\n  media will be played.\n\n  `var volume ​= video.volume; //1`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume`"}, :name html.HTMLMediaElement/set-volume!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 808, :end-line 808, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.volume property sets the volume at which\n  media will be played.\n\n  `var volume ​= video.volume; //1`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume`"}, capture-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 20, :column 7, :end-line 20, :end-column 21, :arglists (quote ([this])), :doc "Method.\n\n  The captureStream() property of the `html.HTMLMediaElement` interface\n  a `media.MediaStream` object which is streaming a real-time capture\n  the content being rendered in the media element.\n\n  `var mediaStream = mediaElement.captureStream()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream`"}, :name html.HTMLMediaElement/capture-stream, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The captureStream() property of the `html.HTMLMediaElement` interface\n  a `media.MediaStream` object which is streaming a real-time capture\n  the content being rendered in the media element.\n\n  `var mediaStream = mediaElement.captureStream()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/captureStream`"}, audio-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 137, :column 7, :end-line 137, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The read-only audioTracks property on `html.HTMLMediaElement`\n  returns an `audio.AudioTrackList` object listing all of the `audio.AudioTrack`\n  representing the media element's audio tracks.\n\n  `var audioTracks = mediaElement.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks`"}, :name html.HTMLMediaElement/audio-tracks, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only audioTracks property on `html.HTMLMediaElement`\n  returns an `audio.AudioTrackList` object listing all of the `audio.AudioTrack`\n  representing the media element's audio tracks.\n\n  `var audioTracks = mediaElement.audioTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/audioTracks`"}, video-tracks {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 770, :column 7, :end-line 770, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The read-only videoTracks property on `html.HTMLMediaElement`\n  returns a `web.VideoTrackList` object listing all of the `web.VideoTrack`\n  representing the media element's video tracks.\n\n  `var videoTracks = mediaElement.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks`"}, :name html.HTMLMediaElement/video-tracks, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 770, :end-line 770, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only videoTracks property on `html.HTMLMediaElement`\n  returns a `web.VideoTrackList` object listing all of the `web.VideoTrack`\n  representing the media element's video tracks.\n\n  `var videoTracks = mediaElement.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks`"}, set-current-time! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 336, :column 7, :end-line 336, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLMediaElement` interface's currentTime property\n  the current playback time in seconds.\n\n  `var currentTime = htmlMediaElement.currentTime;\n  htmlMediaElement.currentTime = 35;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime`"}, :name html.HTMLMediaElement/set-current-time!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 336, :end-line 336, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLMediaElement` interface's currentTime property\n  the current playback time in seconds.\n\n  `var currentTime = htmlMediaElement.currentTime;\n  htmlMediaElement.currentTime = 35;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentTime`"}, set-seekable! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 643, :column 7, :end-line 643, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The seekable read-only property of the `html.HTMLMediaElement`\n  a `web.TimeRanges` object that contains the time ranges that\n  user is able to seek to, if any.\n\n  `var seekable = audioOrVideo.seekable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable`"}, :name html.HTMLMediaElement/set-seekable!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 643, :end-line 643, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The seekable read-only property of the `html.HTMLMediaElement`\n  a `web.TimeRanges` object that contains the time ranges that\n  user is able to seek to, if any.\n\n  `var seekable = audioOrVideo.seekable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable`"}, controls {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 230, :column 7, :end-line 230, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.controls property reflects the controls\n  attribute, which controls whether user interface controls for\n  the media item will be displayed.\n\n  `var ctrls = video.controls;\n  audio.controls = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls`"}, :name html.HTMLMediaElement/controls, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.controls property reflects the controls\n  attribute, which controls whether user interface controls for\n  the media item will be displayed.\n\n  `var ctrls = video.controls;\n  audio.controls = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/controls`"}, set-sink-id! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 672, :column 7, :end-line 672, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.sinkId read-only property returns a `dom.DOMString`\n  is the unique ID of the audio device delivering output. If it\n  using the user agent default, it returns an empty string. This\n  should be one of the `media.MediaDeviceInfo.deviceId` values\n  from `media.MediaDevices.enumerateDevices()`, id-multimedia,\n  id-communications.\n\n  `var sinkId = HTMLMediaElement.sinkId`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId`"}, :name html.HTMLMediaElement/set-sink-id!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 672, :end-line 672, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.sinkId read-only property returns a `dom.DOMString`\n  is the unique ID of the audio device delivering output. If it\n  using the user agent default, it returns an empty string. This\n  should be one of the `media.MediaDeviceInfo.deviceId` values\n  from `media.MediaDevices.enumerateDevices()`, id-multimedia,\n  id-communications.\n\n  `var sinkId = HTMLMediaElement.sinkId`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId`"}, duration {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 405, :column 7, :end-line 405, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `html.HTMLMediaElement` property duration indicates\n  length of the element's media in seconds.\n\n  `myDuration = htmlMediaElement.duration`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration`"}, :name html.HTMLMediaElement/duration, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 405, :end-line 405, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only `html.HTMLMediaElement` property duration indicates\n  length of the element's media in seconds.\n\n  `myDuration = htmlMediaElement.duration`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/duration`"}, set-media-keys {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 111, :column 7, :end-line 111, :end-column 21, :arglists (quote ([this media-keys])), :doc "Method.\n\n  The setMediaKeys() property of the `html.HTMLMediaElement` interface\n  a `web.Promise` that resolves to the passed `media.MediaKeys`,\n  are those used to decrypt media during playback.\n\n  `var Promise = HTMLMediaElement.setMediaKeys(mediaKeys);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys`"}, :name html.HTMLMediaElement/set-media-keys, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 21, :method-params ([this media-keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this media-keys])), :doc "Method.\n\n  The setMediaKeys() property of the `html.HTMLMediaElement` interface\n  a `web.Promise` that resolves to the passed `media.MediaKeys`,\n  are those used to decrypt media during playback.\n\n  `var Promise = HTMLMediaElement.setMediaKeys(mediaKeys);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setMediaKeys`"}, src {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 688, :column 7, :end-line 688, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.src property reflects the value of the HTML\n  element's src attribute, which indicates the URL of a media resource\n  use in the element.\n\n  `var mediaUrl = HTMLMediaElement.src;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src`"}, :name html.HTMLMediaElement/src, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 688, :end-line 688, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.src property reflects the value of the HTML\n  element's src attribute, which indicates the URL of a media resource\n  use in the element.\n\n  `var mediaUrl = HTMLMediaElement.src;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src`"}, playback-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 582, :column 7, :end-line 582, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.playbackRate property sets the rate at which\n  media is being played back. This is used to implement user controls\n  fast forward, slow motion, and so forth. The normal playback\n  is multiplied by this value to obtain the current rate, so a\n  of 1.0 indicates normal speed.\n\n  `// video\n  video.playbackRate = 1.5;\n  // audio\n  audio.playbackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate`"}, :name html.HTMLMediaElement/playback-rate, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 582, :end-line 582, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.playbackRate property sets the rate at which\n  media is being played back. This is used to implement user controls\n  fast forward, slow motion, and so forth. The normal playback\n  is multiplied by this value to obtain the current rate, so a\n  of 1.0 indicates normal speed.\n\n  `// video\n  video.playbackRate = 1.5;\n  // audio\n  audio.playbackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/playbackRate`"}, sink-id {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 656, :column 7, :end-line 656, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.sinkId read-only property returns a `dom.DOMString`\n  is the unique ID of the audio device delivering output. If it\n  using the user agent default, it returns an empty string. This\n  should be one of the `media.MediaDeviceInfo.deviceId` values\n  from `media.MediaDevices.enumerateDevices()`, id-multimedia,\n  id-communications.\n\n  `var sinkId = HTMLMediaElement.sinkId`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId`"}, :name html.HTMLMediaElement/sink-id, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 656, :end-line 656, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.sinkId read-only property returns a `dom.DOMString`\n  is the unique ID of the audio device delivering output. If it\n  using the user agent default, it returns an empty string. This\n  should be one of the `media.MediaDeviceInfo.deviceId` values\n  from `media.MediaDevices.enumerateDevices()`, id-multimedia,\n  id-communications.\n\n  `var sinkId = HTMLMediaElement.sinkId`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/sinkId`"}, volume {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 796, :column 7, :end-line 796, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.volume property sets the volume at which\n  media will be played.\n\n  `var volume ​= video.volume; //1`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume`"}, :name html.HTMLMediaElement/volume, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 796, :end-line 796, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.volume property sets the volume at which\n  media will be played.\n\n  `var volume ​= video.volume; //1`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/volume`"}, loop {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 456, :column 7, :end-line 456, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.loop property reflects the loop HTML attribute,\n  controls whether the media element should start over when it\n  the end.\n\n  `var loop = video.loop;\n  audio.loop = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop`"}, :name html.HTMLMediaElement/loop, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.loop property reflects the loop HTML attribute,\n  controls whether the media element should start over when it\n  the end.\n\n  `var loop = video.loop;\n  audio.loop = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/loop`"}, default-muted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 349, :column 7, :end-line 349, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.defaultMuted property reflects the muted\n  attribute, which indicates whether the media element's audio\n  should be muted by default. This property has no dynamic effect.\n  mute and unmute the audio output, use the `web.muted` property.\n\n  `var dMuted = video.defaultMuted;\n  audio.defaultMuted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted`"}, :name html.HTMLMediaElement/default-muted, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.defaultMuted property reflects the muted\n  attribute, which indicates whether the media element's audio\n  should be muted by default. This property has no dynamic effect.\n  mute and unmute the audio output, use the `web.muted` property.\n\n  `var dMuted = video.defaultMuted;\n  audio.defaultMuted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultMuted`"}, src-object {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 714, :column 7, :end-line 714, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The srcObject property of the `html.HTMLMediaElement` interface\n  or returns the object which serves as the source of the media\n  with the `html.HTMLMediaElement`.\n\n  `var sourceObject = HTMLMediaElement.srcObject;\n\n  HTMLMediaElement.srcObject = sourceObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject`"}, :name html.HTMLMediaElement/src-object, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 714, :end-line 714, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The srcObject property of the `html.HTMLMediaElement` interface\n  or returns the object which serves as the source of the media\n  with the `html.HTMLMediaElement`.\n\n  `var sourceObject = HTMLMediaElement.srcObject;\n\n  HTMLMediaElement.srcObject = sourceObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject`"}, set-text-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 757, :column 7, :end-line 757, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only textTracks property on `html.HTMLMediaElement`\n  returns a `web.TextTrackList` object listing all of the `web.TextTrack`\n  representing the media element's text tracks\n\n  `var textTracks = mediaElement.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks`"}, :name html.HTMLMediaElement/set-text-tracks!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 757, :end-line 757, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only textTracks property on `html.HTMLMediaElement`\n  returns a `web.TextTrackList` object listing all of the `web.TextTrack`\n  representing the media element's text tracks\n\n  `var textTracks = mediaElement.textTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/textTracks`"}, set-video-tracks! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 783, :column 7, :end-line 783, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only videoTracks property on `html.HTMLMediaElement`\n  returns a `web.VideoTrackList` object listing all of the `web.VideoTrack`\n  representing the media element's video tracks.\n\n  `var videoTracks = mediaElement.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks`"}, :name html.HTMLMediaElement/set-video-tracks!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 783, :end-line 783, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only videoTracks property on `html.HTMLMediaElement`\n  returns a `web.VideoTrackList` object listing all of the `web.VideoTrack`\n  representing the media element's video tracks.\n\n  `var videoTracks = mediaElement.videoTracks;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/videoTracks`"}, fast-seek {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 33, :column 7, :end-line 33, :end-column 16, :arglists (quote ([this time])), :doc "Method.\n\n  The HTMLMediaElement.fastSeek() method quickly seeks the media\n  the new time with precision tradeoff.\n\n  `HTMLMediaElement.fastSeek(time);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek`"}, :name html.HTMLMediaElement/fast-seek, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 16, :method-params ([this time]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this time])), :doc "Method.\n\n  The HTMLMediaElement.fastSeek() method quickly seeks the media\n  the new time with precision tradeoff.\n\n  `HTMLMediaElement.fastSeek(time);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/fastSeek`"}, set-src! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 701, :column 7, :end-line 701, :end-column 15, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.src property reflects the value of the HTML\n  element's src attribute, which indicates the URL of a media resource\n  use in the element.\n\n  `var mediaUrl = HTMLMediaElement.src;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src`"}, :name html.HTMLMediaElement/set-src!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 701, :end-line 701, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.src property reflects the value of the HTML\n  element's src attribute, which indicates the URL of a media resource\n  use in the element.\n\n  `var mediaUrl = HTMLMediaElement.src;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/src`"}, ms-insert-audio-effect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 59, :column 7, :end-line 59, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The HTMLMediaElement.msInsertAudioEffect() method inserts the\n  audio effect into the media pipeline.\n\n  `HTMLMediaElement.msInsertAudioEffect(activatableClassId: DOMString, effectRequired: boolean, config);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/msInsertAudioEffect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name html.HTMLMediaElement/ms-insert-audio-effect, :variadic true, :file "src/html/HTMLMediaElement.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The HTMLMediaElement.msInsertAudioEffect() method inserts the\n  audio effect into the media pipeline.\n\n  `HTMLMediaElement.msInsertAudioEffect(activatableClassId: DOMString, effectRequired: boolean, config);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/msInsertAudioEffect`"}, default-playback-rate {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 379, :column 7, :end-line 379, :end-column 28, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.defaultPlaybackRate property indicates the\n  playback rate for the media.\n\n  `var dSpeed = video.defaultPlaybackRate;\n  audio.defaultPlaybackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate`"}, :name html.HTMLMediaElement/default-playback-rate, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 28, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 379, :end-line 379, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.defaultPlaybackRate property indicates the\n  playback rate for the media.\n\n  `var dSpeed = video.defaultPlaybackRate;\n  audio.defaultPlaybackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate`"}, set-src-object! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 729, :column 7, :end-line 729, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The srcObject property of the `html.HTMLMediaElement` interface\n  or returns the object which serves as the source of the media\n  with the `html.HTMLMediaElement`.\n\n  `var sourceObject = HTMLMediaElement.srcObject;\n\n  HTMLMediaElement.srcObject = sourceObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject`"}, :name html.HTMLMediaElement/set-src-object!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 729, :end-line 729, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The srcObject property of the `html.HTMLMediaElement` interface\n  or returns the object which serves as the source of the media\n  with the `html.HTMLMediaElement`.\n\n  `var sourceObject = HTMLMediaElement.srcObject;\n\n  HTMLMediaElement.srcObject = sourceObject;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/srcObject`"}, set-muted! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 522, :column 7, :end-line 522, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.muted indicates whether the media element\n\n  `var isMuted = audioOrVideo.muted\n  audio.muted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted`"}, :name html.HTMLMediaElement/set-muted!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 522, :end-line 522, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.muted indicates whether the media element\n\n  `var isMuted = audioOrVideo.muted\n  audio.muted = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/muted`"}, seek-to-next-frame {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 97, :column 7, :end-line 97, :end-column 25, :arglists (quote ([this & args])), :doc "Method.\n\n  The HTMLMediaElement.seekToNextFrame() method asynchronously\n  the the current play position to the next frame in the media.\n\n  `var seekCompletePromise = HTMLMediaElement.seekToNextFrame();\n\n  HTMLMediaElement.seekToNextFrame();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name html.HTMLMediaElement/seek-to-next-frame, :variadic true, :file "src/html/HTMLMediaElement.cljs", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The HTMLMediaElement.seekToNextFrame() method asynchronously\n  the the current play position to the next frame in the media.\n\n  `var seekCompletePromise = HTMLMediaElement.seekToNextFrame();\n\n  HTMLMediaElement.seekToNextFrame();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekToNextFrame`"}, set-default-playback-rate! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 392, :column 7, :end-line 392, :end-column 33, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.defaultPlaybackRate property indicates the\n  playback rate for the media.\n\n  `var dSpeed = video.defaultPlaybackRate;\n  audio.defaultPlaybackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate`"}, :name html.HTMLMediaElement/set-default-playback-rate!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 33, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 392, :end-line 392, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLMediaElement.defaultPlaybackRate property indicates the\n  playback rate for the media.\n\n  `var dSpeed = video.defaultPlaybackRate;\n  audio.defaultPlaybackRate = 1.0;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/defaultPlaybackRate`"}, onencrypted {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 844, :column 7, :end-line 844, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onencrypted property of the `html.HTMLMediaElement` is an\n  handler, fired whenever an encrypted event occurs, denoting the\n  is encrypted.\n\n  `HTMLMediaElement.onencrypted = function(encrypted) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted`"}, :name html.HTMLMediaElement/onencrypted, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 844, :end-line 844, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onencrypted property of the `html.HTMLMediaElement` is an\n  handler, fired whenever an encrypted event occurs, denoting the\n  is encrypted.\n\n  `HTMLMediaElement.onencrypted = function(encrypted) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted`"}, seekable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 630, :column 7, :end-line 630, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The seekable read-only property of the `html.HTMLMediaElement`\n  a `web.TimeRanges` object that contains the time ranges that\n  user is able to seek to, if any.\n\n  `var seekable = audioOrVideo.seekable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable`"}, :name html.HTMLMediaElement/seekable, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 630, :end-line 630, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The seekable read-only property of the `html.HTMLMediaElement`\n  a `web.TimeRanges` object that contains the time ranges that\n  user is able to seek to, if any.\n\n  `var seekable = audioOrVideo.seekable;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/seekable`"}, onwaitingforkey {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 870, :column 7, :end-line 870, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The onwaitingforkey property of the `html.HTMLMediaElement` is\n  event handler, fired when a waitingforkey event occurs, when\n  is blocked while waiting for an encryption key.\n\n  `HTMLMediaElement.onwaitingforkey = function(waitingforkey) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey`"}, :name html.HTMLMediaElement/onwaitingforkey, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 870, :end-line 870, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onwaitingforkey property of the `html.HTMLMediaElement` is\n  event handler, fired when a waitingforkey event occurs, when\n  is blocked while waiting for an encryption key.\n\n  `HTMLMediaElement.onwaitingforkey = function(waitingforkey) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey`"}, media-group {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 484, :column 7, :end-line 484, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.mediaGroup property reflects the mediagroup\n  attribute, which indicates the name of the group of elements\n  belongs to. A group of media elements shares a common controller.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup`"}, :name html.HTMLMediaElement/media-group, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 484, :end-line 484, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.mediaGroup property reflects the mediagroup\n  attribute, which indicates the name of the group of elements\n  belongs to. A group of media elements shares a common controller.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/mediaGroup`"}, set-onwaitingforkey! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 883, :column 7, :end-line 883, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The onwaitingforkey property of the `html.HTMLMediaElement` is\n  event handler, fired when a waitingforkey event occurs, when\n  is blocked while waiting for an encryption key.\n\n  `HTMLMediaElement.onwaitingforkey = function(waitingforkey) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey`"}, :name html.HTMLMediaElement/set-onwaitingforkey!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 883, :end-line 883, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onwaitingforkey property of the `html.HTMLMediaElement` is\n  event handler, fired when a waitingforkey event occurs, when\n  is blocked while waiting for an encryption key.\n\n  `HTMLMediaElement.onwaitingforkey = function(waitingforkey) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onwaitingforkey`"}, initial-time {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 443, :column 7, :end-line 443, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.initialTime is the initial playback position\n  seconds. This property is obsolete, you can use a Media Fragments\n  in the `html.HTMLMediaElement.src` attribute instead.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/initialTime`"}, :name html.HTMLMediaElement/initial-time, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 443, :end-line 443, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.initialTime is the initial playback position\n  seconds. This property is obsolete, you can use a Media Fragments\n  in the `html.HTMLMediaElement.src` attribute instead.\n\n  `...`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/initialTime`"}, set-onencrypted! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 857, :column 7, :end-line 857, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onencrypted property of the `html.HTMLMediaElement` is an\n  handler, fired whenever an encrypted event occurs, denoting the\n  is encrypted.\n\n  `HTMLMediaElement.onencrypted = function(encrypted) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted`"}, :name html.HTMLMediaElement/set-onencrypted!, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 857, :end-line 857, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onencrypted property of the `html.HTMLMediaElement` is an\n  handler, fired whenever an encrypted event occurs, denoting the\n  is encrypted.\n\n  `HTMLMediaElement.onencrypted = function(encrypted) { ... }`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/onencrypted`"}, current-src {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 308, :column 7, :end-line 308, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.currentSrc property contains the absolute\n  of the chosen media resource. This could happen, for example,\n  the web server selects a media file based on the resolution of\n  user's display. The value is an empty string if the networkState\n  is EMPTY.\n\n  `var mediaUrl = audioObject.currentSrc;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc`"}, :name html.HTMLMediaElement/current-src, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 308, :end-line 308, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.currentSrc property contains the absolute\n  of the chosen media resource. This could happen, for example,\n  the web server selects a media file based on the resolution of\n  user's display. The value is an empty string if the networkState\n  is EMPTY.\n\n  `var mediaUrl = audioObject.currentSrc;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/currentSrc`"}, cross-origin {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 288, :column 7, :end-line 288, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.crossOrigin property is the CORS setting\n  this image element. See CORS settings attributes for details.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin`"}, :name html.HTMLMediaElement/cross-origin, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 288, :end-line 288, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.crossOrigin property is the CORS setting\n  this image element. See CORS settings attributes for details.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/crossOrigin`"}, pause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 71, :column 7, :end-line 71, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLMediaElement.pause() method will pause playback of the\n  if the media is already in a paused state this method will have\n  effect.\n\n  `HTMLMediaElement.pause()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause`"}, :name html.HTMLMediaElement/pause, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 71, :end-line 71, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLMediaElement.pause() method will pause playback of the\n  if the media is already in a paused state this method will have\n  effect.\n\n  `HTMLMediaElement.pause()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/pause`"}, error {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLMediaElement.cljs", :line 429, :column 7, :end-line 429, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.error is the `media.MediaError` object for\n  most recent error, or null if there has not been an error. When\n  error event is received by the element, you can determine details\n  what happened by examining this object.\n\n  `var myError = HTMLMediaElement.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error`"}, :name html.HTMLMediaElement/error, :variadic false, :file "src/html/HTMLMediaElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 429, :end-line 429, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLMediaElement.error is the `media.MediaError` object for\n  most recent error, or null if there has not been an error. When\n  error event is received by the element, you can determine details\n  what happened by examining this object.\n\n  `var myError = HTMLMediaElement.error;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/error`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLMediaElement interface adds to `html.HTMLElement` the\n  and methods needed to support basic media-related capabilities\n  are common to audio and video."}