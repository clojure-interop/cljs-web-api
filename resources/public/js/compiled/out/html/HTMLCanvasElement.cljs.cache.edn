{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLCanvasElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {transfer-control-to-offscreen {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 90, :column 7, :end-line 90, :end-column 36, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLCanvasElement.transferControlToOffscreen() method transfers\n  to an `web.OffscreenCanvas` object, either on the main thread\n  on a worker.\n\n  `OffscreenCanvas HTMLCanvasElement.transferControlToOffscreen()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen`"}, :name html.HTMLCanvasElement/transfer-control-to-offscreen, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 36, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLCanvasElement.transferControlToOffscreen() method transfers\n  to an `web.OffscreenCanvas` object, either on the main thread\n  on a worker.\n\n  `OffscreenCanvas HTMLCanvasElement.transferControlToOffscreen()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen`"}, to-data-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 77, :column 7, :end-line 77, :end-column 18, :arglists (quote ([this type encoder-options])), :doc "Method.\n\n  The HTMLCanvasElement.toDataURL() method returns a data URI containing\n  representation of the image in the format specified by the type\n  (defaults to PNG). The returned image is in a resolution of 96\n\n  `canvas.toDataURL(type, encoderOptions);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL`"}, :name html.HTMLCanvasElement/to-data-url, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 18, :method-params ([this type encoder-options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this type encoder-options])), :doc "Method.\n\n  The HTMLCanvasElement.toDataURL() method returns a data URI containing\n  representation of the image in the format specified by the type\n  (defaults to PNG). The returned image is in a resolution of 96\n\n  `canvas.toDataURL(type, encoderOptions);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL`"}, moz-opaque {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 135, :column 7, :end-line 135, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The non-standard HTMLCanvasElement.mozOpaque property is a `web.Boolean`\n  the moz-opaque HTML attribute of the `web.<canvas>` element.\n  lets the canvas know whether or not translucency will be a factor.\n  the canvas knows there's no translucency, painting performance\n  be optimized.\n\n  `var opaque = canvas.mozOpaque;\n  canvas.mozOpaque = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque`"}, :name html.HTMLCanvasElement/moz-opaque, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The non-standard HTMLCanvasElement.mozOpaque property is a `web.Boolean`\n  the moz-opaque HTML attribute of the `web.<canvas>` element.\n  lets the canvas know whether or not translucency will be a factor.\n  the canvas knows there's no translucency, painting performance\n  be optimized.\n\n  `var opaque = canvas.mozOpaque;\n  canvas.mozOpaque = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque`"}, set-width! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 183, :column 7, :end-line 183, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLCanvasElement.width property is a positive integer reflecting\n  width HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 300\n  used.\n\n  `var pxl = canvas.width;\n  canvas.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width`"}, :name html.HTMLCanvasElement/set-width!, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLCanvasElement.width property is a positive integer reflecting\n  width HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 300\n  used.\n\n  `var pxl = canvas.width;\n  canvas.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width`"}, height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 103, :column 7, :end-line 103, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLCanvasElement.height property is a positive integer reflecting\n  height HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 150\n  used.\n\n  `var pxl = canvas.height;\n  canvas.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height`"}, :name html.HTMLCanvasElement/height, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLCanvasElement.height property is a positive integer reflecting\n  height HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 150\n  used.\n\n  `var pxl = canvas.height;\n  canvas.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height`"}, set-height! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 119, :column 7, :end-line 119, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLCanvasElement.height property is a positive integer reflecting\n  height HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 150\n  used.\n\n  `var pxl = canvas.height;\n  canvas.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height`"}, :name html.HTMLCanvasElement/set-height!, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 119, :end-line 119, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLCanvasElement.height property is a positive integer reflecting\n  height HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 150\n  used.\n\n  `var pxl = canvas.height;\n  canvas.height = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/height`"}, moz-get-as-file {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 48, :column 7, :end-line 48, :end-column 22, :arglists (quote ([this name type])), :doc "Method.\n\n  The HTMLCanvasElement.mozGetAsFile() method returns a `file.File`\n  representing the image contained in the canvas; this file is\n  memory-based file, with the specified name. If type is not specified,\n  image type is image/png.\n\n  `canvas.mozGetAsFile(name, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile`"}, :name html.HTMLCanvasElement/moz-get-as-file, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 22, :method-params ([this name type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this name type])), :doc "Method.\n\n  The HTMLCanvasElement.mozGetAsFile() method returns a `file.File`\n  representing the image contained in the canvas; this file is\n  memory-based file, with the specified name. If type is not specified,\n  image type is image/png.\n\n  `canvas.mozGetAsFile(name, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozGetAsFile`"}, to-blob {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 62, :column 7, :end-line 62, :end-column 14, :arglists (quote ([this callback mime-type quality-argument])), :doc "Method.\n\n  The HTMLCanvasElement.toBlob() method creates a `web.Blob` object\n  the image contained in the canvas; this file may be cached on\n  disk or stored in memory at the discretion of the user agent.\n  type is not specified, the image type is image/png. The created\n  is in a resolution of 96dpi.\n\n  `canvas.toBlob(callback, mimeType, qualityArgument);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob`"}, :name html.HTMLCanvasElement/to-blob, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 14, :method-params ([this callback mime-type quality-argument]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this callback mime-type quality-argument])), :doc "Method.\n\n  The HTMLCanvasElement.toBlob() method creates a `web.Blob` object\n  the image contained in the canvas; this file may be cached on\n  disk or stored in memory at the discretion of the user agent.\n  type is not specified, the image type is image/png. The created\n  is in a resolution of 96dpi.\n\n  `canvas.toBlob(callback, mimeType, qualityArgument);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob`"}, capture-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 8, :column 7, :end-line 8, :end-column 21, :arglists (quote ([this frame-rate])), :doc "Method.\n\n  The `html.HTMLCanvasElement` captureStream() method returns a\n  which includes a `web.CanvasCaptureMediaStreamTrack` containing\n  real-time video capture of the canvas's contents.\n\n  `MediaStream = canvas.captureStream(frameRate);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream`"}, :name html.HTMLCanvasElement/capture-stream, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 21, :method-params ([this frame-rate]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this frame-rate])), :doc "Method.\n\n  The `html.HTMLCanvasElement` captureStream() method returns a\n  which includes a `web.CanvasCaptureMediaStreamTrack` containing\n  real-time video capture of the canvas's contents.\n\n  `MediaStream = canvas.captureStream(frameRate);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/captureStream`"}, moz-fetch-as-stream {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 34, :column 7, :end-line 34, :end-column 26, :arglists (quote ([this callback type])), :doc "Method.\n\n  The HTMLCanvasElement.mozFetchAsStream() internal method used\n  create a new input stream that, when ready, would provide the\n  of the canvas as image data. However, this non-standard and internal\n  has been removed.\n\n  `void canvas.mozFetchAsStream(callback, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozFetchAsStream`"}, :name html.HTMLCanvasElement/moz-fetch-as-stream, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 26, :method-params ([this callback type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this callback type])), :doc "Method.\n\n  The HTMLCanvasElement.mozFetchAsStream() internal method used\n  create a new input stream that, when ready, would provide the\n  of the canvas as image data. However, this non-standard and internal\n  has been removed.\n\n  `void canvas.mozFetchAsStream(callback, type);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozFetchAsStream`"}, width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 167, :column 7, :end-line 167, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLCanvasElement.width property is a positive integer reflecting\n  width HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 300\n  used.\n\n  `var pxl = canvas.width;\n  canvas.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width`"}, :name html.HTMLCanvasElement/width, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLCanvasElement.width property is a positive integer reflecting\n  width HTML attribute of the `web.<canvas>` element interpreted\n  CSS pixels. When the attribute is not specified, or if it is\n  to an invalid value, like a negative, the default value of 300\n  used.\n\n  `var pxl = canvas.width;\n  canvas.width = pxl;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/width`"}, get-context {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 21, :column 7, :end-line 21, :end-column 18, :arglists (quote ([this & args])), :doc "Method.\n\n  The HTMLCanvasElement.getContext() method returns a drawing context\n  the canvas, or `web.null` if the context identifier is not supported.\n\n  `var ctx = canvas.getContext(contextType);\n  var ctx = canvas.getContext(contextType, contextAttributes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name html.HTMLCanvasElement/get-context, :variadic true, :file "src/html/HTMLCanvasElement.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The HTMLCanvasElement.getContext() method returns a drawing context\n  the canvas, or `web.null` if the context identifier is not supported.\n\n  `var ctx = canvas.getContext(contextType);\n  var ctx = canvas.getContext(contextType, contextAttributes);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext`"}, set-moz-opaque! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLCanvasElement.cljs", :line 151, :column 7, :end-line 151, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The non-standard HTMLCanvasElement.mozOpaque property is a `web.Boolean`\n  the moz-opaque HTML attribute of the `web.<canvas>` element.\n  lets the canvas know whether or not translucency will be a factor.\n  the canvas knows there's no translucency, painting performance\n  be optimized.\n\n  `var opaque = canvas.mozOpaque;\n  canvas.mozOpaque = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque`"}, :name html.HTMLCanvasElement/set-moz-opaque!, :variadic false, :file "src/html/HTMLCanvasElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 151, :end-line 151, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The non-standard HTMLCanvasElement.mozOpaque property is a `web.Boolean`\n  the moz-opaque HTML attribute of the `web.<canvas>` element.\n  lets the canvas know whether or not translucency will be a factor.\n  the canvas knows there's no translucency, painting performance\n  be optimized.\n\n  `var opaque = canvas.mozOpaque;\n  canvas.mozOpaque = true;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/mozOpaque`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLCanvasElement interface provides properties and methods\n  manipulating the layout and presentation of `web.<canvas>` elements.\n  HTMLCanvasElement interface also inherits the properties and\n  of the `html.HTMLElement` interface."}