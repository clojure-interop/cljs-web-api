{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLElement.ev, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {input {:name html.HTMLElement.ev/input, :file "src/html/HTMLElement/ev.cljs", :line 90, :column 1, :end-line 90, :end-column 11, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 90, :column 6, :end-line 90, :end-column 11}, :doc "Event.\n\n  The input event fires when the value of an `web.<input>`, `web.<select>`,\n  `web.<textarea>` element has been changed.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/input_event`", :tag string}, transitionstart {:name html.HTMLElement.ev/transitionstart, :file "src/html/HTMLElement/ev.cljs", :line 232, :column 1, :end-line 232, :end-column 21, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 232, :column 6, :end-line 232, :end-column 21}, :doc "Event.\n\n  The transitionstart event is fired when a CSS transition has\n  started, i.e., after any `web.transition-delay` has ended.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionstart_event`", :tag string}, pointerdown {:name html.HTMLElement.ev/pointerdown, :file "src/html/HTMLElement/ev.cljs", :line 122, :column 1, :end-line 122, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 122, :column 6, :end-line 122, :end-column 17}, :doc "Event.\n\n  The pointerdown event is fired when a pointer becomes active.\n  mouse, it is fired when the device transitions from no buttons\n  to at least one button depressed. For touch, it is fired when\n  contact is made with the digitizer. For pen, it is fired when\n  stylus makes physical contact with the digitizer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerdown_event`", :tag string}, change {:name html.HTMLElement.ev/change, :file "src/html/HTMLElement/ev.cljs", :line 68, :column 1, :end-line 68, :end-column 12, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 68, :column 6, :end-line 68, :end-column 12}, :doc "Event.\n\n  The change event is fired for `web.<input>`, `web.<select>`,\n  `web.<textarea>` elements when an alteration to the element's\n  is committed by the user. Unlike the input event, the change\n  is not necessarily fired for each alteration to an element's\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/change_event`", :tag string}, animationcancel {:name html.HTMLElement.ev/animationcancel, :file "src/html/HTMLElement/ev.cljs", :line 5, :column 1, :end-line 5, :end-column 21, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 5, :column 6, :end-line 5, :end-column 21}, :doc "Event.\n\n  An animationcancel event is fired when a CSS Animation unexpectedly\n  In other words, any time it stops running without sending an\n  event). This might happen when the `web.animation-name` is changed\n  that the animation is removed, or when the animating node is\n  using CSS. Therefore, either directly or because any of its containing\n  are hidden.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationcancel_event`", :tag string}, animationstart {:name html.HTMLElement.ev/animationstart, :file "src/html/HTMLElement/ev.cljs", :line 42, :column 1, :end-line 42, :end-column 20, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 42, :column 6, :end-line 42, :end-column 20}, :doc "Event.\n\n  The animationstart event is fired when a CSS Animation has started.\n  there is an `web.animation-delay`, this event will fire once\n  delay period has expired. A negative delay will cause the event\n  fire with an elapsedTime equal to the absolute value of the delay\n  correspondingly, the animation will begin playing at that time\n  into the sequence).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationstart_event`", :tag string}, pointerleave {:name html.HTMLElement.ev/pointerleave, :file "src/html/HTMLElement/ev.cljs", :line 147, :column 1, :end-line 147, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 147, :column 6, :end-line 147, :end-column 18}, :doc "Event.\n\n  The pointerleave event is fired when a pointing device is moved\n  of the hit test boundaries of an element. For pen devices, this\n  is fired when the stylus leaves the hover range detectable by\n  digitizer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerleave_event`", :tag string}, pointerout {:name html.HTMLElement.ev/pointerout, :file "src/html/HTMLElement/ev.cljs", :line 169, :column 1, :end-line 169, :end-column 16, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 169, :column 6, :end-line 169, :end-column 16}, :doc "Event.\n\n  The pointerout event is fired for several reasons including:\n  device is moved out of the hit test boundaries of an element;\n  the pointerup event for a device that does not support hover\n  pointerup); after firing the pointercancel event (see pointercancel);\n  a pen stylus leaves the hover range detectable by the digitizer.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerout_event`", :tag string}, pointerenter {:name html.HTMLElement.ev/pointerenter, :file "src/html/HTMLElement/ev.cljs", :line 135, :column 1, :end-line 135, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 135, :column 6, :end-line 135, :end-column 18}, :doc "Event.\n\n  The pointerenter event fires when a pointing device is moved\n  the hit test boundaries of an element or one of its descendants,\n  as a result of a pointerdown event from a device that does not\n  hover (see pointerdown).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerenter_event`", :tag string}, transitionrun {:name html.HTMLElement.ev/transitionrun, :file "src/html/HTMLElement/ev.cljs", :line 222, :column 1, :end-line 222, :end-column 19, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 222, :column 6, :end-line 222, :end-column 19}, :doc "Event.\n\n  The transitionrun event is fired when a CSS transition is first\n  i.e. before any `web.transition-delay` has begun.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionrun_event`", :tag string}, animationiteration {:name html.HTMLElement.ev/animationiteration, :file "src/html/HTMLElement/ev.cljs", :line 30, :column 1, :end-line 30, :end-column 24, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 30, :column 6, :end-line 30, :end-column 24}, :doc "Event.\n\n  The animationiteration event is fired when an iteration of a\n  Animation ends, and another one begins. This event does not occur\n  the same time as the animationend event, and therefore does not\n  for animations with an animation-iteration-count of one.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationiteration_event`", :tag string}, pointerup {:name html.HTMLElement.ev/pointerup, :file "src/html/HTMLElement/ev.cljs", :line 192, :column 1, :end-line 192, :end-column 15, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 192, :column 6, :end-line 192, :end-column 15}, :doc "Event.\n\n  The pointerup event is fired when a pointer is no longer active.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerup_event`", :tag string}, animationend {:name html.HTMLElement.ev/animationend, :file "src/html/HTMLElement/ev.cljs", :line 19, :column 1, :end-line 19, :end-column 18, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 19, :column 6, :end-line 19, :end-column 18}, :doc "Event.\n\n  The animationend event is fired when a CSS Animation has completed\n  not if it aborts before reaching completion, such as if the element\n  invisible or the animation is removed from the element).\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationend_event`", :tag string}, pointermove {:name html.HTMLElement.ev/pointermove, :file "src/html/HTMLElement/ev.cljs", :line 159, :column 1, :end-line 159, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 159, :column 6, :end-line 159, :end-column 17}, :doc "Event.\n\n  The pointermove event is fired when a pointer changes coordinates,\n  the pointer has not been canceled by a browser touch-action.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointermove_event`", :tag string}, lostpointercapture {:name html.HTMLElement.ev/lostpointercapture, :file "src/html/HTMLElement/ev.cljs", :line 100, :column 1, :end-line 100, :end-column 24, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 100, :column 6, :end-line 100, :end-column 24}, :doc "Event.\n\n  The lostpointercapture event is fired when a captured pointer\n  released.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lostpointercapture_event`", :tag string}, pointerover {:name html.HTMLElement.ev/pointerover, :file "src/html/HTMLElement/ev.cljs", :line 182, :column 1, :end-line 182, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 182, :column 6, :end-line 182, :end-column 17}, :doc "Event.\n\n  The pointerover event is fired when a pointing device is moved\n  an element's hit test boundaries.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointerover_event`", :tag string}, pointercancel {:name html.HTMLElement.ev/pointercancel, :file "src/html/HTMLElement/ev.cljs", :line 110, :column 1, :end-line 110, :end-column 19, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 110, :column 6, :end-line 110, :end-column 19}, :doc "Event.\n\n  The pointercancel event is fired when the browser determines\n  there are unlikely to be any more pointer events, or if after\n  pointerdown event is fired, the pointer is then used to manipulate\n  viewport by panning, zooming, or scrolling.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/pointercancel_event`", :tag string}, beforeinput {:name html.HTMLElement.ev/beforeinput, :file "src/html/HTMLElement/ev.cljs", :line 56, :column 1, :end-line 56, :end-column 17, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 56, :column 6, :end-line 56, :end-column 17}, :doc "Event.\n\n  The DOM beforeinput event fires when the value of an `web.<input>`,\n  or `web.<textarea>` element is about to be modified. The event\n  applies to elements with `web.contenteditable` enabled, and to\n  element when `web.designMode` is turned on.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/beforeinput_event`", :tag string}, gotpointercapture {:name html.HTMLElement.ev/gotpointercapture, :file "src/html/HTMLElement/ev.cljs", :line 80, :column 1, :end-line 80, :end-column 23, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 80, :column 6, :end-line 80, :end-column 23}, :doc "Event.\n\n  The gotpointercapture event is fired when an element captures\n  pointer using setPointerCapture().\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/gotpointercapture_event`", :tag string}, transitionend {:name html.HTMLElement.ev/transitionend, :file "src/html/HTMLElement/ev.cljs", :line 210, :column 1, :end-line 210, :end-column 19, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 210, :column 6, :end-line 210, :end-column 19}, :doc "Event.\n\n  The transitionend event is fired when a CSS transition has completed.\n  the case where a transition is removed before completion, such\n  if the `web.transition-property` is removed or `web.display`\n  set to none, then the event will not be generated.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitionend_event`", :tag string}, transitioncancel {:name html.HTMLElement.ev/transitioncancel, :file "src/html/HTMLElement/ev.cljs", :line 201, :column 1, :end-line 201, :end-column 22, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement/ev.cljs", :line 201, :column 6, :end-line 201, :end-column 22}, :doc "Event.\n\n  The transitioncancel event is fired when a CSS transition is\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/transitioncancel_event`", :tag string}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "HTMLElement Events."}