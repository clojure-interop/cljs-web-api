{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLVideoElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {ms-is-layout-optimal-for-playback {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 68, :column 7, :end-line 68, :end-column 40, :arglists (quote ([this])), :doc "Property.\n\n  msIsLayoutOptimalForPlayback is a read-only property which indicates\n  the video can be rendered more efficiently.\n\n  `HTMLVideoElement.msIsLayoutOptimalForPlayback: DOMString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsLayoutOptimalForPlayback`"}, :name html.HTMLVideoElement/ms-is-layout-optimal-for-playback, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 40, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  msIsLayoutOptimalForPlayback is a read-only property which indicates\n  the video can be rendered more efficiently.\n\n  `HTMLVideoElement.msIsLayoutOptimalForPlayback: DOMString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsLayoutOptimalForPlayback`"}, ms-is-stereo-3d {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 92, :column 7, :end-line 92, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  msIsStereo3D is a read-only property which determines whether\n  system considers the loaded video source to be stereo 3-D or\n\n  `HTMLVideoElement.msIsStereo3D: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsStereo3D`"}, :name html.HTMLVideoElement/ms-is-stereo-3d, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  msIsStereo3D is a read-only property which determines whether\n  system considers the loaded video source to be stereo 3-D or\n\n  `HTMLVideoElement.msIsStereo3D: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsStereo3D`"}, set-ms-is-layout-optimal-for-playback! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 80, :column 7, :end-line 80, :end-column 45, :arglists (quote ([this val])), :doc "Property.\n\n  msIsLayoutOptimalForPlayback is a read-only property which indicates\n  the video can be rendered more efficiently.\n\n  `HTMLVideoElement.msIsLayoutOptimalForPlayback: DOMString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsLayoutOptimalForPlayback`"}, :name html.HTMLVideoElement/set-ms-is-layout-optimal-for-playback!, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 45, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  msIsLayoutOptimalForPlayback is a read-only property which indicates\n  the video can be rendered more efficiently.\n\n  `HTMLVideoElement.msIsLayoutOptimalForPlayback: DOMString;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsLayoutOptimalForPlayback`"}, video-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 142, :column 7, :end-line 142, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLVideoElement` interface's read-only videoHeight\n  indicates the intrinsic height of the video, expressed in CSS\n  In simple terms, this is the height of the media in its natural\n\n  `height = htmlVideoElement.videoHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight`"}, :name html.HTMLVideoElement/video-height, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 142, :end-line 142, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLVideoElement` interface's read-only videoHeight\n  indicates the intrinsic height of the video, expressed in CSS\n  In simple terms, this is the height of the media in its natural\n\n  `height = htmlVideoElement.videoHeight;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoHeight`"}, ms-zoom {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 116, :column 7, :end-line 116, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  msZoom is a read/write property which gets or sets whether the\n  frame is trimmed, on the top and bottom or left and right, to\n  the video display.\n\n  `HTMLVideoElement.msZoom;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msZoom`"}, :name html.HTMLVideoElement/ms-zoom, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  msZoom is a read/write property which gets or sets whether the\n  frame is trimmed, on the top and bottom or left and right, to\n  the video display.\n\n  `HTMLVideoElement.msZoom;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msZoom`"}, set-ms-zoom! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 129, :column 7, :end-line 129, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  msZoom is a read/write property which gets or sets whether the\n  frame is trimmed, on the top and bottom or left and right, to\n  the video display.\n\n  `HTMLVideoElement.msZoom;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msZoom`"}, :name html.HTMLVideoElement/set-ms-zoom!, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 129, :end-line 129, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  msZoom is a read/write property which gets or sets whether the\n  frame is trimmed, on the top and bottom or left and right, to\n  the video display.\n\n  `HTMLVideoElement.msZoom;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msZoom`"}, ms-insert-video-effect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 32, :column 7, :end-line 32, :end-column 29, :arglists (quote ([this & args])), :doc "Method.\n\n  The HTMLMediaElement.msInsertVideoEffect() method inserts the\n  video effect into the media pipeline.\n\n  `str = HTMLMediaElement.msInsertVideoEffect(activatableClassId: DOMString, effectRequired: boolean, config);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msInsertVideoEffect`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name html.HTMLVideoElement/ms-insert-video-effect, :variadic true, :file "src/html/HTMLVideoElement.cljs", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The HTMLMediaElement.msInsertVideoEffect() method inserts the\n  video effect into the media pipeline.\n\n  `str = HTMLMediaElement.msInsertVideoEffect(activatableClassId: DOMString, effectRequired: boolean, config);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msInsertVideoEffect`"}, ms-frame-step {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 20, :column 7, :end-line 20, :end-column 20, :arglists (quote ([this forward])), :doc "Method.\n\n  The HTMLVideoElement.msFrameStep() method steps the video by\n  frame forward or one frame backward.\n\n  `HTMLVideoElement.msFrameStep(forward);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msFrameStep`"}, :name html.HTMLVideoElement/ms-frame-step, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 20, :method-params ([this forward]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this forward])), :doc "Method.\n\n  The HTMLVideoElement.msFrameStep() method steps the video by\n  frame forward or one frame backward.\n\n  `HTMLVideoElement.msFrameStep(forward);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msFrameStep`"}, ms-horizontal-mirror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 44, :column 7, :end-line 44, :end-column 27, :arglists (quote ([this])), :doc "Property.\n\n  msHorizontalMirror is a read/write property which gets or sets\n  a video element is flipped horizontally in the display.\n\n  `HTMLVideoElement.msHorizontalMirror: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msHorizontalMirror`"}, :name html.HTMLVideoElement/ms-horizontal-mirror, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 27, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  msHorizontalMirror is a read/write property which gets or sets\n  a video element is flipped horizontally in the display.\n\n  `HTMLVideoElement.msHorizontalMirror: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msHorizontalMirror`"}, video-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 155, :column 7, :end-line 155, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLVideoElement` interface's read-only videoWidth\n  indicates the intrinsic width of the video, expressed in CSS\n  In simple terms, this is the width of the media in its natural\n\n  `width = htmlVideoElement.videoWidth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth`"}, :name html.HTMLVideoElement/video-width, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLVideoElement` interface's read-only videoWidth\n  indicates the intrinsic width of the video, expressed in CSS\n  In simple terms, this is the width of the media in its natural\n\n  `width = htmlVideoElement.videoWidth;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/videoWidth`"}, get-video-playback-quality {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 7, :column 7, :end-line 7, :end-column 33, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLVideoElement` method getVideoPlaybackQuality()\n  and returns a `web.VideoPlaybackQuality` object containing metrics\n  how many frames have been lost.\n\n  `videoPQ = videoElement.getVideoPlaybackQuality();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality`"}, :name html.HTMLVideoElement/get-video-playback-quality, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 33, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The `html.HTMLVideoElement` method getVideoPlaybackQuality()\n  and returns a `web.VideoPlaybackQuality` object containing metrics\n  how many frames have been lost.\n\n  `videoPQ = videoElement.getVideoPlaybackQuality();`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality`"}, set-ms-horizontal-mirror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 56, :column 7, :end-line 56, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  msHorizontalMirror is a read/write property which gets or sets\n  a video element is flipped horizontally in the display.\n\n  `HTMLVideoElement.msHorizontalMirror: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msHorizontalMirror`"}, :name html.HTMLVideoElement/set-ms-horizontal-mirror!, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 56, :end-line 56, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  msHorizontalMirror is a read/write property which gets or sets\n  a video element is flipped horizontally in the display.\n\n  `HTMLVideoElement.msHorizontalMirror: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msHorizontalMirror`"}, set-ms-is-stereo-3d! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLVideoElement.cljs", :line 104, :column 7, :end-line 104, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  msIsStereo3D is a read-only property which determines whether\n  system considers the loaded video source to be stereo 3-D or\n\n  `HTMLVideoElement.msIsStereo3D: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsStereo3D`"}, :name html.HTMLVideoElement/set-ms-is-stereo-3d!, :variadic false, :file "src/html/HTMLVideoElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  msIsStereo3D is a read-only property which determines whether\n  system considers the loaded video source to be stereo 3-D or\n\n  `HTMLVideoElement.msIsStereo3D: boolean;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLVideoElement/msIsStereo3D`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLVideoElement interface provides special properties and\n  for manipulating video objects. It also inherits properties and\n  of `html.HTMLMediaElement` and `html.HTMLElement`."}