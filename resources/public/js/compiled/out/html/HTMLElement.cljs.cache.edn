{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name html.HTMLElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {oncanplaythrough {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 629, :column 7, :end-line 629, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name html.HTMLElement/oncanplaythrough, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 629, :end-line 629, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-onselectionchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1891, :column 7, :end-line 1891, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name html.HTMLElement/set-onselectionchange!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1891, :end-line 1891, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, set-onmouseenter! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1324, :column 7, :end-line 1324, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, :name html.HTMLElement/set-onmouseenter!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1324, :end-line 1324, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseenter property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseenter events.\n\n  `element.onmouseenter = handlerFunction;\n  var handlerFunction = element.onmouseenter;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseenter`"}, oncanplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 599, :column 7, :end-line 599, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, :name html.HTMLElement/oncanplay, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 599, :end-line 599, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncanplay property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing canplay events.\n\n  `element.oncanplay = handlerFunction;\n  var handlerFunction = element.oncanplay;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplay`"}, onscroll {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1831, :column 7, :end-line 1831, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name html.HTMLElement/onscroll, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1831, :end-line 1831, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, set-onpointermove! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1685, :column 7, :end-line 1685, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, :name html.HTMLElement/set-onpointermove!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1685, :end-line 1685, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointermove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointermove events.\n\n  `targetElement.onpointermove = moveHandler;\n\n  var moveHandler = targetElement.onpointermove;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointermove`"}, onpause {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1489, :column 7, :end-line 1489, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name html.HTMLElement/onpause, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1489, :end-line 1489, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, onsubmit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1927, :column 7, :end-line 1927, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name html.HTMLElement/onsubmit, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1927, :end-line 1927, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, set-lang! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 266, :column 7, :end-line 266, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.lang property gets or sets the base language\n  an element's attribute values and text content.\n\n  `var languageUsed = elementNodeReference.lang; // Get the value of lang\n  elementNodeReference.lang = NewLanguage; // Set new value for lang\n\n  languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang`"}, :name html.HTMLElement/set-lang!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 266, :end-line 266, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.lang property gets or sets the base language\n  an element's attribute values and text content.\n\n  `var languageUsed = elementNodeReference.lang; // Get the value of lang\n  elementNodeReference.lang = NewLanguage; // Set new value for lang\n\n  languageUsed is a string variable that gets the language in which the text of the current element is written. NewLanguage is a string variable with its value setting the language in which the text of the current element is written.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/lang`"}, offset-width {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 398, :column 7, :end-line 398, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetWidth read-only property returns the layout\n  of an element as an integer.\n\n  `var intElemOffsetWidth = element.offsetWidth;\n\n  intElemOffsetWidth is a variable storing an integer corresponding to the offsetWidth pixel value of the element. The offsetWidth property is a read-only.\n\n\n  This property will round the value to an integer. If you need a fractional value, use `web.element.getBoundingClientRect()`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth`"}, :name html.HTMLElement/offset-width, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 398, :end-line 398, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetWidth read-only property returns the layout\n  of an element as an integer.\n\n  `var intElemOffsetWidth = element.offsetWidth;\n\n  intElemOffsetWidth is a variable storing an integer corresponding to the offsetWidth pixel value of the element. The offsetWidth property is a read-only.\n\n\n  This property will round the value to an integer. If you need a fractional value, use `web.element.getBoundingClientRect()`.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetWidth`"}, onmousemove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1369, :column 7, :end-line 1369, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, :name html.HTMLElement/onmousemove, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1369, :end-line 1369, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmousemove property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousemove events.\n\n  `target.onmousemove = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousemove`"}, set-onpointerdown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1593, :column 7, :end-line 1593, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, :name html.HTMLElement/set-onpointerdown!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1593, :end-line 1593, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `web.GlobalEventHandlers` event handler onpointerdown is\n  to specify the event handler for the pointerdown event, which\n  fired when the pointing device is initially pressed. This event\n  be sent to `web.Window`, `web.Document`, and `web.Element` objects.\n\n  `target.onpointerdown = downHandler;\n\n  var downHandler = target.onpointerdown;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerdown`"}, set-onkeyup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1107, :column 7, :end-line 1107, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name html.HTMLElement/set-onkeyup!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1107, :end-line 1107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, nonce {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 281, :column 7, :end-line 281, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The nonce property of the `html.HTMLElement` interface returns\n  cryptographic number used once that is used by Content Security\n  to determine whether a given fetch will be allowed to proceed.\n\n  `var nonce = HTMLElement.nonce\n  HTMLElement.nonce = nonce`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce`"}, :name html.HTMLElement/nonce, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The nonce property of the `html.HTMLElement` interface returns\n  cryptographic number used once that is used by Content Security\n  to determine whether a given fetch will be allowed to proceed.\n\n  `var nonce = HTMLElement.nonce\n  HTMLElement.nonce = nonce`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce`"}, set-onpointerout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1713, :column 7, :end-line 1713, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, :name html.HTMLElement/set-onpointerout!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1713, :end-line 1713, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerout events.\n\n  `targetElement.onpointerout = outHandler;\n\n  var outHandler = targetElement.onpointerout;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerout`"}, onanimationend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 467, :column 7, :end-line 467, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name html.HTMLElement/onanimationend, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 467, :end-line 467, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, offset-height {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 309, :column 7, :end-line 309, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetHeight read-only property returns the height\n  an element, including vertical padding and borders, as an integer.\n\n  `var intElemOffsetHeight = element.offsetHeight;\n\n  intElemOffsetHeight is a variable storing an integer corresponding to the offsetHeight pixel value of the element. The offsetHeight property is read-only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight`"}, :name html.HTMLElement/offset-height, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 309, :end-line 309, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetHeight read-only property returns the height\n  an element, including vertical padding and borders, as an integer.\n\n  `var intElemOffsetHeight = element.offsetHeight;\n\n  intElemOffsetHeight is a variable storing an integer corresponding to the offsetHeight pixel value of the element. The offsetHeight property is read-only.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetHeight`"}, set-style! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2114, :column 7, :end-line 2114, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.style property is used to get as well as set\n  inline style of an element. When getting, it returns a `css.CSSStyleDeclaration`\n  that contains a list of all styles properties for that element\n  values assigned for the attributes that are defined in the element's\n  `web.style`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style`"}, :name html.HTMLElement/set-style!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2114, :end-line 2114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.style property is used to get as well as set\n  inline style of an element. When getting, it returns a `css.CSSStyleDeclaration`\n  that contains a list of all styles properties for that element\n  values assigned for the attributes that are defined in the element's\n  `web.style`.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style`"}, onselectstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1903, :column 7, :end-line 1903, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name html.HTMLElement/onselectstart, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1903, :end-line 1903, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, set-onselect! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1867, :column 7, :end-line 1867, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name html.HTMLElement/set-onselect!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1867, :end-line 1867, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, set-onselectstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1915, :column 7, :end-line 1915, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, :name html.HTMLElement/set-onselectstart!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1915, :end-line 1915, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onselectstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes selectstart events.\n\n  `object.onselectstart = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectstart`"}, onplay {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1519, :column 7, :end-line 1519, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name html.HTMLElement/onplay, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1519, :end-line 1519, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, onloadstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1233, :column 7, :end-line 1233, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name html.HTMLElement/onloadstart, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1233, :end-line 1233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, dataset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 102, :column 7, :end-line 102, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The dataset property on the `html.HTMLElement` interface provides\n  access to all the custom data attributes (data-*) set on the\n\n  `string = element.dataset.camelCasedName;\n  element.dataset.camelCasedName = string;\n\n  string = element.dataset[camelCasedName];\n  element.dataset[camelCasedName] = string;\n\n  Custom data attributes can also be set directly on HTML elements, but attribute names must use the data- syntax above.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset`"}, :name html.HTMLElement/dataset, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The dataset property on the `html.HTMLElement` interface provides\n  access to all the custom data attributes (data-*) set on the\n\n  `string = element.dataset.camelCasedName;\n  element.dataset.camelCasedName = string;\n\n  string = element.dataset[camelCasedName];\n  element.dataset[camelCasedName] = string;\n\n  Custom data attributes can also be set directly on HTML elements, but attribute names must use the data- syntax above.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset`"}, set-onloadstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1247, :column 7, :end-line 1247, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, :name html.HTMLElement/set-onloadstart!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1247, :end-line 1247, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onloadstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` representing the code to be called when\n  loadstart event is raised (when progress has begun on the loading\n  a resource.)\n\n  `img.onloadstart = funcRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadstart`"}, set-oncut! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 825, :column 7, :end-line 825, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.oncut property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes cut events.\n\n  `target.oncut = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut`"}, :name html.HTMLElement/set-oncut!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 825, :end-line 825, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.oncut property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes cut events.\n\n  `target.oncut = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut`"}, onpointercancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1549, :column 7, :end-line 1549, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name html.HTMLElement/onpointercancel, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1549, :end-line 1549, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, set-onscroll! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1843, :column 7, :end-line 1843, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, :name html.HTMLElement/set-onscroll!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1843, :end-line 1843, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onscroll property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes scroll events.\n\n  `target.onscroll = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onscroll`"}, onpointerleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1637, :column 7, :end-line 1637, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, :name html.HTMLElement/onpointerleave, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1637, :end-line 1637, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The global event handler for the pointerleave event, which is\n  to a `web.Node` when the pointer (mouse cursor, fingertip, etc.)\n  its hit test area (for example, if the cursor exits an `web.Element`\n  `web.Window`'s content area). This event is part of the Pointer\n  API.\n\n  `EventTarget.onpointerleave = leaveHandler;\n\n  var leaveHandler = EventTarget.onpointerleave;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerleave`"}, set-onclose! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 723, :column 7, :end-line 723, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, :name html.HTMLElement/set-onclose!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 723, :end-line 723, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onclose property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing close events sent to a `web.<dialog>`\n\n  `target.onclose = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclose`"}, onmouseup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1441, :column 7, :end-line 1441, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, :name html.HTMLElement/onmouseup, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1441, :end-line 1441, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseup events.\n\n  `target.onmouseup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseup`"}, onselectionchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1879, :column 7, :end-line 1879, :end-column 24, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, :name html.HTMLElement/onselectionchange, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1879, :end-line 1879, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselectionchange property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes selectionchange events.\n\n  `object.onselectionchange = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselectionchange`"}, set-oninput! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1007, :column 7, :end-line 1007, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, :name html.HTMLElement/set-oninput!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1007, :end-line 1007, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninput property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes input events on the `web.<input>`,\n  and `web.<textarea>` elements. It also handles these events on\n  where `web.contenteditable` or `web.designMode` are turned on.\n\n  `target.oninput = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninput`"}, onloadedmetadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1175, :column 7, :end-line 1175, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, :name html.HTMLElement/onloadedmetadata, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1175, :end-line 1175, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadedmetadata property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing loadedmetadata events.\n\n  `element.onloadedmetadata = handlerFunction;\n  var handlerFunction = element.onloadedmetadata;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadedmetadata`"}, ontouchcancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1951, :column 7, :end-line 1951, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name html.HTMLElement/ontouchcancel, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1951, :end-line 1951, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, set-onpointercancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1563, :column 7, :end-line 1563, :end-column 27, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, :name html.HTMLElement/set-onpointercancel!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 27, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1563, :end-line 1563, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointercancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes pointercancel events.\n\n  `targetElement.onpointercancel = cancelHandler;\n\n  var cancelHandler = targetElement.onpointercancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointercancel`"}, set-access-key-label! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2194, :column 7, :end-line 2194, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.accessKeyLabel read-only property returns a `web.String`\n  represents the element's assigned access key (if any); otherwise\n  returns an empty string.\n\n  `label = element.accessKeyLabel`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel`"}, :name html.HTMLElement/set-access-key-label!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2194, :end-line 2194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.accessKeyLabel read-only property returns a `web.String`\n  represents the element's assigned access key (if any); otherwise\n  returns an empty string.\n\n  `label = element.accessKeyLabel`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel`"}, onchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 659, :column 7, :end-line 659, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name html.HTMLElement/onchange, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 659, :end-line 659, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, oncut {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 813, :column 7, :end-line 813, :end-column 12, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.oncut property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes cut events.\n\n  `target.oncut = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut`"}, :name html.HTMLElement/oncut, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 813, :end-line 813, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.oncut property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes cut events.\n\n  `target.oncut = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/oncut`"}, tab-index {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2127, :column 7, :end-line 2127, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The tabIndex property of the `html.HTMLElement` interface represents\n  tab order of the current element.\n\n  `element.tabIndex = index;\n  var index = element.tabIndex;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex`"}, :name html.HTMLElement/tab-index, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2127, :end-line 2127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The tabIndex property of the `html.HTMLElement` interface represents\n  tab order of the current element.\n\n  `element.tabIndex = index;\n  var index = element.tabIndex;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/tabIndex`"}, set-nonce! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 295, :column 7, :end-line 295, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The nonce property of the `html.HTMLElement` interface returns\n  cryptographic number used once that is used by Content Security\n  to determine whether a given fetch will be allowed to proceed.\n\n  `var nonce = HTMLElement.nonce\n  HTMLElement.nonce = nonce`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce`"}, :name html.HTMLElement/set-nonce!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 295, :end-line 295, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The nonce property of the `html.HTMLElement` interface returns\n  cryptographic number used once that is used by Content Security\n  to determine whether a given fetch will be allowed to proceed.\n\n  `var nonce = HTMLElement.nonce\n  HTMLElement.nonce = nonce`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/nonce`"}, set-inner-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 225, :column 7, :end-line 225, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The innerText property of the `html.HTMLElement` interface represents\n  \\\"rendered\\\" text content of a node and its descendants.\n\n  `var renderedText = HTMLElement.innerText;\n  HTMLElement.innerText = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText`"}, :name html.HTMLElement/set-inner-text!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 225, :end-line 225, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The innerText property of the `html.HTMLElement` interface represents\n  \\\"rendered\\\" text content of a node and its descendants.\n\n  `var renderedText = HTMLElement.innerText;\n  HTMLElement.innerText = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText`"}, ontransitionend {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2027, :column 7, :end-line 2027, :end-column 22, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, :name html.HTMLElement/ontransitionend, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2027, :end-line 2027, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitionend property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitionend events.\n\n  `var transitionEndHandler = target.ontransitionend;\n\n  target.ontransitionend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitionend`"}, set-onwheel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2067, :column 7, :end-line 2067, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, :name html.HTMLElement/set-onwheel!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2067, :end-line 2067, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, onresize {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1807, :column 7, :end-line 1807, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, :name html.HTMLElement/onresize, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1807, :end-line 1807, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onresize property of the `web.GlobalEventHandlers` interface\n  an `web.EventHandler` that processes resize events.\n\n  `window.onresize = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onresize`"}, ongotpointercapture {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 969, :column 7, :end-line 969, :end-column 26, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, :name html.HTMLElement/ongotpointercapture, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 26, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 969, :end-line 969, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ongotpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes gotpointercapture events.\n\n  `target.ongotpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ongotpointercapture`"}, onreset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1783, :column 7, :end-line 1783, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name html.HTMLElement/onreset, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1783, :end-line 1783, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, onblur {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 547, :column 7, :end-line 547, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, :name html.HTMLElement/onblur, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 547, :end-line 547, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onblur property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing blur events. It's available\n  `web.Element`, `web.Document`, and `web.Window`.\n\n  `target.onblur = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onblur`"}, set-onreset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1795, :column 7, :end-line 1795, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, :name html.HTMLElement/set-onreset!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1795, :end-line 1795, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onreset property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes reset events.\n\n  `target.onreset = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onreset`"}, set-onabort! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 427, :column 7, :end-line 427, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, :name html.HTMLElement/set-onabort!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 427, :end-line 427, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onabort property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing abort events sent to the window.\n\n  `window.onabort = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onabort`"}, set-outer-text! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2090, :column 7, :end-line 2090, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  HTMLElement.outerText is a non-standard property. As a getter,\n  returns the same value as `web.Node.innerText`. As a setter,\n  removes the current node and replaces it with the given text.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText`"}, :name html.HTMLElement/set-outer-text!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2090, :end-line 2090, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  HTMLElement.outerText is a non-standard property. As a getter,\n  returns the same value as `web.Node.innerText`. As a setter,\n  removes the current node and replaces it with the given text.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText`"}, set-context-menu! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 93, :column 7, :end-line 93, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contextMenu`"}, :name html.HTMLElement/set-context-menu!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contextMenu`"}, onkeyup {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1095, :column 7, :end-line 1095, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, :name html.HTMLElement/onkeyup, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1095, :end-line 1095, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeyup property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes keyup events.\n\n  `target.onkeyup = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeyup`"}, set-onmousedown! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1297, :column 7, :end-line 1297, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onmousedown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousedown events.\n\n  `target.onmousedown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown`"}, :name html.HTMLElement/set-onmousedown!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1297, :end-line 1297, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmousedown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mousedown events.\n\n  `target.onmousedown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmousedown`"}, set-oncanplaythrough! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 644, :column 7, :end-line 644, :end-column 28, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, :name html.HTMLElement/set-oncanplaythrough!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 28, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 644, :end-line 644, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncanplaythrough property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing canplaythrough events.\n\n  `element.oncanplaythrough = handlerFunction;\n  var handlerFunction = element.oncanplaythrough;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncanplaythrough`"}, set-onerror! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 933, :column 7, :end-line 933, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, :name html.HTMLElement/set-onerror!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 933, :end-line 933, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, set-onpointerover! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1741, :column 7, :end-line 1741, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, :name html.HTMLElement/set-onpointerover!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1741, :end-line 1741, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerover events.\n\n  `targetElement.onpointerover = overHandler;\n\n  var overHandler = targetElement.onpointerover;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerover`"}, onmouseleave {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1339, :column 7, :end-line 1339, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, :name html.HTMLElement/onmouseleave, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1339, :end-line 1339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, set-oncontextmenu! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 747, :column 7, :end-line 747, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontextmenu property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes contextmenu events.\n\n  `target.oncontextmenu = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu`"}, :name html.HTMLElement/set-oncontextmenu!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 747, :end-line 747, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncontextmenu property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes contextmenu events.\n\n  `target.oncontextmenu = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncontextmenu`"}, set-onfocus! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 957, :column 7, :end-line 957, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, :name html.HTMLElement/set-onfocus!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 957, :end-line 957, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, inner-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 212, :column 7, :end-line 212, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The innerText property of the `html.HTMLElement` interface represents\n  \\\"rendered\\\" text content of a node and its descendants.\n\n  `var renderedText = HTMLElement.innerText;\n  HTMLElement.innerText = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText`"}, :name html.HTMLElement/inner-text, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 212, :end-line 212, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The innerText property of the `html.HTMLElement` interface represents\n  \\\"rendered\\\" text content of a node and its descendants.\n\n  `var renderedText = HTMLElement.innerText;\n  HTMLElement.innerText = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText`"}, ondurationchange {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 861, :column 7, :end-line 861, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, :name html.HTMLElement/ondurationchange, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 861, :end-line 861, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ondurationchange property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing durationchange events.\n\n  `element.ondurationchange = handlerFunction;\n  var handlerFunction = element.ondurationchange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ondurationchange`"}, set-onanimationend! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 481, :column 7, :end-line 481, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, :name html.HTMLElement/set-onanimationend!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 481, :end-line 481, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationend property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationend events.\n\n  `var animEndHandler = target.onanimationend;\n\n  target.onanimationend = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationend`"}, outer-text {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2079, :column 7, :end-line 2079, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  HTMLElement.outerText is a non-standard property. As a getter,\n  returns the same value as `web.Node.innerText`. As a setter,\n  removes the current node and replaces it with the given text.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText`"}, :name html.HTMLElement/outer-text, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2079, :end-line 2079, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  HTMLElement.outerText is a non-standard property. As a getter,\n  returns the same value as `web.Node.innerText`. As a setter,\n  removes the current node and replaces it with the given text.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/outerText`"}, set-onpause! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1504, :column 7, :end-line 1504, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, :name html.HTMLElement/set-onpause!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1504, :end-line 1504, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpause property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing pause events.\n\n  `element.onpause = handlerFunction;\n  var handlerFunction = element.onpause;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpause`"}, dir {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 138, :column 7, :end-line 138, :end-column 10, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.dir property gets or sets the text writing directionality\n  the content of the current element.\n\n  `var currentWritingDirection = elementNodeReference.dir;\n  elementNodeReference.dir = newWritingDirection;\n\n\n  currentWritingDirection is a string variable representing the text writing direction of the current element.\n  newWritingDirection is a string variable representing the text writing direction value.\n\n\n  Possible values for dir are ltr, for left-to-right, rtl, for right-to-left, and auto for specifying that the direction of the element must be determined based on the contents of the element.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir`"}, :name html.HTMLElement/dir, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 10, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 138, :end-line 138, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.dir property gets or sets the text writing directionality\n  the content of the current element.\n\n  `var currentWritingDirection = elementNodeReference.dir;\n  elementNodeReference.dir = newWritingDirection;\n\n\n  currentWritingDirection is a string variable representing the text writing direction of the current element.\n  newWritingDirection is a string variable representing the text writing direction value.\n\n\n  Possible values for dir are ltr, for left-to-right, rtl, for right-to-left, and auto for specifying that the direction of the element must be determined based on the contents of the element.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dir`"}, set-hidden! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 195, :column 7, :end-line 195, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLElement` property hidden is a `web.Boolean` which\n  true if the element is hidden; otherwise the value is false.\n  is quite different from using the CSS property `web.display`\n  control the visibility of an element.\n\n  `isHidden = HTMLElement.hidden;\n\n\n  HTMLElement.hidden = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden`"}, :name html.HTMLElement/set-hidden!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLElement` property hidden is a `web.Boolean` which\n  true if the element is hidden; otherwise the value is false.\n  is quite different from using the CSS property `web.display`\n  control the visibility of an element.\n\n  `isHidden = HTMLElement.hidden;\n\n\n  HTMLElement.hidden = true | false;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/hidden`"}, set-onlostpointercapture! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1273, :column 7, :end-line 1273, :end-column 32, :arglists (quote ([this val])), :doc "Property.\n\n  The onlostpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes lostpointercapture events.\n\n  `target.onlostpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture`"}, :name html.HTMLElement/set-onlostpointercapture!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 32, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1273, :end-line 1273, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onlostpointercapture property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes lostpointercapture events.\n\n  `target.onlostpointercapture = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onlostpointercapture`"}, set-oninvalid! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1034, :column 7, :end-line 1034, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The oninvalid property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes invalid events.\n\n  `target.oninvalid = functionRef;\n  var functionRef = target.oninvalid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid`"}, :name html.HTMLElement/set-oninvalid!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1034, :end-line 1034, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oninvalid property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes invalid events.\n\n  `target.oninvalid = functionRef;\n  var functionRef = target.oninvalid;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oninvalid`"}, onerror {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 921, :column 7, :end-line 921, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, :name html.HTMLElement/onerror, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 921, :end-line 921, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onerror property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes error events.\n\n  `For historical reasons, different arguments are passed to window.onerror and element.onerror handlers (as well as on error-type `web.window.addEventListener` handlers).`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onerror`"}, set-ontouchstart! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1987, :column 7, :end-line 1987, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, :name html.HTMLElement/set-ontouchstart!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1987, :end-line 1987, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, offset-parent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 352, :column 7, :end-line 352, :end-column 20, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetParent read-only property returns a reference\n  the object which is the closest (nearest in the containment hierarchy)\n  containing element. If the element is non-positioned, the nearest\n  th, table or the body is returned.\n\n  `parentObj = element.offsetParent;\n\n\n  parentObj is an object reference to the element in which the current element is offset.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent`"}, :name html.HTMLElement/offset-parent, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 352, :end-line 352, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.offsetParent read-only property returns a reference\n  the object which is the closest (nearest in the containment hierarchy)\n  containing element. If the element is non-positioned, the nearest\n  th, table or the body is returned.\n\n  `parentObj = element.offsetParent;\n\n\n  parentObj is an object reference to the element in which the current element is offset.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/offsetParent`"}, content-editable {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 58, :column 7, :end-line 58, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The contenteditable property of the `html.HTMLElement` interface\n  whether or not the element is editable.\n\n  `editable = element.contentEditable\n  element.contentEditable = 'true'`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable`"}, :name html.HTMLElement/content-editable, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The contenteditable property of the `html.HTMLElement` interface\n  whether or not the element is editable.\n\n  `editable = element.contentEditable\n  element.contentEditable = 'true'`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/contentEditable`"}, set-oncuechange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 798, :column 7, :end-line 798, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, :name html.HTMLElement/set-oncuechange!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 798, :end-line 798, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The oncuechange property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing cuechange events.\n\n  `element.oncuechange = handlerFunction;\n  var handlerFunction = element.oncuechange;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncuechange`"}, set-onpointerup! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1769, :column 7, :end-line 1769, :end-column 23, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerup events.\n\n  `targetElement.onpointerup = upHandler;\n\n  var upHandler = targetElement.onpointerup;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup`"}, :name html.HTMLElement/set-onpointerup!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1769, :end-line 1769, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onpointerup property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes pointerup events.\n\n  `targetElement.onpointerup = upHandler;\n\n  var upHandler = targetElement.onpointerup;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onpointerup`"}, ontransitioncancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1999, :column 7, :end-line 1999, :end-column 25, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, :name html.HTMLElement/ontransitioncancel, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1999, :end-line 1999, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontransitioncancel property of the `web.GlobalEventHandlers`\n  is an `web.EventHandler` that processes transitioncancel events.\n\n  `var transitionCancelHandler = target.ontransitioncancel;\n\n  target.ontransitioncancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontransitioncancel`"}, onwheel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2055, :column 7, :end-line 2055, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, :name html.HTMLElement/onwheel, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2055, :end-line 2055, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onwheel property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes wheel events.\n\n  `target.onwheel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onwheel`"}, set-onpaste! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1477, :column 7, :end-line 1477, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.onpaste property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes paste events.\n\n  `target.onpaste = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste`"}, :name html.HTMLElement/set-onpaste!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1477, :end-line 1477, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.onpaste property of the `html.HTMLElement` interface\n  an `web.EventHandler` that processes paste events.\n\n  `target.onpaste = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/onpaste`"}, set-onload! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1132, :column 7, :end-line 1132, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onload property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes load events on a `web.Window`,\n  `web.<img>` element, etc.\n\n  `target.onload = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload`"}, :name html.HTMLElement/set-onload!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1132, :end-line 1132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onload property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes load events on a `web.Window`,\n  `web.<img>` element, etc.\n\n  `target.onload = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onload`"}, set-ontouchcancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1963, :column 7, :end-line 1963, :end-column 25, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, :name html.HTMLElement/set-ontouchcancel!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 25, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1963, :end-line 1963, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The ontouchcancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchcancel events.\n\n  `var cancelHandler = someElement.ontouchcancel;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchcancel`"}, set-onplay! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1534, :column 7, :end-line 1534, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, :name html.HTMLElement/set-onplay!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1534, :end-line 1534, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onplay property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing play events.\n\n  `element.onplay = handlerFunction;\n  var handlerFunction = element.onplay;\n\n  handlerFunction should be either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onplay`"}, onloadeddata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1145, :column 7, :end-line 1145, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The onloadeddata property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing loadeddata events.\n\n  `element.onloadeddata = handlerFunction;\n  var handlerFunction = element.onloadeddata;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata`"}, :name html.HTMLElement/onloadeddata, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1145, :end-line 1145, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onloadeddata property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing loadeddata events.\n\n  `element.onloadeddata = handlerFunction;\n  var handlerFunction = element.onloadeddata;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onloadeddata`"}, onmouseover {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1417, :column 7, :end-line 1417, :end-column 18, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, :name html.HTMLElement/onmouseover, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 18, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1417, :end-line 1417, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseover property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseover events.\n\n  `element.onmouseover = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseover`"}, set-dataset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 120, :column 7, :end-line 120, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The dataset property on the `html.HTMLElement` interface provides\n  access to all the custom data attributes (data-*) set on the\n\n  `string = element.dataset.camelCasedName;\n  element.dataset.camelCasedName = string;\n\n  string = element.dataset[camelCasedName];\n  element.dataset[camelCasedName] = string;\n\n  Custom data attributes can also be set directly on HTML elements, but attribute names must use the data- syntax above.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset`"}, :name html.HTMLElement/set-dataset!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The dataset property on the `html.HTMLElement` interface provides\n  access to all the custom data attributes (data-*) set on the\n\n  `string = element.dataset.camelCasedName;\n  element.dataset.camelCasedName = string;\n\n  string = element.dataset[camelCasedName];\n  element.dataset[camelCasedName] = string;\n\n  Custom data attributes can also be set directly on HTML elements, but attribute names must use the data- syntax above.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset`"}, oncancel {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 573, :column 7, :end-line 573, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, :name html.HTMLElement/oncancel, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 573, :end-line 573, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The oncancel property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing cancel events sent to a\n  element.\n\n  `target.oncancel = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/oncancel`"}, onselect {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1855, :column 7, :end-line 1855, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, :name html.HTMLElement/onselect, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1855, :end-line 1855, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onselect property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes `web.select`.\n\n  `target.onselect = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onselect`"}, set-onauxclick! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 535, :column 7, :end-line 535, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onauxclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing auxclick events.\n\n  `target.onauxclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick`"}, :name html.HTMLElement/set-onauxclick!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 535, :end-line 535, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onauxclick property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing auxclick events.\n\n  `target.onauxclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onauxclick`"}, set-onmouseleave! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1354, :column 7, :end-line 1354, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, :name html.HTMLElement/set-onmouseleave!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1354, :end-line 1354, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseleave property of the `web.GlobalEventHandlers` mixin\n  the `web.EventHandler` for processing mouseleave events.\n\n  `element.onmouseleave = handlerFunction;\n  var handlerFunction = element.onmouseleave;\n\n  handlerFunction is either null or a JavaScript function specifying the handler for the event.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseleave`"}, set-onmouseout! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1405, :column 7, :end-line 1405, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, :name html.HTMLElement/set-onmouseout!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1405, :end-line 1405, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, set-onkeypress! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1083, :column 7, :end-line 1083, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, :name html.HTMLElement/set-onkeypress!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1083, :end-line 1083, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onkeypress property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keypress events.\n\n  `target.onkeypress = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeypress`"}, onfocus {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 945, :column 7, :end-line 945, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, :name html.HTMLElement/onfocus, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 945, :end-line 945, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onfocus property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` that processes focus events on the given element.\n\n  `target.onfocus = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onfocus`"}, set-onsubmit! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1939, :column 7, :end-line 1939, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, :name html.HTMLElement/set-onsubmit!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1939, :end-line 1939, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onsubmit property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes submit events.\n\n  `target.onsubmit = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onsubmit`"}, onkeydown {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1047, :column 7, :end-line 1047, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The onkeydown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keydown events.\n\n  `target.onkeydown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown`"}, :name html.HTMLElement/onkeydown, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1047, :end-line 1047, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onkeydown property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes keydown events.\n\n  `target.onkeydown = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onkeydown`"}, onmouseout {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1393, :column 7, :end-line 1393, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, :name html.HTMLElement/onmouseout, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1393, :end-line 1393, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onmouseout property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes mouseout events.\n\n  `element.onmouseout = function;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onmouseout`"}, set-title! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2167, :column 7, :end-line 2167, :end-column 17, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.title property represents the title of the element:\n  text usually displayed in a 'tooltip' popup when the mouse is\n  the node.\n\n  `var str = element.title;\n  element.title = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title`"}, :name html.HTMLElement/set-title!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 17, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2167, :end-line 2167, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLElement.title property represents the title of the element:\n  text usually displayed in a 'tooltip' popup when the mouse is\n  the node.\n\n  `var str = element.title;\n  element.title = str;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/title`"}, onclick {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 687, :column 7, :end-line 687, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, :name html.HTMLElement/onclick, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 687, :end-line 687, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The onclick property of the `web.GlobalEventHandlers` mixin is\n  `web.EventHandler` for processing click events on a given element.\n\n  `target.onclick = functionRef;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onclick`"}, set-onchange! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 673, :column 7, :end-line 673, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, :name html.HTMLElement/set-onchange!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 673, :end-line 673, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onchange property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` for processing change events.\n\n  `target.onchange = functionRef;\n\n  functionRef is a function name or a function expression. The function receives an `web.Event` object as its sole argument.`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onchange`"}, set-onanimationcancel! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 453, :column 7, :end-line 453, :end-column 29, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, :name html.HTMLElement/set-onanimationcancel!, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 29, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 453, :end-line 453, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The onanimationcancel property of the `web.GlobalEventHandlers`\n  is the `web.EventHandler` for processing animationcancel events.\n\n  `var animCancelHandler = target.onanimationcancel;\n\n  target.onanimationcancel = Function`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/onanimationcancel`"}, ontouchstart {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 1975, :column 7, :end-line 1975, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, :name html.HTMLElement/ontouchstart, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1975, :end-line 1975, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The ontouchstart property of the `web.GlobalEventHandlers` mixin\n  an `web.EventHandler` that processes touchstart events.\n\n  `var startHandler = someElement.ontouchstart;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers/ontouchstart`"}, access-key-label {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLElement.cljs", :line 2181, :column 7, :end-line 2181, :end-column 23, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.accessKeyLabel read-only property returns a `web.String`\n  represents the element's assigned access key (if any); otherwise\n  returns an empty string.\n\n  `label = element.accessKeyLabel`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel`"}, :name html.HTMLElement/access-key-label, :variadic false, :file "src/html/HTMLElement.cljs", :end-column 23, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 2181, :end-line 2181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLElement.accessKeyLabel read-only property returns a `web.String`\n  represents the element's assigned access key (if any); otherwise\n  returns an empty string.\n\n  `label = element.accessKeyLabel`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/accessKeyLabel`"}, ...}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The HTMLElement interface represents any HTML element. Some elements\n  implement this interface, while others implement it via an interface\n  inherits it."}