{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{name}, :name html.HTMLFormElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-elements! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 111, :column 7, :end-line 111, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLFormElement` property elements returns an `html.HTMLFormControlsCollection`\n  all the form controls contained in the `web.<form>` element.\n\n  `nodeList = HTMLFormElement.elements`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements`"}, :name html.HTMLFormElement/set-elements!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The `html.HTMLFormElement` property elements returns an `html.HTMLFormControlsCollection`\n  all the form controls contained in the `web.<form>` element.\n\n  `nodeList = HTMLFormElement.elements`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements`"}, target {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 233, :column 7, :end-line 233, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `html.HTMLFormElement` interface represents\n  target of the form's action (i.e., the frame in which to render\n  output).\n\n  `string = HTMLFormElement.target\n  HTMLFormElement.target = string`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target`"}, :name html.HTMLFormElement/target, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The target property of the `html.HTMLFormElement` interface represents\n  target of the form's action (i.e., the frame in which to render\n  output).\n\n  `string = HTMLFormElement.target\n  HTMLFormElement.target = string`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target`"}, set-method! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 194, :column 7, :end-line 194, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.method property represents the HTTP method\n  to submit the `web.<form>`.\n\n  `var string = form.method;\n  form.method = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method`"}, :name html.HTMLFormElement/set-method!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.method property represents the HTTP method\n  to submit the `web.<form>`.\n\n  `var string = form.method;\n  form.method = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method`"}, enctype {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 143, :column 7, :end-line 143, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.enctype property is the MIME type of content\n  is used to submit the form to the server. Possible values are:\n\n  `var string = form.enctype;\n  form.enctype = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype`"}, :name html.HTMLFormElement/enctype, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.enctype property is the MIME type of content\n  is used to submit the form to the server. Possible values are:\n\n  `var string = form.enctype;\n  form.enctype = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype`"}, report-validity {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 7, :column 7, :end-line 7, :end-column 22, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.reportValidity() method returns true if the\n  child controls satisfy their validation constraints. When false\n  returned, cancelable invalid events are fired for each invalid\n  and validation problems are reported to the user.\n\n  `HTMLFormElement.reportValidity()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity`"}, :name html.HTMLFormElement/report-validity, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 22, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.reportValidity() method returns true if the\n  child controls satisfy their validation constraints. When false\n  returned, cancelable invalid events are fired for each invalid\n  and validation problems are reported to the user.\n\n  `HTMLFormElement.reportValidity()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reportValidity`"}, set-target! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 247, :column 7, :end-line 247, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `html.HTMLFormElement` interface represents\n  target of the form's action (i.e., the frame in which to render\n  output).\n\n  `string = HTMLFormElement.target\n  HTMLFormElement.target = string`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target`"}, :name html.HTMLFormElement/set-target!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 247, :end-line 247, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The target property of the `html.HTMLFormElement` interface represents\n  target of the form's action (i.e., the frame in which to render\n  output).\n\n  `string = HTMLFormElement.target\n  HTMLFormElement.target = string`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/target`"}, encoding {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 123, :column 7, :end-line 123, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.encoding property is an alternative name\n  the `web.enctype` element on the DOM `html.HTMLFormElement` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding`"}, :name html.HTMLFormElement/encoding, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 123, :end-line 123, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.encoding property is an alternative name\n  the `web.enctype` element on the DOM `html.HTMLFormElement` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding`"}, set-accept-charset! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 59, :column 7, :end-line 59, :end-column 26, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.acceptCharset property represents a list\n  the supported character encodings for the given FORM element.\n  list can be comma- or space-separated.\n\n  `var string = form.acceptCharset;\n  form.acceptCharset = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset`"}, :name html.HTMLFormElement/set-accept-charset!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 26, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 59, :end-line 59, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.acceptCharset property represents a list\n  the supported character encodings for the given FORM element.\n  list can be comma- or space-separated.\n\n  `var string = form.acceptCharset;\n  form.acceptCharset = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 220, :column 7, :end-line 220, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.name property represents the name of the\n  `web.<form>` element as a string.\n\n  `var string = form.name;\n  form.name = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name`"}, :name html.HTMLFormElement/set-name!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 220, :end-line 220, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.name property represents the name of the\n  `web.<form>` element as a string.\n\n  `var string = form.name;\n  form.name = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name`"}, reset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 21, :column 7, :end-line 21, :end-column 12, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.reset() method restores a form element's\n  values. This method does the same thing as clicking the form's\n  button.\n\n  `HTMLFormElement.reset()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset`"}, :name html.HTMLFormElement/reset, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 12, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.reset() method restores a form element's\n  values. This method does the same thing as clicking the form's\n  button.\n\n  `HTMLFormElement.reset()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/reset`"}, method {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 181, :column 7, :end-line 181, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.method property represents the HTTP method\n  to submit the `web.<form>`.\n\n  `var string = form.method;\n  form.method = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method`"}, :name html.HTMLFormElement/method, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.method property represents the HTTP method\n  to submit the `web.<form>`.\n\n  `var string = form.method;\n  form.method = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/method`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 207, :column 7, :end-line 207, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.name property represents the name of the\n  `web.<form>` element as a string.\n\n  `var string = form.name;\n  form.name = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name`"}, :name html.HTMLFormElement/name, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.name property represents the name of the\n  `web.<form>` element as a string.\n\n  `var string = form.name;\n  form.name = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/name`"}, submit {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 34, :column 7, :end-line 34, :end-column 13, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.submit() method submits a given `web.<form>`.\n\n  `HTMLFormElement.submit()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit`"}, :name html.HTMLFormElement/submit, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Method.\n\n  The HTMLFormElement.submit() method submits a given `web.<form>`.\n\n  `HTMLFormElement.submit()`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit`"}, elements {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 99, :column 7, :end-line 99, :end-column 15, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLFormElement` property elements returns an `html.HTMLFormControlsCollection`\n  all the form controls contained in the `web.<form>` element.\n\n  `nodeList = HTMLFormElement.elements`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements`"}, :name html.HTMLFormElement/elements, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 15, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The `html.HTMLFormElement` property elements returns an `html.HTMLFormControlsCollection`\n  all the form controls contained in the `web.<form>` element.\n\n  `nodeList = HTMLFormElement.elements`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements`"}, set-enctype! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 156, :column 7, :end-line 156, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.enctype property is the MIME type of content\n  is used to submit the form to the server. Possible values are:\n\n  `var string = form.enctype;\n  form.enctype = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype`"}, :name html.HTMLFormElement/set-enctype!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 156, :end-line 156, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.enctype property is the MIME type of content\n  is used to submit the form to the server. Possible values are:\n\n  `var string = form.enctype;\n  form.enctype = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/enctype`"}, set-encoding! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 133, :column 7, :end-line 133, :end-column 20, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.encoding property is an alternative name\n  the `web.enctype` element on the DOM `html.HTMLFormElement` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding`"}, :name html.HTMLFormElement/set-encoding!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 20, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 133, :end-line 133, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.encoding property is an alternative name\n  the `web.enctype` element on the DOM `html.HTMLFormElement` object.\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/encoding`"}, accept-charset {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 45, :column 7, :end-line 45, :end-column 21, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.acceptCharset property represents a list\n  the supported character encodings for the given FORM element.\n  list can be comma- or space-separated.\n\n  `var string = form.acceptCharset;\n  form.acceptCharset = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset`"}, :name html.HTMLFormElement/accept-charset, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 21, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.acceptCharset property represents a list\n  the supported character encodings for the given FORM element.\n  list can be comma- or space-separated.\n\n  `var string = form.acceptCharset;\n  form.acceptCharset = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/acceptCharset`"}, set-action! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 86, :column 7, :end-line 86, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.action property represents the action of\n  `web.<form>` element.\n\n  `var string = form.action;\n  form.action = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action`"}, :name html.HTMLFormElement/set-action!, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The HTMLFormElement.action property represents the action of\n  `web.<form>` element.\n\n  `var string = form.action;\n  form.action = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action`"}, length {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 169, :column 7, :end-line 169, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.length read-only property returns the number\n  controls in the `web.<form>` element.\n\n  `numControls = form.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length`"}, :name html.HTMLFormElement/length, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 169, :end-line 169, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.length read-only property returns the number\n  controls in the `web.<form>` element.\n\n  `numControls = form.length;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/length`"}, action {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLFormElement.cljs", :line 73, :column 7, :end-line 73, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.action property represents the action of\n  `web.<form>` element.\n\n  `var string = form.action;\n  form.action = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action`"}, :name html.HTMLFormElement/action, :variadic false, :file "src/html/HTMLFormElement.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The HTMLFormElement.action property represents the action of\n  `web.<form>` element.\n\n  `var string = form.action;\n  form.action = string;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/action`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The `html.HTMLFormElement` interface represents a `web.<form>`\n  in the DOM; it allows access to and in some cases modification\n  aspects of the form, as well as access to its component elements."}