{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{name}, :name html.HTMLSlotElement, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {assigned-elements {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLSlotElement.cljs", :line 6, :column 7, :end-line 6, :end-column 24, :arglists (quote ([this options])), :doc "Method.\n\n  The assignedElements() property of the `html.HTMLSlotElement`\n  returns a sequence of the elements assigned to this slot (and\n  other nodes). If the flatten option is set to true, it also returns\n  assigned elements of any other slots that are descendants of\n  slot. If no assigned nodes are found, it returns the slot's fallback\n\n  `var assignedElements = HTMLSlotElement.assignedElements(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements`"}, :name html.HTMLSlotElement/assigned-elements, :variadic false, :file "src/html/HTMLSlotElement.cljs", :end-column 24, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The assignedElements() property of the `html.HTMLSlotElement`\n  returns a sequence of the elements assigned to this slot (and\n  other nodes). If the flatten option is set to true, it also returns\n  assigned elements of any other slots that are descendants of\n  slot. If no assigned nodes are found, it returns the slot's fallback\n\n  `var assignedElements = HTMLSlotElement.assignedElements(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements`"}, assigned-nodes {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLSlotElement.cljs", :line 21, :column 7, :end-line 21, :end-column 21, :arglists (quote ([this options])), :doc "Method.\n\n  The assignedNodes() property of the `html.HTMLSlotElement` interface\n  a sequence of the nodes assigned to this slot, and if the flatten\n  is set to true, the assigned nodes of any other slots that are\n  of this slot. If no assigned nodes are found, it returns the\n  fallback content.\n\n  `var assignedNodes = HTMLSlotElement.assignedNodes(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes`"}, :name html.HTMLSlotElement/assigned-nodes, :variadic false, :file "src/html/HTMLSlotElement.cljs", :end-column 21, :method-params ([this options]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this options])), :doc "Method.\n\n  The assignedNodes() property of the `html.HTMLSlotElement` interface\n  a sequence of the nodes assigned to this slot, and if the flatten\n  is set to true, the assigned nodes of any other slots that are\n  of this slot. If no assigned nodes are found, it returns the\n  fallback content.\n\n  `var assignedNodes = HTMLSlotElement.assignedNodes(options)`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedNodes`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLSlotElement.cljs", :line 36, :column 7, :end-line 36, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The name property of the `html.HTMLSlotElement` interface returns\n  sets the slot name. A slot is a placeholder inside a web component\n  users can fill with their own markup.\n\n  `var name = htmlSlotElement.name\n  htmlSlotElement.name = name`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name`"}, :name html.HTMLSlotElement/name, :variadic false, :file "src/html/HTMLSlotElement.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The name property of the `html.HTMLSlotElement` interface returns\n  sets the slot name. A slot is a placeholder inside a web component\n  users can fill with their own markup.\n\n  `var name = htmlSlotElement.name\n  htmlSlotElement.name = name`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/html/HTMLSlotElement.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The name property of the `html.HTMLSlotElement` interface returns\n  sets the slot name. A slot is a placeholder inside a web component\n  users can fill with their own markup.\n\n  `var name = htmlSlotElement.name\n  htmlSlotElement.name = name`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name`"}, :name html.HTMLSlotElement/set-name!, :variadic false, :file "src/html/HTMLSlotElement.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The name property of the `html.HTMLSlotElement` interface returns\n  sets the slot name. A slot is a placeholder inside a web component\n  users can fill with their own markup.\n\n  `var name = htmlSlotElement.name\n  htmlSlotElement.name = name`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/name`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "Fired on an HTMLSlotElement instance (<slot> element) when the\n  contained in that slot change."}