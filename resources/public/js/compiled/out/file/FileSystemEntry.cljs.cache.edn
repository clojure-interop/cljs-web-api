{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{remove name}, :name file.FileSystemEntry, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {set-filesystem! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 102, :column 7, :end-line 102, :end-column 22, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only filesystem property of the `file.FileSystemEntry`\n  contains a `file.FileSystem` object that represents the file\n  on which the entry resides.\n\n  `var filesystem = FileSystemEntry.filesystem;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/filesystem`"}, :name file.FileSystemEntry/set-filesystem!, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 22, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only filesystem property of the `file.FileSystemEntry`\n  contains a `file.FileSystem` object that represents the file\n  on which the entry resides.\n\n  `var filesystem = FileSystemEntry.filesystem;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/filesystem`"}, get-metadata {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 23, :column 7, :end-line 23, :end-column 19, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method getMetadata() obtains\n  `web.Metadata` object with information about the file system\n  such as its modification date and time and its size.\n\n  `FileSystemEntry.getMetadata(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getMetadata`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/get-metadata, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method getMetadata() obtains\n  `web.Metadata` object with information about the file system\n  such as its modification date and time and its size.\n\n  `FileSystemEntry.getMetadata(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getMetadata`"}, to-url {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 75, :column 7, :end-line 75, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method toURL() creates\n  returns a string containing a URL which can be used to identify\n  file system entry. This is done by exposing a new URL scheme—filesystem:—that\n  be used as the value of src and href attributes.\n\n  `FileSystemEntry.toURL([mimeType]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/toURL`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/to-url, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method toURL() creates\n  returns a string containing a URL which can be used to identify\n  file system entry. This is done by exposing a new URL scheme—filesystem:—that\n  be used as the value of src and href attributes.\n\n  `FileSystemEntry.toURL([mimeType]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/toURL`"}, remove {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 62, :column 7, :end-line 62, :end-column 13, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method remove() deletes\n  file or directory from the file system. Directories must be empty\n  they can be removed.\n\n  `FileSystemEntry.remove(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/remove`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/remove, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 62, :end-line 62, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method remove() deletes\n  file or directory from the file system. Directories must be empty\n  they can be removed.\n\n  `FileSystemEntry.remove(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/remove`"}, set-is-directory! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 154, :column 7, :end-line 154, :end-column 24, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only isDirectory property of the `file.FileSystemEntry`\n  is true if the entry represents a directory (meaning it's a `file.FileSystemDirectoryEntry`)\n  false if it's not.\n\n  `var isDirectory = FileSystemEntry.isDirectory;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isDirectory`"}, :name file.FileSystemEntry/set-is-directory!, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 24, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 154, :end-line 154, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only isDirectory property of the `file.FileSystemEntry`\n  is true if the entry represents a directory (meaning it's a `file.FileSystemDirectoryEntry`)\n  false if it's not.\n\n  `var isDirectory = FileSystemEntry.isDirectory;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isDirectory`"}, set-is-file! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 180, :column 7, :end-line 180, :end-column 19, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only isFile property of the `file.FileSystemEntry` interface\n  true if the entry represents a file (meaning it's a `file.FileSystemFileEntry`)\n  false if it's not.\n\n  `var isFile = FileSystemEntry.isFile;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isFile`"}, :name file.FileSystemEntry/set-is-file!, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 19, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only isFile property of the `file.FileSystemEntry` interface\n  true if the entry represents a file (meaning it's a `file.FileSystemFileEntry`)\n  false if it's not.\n\n  `var isFile = FileSystemEntry.isFile;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isFile`"}, set-name! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 207, :column 7, :end-line 207, :end-column 16, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only name property of the `file.FileSystemEntry` interface\n  a `web.USVString` specifying the entry's name; this is the entry\n  its parent directory (the last component of the path as indicated\n  the `web.fullPath` property).\n\n  `var name = FileSystemEntry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/name`"}, :name file.FileSystemEntry/set-name!, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 16, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only name property of the `file.FileSystemEntry` interface\n  a `web.USVString` specifying the entry's name; this is the entry\n  its parent directory (the last component of the path as indicated\n  the `web.fullPath` property).\n\n  `var name = FileSystemEntry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/name`"}, is-file {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 167, :column 7, :end-line 167, :end-column 14, :arglists (quote ([this])), :doc "Property.\n\n  The read-only isFile property of the `file.FileSystemEntry` interface\n  true if the entry represents a file (meaning it's a `file.FileSystemFileEntry`)\n  false if it's not.\n\n  `var isFile = FileSystemEntry.isFile;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isFile`"}, :name file.FileSystemEntry/is-file, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 167, :end-line 167, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only isFile property of the `file.FileSystemEntry` interface\n  true if the entry represents a file (meaning it's a `file.FileSystemFileEntry`)\n  false if it's not.\n\n  `var isFile = FileSystemEntry.isFile;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isFile`"}, filesystem {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 89, :column 7, :end-line 89, :end-column 17, :arglists (quote ([this])), :doc "Property.\n\n  The read-only filesystem property of the `file.FileSystemEntry`\n  contains a `file.FileSystem` object that represents the file\n  on which the entry resides.\n\n  `var filesystem = FileSystemEntry.filesystem;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/filesystem`"}, :name file.FileSystemEntry/filesystem, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 17, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only filesystem property of the `file.FileSystemEntry`\n  contains a `file.FileSystem` object that represents the file\n  on which the entry resides.\n\n  `var filesystem = FileSystemEntry.filesystem;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/filesystem`"}, is-directory {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 141, :column 7, :end-line 141, :end-column 19, :arglists (quote ([this])), :doc "Property.\n\n  The read-only isDirectory property of the `file.FileSystemEntry`\n  is true if the entry represents a directory (meaning it's a `file.FileSystemDirectoryEntry`)\n  false if it's not.\n\n  `var isDirectory = FileSystemEntry.isDirectory;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isDirectory`"}, :name file.FileSystemEntry/is-directory, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 19, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only isDirectory property of the `file.FileSystemEntry`\n  is true if the entry represents a directory (meaning it's a `file.FileSystemDirectoryEntry`)\n  false if it's not.\n\n  `var isDirectory = FileSystemEntry.isDirectory;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/isDirectory`"}, get-parent {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 36, :column 7, :end-line 36, :end-column 17, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method getParent() obtains\n  `file.FileSystemDirectoryEntry`.\n\n  `FileSystemEntry.getParent(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getParent`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/get-parent, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method getParent() obtains\n  `file.FileSystemDirectoryEntry`.\n\n  `FileSystemEntry.getParent(successCallback[, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/getParent`"}, move-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 48, :column 7, :end-line 48, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method moveTo() moves\n  file specified by the entry to a new location on the file system,\n  renames the file if the destination directory is the same as\n  source.\n\n  `FileSystemEntry.moveTo(newParent[, newName][, successCallback][, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/moveTo`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/move-to, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method moveTo() moves\n  file specified by the entry to a new location on the file system,\n  renames the file if the destination directory is the same as\n  source.\n\n  `FileSystemEntry.moveTo(newParent[, newName][, successCallback][, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/moveTo`"}, name {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 193, :column 7, :end-line 193, :end-column 11, :arglists (quote ([this])), :doc "Property.\n\n  The read-only name property of the `file.FileSystemEntry` interface\n  a `web.USVString` specifying the entry's name; this is the entry\n  its parent directory (the last component of the path as indicated\n  the `web.fullPath` property).\n\n  `var name = FileSystemEntry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/name`"}, :name file.FileSystemEntry/name, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only name property of the `file.FileSystemEntry` interface\n  a `web.USVString` specifying the entry's name; this is the entry\n  its parent directory (the last component of the path as indicated\n  the `web.fullPath` property).\n\n  `var name = FileSystemEntry.name;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/name`"}, set-full-path! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 128, :column 7, :end-line 128, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only fullPath property of the `file.FileSystemEntry`\n  returns a `web.USVString` specifying the full, absolute path\n  the file system's root to the file represented by the entry.\n\n  `var fullPath = FileSystemEntry.fullPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/fullPath`"}, :name file.FileSystemEntry/set-full-path!, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The read-only fullPath property of the `file.FileSystemEntry`\n  returns a `web.USVString` specifying the full, absolute path\n  the file system's root to the file represented by the entry.\n\n  `var fullPath = FileSystemEntry.fullPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/fullPath`"}, full-path {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 115, :column 7, :end-line 115, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The read-only fullPath property of the `file.FileSystemEntry`\n  returns a `web.USVString` specifying the full, absolute path\n  the file system's root to the file represented by the entry.\n\n  `var fullPath = FileSystemEntry.fullPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/fullPath`"}, :name file.FileSystemEntry/full-path, :variadic false, :file "src/file/FileSystemEntry.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The read-only fullPath property of the `file.FileSystemEntry`\n  returns a `web.USVString` specifying the full, absolute path\n  the file system's root to the file represented by the entry.\n\n  `var fullPath = FileSystemEntry.fullPath;`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/fullPath`"}, copy-to {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemEntry.cljs", :line 11, :column 7, :end-line 11, :end-column 14, :arglists (quote ([this & args])), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method copyTo() copies\n  file specified by the entry to a new location on the file system.\n\n  `FileSystemEntry.copyTo(newParent[, newName][, successCallback][, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/copyTo`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}}, :name file.FileSystemEntry/copy-to, :variadic true, :file "src/file/FileSystemEntry.cljs", :end-column 14, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(this args)], :arglists ([this & args]), :arglists-meta (nil)}, :method-params [(this args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists ([this & args]), :doc "Method.\n\n  The `file.FileSystemEntry` interface's method copyTo() copies\n  file specified by the entry to a new location on the file system.\n\n  `FileSystemEntry.copyTo(newParent[, newName][, successCallback][, errorCallback]);`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemEntry/copyTo`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The FileSystemEntry interface of the File and Directory Entries\n  represents a single in a file system. The entry can be a file\n  a directory (directories are represented by the `web.DirectoryEntry`\n  It includes methods for working with files—including copying,\n  removing, and reading files—as well as information about a file\n  points to—including the file name and its path from the root\n  the entry."}