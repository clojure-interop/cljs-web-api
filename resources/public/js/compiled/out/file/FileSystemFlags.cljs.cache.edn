{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{create}, :name file.FileSystemFlags, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {create {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemFlags.cljs", :line 9, :column 7, :end-line 9, :end-column 13, :arglists (quote ([this])), :doc "Property.\n\n  The create property on the `file.FileSystemFlags` dictionary\n  used to indicate whether or not the file should be created if\n  missing. FileSystemFlags is only used when calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.create = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/create`"}, :name file.FileSystemFlags/create, :variadic false, :file "src/file/FileSystemFlags.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The create property on the `file.FileSystemFlags` dictionary\n  used to indicate whether or not the file should be created if\n  missing. FileSystemFlags is only used when calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.create = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/create`"}, set-create! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemFlags.cljs", :line 23, :column 7, :end-line 23, :end-column 18, :arglists (quote ([this val])), :doc "Property.\n\n  The create property on the `file.FileSystemFlags` dictionary\n  used to indicate whether or not the file should be created if\n  missing. FileSystemFlags is only used when calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.create = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/create`"}, :name file.FileSystemFlags/set-create!, :variadic false, :file "src/file/FileSystemFlags.cljs", :end-column 18, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The create property on the `file.FileSystemFlags` dictionary\n  used to indicate whether or not the file should be created if\n  missing. FileSystemFlags is only used when calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.create = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/create`"}, exclusive {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemFlags.cljs", :line 37, :column 7, :end-line 37, :end-column 16, :arglists (quote ([this])), :doc "Property.\n\n  The exclusive property on the `file.FileSystemFlags` dictionary\n  used in tandem with the create property to determine whether\n  not it's acceptable to require that the file not already exist\n  the reference to it is created by calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.exclusive = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/exclusive`"}, :name file.FileSystemFlags/exclusive, :variadic false, :file "src/file/FileSystemFlags.cljs", :end-column 16, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "Property.\n\n  The exclusive property on the `file.FileSystemFlags` dictionary\n  used in tandem with the create property to determine whether\n  not it's acceptable to require that the file not already exist\n  the reference to it is created by calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.exclusive = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/exclusive`"}, set-exclusive! {:protocol-inline nil, :meta {:file "/Users/eugenepotapenko/Projects/clojure-interop/cljs-web-api/src/file/FileSystemFlags.cljs", :line 52, :column 7, :end-line 52, :end-column 21, :arglists (quote ([this val])), :doc "Property.\n\n  The exclusive property on the `file.FileSystemFlags` dictionary\n  used in tandem with the create property to determine whether\n  not it's acceptable to require that the file not already exist\n  the reference to it is created by calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.exclusive = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/exclusive`"}, :name file.FileSystemFlags/set-exclusive!, :variadic false, :file "src/file/FileSystemFlags.cljs", :end-column 21, :method-params ([this val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this val])), :doc "Property.\n\n  The exclusive property on the `file.FileSystemFlags` dictionary\n  used in tandem with the create property to determine whether\n  not it's acceptable to require that the file not already exist\n  the reference to it is created by calling `file.FileSystemDirectoryEntry.getFile()`\n  `file.FileSystemDirectoryEntry.getDirectory()`.\n\n  `fileSystemFlags.exclusive = booleanValue`\n\n  See also: `https://developer.mozilla.org/en-US/docs/Web/API/FileSystemFlags/exclusive`"}}, :cljs.spec/registry-ref [], :require-macros nil, :doc "The FileSystemFlags dictionary defines a set of values which\n  used when specifying option flags when calling certain methods\n  the File and Directory Entries API. Methods which accept an options\n  of this type may specify zero or more of these flags as fields\n  an object, like this:"}